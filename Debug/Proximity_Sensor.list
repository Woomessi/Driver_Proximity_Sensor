
Proximity_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005154  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005260  08005260  00015260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053b8  080053b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080053b8  080053b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053b8  080053b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db8  20000070  08005430  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e28  08005430  00020e28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e01  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dad  00000000  00000000  00029e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002c6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019448  00000000  00000000  0002d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaee  00000000  00000000  00046508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089418  00000000  00000000  00050ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da40e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a8  00000000  00000000  000da460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005248 	.word	0x08005248

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005248 	.word	0x08005248

0800014c <I2C_Delay>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
static void I2C_Delay(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
		ѭ������Ϊ7ʱ��SCLƵ�� = 347KHz�� SCL�ߵ�ƽʱ��1.5us��SCL�͵�ƽʱ��2.87us 
	 	ѭ������Ϊ5ʱ��SCLƵ�� = 421KHz�� SCL�ߵ�ƽʱ��1.25us��SCL�͵�ƽʱ��2.375us 
        
    IAR���̱���Ч�ʸߣ���������Ϊ7
	*/
	for (i = 0; i < 29; i++);
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e002      	b.n	800015e <I2C_Delay+0x12>
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	3301      	adds	r3, #1
 800015c:	71fb      	strb	r3, [r7, #7]
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	2b1c      	cmp	r3, #28
 8000162:	d9f9      	bls.n	8000158 <I2C_Delay+0xc>
}
 8000164:	bf00      	nop
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr

08000170 <I2C_Start>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Start(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C���������ź� */
	I2C_SDA_HIGH();
 8000174:	2201      	movs	r2, #1
 8000176:	2140      	movs	r1, #64	; 0x40
 8000178:	480c      	ldr	r0, [pc, #48]	; (80001ac <I2C_Start+0x3c>)
 800017a:	f003 fa12 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 800017e:	2201      	movs	r2, #1
 8000180:	2180      	movs	r1, #128	; 0x80
 8000182:	480a      	ldr	r0, [pc, #40]	; (80001ac <I2C_Start+0x3c>)
 8000184:	f003 fa0d 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000188:	f7ff ffe0 	bl	800014c <I2C_Delay>
	I2C_SDA_LOW();
 800018c:	2200      	movs	r2, #0
 800018e:	2140      	movs	r1, #64	; 0x40
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <I2C_Start+0x3c>)
 8000192:	f003 fa06 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000196:	f7ff ffd9 	bl	800014c <I2C_Delay>
	I2C_SCL_LOW();
 800019a:	2200      	movs	r2, #0
 800019c:	2180      	movs	r1, #128	; 0x80
 800019e:	4803      	ldr	r0, [pc, #12]	; (80001ac <I2C_Start+0x3c>)
 80001a0:	f003 f9ff 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay();
 80001a4:	f7ff ffd2 	bl	800014c <I2C_Delay>
}
 80001a8:	bf00      	nop
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <I2C_Stop>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Stop(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C����ֹͣ�ź� */
	I2C_SDA_LOW();
 80001b4:	2200      	movs	r2, #0
 80001b6:	2140      	movs	r1, #64	; 0x40
 80001b8:	4808      	ldr	r0, [pc, #32]	; (80001dc <I2C_Stop+0x2c>)
 80001ba:	f003 f9f2 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 80001be:	2201      	movs	r2, #1
 80001c0:	2180      	movs	r1, #128	; 0x80
 80001c2:	4806      	ldr	r0, [pc, #24]	; (80001dc <I2C_Stop+0x2c>)
 80001c4:	f003 f9ed 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay();
 80001c8:	f7ff ffc0 	bl	800014c <I2C_Delay>
	I2C_SDA_HIGH();
 80001cc:	2201      	movs	r2, #1
 80001ce:	2140      	movs	r1, #64	; 0x40
 80001d0:	4802      	ldr	r0, [pc, #8]	; (80001dc <I2C_Stop+0x2c>)
 80001d2:	f003 f9e6 	bl	80035a2 <HAL_GPIO_WritePin>
}
 80001d6:	bf00      	nop
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	40010c00 	.word	0x40010c00

080001e0 <I2C_SendByte>:
  * �������: Byte �� �ȴ����͵��ֽ�
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_SendByte(uint8_t Byte)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	/* �ȷ����ֽڵĸ�λbit7 */
	for (i = 0; i < 8; i++)
 80001ea:	2300      	movs	r3, #0
 80001ec:	73fb      	strb	r3, [r7, #15]
 80001ee:	e02c      	b.n	800024a <I2C_SendByte+0x6a>
	{		
		if (Byte & 0x80)//提取当前字节最高有效位
 80001f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	da05      	bge.n	8000204 <I2C_SendByte+0x24>
		{
			I2C_SDA_HIGH();
 80001f8:	2201      	movs	r2, #1
 80001fa:	2140      	movs	r1, #64	; 0x40
 80001fc:	4817      	ldr	r0, [pc, #92]	; (800025c <I2C_SendByte+0x7c>)
 80001fe:	f003 f9d0 	bl	80035a2 <HAL_GPIO_WritePin>
 8000202:	e004      	b.n	800020e <I2C_SendByte+0x2e>
		}
		else
		{
			I2C_SDA_LOW();
 8000204:	2200      	movs	r2, #0
 8000206:	2140      	movs	r1, #64	; 0x40
 8000208:	4814      	ldr	r0, [pc, #80]	; (800025c <I2C_SendByte+0x7c>)
 800020a:	f003 f9ca 	bl	80035a2 <HAL_GPIO_WritePin>
		}
		I2C_Delay();
 800020e:	f7ff ff9d 	bl	800014c <I2C_Delay>
		I2C_SCL_HIGH();
 8000212:	2201      	movs	r2, #1
 8000214:	2180      	movs	r1, #128	; 0x80
 8000216:	4811      	ldr	r0, [pc, #68]	; (800025c <I2C_SendByte+0x7c>)
 8000218:	f003 f9c3 	bl	80035a2 <HAL_GPIO_WritePin>
		I2C_Delay();	
 800021c:	f7ff ff96 	bl	800014c <I2C_Delay>
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 8000220:	2200      	movs	r2, #0
 8000222:	2180      	movs	r1, #128	; 0x80
 8000224:	480d      	ldr	r0, [pc, #52]	; (800025c <I2C_SendByte+0x7c>)
 8000226:	f003 f9bc 	bl	80035a2 <HAL_GPIO_WritePin>
		if (i == 7)
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	2b07      	cmp	r3, #7
 800022e:	d104      	bne.n	800023a <I2C_SendByte+0x5a>
		{
			I2C_SDA_HIGH(); //
 8000230:	2201      	movs	r2, #1
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	4809      	ldr	r0, [pc, #36]	; (800025c <I2C_SendByte+0x7c>)
 8000236:	f003 f9b4 	bl	80035a2 <HAL_GPIO_WritePin>
		}
		Byte <<= 1;//左移一位，以读取下一位
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	71fb      	strb	r3, [r7, #7]
		I2C_Delay();
 8000240:	f7ff ff84 	bl	800014c <I2C_Delay>
	for (i = 0; i < 8; i++)
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	3301      	adds	r3, #1
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	2b07      	cmp	r3, #7
 800024e:	d9cf      	bls.n	80001f0 <I2C_SendByte+0x10>
	}
}
 8000250:	bf00      	nop
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40010c00 	.word	0x40010c00

08000260 <I2C_ReadByte>:
  * �������: ��
  * �� �� ֵ: ����������
  * ˵    ������
  */
uint8_t I2C_ReadByte(uint8_t ack)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t value;//读取值

	value = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < 8; i++)
 800026e:	2300      	movs	r3, #0
 8000270:	73fb      	strb	r3, [r7, #15]
 8000272:	e01d      	b.n	80002b0 <I2C_ReadByte+0x50>
	{
		value <<= 1;
 8000274:	7bbb      	ldrb	r3, [r7, #14]
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	73bb      	strb	r3, [r7, #14]
		I2C_SCL_HIGH();
 800027a:	2201      	movs	r2, #1
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	4814      	ldr	r0, [pc, #80]	; (80002d0 <I2C_ReadByte+0x70>)
 8000280:	f003 f98f 	bl	80035a2 <HAL_GPIO_WritePin>
		I2C_Delay();
 8000284:	f7ff ff62 	bl	800014c <I2C_Delay>
		if (I2C_SDA_READ())
 8000288:	2140      	movs	r1, #64	; 0x40
 800028a:	4811      	ldr	r0, [pc, #68]	; (80002d0 <I2C_ReadByte+0x70>)
 800028c:	f003 f972 	bl	8003574 <HAL_GPIO_ReadPin>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d002      	beq.n	800029c <I2C_ReadByte+0x3c>
		{
			value++;
 8000296:	7bbb      	ldrb	r3, [r7, #14]
 8000298:	3301      	adds	r3, #1
 800029a:	73bb      	strb	r3, [r7, #14]
		}
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 800029c:	2200      	movs	r2, #0
 800029e:	2180      	movs	r1, #128	; 0x80
 80002a0:	480b      	ldr	r0, [pc, #44]	; (80002d0 <I2C_ReadByte+0x70>)
 80002a2:	f003 f97e 	bl	80035a2 <HAL_GPIO_WritePin>
		I2C_Delay();
 80002a6:	f7ff ff51 	bl	800014c <I2C_Delay>
	for (i = 0; i < 8; i++)
 80002aa:	7bfb      	ldrb	r3, [r7, #15]
 80002ac:	3301      	adds	r3, #1
 80002ae:	73fb      	strb	r3, [r7, #15]
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
 80002b2:	2b07      	cmp	r3, #7
 80002b4:	d9de      	bls.n	8000274 <I2C_ReadByte+0x14>
	}
  if(ack==0)
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d102      	bne.n	80002c2 <I2C_ReadByte+0x62>
		I2C_NAck();
 80002bc:	f000 f856 	bl	800036c <I2C_NAck>
 80002c0:	e001      	b.n	80002c6 <I2C_ReadByte+0x66>
	else
		I2C_Ack();
 80002c2:	f000 f833 	bl	800032c <I2C_Ack>
	return value;
 80002c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40010c00 	.word	0x40010c00

080002d4 <I2C_WaitAck>:
  * �������: ��
  * �� �� ֵ: ����0��ʾ��ȷӦ��1��ʾ��������Ӧ
  * ˵    ������
  */
uint8_t I2C_WaitAck(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 80002da:	2201      	movs	r2, #1
 80002dc:	2140      	movs	r1, #64	; 0x40
 80002de:	4812      	ldr	r0, [pc, #72]	; (8000328 <I2C_WaitAck+0x54>)
 80002e0:	f003 f95f 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay();
 80002e4:	f7ff ff32 	bl	800014c <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����SCL = 1, ��ʱ�����᷵��ACKӦ�� */
 80002e8:	2201      	movs	r2, #1
 80002ea:	2180      	movs	r1, #128	; 0x80
 80002ec:	480e      	ldr	r0, [pc, #56]	; (8000328 <I2C_WaitAck+0x54>)
 80002ee:	f003 f958 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay();
 80002f2:	f7ff ff2b 	bl	800014c <I2C_Delay>
	if (I2C_SDA_READ())	/* CPU��ȡSDA����״̬ */
 80002f6:	2140      	movs	r1, #64	; 0x40
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <I2C_WaitAck+0x54>)
 80002fa:	f003 f93b 	bl	8003574 <HAL_GPIO_ReadPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d002      	beq.n	800030a <I2C_WaitAck+0x36>
	{
		re = 1;
 8000304:	2301      	movs	r3, #1
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	e001      	b.n	800030e <I2C_WaitAck+0x3a>
	}
	else
	{
		re = 0;
 800030a:	2300      	movs	r3, #0
 800030c:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_LOW();
 800030e:	2200      	movs	r2, #0
 8000310:	2180      	movs	r1, #128	; 0x80
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <I2C_WaitAck+0x54>)
 8000314:	f003 f945 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000318:	f7ff ff18 	bl	800014c <I2C_Delay>
	return re;
 800031c:	79fb      	ldrb	r3, [r7, #7]
}
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010c00 	.word	0x40010c00

0800032c <I2C_Ack>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Ack(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	I2C_SDA_LOW();	/* CPU����SDA = 0 */
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <I2C_Ack+0x3c>)
 8000336:	f003 f934 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay();
 800033a:	f7ff ff07 	bl	800014c <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����1��ʱ�� */
 800033e:	2201      	movs	r2, #1
 8000340:	2180      	movs	r1, #128	; 0x80
 8000342:	4809      	ldr	r0, [pc, #36]	; (8000368 <I2C_Ack+0x3c>)
 8000344:	f003 f92d 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000348:	f7ff ff00 	bl	800014c <I2C_Delay>
	I2C_SCL_LOW();
 800034c:	2200      	movs	r2, #0
 800034e:	2180      	movs	r1, #128	; 0x80
 8000350:	4805      	ldr	r0, [pc, #20]	; (8000368 <I2C_Ack+0x3c>)
 8000352:	f003 f926 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000356:	f7ff fef9 	bl	800014c <I2C_Delay>
	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 800035a:	2201      	movs	r2, #1
 800035c:	2140      	movs	r1, #64	; 0x40
 800035e:	4802      	ldr	r0, [pc, #8]	; (8000368 <I2C_Ack+0x3c>)
 8000360:	f003 f91f 	bl	80035a2 <HAL_GPIO_WritePin>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40010c00 	.word	0x40010c00

0800036c <I2C_NAck>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_NAck(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	I2C_SDA_HIGH();	/* CPU����SDA = 1 */
 8000370:	2201      	movs	r2, #1
 8000372:	2140      	movs	r1, #64	; 0x40
 8000374:	480a      	ldr	r0, [pc, #40]	; (80003a0 <I2C_NAck+0x34>)
 8000376:	f003 f914 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay();
 800037a:	f7ff fee7 	bl	800014c <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����1��ʱ�� */
 800037e:	2201      	movs	r2, #1
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	4807      	ldr	r0, [pc, #28]	; (80003a0 <I2C_NAck+0x34>)
 8000384:	f003 f90d 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000388:	f7ff fee0 	bl	800014c <I2C_Delay>
	I2C_SCL_LOW();
 800038c:	2200      	movs	r2, #0
 800038e:	2180      	movs	r1, #128	; 0x80
 8000390:	4803      	ldr	r0, [pc, #12]	; (80003a0 <I2C_NAck+0x34>)
 8000392:	f003 f906 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay();	
 8000396:	f7ff fed9 	bl	800014c <I2C_Delay>
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40010c00 	.word	0x40010c00

080003a4 <I2C_Delay2>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
static void I2C_Delay2(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
		ѭ������Ϊ7ʱ��SCLƵ�� = 347KHz�� SCL�ߵ�ƽʱ��1.5us��SCL�͵�ƽʱ��2.87us 
	 	ѭ������Ϊ5ʱ��SCLƵ�� = 421KHz�� SCL�ߵ�ƽʱ��1.25us��SCL�͵�ƽʱ��2.375us 
        
    IAR���̱���Ч�ʸߣ���������Ϊ7
	*/
	for (i = 0; i < 29; i++);
 80003aa:	2300      	movs	r3, #0
 80003ac:	71fb      	strb	r3, [r7, #7]
 80003ae:	e002      	b.n	80003b6 <I2C_Delay2+0x12>
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	3301      	adds	r3, #1
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2b1c      	cmp	r3, #28
 80003ba:	d9f9      	bls.n	80003b0 <I2C_Delay2+0xc>
}
 80003bc:	bf00      	nop
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <I2C_Start2>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Start2(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C���������ź� */
	I2C_SDA_HIGH();
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d2:	480e      	ldr	r0, [pc, #56]	; (800040c <I2C_Start2+0x44>)
 80003d4:	f003 f8e5 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003de:	480b      	ldr	r0, [pc, #44]	; (800040c <I2C_Start2+0x44>)
 80003e0:	f003 f8df 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay2();
 80003e4:	f7ff ffde 	bl	80003a4 <I2C_Delay2>
	I2C_SDA_LOW();
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ee:	4807      	ldr	r0, [pc, #28]	; (800040c <I2C_Start2+0x44>)
 80003f0:	f003 f8d7 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay2();
 80003f4:	f7ff ffd6 	bl	80003a4 <I2C_Delay2>
	I2C_SCL_LOW();
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fe:	4803      	ldr	r0, [pc, #12]	; (800040c <I2C_Start2+0x44>)
 8000400:	f003 f8cf 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000404:	f7ff ffce 	bl	80003a4 <I2C_Delay2>
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40010c00 	.word	0x40010c00

08000410 <I2C_Stop2>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Stop2(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C����ֹͣ�ź� */
	I2C_SDA_LOW();
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041a:	4809      	ldr	r0, [pc, #36]	; (8000440 <I2C_Stop2+0x30>)
 800041c:	f003 f8c1 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 8000420:	2201      	movs	r2, #1
 8000422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <I2C_Stop2+0x30>)
 8000428:	f003 f8bb 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay2();
 800042c:	f7ff ffba 	bl	80003a4 <I2C_Delay2>
	I2C_SDA_HIGH();
 8000430:	2201      	movs	r2, #1
 8000432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000436:	4802      	ldr	r0, [pc, #8]	; (8000440 <I2C_Stop2+0x30>)
 8000438:	f003 f8b3 	bl	80035a2 <HAL_GPIO_WritePin>
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40010c00 	.word	0x40010c00

08000444 <I2C_SendByte2>:
  * �������: Byte �� �ȴ����͵��ֽ�
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_SendByte2(uint8_t Byte)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	/* �ȷ����ֽڵĸ�λbit7 */
	for (i = 0; i < 8; i++)
 800044e:	2300      	movs	r3, #0
 8000450:	73fb      	strb	r3, [r7, #15]
 8000452:	e031      	b.n	80004b8 <I2C_SendByte2+0x74>
	{		
		if (Byte & 0x80)//提取当前字节最高有效位
 8000454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000458:	2b00      	cmp	r3, #0
 800045a:	da06      	bge.n	800046a <I2C_SendByte2+0x26>
		{
			I2C_SDA_HIGH();
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000462:	4819      	ldr	r0, [pc, #100]	; (80004c8 <I2C_SendByte2+0x84>)
 8000464:	f003 f89d 	bl	80035a2 <HAL_GPIO_WritePin>
 8000468:	e005      	b.n	8000476 <I2C_SendByte2+0x32>
		}
		else
		{
			I2C_SDA_LOW();
 800046a:	2200      	movs	r2, #0
 800046c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000470:	4815      	ldr	r0, [pc, #84]	; (80004c8 <I2C_SendByte2+0x84>)
 8000472:	f003 f896 	bl	80035a2 <HAL_GPIO_WritePin>
		}
		I2C_Delay2();
 8000476:	f7ff ff95 	bl	80003a4 <I2C_Delay2>
		I2C_SCL_HIGH();
 800047a:	2201      	movs	r2, #1
 800047c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000480:	4811      	ldr	r0, [pc, #68]	; (80004c8 <I2C_SendByte2+0x84>)
 8000482:	f003 f88e 	bl	80035a2 <HAL_GPIO_WritePin>
		I2C_Delay2();
 8000486:	f7ff ff8d 	bl	80003a4 <I2C_Delay2>
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000490:	480d      	ldr	r0, [pc, #52]	; (80004c8 <I2C_SendByte2+0x84>)
 8000492:	f003 f886 	bl	80035a2 <HAL_GPIO_WritePin>
		if (i == 7)
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	2b07      	cmp	r3, #7
 800049a:	d105      	bne.n	80004a8 <I2C_SendByte2+0x64>
		{
			I2C_SDA_HIGH(); //
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a2:	4809      	ldr	r0, [pc, #36]	; (80004c8 <I2C_SendByte2+0x84>)
 80004a4:	f003 f87d 	bl	80035a2 <HAL_GPIO_WritePin>
		}
		Byte <<= 1;//左移一位，以读取下一位
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	71fb      	strb	r3, [r7, #7]
		I2C_Delay2();
 80004ae:	f7ff ff79 	bl	80003a4 <I2C_Delay2>
	for (i = 0; i < 8; i++)
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	3301      	adds	r3, #1
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
 80004ba:	2b07      	cmp	r3, #7
 80004bc:	d9ca      	bls.n	8000454 <I2C_SendByte2+0x10>
	}
}
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40010c00 	.word	0x40010c00

080004cc <I2C_WaitAck2>:
  * �������: ��
  * �� �� ֵ: ����0��ʾ��ȷӦ��1��ʾ��������Ӧ
  * ˵    ������
  */
uint8_t I2C_WaitAck2(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d8:	4813      	ldr	r0, [pc, #76]	; (8000528 <I2C_WaitAck2+0x5c>)
 80004da:	f003 f862 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay2();
 80004de:	f7ff ff61 	bl	80003a4 <I2C_Delay2>
	I2C_SCL_HIGH();	/* CPU����SCL = 1, ��ʱ�����᷵��ACKӦ�� */
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e8:	480f      	ldr	r0, [pc, #60]	; (8000528 <I2C_WaitAck2+0x5c>)
 80004ea:	f003 f85a 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay2();
 80004ee:	f7ff ff59 	bl	80003a4 <I2C_Delay2>
	if (I2C_SDA_READ())	/* CPU��ȡSDA����״̬ */
 80004f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f6:	480c      	ldr	r0, [pc, #48]	; (8000528 <I2C_WaitAck2+0x5c>)
 80004f8:	f003 f83c 	bl	8003574 <HAL_GPIO_ReadPin>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <I2C_WaitAck2+0x3c>
	{
		re = 1;
 8000502:	2301      	movs	r3, #1
 8000504:	71fb      	strb	r3, [r7, #7]
 8000506:	e001      	b.n	800050c <I2C_WaitAck2+0x40>
	}
	else
	{
		re = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_LOW();
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <I2C_WaitAck2+0x5c>)
 8000514:	f003 f845 	bl	80035a2 <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000518:	f7ff ff44 	bl	80003a4 <I2C_Delay2>
	return re;
 800051c:	79fb      	ldrb	r3, [r7, #7]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40010c00 	.word	0x40010c00

0800052c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	db0a      	blt.n	8000556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	b2da      	uxtb	r2, r3
 8000544:	490c      	ldr	r1, [pc, #48]	; (8000578 <__NVIC_SetPriority+0x4c>)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	0112      	lsls	r2, r2, #4
 800054c:	b2d2      	uxtb	r2, r2
 800054e:	440b      	add	r3, r1
 8000550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000554:	e00a      	b.n	800056c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4908      	ldr	r1, [pc, #32]	; (800057c <__NVIC_SetPriority+0x50>)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f003 030f 	and.w	r3, r3, #15
 8000562:	3b04      	subs	r3, #4
 8000564:	0112      	lsls	r2, r2, #4
 8000566:	b2d2      	uxtb	r2, r2
 8000568:	440b      	add	r3, r1
 800056a:	761a      	strb	r2, [r3, #24]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	e000e100 	.word	0xe000e100
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3b01      	subs	r3, #1
 800058c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000590:	d301      	bcc.n	8000596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000592:	2301      	movs	r3, #1
 8000594:	e00f      	b.n	80005b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <SysTick_Config+0x40>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3b01      	subs	r3, #1
 800059c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800059e:	210f      	movs	r1, #15
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f7ff ffc2 	bl	800052c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <SysTick_Config+0x40>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ae:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <SysTick_Config+0x40>)
 80005b0:	2207      	movs	r2, #7
 80005b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	e000e010 	.word	0xe000e010

080005c4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005cc:	1d39      	adds	r1, r7, #4
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	2201      	movs	r2, #1
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <__io_putchar+0x20>)
 80005d6:	f003 fc64 	bl	8003ea2 <HAL_UART_Transmit>
  return ch;
 80005da:	687b      	ldr	r3, [r7, #4]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000008c 	.word	0x2000008c

080005e8 <__io_getchar>:
#else
#define PUTCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

GETCHAR_PROTOTYPE
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  uint8_t ch;
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005ee:	1df9      	adds	r1, r7, #7
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	2201      	movs	r2, #1
 80005f6:	4804      	ldr	r0, [pc, #16]	; (8000608 <__io_getchar+0x20>)
 80005f8:	f003 fce5 	bl	8003fc6 <HAL_UART_Receive>
  return ch;
 80005fc:	79fb      	ldrb	r3, [r7, #7]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000008c 	.word	0x2000008c

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f002 fcc1 	bl	8002f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f92d 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f997 	bl	800094c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800061e:	f000 f96b 	bl	80008f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SysTick_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000622:	f003 fba1 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8000626:	4603      	mov	r3, r0
 8000628:	4a3c      	ldr	r2, [pc, #240]	; (800071c <main+0x110>)
 800062a:	fba2 2303 	umull	r2, r3, r2, r3
 800062e:	099b      	lsrs	r3, r3, #6
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ffa5 	bl	8000580 <SysTick_Config>

//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13, 0);//复位所有的传感器
  I2C2_WrByte(EXPANDER_ADDRESS, TCA9535_CONFIG_PORT0_REG, 0x00);//将PORT0设置为输出模式
 8000636:	2200      	movs	r2, #0
 8000638:	2106      	movs	r1, #6
 800063a:	2040      	movs	r0, #64	; 0x40
 800063c:	f000 fb48 	bl	8000cd0 <I2C2_WrByte>
  I2C2_WrByte(EXPANDER_ADDRESS, TCA9535_CONFIG_PORT1_REG, 0x00);//将PORT1设置为输出模式
 8000640:	2200      	movs	r2, #0
 8000642:	2107      	movs	r1, #7
 8000644:	2040      	movs	r0, #64	; 0x40
 8000646:	f000 fb43 	bl	8000cd0 <I2C2_WrByte>
  I2C2_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT0_REG, 0x00);//复位PORT0
 800064a:	2200      	movs	r2, #0
 800064c:	2102      	movs	r1, #2
 800064e:	2040      	movs	r0, #64	; 0x40
 8000650:	f000 fb3e 	bl	8000cd0 <I2C2_WrByte>
  I2C2_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT1_REG, 0x00);//复位PORT1
 8000654:	2200      	movs	r2, #0
 8000656:	2103      	movs	r1, #3
 8000658:	2040      	movs	r0, #64	; 0x40
 800065a:	f000 fb39 	bl	8000cd0 <I2C2_WrByte>

  int i, id, FinalI2cAddr, status, enabled_port0_pin, enabled_port1_pin;
  id = 0;//赋初值
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
  enabled_port0_pin = 0x00;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  enabled_port1_pin = 0x00;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
//  uint16_t GPIO_index[DEVICE_NUMBER] = {GPIO_PIN_12, GPIO_PIN_13};//保存要使能的GPIO端口
  //逐一更新各传感器的地址
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	e04e      	b.n	800070e <main+0x102>
  {
//    HAL_GPIO_WritePin(GPIOB, GPIO_index[i], 1);//使能当前传感器
	if(i < 8)
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	2b07      	cmp	r3, #7
 8000674:	dc0b      	bgt.n	800068e <main+0x82>
	{
		enabled_port0_pin = 2*enabled_port0_pin + 1;
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	3301      	adds	r3, #1
 800067c:	613b      	str	r3, [r7, #16]
        I2C2_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT0_REG, enabled_port0_pin);//使能当前传感器
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	461a      	mov	r2, r3
 8000684:	2102      	movs	r1, #2
 8000686:	2040      	movs	r0, #64	; 0x40
 8000688:	f000 fb22 	bl	8000cd0 <I2C2_WrByte>
 800068c:	e00a      	b.n	80006a4 <main+0x98>
	}
	else
	{
		enabled_port1_pin = 2*enabled_port1_pin + 1;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	3301      	adds	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
	    I2C2_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT1_REG, enabled_port1_pin);//使能当前传感器
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	2103      	movs	r1, #3
 800069e:	2040      	movs	r0, #64	; 0x40
 80006a0:	f000 fb16 	bl	8000cd0 <I2C2_WrByte>
	}
    HAL_Delay(2);
 80006a4:	2002      	movs	r0, #2
 80006a6:	f002 fcd9 	bl	800305c <HAL_Delay>
    Devs[i].i2c_dev_addr = 0x52;//刚刚使能的传感器，访问地址仍为默认地址0x52
 80006aa:	4a1d      	ldr	r2, [pc, #116]	; (8000720 <main+0x114>)
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	21d4      	movs	r1, #212	; 0xd4
 80006b0:	fb01 f303 	mul.w	r3, r1, r3
 80006b4:	4413      	add	r3, r2
 80006b6:	33d0      	adds	r3, #208	; 0xd0
 80006b8:	2252      	movs	r2, #82	; 0x52
 80006ba:	601a      	str	r2, [r3, #0]
    FinalI2cAddr = 0x52 + ((i + 1) * 2);//获取修改后的地址
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	332a      	adds	r3, #42	; 0x2a
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	60bb      	str	r3, [r7, #8]
    status = VL6180x_SetI2CAddress(&Devs[i], FinalI2cAddr); //将修改后的地址写入传感器相关寄存器
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	22d4      	movs	r2, #212	; 0xd4
 80006c8:	fb02 f303 	mul.w	r3, r2, r3
 80006cc:	4a14      	ldr	r2, [pc, #80]	; (8000720 <main+0x114>)
 80006ce:	4413      	add	r3, r2
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fbe6 	bl	8000ea8 <VL6180x_SetI2CAddress>
 80006dc:	6078      	str	r0, [r7, #4]
    Devs[i].i2c_dev_addr = FinalI2cAddr;//记录修改后的地址
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <main+0x114>)
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	21d4      	movs	r1, #212	; 0xd4
 80006e4:	fb01 f303 	mul.w	r3, r1, r3
 80006e8:	4413      	add	r3, r2
 80006ea:	33d0      	adds	r3, #208	; 0xd0
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	601a      	str	r2, [r3, #0]
    status = VL6180x_RdByte(&Devs[i], IDENTIFICATION_MODEL_ID, &id);//测试I2C读值是否正常
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	22d4      	movs	r2, #212	; 0xd4
 80006f4:	fb02 f303 	mul.w	r3, r2, r3
 80006f8:	4a09      	ldr	r2, [pc, #36]	; (8000720 <main+0x114>)
 80006fa:	4413      	add	r3, r2
 80006fc:	463a      	mov	r2, r7
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f002 face 	bl	8002ca2 <VL6180x_RdByte>
 8000706:	6078      	str	r0, [r7, #4]
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	3301      	adds	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	ddad      	ble.n	8000670 <main+0x64>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	Sample_SimpleRanging();//测距函数
 8000714:	f000 f806 	bl	8000724 <Sample_SimpleRanging>
  {
 8000718:	e7fc      	b.n	8000714 <main+0x108>
 800071a:	bf00      	nop
 800071c:	10624dd3 	.word	0x10624dd3
 8000720:	200000d0 	.word	0x200000d0

08000724 <Sample_SimpleRanging>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void Sample_SimpleRanging(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800072a:	af00      	add	r7, sp, #0
  VL6180x_RangeData_t Range[DEVICE_NUMBER];

  int i;
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8000732:	e08c      	b.n	800084e <Sample_SimpleRanging+0x12a>
  {
    VL6180x_InitData(&Devs[i]);
 8000734:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000738:	22d4      	movs	r2, #212	; 0xd4
 800073a:	fb02 f303 	mul.w	r3, r2, r3
 800073e:	4a49      	ldr	r2, [pc, #292]	; (8000864 <Sample_SimpleRanging+0x140>)
 8000740:	4413      	add	r3, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fb26 	bl	8000d94 <VL6180x_InitData>
    VL6180x_Prepare(&Devs[i]);
 8000748:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800074c:	22d4      	movs	r2, #212	; 0xd4
 800074e:	fb02 f303 	mul.w	r3, r2, r3
 8000752:	4a44      	ldr	r2, [pc, #272]	; (8000864 <Sample_SimpleRanging+0x140>)
 8000754:	4413      	add	r3, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fc16 	bl	8000f88 <VL6180x_Prepare>
    ///* 调整测量范围
    VL6180x_SetGroupParamHold(&Devs[i], 1);
 800075c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000760:	22d4      	movs	r2, #212	; 0xd4
 8000762:	fb02 f303 	mul.w	r3, r2, r3
 8000766:	4a3f      	ldr	r2, [pc, #252]	; (8000864 <Sample_SimpleRanging+0x140>)
 8000768:	4413      	add	r3, r2
 800076a:	2101      	movs	r1, #1
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fbf2 	bl	8000f56 <VL6180x_SetGroupParamHold>
    VL6180x_RangeGetThresholds(&Devs[i], NULL, NULL);
 8000772:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000776:	22d4      	movs	r2, #212	; 0xd4
 8000778:	fb02 f303 	mul.w	r3, r2, r3
 800077c:	4a39      	ldr	r2, [pc, #228]	; (8000864 <Sample_SimpleRanging+0x140>)
 800077e:	4413      	add	r3, r2
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f000 ff13 	bl	80015b0 <VL6180x_RangeGetThresholds>
    VL6180x_UpscaleSetScaling(&Devs[i], 3);
 800078a:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800078e:	22d4      	movs	r2, #212	; 0xd4
 8000790:	fb02 f303 	mul.w	r3, r2, r3
 8000794:	4a33      	ldr	r2, [pc, #204]	; (8000864 <Sample_SimpleRanging+0x140>)
 8000796:	4413      	add	r3, r2
 8000798:	2103      	movs	r1, #3
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f864 	bl	8001868 <VL6180x_UpscaleSetScaling>
    VL6180x_RangeSetThresholds(&Devs[i], 0, 600, 0);
 80007a0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80007a4:	22d4      	movs	r2, #212	; 0xd4
 80007a6:	fb02 f303 	mul.w	r3, r2, r3
 80007aa:	4a2e      	ldr	r2, [pc, #184]	; (8000864 <Sample_SimpleRanging+0x140>)
 80007ac:	1898      	adds	r0, r3, r2
 80007ae:	2300      	movs	r3, #0
 80007b0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80007b4:	2100      	movs	r1, #0
 80007b6:	f000 feaf 	bl	8001518 <VL6180x_RangeSetThresholds>
    VL6180x_SetGroupParamHold(&Devs[i], 0);
 80007ba:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80007be:	22d4      	movs	r2, #212	; 0xd4
 80007c0:	fb02 f303 	mul.w	r3, r2, r3
 80007c4:	4a27      	ldr	r2, [pc, #156]	; (8000864 <Sample_SimpleRanging+0x140>)
 80007c6:	4413      	add	r3, r2
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fbc3 	bl	8000f56 <VL6180x_SetGroupParamHold>
    //*/
    VL6180x_RangePollMeasurement(&Devs[i], &Range[i]);
 80007d0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80007d4:	22d4      	movs	r2, #212	; 0xd4
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <Sample_SimpleRanging+0x140>)
 80007dc:	1898      	adds	r0, r3, r2
 80007de:	1d39      	adds	r1, r7, #4
 80007e0:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 80007e4:	4613      	mov	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	440b      	add	r3, r1
 80007ee:	4619      	mov	r1, r3
 80007f0:	f000 fcdd 	bl	80011ae <VL6180x_RangePollMeasurement>
    if (Range[i].errorStatus == 0)
 80007f4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80007f8:	f5a3 7121 	sub.w	r1, r3, #644	; 0x284
 80007fc:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8000800:	4613      	mov	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	440b      	add	r3, r1
 800080a:	3308      	adds	r3, #8
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d114      	bne.n	800083c <Sample_SimpleRanging+0x118>
    {
      printf("range %d: %ld mm\r\n", i + 1, Range[i].range_mm);
 8000812:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000816:	1c58      	adds	r0, r3, #1
 8000818:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800081c:	f5a3 7121 	sub.w	r1, r3, #644	; 0x284
 8000820:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	440b      	add	r3, r1
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4601      	mov	r1, r0
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <Sample_SimpleRanging+0x144>)
 8000836:	f003 fd73 	bl	8004320 <iprintf>
 800083a:	e003      	b.n	8000844 <Sample_SimpleRanging+0x120>
//      HAL_Delay(250);
    }
    else
    {
      printf("%s\r\n", "error");
 800083c:	490b      	ldr	r1, [pc, #44]	; (800086c <Sample_SimpleRanging+0x148>)
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <Sample_SimpleRanging+0x14c>)
 8000840:	f003 fd6e 	bl	8004320 <iprintf>
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 8000844:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000848:	3301      	adds	r3, #1
 800084a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800084e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000852:	2b0f      	cmp	r3, #15
 8000854:	f77f af6e 	ble.w	8000734 <Sample_SimpleRanging+0x10>
//      HAL_Delay(250);
    }
  }
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	f507 7722 	add.w	r7, r7, #648	; 0x288
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200000d0 	.word	0x200000d0
 8000868:	08005260 	.word	0x08005260
 800086c:	08005274 	.word	0x08005274
 8000870:	0800527c 	.word	0x0800527c

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b090      	sub	sp, #64	; 0x40
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0318 	add.w	r3, r7, #24
 800087e:	2228      	movs	r2, #40	; 0x28
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f003 fd44 	bl	8004310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089a:	2301      	movs	r3, #1
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089e:	2310      	movs	r3, #16
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008a6:	2300      	movs	r3, #0
 80008a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 0318 	add.w	r3, r7, #24
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 fe8d 	bl	80035d4 <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008c0:	f000 f8b6 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	230f      	movs	r3, #15
 80008c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c8:	2302      	movs	r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2101      	movs	r1, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 f8fa 	bl	8003ad8 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008ea:	f000 f8a1 	bl	8000a30 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3740      	adds	r7, #64	; 0x40
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_USART1_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000930:	f003 fa6a 	bl	8003e08 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f879 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000008c 	.word	0x2000008c
 8000948:	40013800 	.word	0x40013800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000960:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <MX_GPIO_Init+0xd8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <MX_GPIO_Init+0xd8>)
 8000966:	f043 0320 	orr.w	r3, r3, #32
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <MX_GPIO_Init+0xd8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0320 	and.w	r3, r3, #32
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <MX_GPIO_Init+0xd8>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a29      	ldr	r2, [pc, #164]	; (8000a24 <MX_GPIO_Init+0xd8>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <MX_GPIO_Init+0xd8>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <MX_GPIO_Init+0xd8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <MX_GPIO_Init+0xd8>)
 8000996:	f043 0308 	orr.w	r3, r3, #8
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_GPIO_Init+0xd8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0308 	and.w	r3, r3, #8
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80009ae:	481e      	ldr	r0, [pc, #120]	; (8000a28 <MX_GPIO_Init+0xdc>)
 80009b0:	f002 fdf7 	bl	80035a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|CAP_SCL_Pin
 80009b4:	2200      	movs	r2, #0
 80009b6:	f64f 71c7 	movw	r1, #65479	; 0xffc7
 80009ba:	481c      	ldr	r0, [pc, #112]	; (8000a2c <MX_GPIO_Init+0xe0>)
 80009bc:	f002 fdf1 	bl	80035a2 <HAL_GPIO_WritePin>
                          |CAP_SDA_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|TOF_SDA_Pin|TOF_SCL_Pin|EXP_SDA_Pin
                          |EXP_SCL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80009c0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80009c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4619      	mov	r1, r3
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <MX_GPIO_Init+0xdc>)
 80009da:	f002 fc47 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80009de:	f24f 0307 	movw	r3, #61447	; 0xf007
 80009e2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_GPIO_Init+0xe0>)
 80009f8:	f002 fc38 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAP_SCL_Pin CAP_SDA_Pin TOF_SDA_Pin TOF_SCL_Pin
                           EXP_SDA_Pin EXP_SCL_Pin */
  GPIO_InitStruct.Pin = CAP_SCL_Pin|CAP_SDA_Pin|TOF_SDA_Pin|TOF_SCL_Pin
 80009fc:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8000a00:	613b      	str	r3, [r7, #16]
                          |EXP_SDA_Pin|EXP_SCL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a02:	2311      	movs	r3, #17
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_GPIO_Init+0xe0>)
 8000a16:	f002 fc29 	bl	800326c <HAL_GPIO_Init>

}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	40010c00 	.word	0x40010c00

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_MspInit+0x5c>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <HAL_MspInit+0x5c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6193      	str	r3, [r2, #24]
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_MspInit+0x5c>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_MspInit+0x5c>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_MspInit+0x5c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	61d3      	str	r3, [r2, #28]
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_MspInit+0x5c>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_MspInit+0x60>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_MspInit+0x60>)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010000 	.word	0x40010000

08000aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <HAL_UART_MspInit+0x8c>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d131      	bne.n	8000b24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_UART_MspInit+0x90>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <HAL_UART_MspInit+0x90>)
 8000ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_UART_MspInit+0x90>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_UART_MspInit+0x90>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <HAL_UART_MspInit+0x90>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_UART_MspInit+0x90>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <HAL_UART_MspInit+0x94>)
 8000b06:	f002 fbb1 	bl	800326c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <HAL_UART_MspInit+0x94>)
 8000b20:	f002 fba4 	bl	800326c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40013800 	.word	0x40013800
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40010800 	.word	0x40010800

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7e:	f002 fa51 	bl	8003024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e00a      	b.n	8000bae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b98:	f7ff fd26 	bl	80005e8 <__io_getchar>
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	60ba      	str	r2, [r7, #8]
 8000ba4:	b2ca      	uxtb	r2, r1
 8000ba6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	dbf0      	blt.n	8000b98 <_read+0x12>
	}

return len;
 8000bb6:	687b      	ldr	r3, [r7, #4]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e009      	b.n	8000be6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	1c5a      	adds	r2, r3, #1
 8000bd6:	60ba      	str	r2, [r7, #8]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fcf2 	bl	80005c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3301      	adds	r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	dbf1      	blt.n	8000bd2 <_write+0x12>
	}
	return len;
 8000bee:	687b      	ldr	r3, [r7, #4]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_close>:

int _close(int file)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	return -1;
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr

08000c0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <_isatty>:

int _isatty(int file)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	return 1;
 8000c34:	2301      	movs	r3, #1
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f003 fb18 	bl	80042bc <__errno>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <_sbrk+0x64>)
 8000ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20005000 	.word	0x20005000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	20000e10 	.word	0x20000e10
 8000cc0:	20000e28 	.word	0x20000e28

08000cc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <I2C2_WrByte>:
#include "tca9535.h"

int I2C2_WrByte(uint8_t dev, uint8_t index, uint8_t data){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	71bb      	strb	r3, [r7, #6]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	717b      	strb	r3, [r7, #5]
    int status;
    int a = 5;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	60fb      	str	r3, [r7, #12]
    uint8_t *buffer = &a;//初始化指针
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	617b      	str	r3, [r7, #20]

    buffer[0] = index;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	79ba      	ldrb	r2, [r7, #6]
 8000cf0:	701a      	strb	r2, [r3, #0]
    buffer[1] = data;
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	797a      	ldrb	r2, [r7, #5]
 8000cf8:	701a      	strb	r2, [r3, #0]

    status = I2C2Write(dev, buffer,(uint8_t)2);
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	6979      	ldr	r1, [r7, #20]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f806 	bl	8000d12 <I2C2Write>
 8000d06:	6138      	str	r0, [r7, #16]
    return status;
 8000d08:	693b      	ldr	r3, [r7, #16]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <I2C2Write>:
}

//I2C底层通讯函数选择
/* VL6180X底层驱动函数：写 */
int I2C2Write(uint8_t addr, uint8_t *buff, uint8_t len)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	6039      	str	r1, [r7, #0]
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	71bb      	strb	r3, [r7, #6]
  int status, i;
  I2C_Start2();//开启I2C总线
 8000d22:	f7ff fb51 	bl	80003c8 <I2C_Start2>
  I2C_SendByte2(addr | 0);//发送8位设备地址及LSB的写方向位，实现写功能
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fb8b 	bl	8000444 <I2C_SendByte2>
  if (I2C_WaitAck2())//如果从机没有应答
 8000d2e:	f7ff fbcd 	bl	80004cc <I2C_WaitAck2>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <I2C2Write+0x2e>
  {
    I2C_Stop2();//关闭I2C总线
 8000d38:	f7ff fb6a 	bl	8000410 <I2C_Stop2>
    return 1;//返回报错标志
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e025      	b.n	8000d8c <I2C2Write+0x7a>
  }
  for (i = 0; i < len; i++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	e01b      	b.n	8000d7e <I2C2Write+0x6c>
  {
    I2C_SendByte2(buff[i]);//发送buff中的各字节
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fb78 	bl	8000444 <I2C_SendByte2>
    if (i == len - 1)//在发送最后一个字节的数据时
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d109      	bne.n	8000d72 <I2C2Write+0x60>
    {
      if (I2C_WaitAck2())//等待从机应答
 8000d5e:	f7ff fbb5 	bl	80004cc <I2C_WaitAck2>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d007      	beq.n	8000d78 <I2C2Write+0x66>
      {
        I2C_Stop2();//关闭I2C总线
 8000d68:	f7ff fb52 	bl	8000410 <I2C_Stop2>
        status = 1;//返回报错标志
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	e002      	b.n	8000d78 <I2C2Write+0x66>
      }
    }
    else
    {
      status = I2C_WaitAck2();//返回报错标志
 8000d72:	f7ff fbab 	bl	80004cc <I2C_WaitAck2>
 8000d76:	60f8      	str	r0, [r7, #12]
  for (i = 0; i < len; i++)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	dbdf      	blt.n	8000d46 <I2C2Write+0x34>
    }
  }
  I2C_Stop2();//关闭I2C总线
 8000d86:	f7ff fb43 	bl	8000410 <I2C_Stop2>
  return status;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <VL6180x_InitData>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_InitData(VL6180xDev_t dev)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	uint16_t u16;
	uint32_t XTalkCompRate_KCps;

	LOG_FUNCTION_START("");

	VL6180xDevDataSet(dev, EceFactorM, DEF_ECE_FACTOR_M);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2255      	movs	r2, #85	; 0x55
 8000da0:	811a      	strh	r2, [r3, #8]
	VL6180xDevDataSet(dev, EceFactorD, DEF_ECE_FACTOR_D);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2264      	movs	r2, #100	; 0x64
 8000da6:	815a      	strh	r2, [r3, #10]

	VL6180xDevDataSet(dev, RangeIgnore.Enabled, 0);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	741a      	strb	r2, [r3, #16]

#ifdef VL6180x_HAVE_UPSCALE_DATA
	VL6180xDevDataSet(dev, UpscaleFactor,  DEF_UPSCALE);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2201      	movs	r2, #1
 8000db2:	761a      	strb	r2, [r3, #24]
#endif

#ifdef VL6180x_HAVE_ALS_DATA
	VL6180xDevDataSet(dev, IntegrationPeriod, DEF_INT_PEFRIOD);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2264      	movs	r2, #100	; 0x64
 8000db8:	825a      	strh	r2, [r3, #18]
	VL6180xDevDataSet(dev, AlsGainCode, DEF_ALS_GAIN);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	829a      	strh	r2, [r3, #20]
	VL6180xDevDataSet(dev, AlsScaler, DEF_ALS_SCALER);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	82da      	strh	r2, [r3, #22]
#endif

#ifdef VL6180x_HAVE_WRAP_AROUND_DATA
	VL6180xDevDataSet(dev, WrapAroundFilterActive, (VL6180x_WRAP_AROUND_FILTER_SUPPORT > 0));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	765a      	strb	r2, [r3, #25]
	VL6180xDevDataSet(dev, DMaxEnable, DEF_DMAX_ENABLE);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
#endif

	_DMax_OneTimeInit(dev);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f001 fd3d 	bl	8002854 <_DMax_OneTimeInit>
	do {

		/* backup offset initial value from nvm these must be done prior any over call that use offset */
		status = VL6180x_RdByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, (uint8_t *)&offset);
 8000dda:	f107 0313 	add.w	r3, r7, #19
 8000dde:	461a      	mov	r2, r3
 8000de0:	2124      	movs	r1, #36	; 0x24
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f001 ff5d 	bl	8002ca2 <VL6180x_RdByte>
 8000de8:	61f8      	str	r0, [r7, #28]
		if (status) {
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d14a      	bne.n	8000e86 <VL6180x_InitData+0xf2>
			VL6180x_ErrLog("SYSRANGE_PART_TO_PART_RANGE_OFFSET rd fail");
			break;
		}
		VL6180xDevDataSet(dev, Part2PartOffsetNVM, offset);
 8000df0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

		status = VL6180x_RdDWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &CalValue);
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	461a      	mov	r2, r3
 8000e00:	2126      	movs	r1, #38	; 0x26
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f001 ffb6 	bl	8002d74 <VL6180x_RdDWord>
 8000e08:	61f8      	str	r0, [r7, #28]
		if (status) {
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d13c      	bne.n	8000e8a <VL6180x_InitData+0xf6>
			VL6180x_ErrLog("Part2PartAmbNVM rd fail");
			break;
		}
		if ((CalValue&0xFFFF0000) == 0) {
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	0c1b      	lsrs	r3, r3, #16
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <VL6180x_InitData+0x8a>
			CalValue = 0x00CE03F8;
 8000e1a:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <VL6180x_InitData+0x110>)
 8000e1c:	60fb      	str	r3, [r7, #12]
		}
		VL6180xDevDataSet(dev, Part2PartAmbNVM, CalValue);
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	601a      	str	r2, [r3, #0]

		status = VL6180x_RdWord(dev, SYSRANGE_CROSSTALK_COMPENSATION_RATE , &u16);
 8000e24:	f107 030a 	add.w	r3, r7, #10
 8000e28:	461a      	mov	r2, r3
 8000e2a:	211e      	movs	r1, #30
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f001 ff68 	bl	8002d02 <VL6180x_RdWord>
 8000e32:	61f8      	str	r0, [r7, #28]
		if (status) {
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d129      	bne.n	8000e8e <VL6180x_InitData+0xfa>
			VL6180x_ErrLog("SYSRANGE_CROSSTALK_COMPENSATION_RATE rd fail ");
			break;
		}
		XTalkCompRate_KCps = Fix7_2_KCPs(u16);
 8000e3a:	897b      	ldrh	r3, [r7, #10]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fb02 f303 	mul.w	r3, r2, r3
 8000e46:	09db      	lsrs	r3, r3, #7
 8000e48:	61bb      	str	r3, [r7, #24]
		VL6180xDevDataSet(dev, XTalkCompRate_KCps, XTalkCompRate_KCps);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	605a      	str	r2, [r3, #4]

		dmax_status = _DMax_InitData(dev);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f001 fd59 	bl	8002908 <_DMax_InitData>
 8000e56:	6178      	str	r0, [r7, #20]
		if (dmax_status < 0) {
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	db19      	blt.n	8000e92 <VL6180x_InitData+0xfe>
			VL6180x_ErrLog("DMax init failure");
			break;
		}

		/* Read or wait for fresh out of reset  */
		status = VL6180x_RdByte(dev, SYSTEM_FRESH_OUT_OF_RESET, &FreshOutReset);
 8000e5e:	f107 0312 	add.w	r3, r7, #18
 8000e62:	461a      	mov	r2, r3
 8000e64:	2116      	movs	r1, #22
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f001 ff1b 	bl	8002ca2 <VL6180x_RdByte>
 8000e6c:	61f8      	str	r0, [r7, #28]
		if (status) {
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d110      	bne.n	8000e96 <VL6180x_InitData+0x102>
			VL6180x_ErrLog("SYSTEM_FRESH_OUT_OF_RESET rd fail");
			break;
		}
		if (FreshOutReset != 1 || dmax_status)
 8000e74:	7cbb      	ldrb	r3, [r7, #18]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d102      	bne.n	8000e80 <VL6180x_InitData+0xec>
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00b      	beq.n	8000e98 <VL6180x_InitData+0x104>
			status = CALIBRATION_WARNING;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	e008      	b.n	8000e98 <VL6180x_InitData+0x104>
			break;
 8000e86:	bf00      	nop
 8000e88:	e006      	b.n	8000e98 <VL6180x_InitData+0x104>
			break;
 8000e8a:	bf00      	nop
 8000e8c:	e004      	b.n	8000e98 <VL6180x_InitData+0x104>
			break;
 8000e8e:	bf00      	nop
 8000e90:	e002      	b.n	8000e98 <VL6180x_InitData+0x104>
			break;
 8000e92:	bf00      	nop
 8000e94:	e000      	b.n	8000e98 <VL6180x_InitData+0x104>
			break;
 8000e96:	bf00      	nop

	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 8000e98:	69fb      	ldr	r3, [r7, #28]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3720      	adds	r7, #32
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	00ce03f8 	.word	0x00ce03f8

08000ea8 <VL6180x_SetI2CAddress>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_SetI2CAddress(VL6180xDev_t dev, uint8_t NewAddress)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
	int status;
	LOG_FUNCTION_START("");

	status = VL6180x_WrByte(dev, I2C_SLAVE_DEVICE_ADDRESS, NewAddress / 2);
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	085b      	lsrs	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	f240 2112 	movw	r1, #530	; 0x212
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f001 fe1f 	bl	8002b04 <VL6180x_WrByte>
 8000ec6:	60f8      	str	r0, [r7, #12]
	if (status) {
		VL6180x_ErrLog("new i2c addr Wr fail");
	}
	LOG_FUNCTION_END(status);
	return status;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <VL6180x_StaticInit>:
}



int VL6180x_StaticInit(VL6180xDev_t dev)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
	int status = 0, init_status;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
	/* TODO doc When using configurable scaling but using 1x as start condition
	 * load tunning upscale  or not ??? */
	if (_GetUpscale(dev) == 1 && !(VL6180x_UPSCALE_SUPPORT < 0))
		init_status = VL6180x_RangeStaticInit(dev);
	else
		init_status = VL6180x_UpscaleStaticInit(dev);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 fd3c 	bl	800195c <VL6180x_UpscaleStaticInit>
 8000ee4:	6138      	str	r0, [r7, #16]

	if (init_status < 0) {
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db2c      	blt.n	8000f46 <VL6180x_StaticInit+0x74>
	#if REFRESH_CACHED_DATA_AFTER_INIT
	#ifdef VL6180x_HAVE_ALS_DATA
	/* update cached value after tuning applied */
	do {
		uint8_t data;
		status =  VL6180x_RdByte(dev, FW_ALS_RESULT_SCALER, &data);
 8000eec:	f107 030f 	add.w	r3, r7, #15
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f001 fed3 	bl	8002ca2 <VL6180x_RdByte>
 8000efc:	6178      	str	r0, [r7, #20]
		if (status)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d114      	bne.n	8000f2e <VL6180x_StaticInit+0x5c>
			break;
		VL6180xDevDataSet(dev, AlsScaler, data);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	82da      	strh	r2, [r3, #22]

		status =  VL6180x_RdByte(dev, SYSALS_ANALOGUE_GAIN, &data);
 8000f0c:	f107 030f 	add.w	r3, r7, #15
 8000f10:	461a      	mov	r2, r3
 8000f12:	213f      	movs	r1, #63	; 0x3f
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f001 fec4 	bl	8002ca2 <VL6180x_RdByte>
 8000f1a:	6178      	str	r0, [r7, #20]
		if (status)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d107      	bne.n	8000f32 <VL6180x_StaticInit+0x60>
			break;
		VL6180x_AlsSetAnalogueGain(dev, data);
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4619      	mov	r1, r3
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 f8c9 	bl	80010be <VL6180x_AlsSetAnalogueGain>
 8000f2c:	e002      	b.n	8000f34 <VL6180x_StaticInit+0x62>
			break;
 8000f2e:	bf00      	nop
 8000f30:	e000      	b.n	8000f34 <VL6180x_StaticInit+0x62>
			break;
 8000f32:	bf00      	nop
	#endif
	#endif /* REFRESH_CACHED_DATA_AFTER_INIT */
	if (status < 0) {
		VL6180x_ErrLog("StaticInit fail");
	}
	if (!status && init_status) {
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d107      	bne.n	8000f4a <VL6180x_StaticInit+0x78>
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d004      	beq.n	8000f4a <VL6180x_StaticInit+0x78>
		status = init_status;
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e002      	b.n	8000f4c <VL6180x_StaticInit+0x7a>
		goto error;
 8000f46:	bf00      	nop
 8000f48:	e000      	b.n	8000f4c <VL6180x_StaticInit+0x7a>
	}
error:
 8000f4a:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8000f4c:	697b      	ldr	r3, [r7, #20]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <VL6180x_SetGroupParamHold>:


int VL6180x_SetGroupParamHold(VL6180xDev_t dev, int Hold)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t value;

	LOG_FUNCTION_START("%d", Hold);
	if (Hold)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d002      	beq.n	8000f6c <VL6180x_SetGroupParamHold+0x16>
		value = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	e001      	b.n	8000f70 <VL6180x_SetGroupParamHold+0x1a>
	else
		value = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
	status = VL6180x_WrByte(dev, SYSTEM_GROUPED_PARAMETER_HOLD, value);
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	461a      	mov	r2, r3
 8000f74:	2117      	movs	r1, #23
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f001 fdc4 	bl	8002b04 <VL6180x_WrByte>
 8000f7c:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(status);
	return status;
 8000f7e:	68bb      	ldr	r3, [r7, #8]

}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <VL6180x_Prepare>:

int VL6180x_Prepare(VL6180xDev_t dev)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	int status;
	LOG_FUNCTION_START("");

	do {
		status = VL6180x_StaticInit(dev);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff9e 	bl	8000ed2 <VL6180x_StaticInit>
 8000f96:	60f8      	str	r0, [r7, #12]
		if (status < 0)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db42      	blt.n	8001024 <VL6180x_Prepare+0x9c>
			break;

		/* set range InterruptMode to new sample */
		status = VL6180x_RangeConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 fcf9 	bl	8001998 <VL6180x_RangeConfigInterrupt>
 8000fa6:	60f8      	str	r0, [r7, #12]
		if (status)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d13c      	bne.n	8001028 <VL6180x_Prepare+0xa0>
			break;

		/* set default threshold */
		status = VL6180x_RangeSetRawThresholds(dev, 10, 200);
 8000fae:	22c8      	movs	r2, #200	; 0xc8
 8000fb0:	210a      	movs	r1, #10
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fa92 	bl	80014dc <VL6180x_RangeSetRawThresholds>
 8000fb8:	60f8      	str	r0, [r7, #12]
		if (status) {
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d135      	bne.n	800102c <VL6180x_Prepare+0xa4>
			VL6180x_ErrLog("VL6180x_RangeSetRawThresholds fail");
			break;
		}
	#if VL6180x_ALS_SUPPORT
		status = VL6180x_AlsSetIntegrationPeriod(dev, 100);
 8000fc0:	2164      	movs	r1, #100	; 0x64
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f8c4 	bl	8001150 <VL6180x_AlsSetIntegrationPeriod>
 8000fc8:	60f8      	str	r0, [r7, #12]
		if (status)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d12f      	bne.n	8001030 <VL6180x_Prepare+0xa8>
			break;
		status = VL6180x_AlsSetInterMeasurementPeriod(dev,  200);
 8000fd0:	21c8      	movs	r1, #200	; 0xc8
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f89a 	bl	800110c <VL6180x_AlsSetInterMeasurementPeriod>
 8000fd8:	60f8      	str	r0, [r7, #12]
		if (status)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d129      	bne.n	8001034 <VL6180x_Prepare+0xac>
			break;
		status = VL6180x_AlsSetAnalogueGain(dev,  0);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f86b 	bl	80010be <VL6180x_AlsSetAnalogueGain>
 8000fe8:	60f8      	str	r0, [r7, #12]
		if (status)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d123      	bne.n	8001038 <VL6180x_Prepare+0xb0>
			break;
		status = VL6180x_AlsSetThresholds(dev, 0, 0xFF);
 8000ff0:	22ff      	movs	r2, #255	; 0xff
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f844 	bl	8001082 <VL6180x_AlsSetThresholds>
 8000ffa:	60f8      	str	r0, [r7, #12]
		if (status)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d11c      	bne.n	800103c <VL6180x_Prepare+0xb4>
			break;
		/* set Als InterruptMode to new sample */
		status = VL6180x_AlsConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 8001002:	2104      	movs	r1, #4
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f821 	bl	800104c <VL6180x_AlsConfigInterrupt>
 800100a:	60f8      	str	r0, [r7, #12]
		if (status) {
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d116      	bne.n	8001040 <VL6180x_Prepare+0xb8>
			VL6180x_ErrLog("VL6180x_AlsConfigInterrupt fail");
			break;
		}
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
		_filter_Init(dev);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 fdd7 	bl	8001bc6 <_filter_Init>
	#endif
		/* make sure to reset any left previous condition that can hangs first poll */
		status = VL6180x_ClearAllInterrupt(dev);
 8001018:	2107      	movs	r1, #7
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 fb22 	bl	8001664 <VL6180x_ClearInterrupt>
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	e00e      	b.n	8001042 <VL6180x_Prepare+0xba>
			break;
 8001024:	bf00      	nop
 8001026:	e00c      	b.n	8001042 <VL6180x_Prepare+0xba>
			break;
 8001028:	bf00      	nop
 800102a:	e00a      	b.n	8001042 <VL6180x_Prepare+0xba>
			break;
 800102c:	bf00      	nop
 800102e:	e008      	b.n	8001042 <VL6180x_Prepare+0xba>
			break;
 8001030:	bf00      	nop
 8001032:	e006      	b.n	8001042 <VL6180x_Prepare+0xba>
			break;
 8001034:	bf00      	nop
 8001036:	e004      	b.n	8001042 <VL6180x_Prepare+0xba>
			break;
 8001038:	bf00      	nop
 800103a:	e002      	b.n	8001042 <VL6180x_Prepare+0xba>
			break;
 800103c:	bf00      	nop
 800103e:	e000      	b.n	8001042 <VL6180x_Prepare+0xba>
			break;
 8001040:	bf00      	nop
	} while (0);
	LOG_FUNCTION_END(status);

	return status;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <VL6180x_AlsConfigInterrupt>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_AlsConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	2b04      	cmp	r3, #4
 800105c:	d809      	bhi.n	8001072 <VL6180x_AlsConfigInterrupt+0x26>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO, (uint8_t)(~CONFIG_GPIO_ALS_MASK), (ConfigGpioInt << 3));
 800105e:	78fb      	ldrb	r3, [r7, #3]
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	22c7      	movs	r2, #199	; 0xc7
 8001066:	2114      	movs	r1, #20
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f001 fdd4 	bl	8002c16 <VL6180x_UpdateByte>
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	e002      	b.n	8001078 <VL6180x_AlsConfigInterrupt+0x2c>
	} else {
		VL6180x_ErrLog("Invalid config mode param %d", (int)ConfigGpioInt);
		status = INVALID_PARAMS;
 8001072:	f06f 0301 	mvn.w	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8001078:	68fb      	ldr	r3, [r7, #12]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <VL6180x_AlsSetThresholds>:



int VL6180x_AlsSetThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	70fb      	strb	r3, [r7, #3]
 800108e:	4613      	mov	r3, r2
 8001090:	70bb      	strb	r3, [r7, #2]
	int status;

	LOG_FUNCTION_START("%d %d", (int)low, (int)high);

	status = VL6180x_WrByte(dev, SYSALS_THRESH_LOW, low);
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	461a      	mov	r2, r3
 8001096:	213c      	movs	r1, #60	; 0x3c
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f001 fd33 	bl	8002b04 <VL6180x_WrByte>
 800109e:	60f8      	str	r0, [r7, #12]
	if (!status) {
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d106      	bne.n	80010b4 <VL6180x_AlsSetThresholds+0x32>
		status = VL6180x_WrByte(dev, SYSALS_THRESH_HIGH, high);
 80010a6:	78bb      	ldrb	r3, [r7, #2]
 80010a8:	461a      	mov	r2, r3
 80010aa:	213a      	movs	r1, #58	; 0x3a
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f001 fd29 	bl	8002b04 <VL6180x_WrByte>
 80010b2:	60f8      	str	r0, [r7, #12]
	}

	LOG_FUNCTION_END(status) ;
	return status;
 80010b4:	68fb      	ldr	r3, [r7, #12]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <VL6180x_AlsSetAnalogueGain>:


int VL6180x_AlsSetAnalogueGain(VL6180xDev_t dev, uint8_t gain)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70fb      	strb	r3, [r7, #3]
	int status;
	uint8_t GainTotal;

	LOG_FUNCTION_START("%d", (int)gain);
	gain &= ~0x40;
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010d0:	70fb      	strb	r3, [r7, #3]
	if (gain > 7) {
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	2b07      	cmp	r3, #7
 80010d6:	d901      	bls.n	80010dc <VL6180x_AlsSetAnalogueGain+0x1e>
		gain = 7;
 80010d8:	2307      	movs	r3, #7
 80010da:	70fb      	strb	r3, [r7, #3]
	}
	GainTotal = gain | 0x40;
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e2:	73fb      	strb	r3, [r7, #15]

	status = VL6180x_WrByte(dev, SYSALS_ANALOGUE_GAIN, GainTotal);
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	461a      	mov	r2, r3
 80010e8:	213f      	movs	r1, #63	; 0x3f
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f001 fd0a 	bl	8002b04 <VL6180x_WrByte>
 80010f0:	60b8      	str	r0, [r7, #8]
	if (!status) {
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d103      	bne.n	8001100 <VL6180x_AlsSetAnalogueGain+0x42>
		VL6180xDevDataSet(dev, AlsGainCode, gain);
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	829a      	strh	r2, [r3, #20]
	}

	LOG_FUNCTION_END_FMT(status, "%d %d", (int)gain, (int)GainTotal);
	return status;
 8001100:	68bb      	ldr	r3, [r7, #8]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <VL6180x_AlsSetInterMeasurementPeriod>:

int VL6180x_AlsSetInterMeasurementPeriod(VL6180xDev_t dev,  uint16_t intermeasurement_period_ms)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
	int status;

	LOG_FUNCTION_START("%d", (int)intermeasurement_period_ms);
	/* clipping: range is 0-2550ms */
	if (intermeasurement_period_ms >= 255 * 10)
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	f640 12f5 	movw	r2, #2549	; 0x9f5
 800111e:	4293      	cmp	r3, r2
 8001120:	d902      	bls.n	8001128 <VL6180x_AlsSetInterMeasurementPeriod+0x1c>
		intermeasurement_period_ms = 255 * 10;
 8001122:	f640 13f6 	movw	r3, #2550	; 0x9f6
 8001126:	807b      	strh	r3, [r7, #2]
	status = VL6180x_WrByte(dev, SYSALS_INTERMEASUREMENT_PERIOD, (uint8_t)(intermeasurement_period_ms / 10));
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <VL6180x_AlsSetInterMeasurementPeriod+0x40>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	b29b      	uxth	r3, r3
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	213e      	movs	r1, #62	; 0x3e
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f001 fce2 	bl	8002b04 <VL6180x_WrByte>
 8001140:	60f8      	str	r0, [r7, #12]

	LOG_FUNCTION_END_FMT(status, "%d", (int)intermeasurement_period_ms);
	return status;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	cccccccd 	.word	0xcccccccd

08001150 <VL6180x_AlsSetIntegrationPeriod>:


int VL6180x_AlsSetIntegrationPeriod(VL6180xDev_t dev, uint16_t period_ms)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
	int status;
	uint16_t SetIntegrationPeriod;

	LOG_FUNCTION_START("%d", (int)period_ms);

	if (period_ms >= 1)
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <VL6180x_AlsSetIntegrationPeriod+0x1a>
		SetIntegrationPeriod = period_ms - 1;
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	3b01      	subs	r3, #1
 8001166:	81fb      	strh	r3, [r7, #14]
 8001168:	e001      	b.n	800116e <VL6180x_AlsSetIntegrationPeriod+0x1e>
	else
		SetIntegrationPeriod = period_ms;
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	81fb      	strh	r3, [r7, #14]

	if (SetIntegrationPeriod > 464) {
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8001174:	d903      	bls.n	800117e <VL6180x_AlsSetIntegrationPeriod+0x2e>
		SetIntegrationPeriod = 464;
 8001176:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800117a:	81fb      	strh	r3, [r7, #14]
 800117c:	e005      	b.n	800118a <VL6180x_AlsSetIntegrationPeriod+0x3a>
	} else if (SetIntegrationPeriod == 255)   {
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	2bff      	cmp	r3, #255	; 0xff
 8001182:	d102      	bne.n	800118a <VL6180x_AlsSetIntegrationPeriod+0x3a>
		SetIntegrationPeriod++; /* can't write 255 since this causes the device to lock out.*/
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	3301      	adds	r3, #1
 8001188:	81fb      	strh	r3, [r7, #14]
	}

	status = VL6180x_WrWord(dev, SYSALS_INTEGRATION_PERIOD, SetIntegrationPeriod);
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	461a      	mov	r2, r3
 800118e:	2140      	movs	r1, #64	; 0x40
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f001 fcdc 	bl	8002b4e <VL6180x_WrWord>
 8001196:	60b8      	str	r0, [r7, #8]
	if (!status) {
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d102      	bne.n	80011a4 <VL6180x_AlsSetIntegrationPeriod+0x54>
		VL6180xDevDataSet(dev, IntegrationPeriod, SetIntegrationPeriod) ;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	89fa      	ldrh	r2, [r7, #14]
 80011a2:	825a      	strh	r2, [r3, #18]
	}
	LOG_FUNCTION_END_FMT(status, "%d", (int)SetIntegrationPeriod);
	return status;
 80011a4:	68bb      	ldr	r3, [r7, #8]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <VL6180x_RangePollMeasurement>:

#endif /* HAVE_ALS_SUPPORT */


int VL6180x_RangePollMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]
		VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		goto done;
	}
	#endif
	/* //![single_shot_snipet] */
	status = VL6180x_RangeSetSystemMode(dev, MODE_START_STOP | MODE_SINGLESHOT);
 80011b8:	2101      	movs	r1, #1
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 fc44 	bl	8001a48 <VL6180x_RangeSetSystemMode>
 80011c0:	6178      	str	r0, [r7, #20]
	if (status) {
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d12d      	bne.n	8001224 <VL6180x_RangePollMeasurement+0x76>
	}


	/* poll for new sample ready */
	while (1) {
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 fa30 	bl	8001634 <VL6180x_RangeGetInterruptStatus>
 80011d4:	6178      	str	r0, [r7, #20]
		if (status) {
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10c      	bne.n	80011f6 <VL6180x_RangePollMeasurement+0x48>
			break;
		}
		if (IntStatus.status.Range == RES_INT_STAT_GPIO_NEW_SAMPLE_READY || IntStatus.status.Error != 0) {
 80011dc:	7b3b      	ldrb	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d007      	beq.n	80011f8 <VL6180x_RangePollMeasurement+0x4a>
 80011e8:	7b3b      	ldrb	r3, [r7, #12]
 80011ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <VL6180x_RangePollMeasurement+0x4a>
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 80011f4:	e7e8      	b.n	80011c8 <VL6180x_RangePollMeasurement+0x1a>
			break;
 80011f6:	bf00      	nop

		VL6180x_PollDelay(dev);
	}
	/* //![single_shot_snipet] */

	if (!status) {
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d104      	bne.n	8001208 <VL6180x_RangePollMeasurement+0x5a>
		status = VL6180x_RangeGetMeasurement(dev, pRangeData);
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f8df 	bl	80013c4 <VL6180x_RangeGetMeasurement>
 8001206:	6178      	str	r0, [r7, #20]
	}

	/*  clear range interrupt source */
	ClrStatus = VL6180x_RangeClearInterrupt(dev);
 8001208:	2101      	movs	r1, #1
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 fa2a 	bl	8001664 <VL6180x_ClearInterrupt>
 8001210:	6138      	str	r0, [r7, #16]
	if (ClrStatus) {
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d007      	beq.n	8001228 <VL6180x_RangePollMeasurement+0x7a>
		VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		/*  leave initial status if already in error  */
		if (!status) {
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d104      	bne.n	8001228 <VL6180x_RangePollMeasurement+0x7a>
			status = ClrStatus;
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e002      	b.n	800122a <VL6180x_RangePollMeasurement+0x7c>
		goto done;
 8001224:	bf00      	nop
 8001226:	e000      	b.n	800122a <VL6180x_RangePollMeasurement+0x7c>
		}
	}
done:
 8001228:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800122a:	697b      	ldr	r3, [r7, #20]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <VL6180x_GetCachedDWord>:


#if VL6180x_CACHED_REG

int VL6180x_GetCachedDWord(VL6180xDev_t dev, uint16_t  index, uint32_t *pValue)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	460b      	mov	r3, r1
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	817b      	strh	r3, [r7, #10]
	int status;
	uint32_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001248:	2b00      	cmp	r3, #0
 800124a:	d024      	beq.n	8001296 <VL6180x_GetCachedDWord+0x62>
 800124c:	897b      	ldrh	r3, [r7, #10]
 800124e:	2b4c      	cmp	r3, #76	; 0x4c
 8001250:	d921      	bls.n	8001296 <VL6180x_GetCachedDWord+0x62>
		index >= VL6180x_FIRST_CACHED_INDEX  &&
 8001252:	897b      	ldrh	r3, [r7, #10]
 8001254:	2b81      	cmp	r3, #129	; 0x81
 8001256:	d81e      	bhi.n	8001296 <VL6180x_GetCachedDWord+0x62>
		index <= (VL6180x_LAST_CACHED_INDEX - 3)) {
		uint8_t *pBytes = &VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	3b4d      	subs	r3, #77	; 0x4d
 800125c:	3380      	adds	r3, #128	; 0x80
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	4413      	add	r3, r2
 8001262:	3301      	adds	r3, #1
 8001264:	61bb      	str	r3, [r7, #24]
		Value = ((uint32_t)pBytes[0] << 24) |
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	061a      	lsls	r2, r3, #24
				((uint32_t)pBytes[1] << 16) |
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	3301      	adds	r3, #1
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	041b      	lsls	r3, r3, #16
		Value = ((uint32_t)pBytes[0] << 24) |
 8001274:	431a      	orrs	r2, r3
				((uint32_t)pBytes[2] << 8) |
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	3302      	adds	r3, #2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	021b      	lsls	r3, r3, #8
				((uint32_t)pBytes[1] << 16) |
 800127e:	4313      	orrs	r3, r2
				(uint32_t)pBytes[3];
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	3203      	adds	r2, #3
 8001284:	7812      	ldrb	r2, [r2, #0]
		Value = ((uint32_t)pBytes[0] << 24) |
 8001286:	4313      	orrs	r3, r2
 8001288:	617b      	str	r3, [r7, #20]
		*pValue = Value;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	601a      	str	r2, [r3, #0]
		status = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
		index <= (VL6180x_LAST_CACHED_INDEX - 3)) {
 8001294:	e006      	b.n	80012a4 <VL6180x_GetCachedDWord+0x70>
	} else {
		status =  VL6180x_RdDWord(dev, index, pValue);
 8001296:	897b      	ldrh	r3, [r7, #10]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	4619      	mov	r1, r3
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f001 fd69 	bl	8002d74 <VL6180x_RdDWord>
 80012a2:	61f8      	str	r0, [r7, #28]
	}
	return status;
 80012a4:	69fb      	ldr	r3, [r7, #28]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3720      	adds	r7, #32
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <VL6180x_GetCachedWord>:

int VL6180x_GetCachedWord(VL6180xDev_t dev, uint16_t  index, uint16_t *pValue)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b088      	sub	sp, #32
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	460b      	mov	r3, r1
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	817b      	strh	r3, [r7, #10]
	int status;
	uint32_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d01b      	beq.n	80012fe <VL6180x_GetCachedWord+0x50>
 80012c6:	897b      	ldrh	r3, [r7, #10]
 80012c8:	2b4c      	cmp	r3, #76	; 0x4c
 80012ca:	d918      	bls.n	80012fe <VL6180x_GetCachedWord+0x50>
		index >= VL6180x_FIRST_CACHED_INDEX  &&
 80012cc:	897b      	ldrh	r3, [r7, #10]
 80012ce:	2b83      	cmp	r3, #131	; 0x83
 80012d0:	d815      	bhi.n	80012fe <VL6180x_GetCachedWord+0x50>
		index <= (VL6180x_LAST_CACHED_INDEX - 1)) {
		uint8_t *pBytes = &VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 80012d2:	897b      	ldrh	r3, [r7, #10]
 80012d4:	3b4d      	subs	r3, #77	; 0x4d
 80012d6:	3380      	adds	r3, #128	; 0x80
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	3301      	adds	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
		Value = ((uint32_t)pBytes[0] << 8) | (uint32_t)pBytes[1];
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	3201      	adds	r2, #1
 80012ea:	7812      	ldrb	r2, [r2, #0]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]
		*pValue = Value;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	801a      	strh	r2, [r3, #0]
		status = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
		index <= (VL6180x_LAST_CACHED_INDEX - 1)) {
 80012fc:	e006      	b.n	800130c <VL6180x_GetCachedWord+0x5e>
	} else {
		status =  VL6180x_RdWord(dev, index, pValue);
 80012fe:	897b      	ldrh	r3, [r7, #10]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4619      	mov	r1, r3
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f001 fcfc 	bl	8002d02 <VL6180x_RdWord>
 800130a:	61f8      	str	r0, [r7, #28]
	}
	return status;
 800130c:	69fb      	ldr	r3, [r7, #28]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <VL6180x_GetCachedByte>:

int VL6180x_GetCachedByte(VL6180xDev_t dev, uint16_t  index, uint8_t *pValue)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	460b      	mov	r3, r1
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	817b      	strh	r3, [r7, #10]
	int status;
	uint8_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800132a:	2b00      	cmp	r3, #0
 800132c:	d012      	beq.n	8001354 <VL6180x_GetCachedByte+0x3e>
 800132e:	897b      	ldrh	r3, [r7, #10]
 8001330:	2b4c      	cmp	r3, #76	; 0x4c
 8001332:	d90f      	bls.n	8001354 <VL6180x_GetCachedByte+0x3e>
		index >= VL6180x_FIRST_CACHED_INDEX &&
 8001334:	897b      	ldrh	r3, [r7, #10]
 8001336:	2b84      	cmp	r3, #132	; 0x84
 8001338:	d80c      	bhi.n	8001354 <VL6180x_GetCachedByte+0x3e>
		index <= VL6180x_LAST_CACHED_INDEX) {
		Value = VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 800133a:	897b      	ldrh	r3, [r7, #10]
 800133c:	3b4d      	subs	r3, #77	; 0x4d
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4413      	add	r3, r2
 8001342:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001346:	74fb      	strb	r3, [r7, #19]
		*pValue = Value;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7cfa      	ldrb	r2, [r7, #19]
 800134c:	701a      	strb	r2, [r3, #0]
		status = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e006      	b.n	8001362 <VL6180x_GetCachedByte+0x4c>
	} else {
		status =  VL6180x_RdByte(dev, index, pValue);
 8001354:	897b      	ldrh	r3, [r7, #10]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	4619      	mov	r1, r3
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f001 fca1 	bl	8002ca2 <VL6180x_RdByte>
 8001360:	6178      	str	r0, [r7, #20]
	}
	return status;
 8001362:	697b      	ldr	r3, [r7, #20]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_CachedRegs_Fetch>:


int _CachedRegs_Fetch(VL6180xDev_t dev)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	int status;
	uint8_t *Buffer;
	if (VL6180xDevDataGet(dev, CacheFilled) == 0) {
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10e      	bne.n	800139c <_CachedRegs_Fetch+0x30>
		VL6180xDevDataSet(dev, CacheFilled, 1);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		Buffer = &VL6180xDevDataGet(dev, CachedRegs[0]);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3381      	adds	r3, #129	; 0x81
 800138a:	60bb      	str	r3, [r7, #8]
		status = VL6180x_RdMulti(dev, VL6180x_FIRST_CACHED_INDEX, Buffer, VL6180x_CACHED_REG_CNT);
 800138c:	2338      	movs	r3, #56	; 0x38
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	214d      	movs	r1, #77	; 0x4d
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f001 fd2d 	bl	8002df2 <VL6180x_RdMulti>
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	e001      	b.n	80013a0 <_CachedRegs_Fetch+0x34>
	} else {
		status = 0 ;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
	}
	return status;
 80013a0:	68fb      	ldr	r3, [r7, #12]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_CachedRegs_Flush>:

void _CachedRegs_Flush(VL6180xDev_t dev)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
	VL6180xDevDataSet(dev, CacheFilled, 0);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <VL6180x_RangeGetMeasurement>:
#endif /* VL6180x_CACHED_REG */



int VL6180x_RangeGetMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
	uint16_t RawRate;
	uint8_t RawStatus;

	LOG_FUNCTION_START("");

	status = _CachedRegs_Fetch(dev);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffcc 	bl	800136c <_CachedRegs_Fetch>
 80013d4:	60f8      	str	r0, [r7, #12]
	if (status) {
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d153      	bne.n	8001484 <VL6180x_RangeGetMeasurement+0xc0>
		VL6180x_ErrLog("Cache register read fail");
		goto error;
	}
	status = VL6180x_RangeGetResult(dev, &pRangeData->range_mm);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	4619      	mov	r1, r3
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f85c 	bl	800149e <VL6180x_RangeGetResult>
 80013e6:	60f8      	str	r0, [r7, #12]
	if (!status) {
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d14c      	bne.n	8001488 <VL6180x_RangeGetMeasurement+0xc4>
		status = VL6180x_GetCachedWord(dev, RESULT_RANGE_SIGNAL_RATE, &RawRate);
 80013ee:	f107 030a 	add.w	r3, r7, #10
 80013f2:	461a      	mov	r2, r3
 80013f4:	2166      	movs	r1, #102	; 0x66
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ff59 	bl	80012ae <VL6180x_GetCachedWord>
 80013fc:	60f8      	str	r0, [r7, #12]
		if (!status) {
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d144      	bne.n	800148e <VL6180x_RangeGetMeasurement+0xca>
			pRangeData->signalRate_mcps = VL6180x_9to7Conv(RawRate);
 8001404:	897b      	ldrh	r3, [r7, #10]
 8001406:	461a      	mov	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	605a      	str	r2, [r3, #4]
			status = VL6180x_GetCachedByte(dev, RESULT_RANGE_STATUS, &RawStatus);
 800140c:	f107 0309 	add.w	r3, r7, #9
 8001410:	461a      	mov	r2, r3
 8001412:	214d      	movs	r1, #77	; 0x4d
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff7e 	bl	8001316 <VL6180x_GetCachedByte>
 800141a:	60f8      	str	r0, [r7, #12]
			if (!status) {
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d105      	bne.n	800142e <VL6180x_RangeGetMeasurement+0x6a>
				pRangeData->errorStatus = RawStatus >> 4;
 8001422:	7a7b      	ldrb	r3, [r7, #9]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	b2db      	uxtb	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	609a      	str	r2, [r3, #8]
			} else {
				VL6180x_ErrLog("Rd RESULT_RANGE_STATUS fail");
			}
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT || VL6180x_HAVE_DMAX_RANGING
			status = _GetRateResult(dev, pRangeData);
 800142e:	6839      	ldr	r1, [r7, #0]
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f001 f956 	bl	80026e2 <_GetRateResult>
 8001436:	60f8      	str	r0, [r7, #12]
			if (status)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d126      	bne.n	800148c <VL6180x_RangeGetMeasurement+0xc8>
				goto error;
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
			/* if enabled run filter */
			if (_IsWrapArroundActive(dev)) {
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7e5b      	ldrb	r3, [r3, #25]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d014      	beq.n	8001470 <VL6180x_RangeGetMeasurement+0xac>
				status = _filter_GetResult(dev, pRangeData);
 8001446:	6839      	ldr	r1, [r7, #0]
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f001 f8fb 	bl	8002644 <_filter_GetResult>
 800144e:	60f8      	str	r0, [r7, #12]
				if (!status) {
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10c      	bne.n	8001470 <VL6180x_RangeGetMeasurement+0xac>
					/* patch the range status and measure if it is filtered */
					if(pRangeData->FilteredData.filterError != NoError) {
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	2b00      	cmp	r3, #0
 800145c:	d008      	beq.n	8001470 <VL6180x_RangeGetMeasurement+0xac>
						pRangeData->errorStatus = pRangeData->FilteredData.filterError;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	609a      	str	r2, [r3, #8]
						pRangeData->range_mm = pRangeData->FilteredData.range_mm;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	8c1b      	ldrh	r3, [r3, #32]
 800146a:	461a      	mov	r2, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	601a      	str	r2, [r3, #0]
				}
			}
	#endif

	#if VL6180x_HAVE_DMAX_RANGING
			if (_IsDMaxActive(dev)) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8001476:	2b00      	cmp	r3, #0
 8001478:	d009      	beq.n	800148e <VL6180x_RangeGetMeasurement+0xca>
				_DMax_Compute(dev, pRangeData);
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f001 fb01 	bl	8002a84 <_DMax_Compute>
 8001482:	e004      	b.n	800148e <VL6180x_RangeGetMeasurement+0xca>
		goto error;
 8001484:	bf00      	nop
 8001486:	e002      	b.n	800148e <VL6180x_RangeGetMeasurement+0xca>
		    VL6180x_ErrLog("Rd RESULT_RANGE_SIGNAL_RATE fail");
		}
	} else {
		VL6180x_ErrLog("VL6180x_GetRangeResult fail");
	}
error:
 8001488:	bf00      	nop
 800148a:	e000      	b.n	800148e <VL6180x_RangeGetMeasurement+0xca>
				goto error;
 800148c:	bf00      	nop
	_CachedRegs_Flush(dev);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ff8b 	bl	80013aa <_CachedRegs_Flush>
	LOG_FUNCTION_END_FMT(status, "%d %d %d", (int)pRangeData->range_mm, (int)pRangeData->signalRate_mcps,  (int)pRangeData->errorStatus) ;
	return status;
 8001494:	68fb      	ldr	r3, [r7, #12]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <VL6180x_RangeGetResult>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeGetResult(VL6180xDev_t dev, int32_t *pRange_mm)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
	uint8_t RawRange;
	int32_t Upscale;

	LOG_FUNCTION_START("%p", pRange_mm);

	status = VL6180x_GetCachedByte(dev, RESULT_RANGE_VAL, &RawRange);
 80014a8:	f107 030f 	add.w	r3, r7, #15
 80014ac:	461a      	mov	r2, r3
 80014ae:	2162      	movs	r1, #98	; 0x62
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff30 	bl	8001316 <VL6180x_GetCachedByte>
 80014b6:	6178      	str	r0, [r7, #20]
	if (!status) {
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d109      	bne.n	80014d2 <VL6180x_RangeGetResult+0x34>
		Upscale = _GetUpscale(dev);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7e1b      	ldrb	r3, [r3, #24]
 80014c2:	613b      	str	r3, [r7, #16]
		*pRange_mm = Upscale * (int32_t)RawRange;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	461a      	mov	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	fb03 f202 	mul.w	r2, r3, r2
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	601a      	str	r2, [r3, #0]
	}
	LOG_FUNCTION_END_FMT(status, "%d", (int)*pRange_mm);
	return status;
 80014d2:	697b      	ldr	r3, [r7, #20]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <VL6180x_RangeSetRawThresholds>:

int VL6180x_RangeSetRawThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
 80014e8:	4613      	mov	r3, r2
 80014ea:	70bb      	strb	r3, [r7, #2]
	int status;
	LOG_FUNCTION_START("%d %d", (int) low, (int)high);
	/* TODO we can optimize here grouping high/low in a word but that's cpu endianness dependent */
	status = VL6180x_WrByte(dev, SYSRANGE_THRESH_HIGH, high);
 80014ec:	78bb      	ldrb	r3, [r7, #2]
 80014ee:	461a      	mov	r2, r3
 80014f0:	2119      	movs	r1, #25
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f001 fb06 	bl	8002b04 <VL6180x_WrByte>
 80014f8:	60f8      	str	r0, [r7, #12]
	if (!status) {
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <VL6180x_RangeSetRawThresholds+0x32>
		status = VL6180x_WrByte(dev, SYSRANGE_THRESH_LOW, low);
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	461a      	mov	r2, r3
 8001504:	211a      	movs	r1, #26
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f001 fafc 	bl	8002b04 <VL6180x_WrByte>
 800150c:	60f8      	str	r0, [r7, #12]
	}

	LOG_FUNCTION_END(status);
	return status;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <VL6180x_RangeSetThresholds>:

int VL6180x_RangeSetThresholds(VL6180xDev_t dev, uint16_t low, uint16_t high, int UseSafeParamHold)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	817b      	strh	r3, [r7, #10]
 8001526:	4613      	mov	r3, r2
 8001528:	813b      	strh	r3, [r7, #8]
	int status;
	int scale;
	LOG_FUNCTION_START("%d %d", (int) low, (int)high);
	scale = _GetUpscale(dev, UpscaleFactor);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	7e1b      	ldrb	r3, [r3, #24]
 800152e:	61bb      	str	r3, [r7, #24]
	if (low > scale * 255 || high > scale * 255) {
 8001530:	8979      	ldrh	r1, [r7, #10]
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4613      	mov	r3, r2
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	4299      	cmp	r1, r3
 800153c:	dc06      	bgt.n	800154c <VL6180x_RangeSetThresholds+0x34>
 800153e:	8939      	ldrh	r1, [r7, #8]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4613      	mov	r3, r2
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	4299      	cmp	r1, r3
 800154a:	dd03      	ble.n	8001554 <VL6180x_RangeSetThresholds+0x3c>
		status = INVALID_PARAMS;
 800154c:	f06f 0301 	mvn.w	r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	e028      	b.n	80015a6 <VL6180x_RangeSetThresholds+0x8e>
	} else {
		do {
			if (UseSafeParamHold) {
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <VL6180x_RangeSetThresholds+0x52>
				status = VL6180x_SetGroupParamHold(dev, 1);
 800155a:	2101      	movs	r1, #1
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff fcfa 	bl	8000f56 <VL6180x_SetGroupParamHold>
 8001562:	61f8      	str	r0, [r7, #28]
				if (status)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11c      	bne.n	80015a4 <VL6180x_RangeSetThresholds+0x8c>
					break;
		    }
		    status = VL6180x_RangeSetRawThresholds(dev, (uint8_t)(low / scale), (uint8_t)(high / scale));
 800156a:	897a      	ldrh	r2, [r7, #10]
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001572:	b2d9      	uxtb	r1, r3
 8001574:	893a      	ldrh	r2, [r7, #8]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	fb92 f3f3 	sdiv	r3, r2, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff ffab 	bl	80014dc <VL6180x_RangeSetRawThresholds>
 8001586:	61f8      	str	r0, [r7, #28]
		    if (status) {
				VL6180x_ErrLog("VL6180x_RangeSetRawThresholds fail");
		    }
		    if (UseSafeParamHold) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00b      	beq.n	80015a6 <VL6180x_RangeSetThresholds+0x8e>
				int HoldStatus;
				/* tryt to unset param hold vene if previous fail */
				HoldStatus = VL6180x_SetGroupParamHold(dev, 0);
 800158e:	2100      	movs	r1, #0
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7ff fce0 	bl	8000f56 <VL6180x_SetGroupParamHold>
 8001596:	6178      	str	r0, [r7, #20]
				if (!status)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d103      	bne.n	80015a6 <VL6180x_RangeSetThresholds+0x8e>
					status = HoldStatus;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e000      	b.n	80015a6 <VL6180x_RangeSetThresholds+0x8e>
					break;
 80015a4:	bf00      	nop
		    }
		} while (0);
	}

	LOG_FUNCTION_END(status);
	return status;
 80015a6:	69fb      	ldr	r3, [r7, #28]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <VL6180x_RangeGetThresholds>:


int VL6180x_RangeGetThresholds(VL6180xDev_t dev, uint16_t *low, uint16_t *high)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
	int status = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
	uint8_t RawLow, RawHigh;
	int scale;

	LOG_FUNCTION_START("%p %p", low , high);

	scale = _GetUpscale(dev, UpscaleFactor);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	7e1b      	ldrb	r3, [r3, #24]
 80015c4:	61bb      	str	r3, [r7, #24]
	do {
		if (high != NULL) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d013      	beq.n	80015f4 <VL6180x_RangeGetThresholds+0x44>
			status = VL6180x_RdByte(dev, SYSRANGE_THRESH_HIGH, &RawHigh);
 80015cc:	f107 0316 	add.w	r3, r7, #22
 80015d0:	461a      	mov	r2, r3
 80015d2:	2119      	movs	r1, #25
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f001 fb64 	bl	8002ca2 <VL6180x_RdByte>
 80015da:	61f8      	str	r0, [r7, #28]
			if (status) {
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d120      	bne.n	8001624 <VL6180x_RangeGetThresholds+0x74>
				VL6180x_ErrLog("rd SYSRANGE_THRESH_HIGH fail");
				break;
			}
			*high = (uint16_t)RawHigh * scale;
 80015e2:	7dbb      	ldrb	r3, [r7, #22]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	b292      	uxth	r2, r2
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	801a      	strh	r2, [r3, #0]
		}
		if (low != NULL) {
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d017      	beq.n	800162a <VL6180x_RangeGetThresholds+0x7a>
		    status = VL6180x_RdByte(dev, SYSRANGE_THRESH_LOW, &RawLow);
 80015fa:	f107 0317 	add.w	r3, r7, #23
 80015fe:	461a      	mov	r2, r3
 8001600:	211a      	movs	r1, #26
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f001 fb4d 	bl	8002ca2 <VL6180x_RdByte>
 8001608:	61f8      	str	r0, [r7, #28]
			if (status) {
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10b      	bne.n	8001628 <VL6180x_RangeGetThresholds+0x78>
				VL6180x_ErrLog("rd SYSRANGE_THRESH_LOW fail");
				break;
		    }
		    *low = (uint16_t)RawLow * scale;
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	b29b      	uxth	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	b292      	uxth	r2, r2
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	b29a      	uxth	r2, r3
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	801a      	strh	r2, [r3, #0]
 8001622:	e002      	b.n	800162a <VL6180x_RangeGetThresholds+0x7a>
				break;
 8001624:	bf00      	nop
 8001626:	e000      	b.n	800162a <VL6180x_RangeGetThresholds+0x7a>
				break;
 8001628:	bf00      	nop
		}
	} while (0);
	LOG_FUNCTION_END_FMT(status, "%d %d", (int)*low , (int)*high);
	return status;
 800162a:	69fb      	ldr	r3, [r7, #28]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <VL6180x_RangeGetInterruptStatus>:


int VL6180x_RangeGetInterruptStatus(VL6180xDev_t dev, uint8_t *pIntStatus)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t IntStatus;
	LOG_FUNCTION_START("%p", pIntStatus);
	/* FIXME we are grouping "error" with over status the user must check implicitly for it
	 * not just new sample or over status , that will nevr show up in case of error*/
	status = VL6180x_GetCachedByte(dev, RESULT_INTERRUPT_STATUS_GPIO, &IntStatus);
 800163e:	f107 030b 	add.w	r3, r7, #11
 8001642:	461a      	mov	r2, r3
 8001644:	214f      	movs	r1, #79	; 0x4f
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fe65 	bl	8001316 <VL6180x_GetCachedByte>
 800164c:	60f8      	str	r0, [r7, #12]
	*pIntStatus = IntStatus & 0xC7;
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001654:	b2da      	uxtb	r2, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END_FMT(status, "%d", (int)*pIntStatus);
	return status;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <VL6180x_ClearInterrupt>:
	LOG_FUNCTION_END_FMT(status, "%d", (int)*IntStatus);
	return status;
}

int VL6180x_ClearInterrupt(VL6180xDev_t dev, uint8_t IntClear)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
	int status;
	LOG_FUNCTION_START("%d", (int)IntClear);
	if (IntClear <= 7) {
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	2b07      	cmp	r3, #7
 8001674:	d807      	bhi.n	8001686 <VL6180x_ClearInterrupt+0x22>
		status = VL6180x_WrByte(dev, SYSTEM_INTERRUPT_CLEAR, IntClear);
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	461a      	mov	r2, r3
 800167a:	2115      	movs	r1, #21
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f001 fa41 	bl	8002b04 <VL6180x_WrByte>
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	e002      	b.n	800168c <VL6180x_ClearInterrupt+0x28>
	} else {
		status = INVALID_PARAMS;
 8001686:	f06f 0301 	mvn.w	r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 800168c:	68fb      	ldr	r3, [r7, #12]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_UpscaleInitPatch0>:
}

#if VL6180x_UPSCALE_SUPPORT != 1

static int _UpscaleInitPatch0(VL6180xDev_t dev)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	int status;
	uint32_t CalValue = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
	CalValue = VL6180xDevDataGet(dev, Part2PartAmbNVM);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	60fb      	str	r3, [r7, #12]
	status = VL6180x_WrDWord(dev, 0xDA, CalValue);
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	21da      	movs	r1, #218	; 0xda
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f001 fa7b 	bl	8002ba8 <VL6180x_WrDWord>
 80016b2:	60b8      	str	r0, [r7, #8]
	return status;
 80016b4:	68bb      	ldr	r3, [r7, #8]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <VL6180x_UpscaleRegInit>:

/* only include up-scaling register setting when up-scale support is configured in */
int VL6180x_UpscaleRegInit(VL6180xDev_t dev)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
	/*  apply REGISTER_TUNING_ER02_100614_CustomerView.txt */
	VL6180x_WrByte(dev, 0x0207, 0x01);
 80016c6:	2201      	movs	r2, #1
 80016c8:	f240 2107 	movw	r1, #519	; 0x207
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f001 fa19 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0208, 0x01);
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f001 fa13 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0096, 0x00);
 80016de:	2200      	movs	r2, #0
 80016e0:	2196      	movs	r1, #150	; 0x96
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f001 fa0e 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0097, 0x54);
 80016e8:	2254      	movs	r2, #84	; 0x54
 80016ea:	2197      	movs	r1, #151	; 0x97
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f001 fa09 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e3, 0x01);
 80016f2:	2201      	movs	r2, #1
 80016f4:	21e3      	movs	r1, #227	; 0xe3
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f001 fa04 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e4, 0x03);
 80016fc:	2203      	movs	r2, #3
 80016fe:	21e4      	movs	r1, #228	; 0xe4
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f001 f9ff 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e5, 0x02);
 8001706:	2202      	movs	r2, #2
 8001708:	21e5      	movs	r1, #229	; 0xe5
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f001 f9fa 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e6, 0x01);
 8001710:	2201      	movs	r2, #1
 8001712:	21e6      	movs	r1, #230	; 0xe6
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f001 f9f5 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e7, 0x03);
 800171a:	2203      	movs	r2, #3
 800171c:	21e7      	movs	r1, #231	; 0xe7
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f001 f9f0 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00f5, 0x02);
 8001724:	2202      	movs	r2, #2
 8001726:	21f5      	movs	r1, #245	; 0xf5
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f001 f9eb 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00d9, 0x05);
 800172e:	2205      	movs	r2, #5
 8001730:	21d9      	movs	r1, #217	; 0xd9
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f001 f9e6 	bl	8002b04 <VL6180x_WrByte>

	_UpscaleInitPatch0(dev);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffac 	bl	8001696 <_UpscaleInitPatch0>

	VL6180x_WrByte(dev, 0x009f, 0x00);
 800173e:	2200      	movs	r2, #0
 8001740:	219f      	movs	r1, #159	; 0x9f
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f001 f9de 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00a3, 0x28);
 8001748:	2228      	movs	r2, #40	; 0x28
 800174a:	21a3      	movs	r1, #163	; 0xa3
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f001 f9d9 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b7, 0x00);
 8001752:	2200      	movs	r2, #0
 8001754:	21b7      	movs	r1, #183	; 0xb7
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f001 f9d4 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00bb, 0x28);
 800175c:	2228      	movs	r2, #40	; 0x28
 800175e:	21bb      	movs	r1, #187	; 0xbb
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f001 f9cf 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b2, 0x09);
 8001766:	2209      	movs	r2, #9
 8001768:	21b2      	movs	r1, #178	; 0xb2
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f001 f9ca 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ca, 0x09);
 8001770:	2209      	movs	r2, #9
 8001772:	21ca      	movs	r1, #202	; 0xca
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f001 f9c5 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0198, 0x01);
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f001 f9bf 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01b0, 0x17);
 8001786:	2217      	movs	r2, #23
 8001788:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f001 f9b9 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ad, 0x00);
 8001792:	2200      	movs	r2, #0
 8001794:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f001 f9b3 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ff, 0x05);
 800179e:	2205      	movs	r2, #5
 80017a0:	21ff      	movs	r1, #255	; 0xff
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f001 f9ae 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0100, 0x05);
 80017a8:	2205      	movs	r2, #5
 80017aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f001 f9a8 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0199, 0x05);
 80017b4:	2205      	movs	r2, #5
 80017b6:	f240 1199 	movw	r1, #409	; 0x199
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f001 f9a2 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a6, 0x1b);
 80017c0:	221b      	movs	r2, #27
 80017c2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f001 f99c 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ac, 0x3e);
 80017cc:	223e      	movs	r2, #62	; 0x3e
 80017ce:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f001 f996 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a7, 0x1f);
 80017d8:	221f      	movs	r2, #31
 80017da:	f240 11a7 	movw	r1, #423	; 0x1a7
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f001 f990 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0030, 0x00);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2130      	movs	r1, #48	; 0x30
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f001 f98b 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0011, 0x10);
 80017ee:	2210      	movs	r2, #16
 80017f0:	2111      	movs	r1, #17
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f001 f986 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x010a, 0x30);
 80017f8:	2230      	movs	r2, #48	; 0x30
 80017fa:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f001 f980 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003f, 0x46);
 8001804:	2246      	movs	r2, #70	; 0x46
 8001806:	213f      	movs	r1, #63	; 0x3f
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f001 f97b 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0031, 0xFF);
 800180e:	22ff      	movs	r2, #255	; 0xff
 8001810:	2131      	movs	r1, #49	; 0x31
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f001 f976 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0040, 0x63);
 8001818:	2263      	movs	r2, #99	; 0x63
 800181a:	2140      	movs	r1, #64	; 0x40
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f001 f971 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002e, 0x01);
 8001822:	2201      	movs	r2, #1
 8001824:	212e      	movs	r1, #46	; 0x2e
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f001 f96c 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002c, 0xff);
 800182c:	22ff      	movs	r2, #255	; 0xff
 800182e:	212c      	movs	r1, #44	; 0x2c
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f001 f967 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x001b, 0x09);
 8001836:	2209      	movs	r2, #9
 8001838:	211b      	movs	r1, #27
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f001 f962 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003e, 0x31);
 8001840:	2231      	movs	r2, #49	; 0x31
 8001842:	213e      	movs	r1, #62	; 0x3e
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f001 f95d 	bl	8002b04 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0014, 0x24);
 800184a:	2224      	movs	r2, #36	; 0x24
 800184c:	2114      	movs	r1, #20
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f001 f958 	bl	8002b04 <VL6180x_WrByte>
#if VL6180x_EXTENDED_RANGE
	VL6180x_RangeSetMaxConvergenceTime(dev, 63);
#else
	VL6180x_RangeSetMaxConvergenceTime(dev, 50);
 8001854:	2132      	movs	r1, #50	; 0x32
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f8d0 	bl	80019fc <VL6180x_RangeSetMaxConvergenceTime>
#endif
	return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <VL6180x_UpscaleSetScaling>:
#else
#define VL6180x_UpscaleRegInit(...) -1
#endif

int VL6180x_UpscaleSetScaling(VL6180xDev_t dev, uint8_t scaling)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	/* we are in fixed config so only allow configured factor */
	#define min_scaling VL6180x_UPSCALE_SUPPORT
	#define max_scaling VL6180x_UPSCALE_SUPPORT
#endif

	if (scaling >= min_scaling  && scaling <= max_scaling) {
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d063      	beq.n	8001942 <VL6180x_UpscaleSetScaling+0xda>
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d860      	bhi.n	8001942 <VL6180x_UpscaleSetScaling+0xda>

		Scaler = ScalerLookUP[scaling - 1];
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	3b01      	subs	r3, #1
 8001884:	4a34      	ldr	r2, [pc, #208]	; (8001958 <VL6180x_UpscaleSetScaling+0xf0>)
 8001886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800188a:	823b      	strh	r3, [r7, #16]
		status = VL6180x_WrWord(dev, RANGE_SCALER, Scaler);
 800188c:	8a3b      	ldrh	r3, [r7, #16]
 800188e:	461a      	mov	r2, r3
 8001890:	2196      	movs	r1, #150	; 0x96
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f001 f95b 	bl	8002b4e <VL6180x_WrWord>
 8001898:	6178      	str	r0, [r7, #20]
		_SetUpscale(dev, scaling);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	761a      	strb	r2, [r3, #24]

		/* Apply scaling on  part-2-part offset */
		Offset = VL6180xDevDataGet(dev, Part2PartOffsetNVM) / scaling;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 80018a6:	461a      	mov	r2, r3
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ae:	73fb      	strb	r3, [r7, #15]
		status = VL6180x_WrByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, Offset);
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	461a      	mov	r2, r3
 80018b4:	2124      	movs	r1, #36	; 0x24
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f001 f924 	bl	8002b04 <VL6180x_WrByte>
 80018bc:	6178      	str	r0, [r7, #20]

		/* Apply scaling on CrossTalkValidHeight */
		if (status == 0) {
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10a      	bne.n	80018da <VL6180x_UpscaleSetScaling+0x72>
			status = VL6180x_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
									DEF_CROSS_TALK_VALID_HEIGHT_VALUE /  scaling);
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	2214      	movs	r2, #20
 80018c8:	fb92 f3f3 	sdiv	r3, r2, r3
			status = VL6180x_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	2121      	movs	r1, #33	; 0x21
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f001 f916 	bl	8002b04 <VL6180x_WrByte>
 80018d8:	6178      	str	r0, [r7, #20]
		}
		/* Apply scaling on RangeIgnore ValidHeight if enabled */
		if( status == 0){
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d119      	bne.n	8001914 <VL6180x_UpscaleSetScaling+0xac>
			if(  VL6180xDevDataGet(dev, RangeIgnore.Enabled) !=0 ){
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7c1b      	ldrb	r3, [r3, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d015      	beq.n	8001914 <VL6180x_UpscaleSetScaling+0xac>
				ValidHeight = VL6180xDevDataGet(dev, RangeIgnore.ValidHeight);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	899b      	ldrh	r3, [r3, #12]
 80018ec:	827b      	strh	r3, [r7, #18]
				ValidHeight  /= _GetUpscale(dev);
 80018ee:	8a7b      	ldrh	r3, [r7, #18]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	7e12      	ldrb	r2, [r2, #24]
 80018f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80018f8:	827b      	strh	r3, [r7, #18]
				if( ValidHeight > 255 )
 80018fa:	8a7b      	ldrh	r3, [r7, #18]
 80018fc:	2bff      	cmp	r3, #255	; 0xff
 80018fe:	d901      	bls.n	8001904 <VL6180x_UpscaleSetScaling+0x9c>
					ValidHeight = 255;
 8001900:	23ff      	movs	r3, #255	; 0xff
 8001902:	827b      	strh	r3, [r7, #18]

				status = VL6180x_WrByte(dev, SYSRANGE_RANGE_IGNORE_VALID_HEIGHT,
 8001904:	8a7b      	ldrh	r3, [r7, #18]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	2125      	movs	r1, #37	; 0x25
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f001 f8f9 	bl	8002b04 <VL6180x_WrByte>
 8001912:	6178      	str	r0, [r7, #20]
							ValidHeight );
			}
		}

#if !VL6180x_EXTENDED_RANGE
		if (status == 0) {
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10a      	bne.n	8001930 <VL6180x_UpscaleSetScaling+0xc8>
			status = VL6180x_RangeSetEceState(dev, scaling == 1); /* enable ece only at 1x scaling */
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	2b01      	cmp	r3, #1
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4619      	mov	r1, r3
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f84e 	bl	80019ca <VL6180x_RangeSetEceState>
 800192e:	6178      	str	r0, [r7, #20]
		}
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <VL6180x_UpscaleSetScaling+0xe2>
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d006      	beq.n	800194a <VL6180x_UpscaleSetScaling+0xe2>
			status = NOT_GUARANTEED ;
 800193c:	2303      	movs	r3, #3
 800193e:	617b      	str	r3, [r7, #20]
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 8001940:	e003      	b.n	800194a <VL6180x_UpscaleSetScaling+0xe2>
		}
#endif
	} else {
		status = INVALID_PARAMS;
 8001942:	f06f 0301 	mvn.w	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e000      	b.n	800194c <VL6180x_UpscaleSetScaling+0xe4>
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 800194a:	bf00      	nop
	}
#undef min_scaling
#undef max_scaling
	LOG_FUNCTION_END(status);
	return status;
 800194c:	697b      	ldr	r3, [r7, #20]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	080052ac 	.word	0x080052ac

0800195c <VL6180x_UpscaleStaticInit>:
	return status;
}


static int  VL6180x_UpscaleStaticInit(VL6180xDev_t dev)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	/* todo make these a fail macro in case only 1x is suppoted */
	int status;

	LOG_FUNCTION_START("");
	do {
		status = VL6180x_UpscaleRegInit(dev);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff feaa 	bl	80016be <VL6180x_UpscaleRegInit>
 800196a:	60f8      	str	r0, [r7, #12]
		if (status) {
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b00      	cmp	r3, #0
			VL6180x_ErrLog("VL6180x_RangeSetEceState fail");
			break;
		}
#endif
	} while (0);
	if (!status) {
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10b      	bne.n	800198e <VL6180x_UpscaleStaticInit+0x32>
		/*  must write the scaler at least once to the device to ensure the scaler is in a known state. */
		status = VL6180x_UpscaleSetScaling(dev, _GetUpscale(dev));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7e1b      	ldrb	r3, [r3, #24]
 800197a:	4619      	mov	r1, r3
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff73 	bl	8001868 <VL6180x_UpscaleSetScaling>
 8001982:	60f8      	str	r0, [r7, #12]
		VL6180x_WrByte(dev, 0x016, 0x00); /* change fresh out of set status to 0 */
 8001984:	2200      	movs	r2, #0
 8001986:	2116      	movs	r1, #22
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f001 f8bb 	bl	8002b04 <VL6180x_WrByte>
	}
	LOG_FUNCTION_END(status);
	return status;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <VL6180x_RangeConfigInterrupt>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d807      	bhi.n	80019ba <VL6180x_RangeConfigInterrupt+0x22>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO,
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	22f8      	movs	r2, #248	; 0xf8
 80019ae:	2114      	movs	r1, #20
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f001 f930 	bl	8002c16 <VL6180x_UpdateByte>
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	e002      	b.n	80019c0 <VL6180x_RangeConfigInterrupt+0x28>
									(uint8_t)(~CONFIG_GPIO_RANGE_MASK),
									ConfigGpioInt);
	} else {
		VL6180x_ErrLog("Invalid config mode param %d", (int)ConfigGpioInt);
		status = INVALID_PARAMS;
 80019ba:	f06f 0301 	mvn.w	r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 80019c0:	68fb      	ldr	r3, [r7, #12]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <VL6180x_RangeSetEceState>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeSetEceState(VL6180xDev_t dev, int enable)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t or_mask;

	LOG_FUNCTION_START("%d", (int)enable);
	if (enable)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <VL6180x_RangeSetEceState+0x16>
		or_mask = RANGE_CHECK_ECE_ENABLE_MASK;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	e001      	b.n	80019e4 <VL6180x_RangeSetEceState+0x1a>
	else
		or_mask = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]

	status = VL6180x_UpdateByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, ~RANGE_CHECK_ECE_ENABLE_MASK, or_mask);
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	22fe      	movs	r2, #254	; 0xfe
 80019e8:	212d      	movs	r1, #45	; 0x2d
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f001 f913 	bl	8002c16 <VL6180x_UpdateByte>
 80019f0:	60b8      	str	r0, [r7, #8]
	LOG_FUNCTION_END(status);
	return status;
 80019f2:	68bb      	ldr	r3, [r7, #8]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <VL6180x_RangeSetMaxConvergenceTime>:


int VL6180x_RangeSetMaxConvergenceTime(VL6180xDev_t dev, uint8_t  MaxConTime_msec)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
	int status = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
	LOG_FUNCTION_START("%d", (int)MaxConTime_msec);
	do {
		status = VL6180x_WrByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, MaxConTime_msec);
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	211c      	movs	r1, #28
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f001 f876 	bl	8002b04 <VL6180x_WrByte>
 8001a18:	60f8      	str	r0, [r7, #12]
		if (status) {
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10b      	bne.n	8001a38 <VL6180x_RangeSetMaxConvergenceTime+0x3c>
			break;
		}
		status = VL6180x_RangeSetEarlyConvergenceEestimateThreshold(dev);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f82a 	bl	8001a7a <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>
 8001a26:	60f8      	str	r0, [r7, #12]
		if (status) {
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <VL6180x_RangeSetMaxConvergenceTime+0x40>
			break;
		}
		status = _DMax_InitData(dev);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 ff6a 	bl	8002908 <_DMax_InitData>
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	e002      	b.n	8001a3e <VL6180x_RangeSetMaxConvergenceTime+0x42>
			break;
 8001a38:	bf00      	nop
 8001a3a:	e000      	b.n	8001a3e <VL6180x_RangeSetMaxConvergenceTime+0x42>
			break;
 8001a3c:	bf00      	nop
	} while (0);
	LOG_FUNCTION_END(status);
	return status;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <VL6180x_RangeSetSystemMode>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeSetSystemMode(VL6180xDev_t dev, uint8_t  mode)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("%d", (int)mode);
	/* FIXME we are not checking device is ready via @a VL6180x_RangeWaitDeviceReady
	 * so if called back to back real fast we are not checking
	 * if previous mode "set" got absorbed => bit 0 must be 0 so that it work
	 */
	if (mode <= 3) {
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d807      	bhi.n	8001a6a <VL6180x_RangeSetSystemMode+0x22>
		status = VL6180x_WrByte(dev, SYSRANGE_START, mode);
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2118      	movs	r1, #24
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f001 f84f 	bl	8002b04 <VL6180x_WrByte>
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	e002      	b.n	8001a70 <VL6180x_RangeSetSystemMode+0x28>
		if (status) {
		    VL6180x_ErrLog("SYSRANGE_START wr fail");
		}
	} else {
		status = INVALID_PARAMS;
 8001a6a:	f06f 0301 	mvn.w	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8001a70:	68fb      	ldr	r3, [r7, #12]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>:
	return status;
}


static int VL6180x_RangeSetEarlyConvergenceEestimateThreshold(VL6180xDev_t dev)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b08e      	sub	sp, #56	; 0x38
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
	int status;

	const uint32_t cMicroSecPerMilliSec  = 1000;
 8001a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a86:	633b      	str	r3, [r7, #48]	; 0x30
	const uint32_t cEceSampleTime_us     = 500;
 8001a88:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ece_factor_m          = VL6180xDevDataGet(dev, EceFactorM);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	891b      	ldrh	r3, [r3, #8]
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ece_factor_d          = VL6180xDevDataGet(dev, EceFactorD);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	895b      	ldrh	r3, [r3, #10]
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t AveTime;

	LOG_FUNCTION_START("");

	do {
		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &u8);
 8001a9a:	f107 030f 	add.w	r3, r7, #15
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	211c      	movs	r1, #28
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f001 f8fd 	bl	8002ca2 <VL6180x_RdByte>
 8001aa8:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 8001aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d138      	bne.n	8001b22 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xa8>
			VL6180x_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail");
			break;
		}
		maxConv_ms = u8;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	623b      	str	r3, [r7, #32]
		AveTime = _GetAveTotalTime(dev);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f83c 	bl	8001b32 <_GetAveTotalTime>
 8001aba:	61f8      	str	r0, [r7, #28]
		if (AveTime < 0) {
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da03      	bge.n	8001aca <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0x50>
			status = -1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8001ac8:	e02e      	b.n	8001b28 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
		}

		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ace:	fb03 f202 	mul.w	r2, r3, r2
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	61bb      	str	r3, [r7, #24]
		status = VL6180x_RdDWord(dev, 0xB8, &fineThresh);
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	461a      	mov	r2, r3
 8001ade:	21b8      	movs	r1, #184	; 0xb8
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f001 f947 	bl	8002d74 <VL6180x_RdDWord>
 8001ae6:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 8001ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d11b      	bne.n	8001b26 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xac>
			VL6180x_ErrLog("reg 0xB8 rd fail");
			break;
		}
		fineThresh *= 256;
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	613b      	str	r3, [r7, #16]
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 8001af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	fb03 f202 	mul.w	r2, r3, r2
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]

		status = VL6180x_WrWord(dev, SYSRANGE_EARLY_CONVERGENCE_ESTIMATE, (uint16_t)eceThresh);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	2122      	movs	r1, #34	; 0x22
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f001 f818 	bl	8002b4e <VL6180x_WrWord>
 8001b1e:	6378      	str	r0, [r7, #52]	; 0x34
 8001b20:	e002      	b.n	8001b28 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
			break;
 8001b22:	bf00      	nop
 8001b24:	e000      	b.n	8001b28 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
			break;
 8001b26:	bf00      	nop
	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 8001b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3738      	adds	r7, #56	; 0x38
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_GetAveTotalTime>:
/*
 * Return >0 = time
 *       <0 1 if fail to get read data from device to compute time
 */
static int32_t _GetAveTotalTime(VL6180xDev_t dev)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b08c      	sub	sp, #48	; 0x30
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
	uint32_t cFwOverhead_us = 24;
 8001b3a:	2318      	movs	r3, #24
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t cVcpSetupTime_us = 70;
 8001b3e:	2346      	movs	r3, #70	; 0x46
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t cPLL2_StartupDelay_us = 200;
 8001b42:	23c8      	movs	r3, #200	; 0xc8
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t cMeasMask = 0x07;
 8001b46:	2307      	movs	r3, #7
 8001b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t u8;
	int status;

	LOG_FUNCTION_START("");

	status = VL6180x_RdByte(dev, 0x109, &u8);
 8001b4c:	f107 030b 	add.w	r3, r7, #11
 8001b50:	461a      	mov	r2, r3
 8001b52:	f240 1109 	movw	r1, #265	; 0x109
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f001 f8a3 	bl	8002ca2 <VL6180x_RdByte>
 8001b5c:	61f8      	str	r0, [r7, #28]
	if (status) {
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <_GetAveTotalTime+0x38>
		VL6180x_ErrLog("rd 0x109 fail");
		return -1;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	e029      	b.n	8001bbe <_GetAveTotalTime+0x8c>
	}
	Samples = u8 & cMeasMask;
 8001b6a:	7afa      	ldrb	r2, [r7, #11]
 8001b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b70:	4013      	ands	r3, r2
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	61bb      	str	r3, [r7, #24]
	status = VL6180x_RdByte(dev, READOUT_AVERAGING_SAMPLE_PERIOD, &u8);
 8001b76:	f107 030b 	add.w	r3, r7, #11
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f001 f88e 	bl	8002ca2 <VL6180x_RdByte>
 8001b86:	61f8      	str	r0, [r7, #28]
	if (status) {
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <_GetAveTotalTime+0x62>
		VL6180x_ErrLog("i2c READOUT_AVERAGING_SAMPLE_PERIOD fail");
		return -1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	e014      	b.n	8001bbe <_GetAveTotalTime+0x8c>
	}
	SamplePeriod = u8;
 8001b94:	7afb      	ldrb	r3, [r7, #11]
 8001b96:	617b      	str	r3, [r7, #20]
	SingleTime_us = cFwOverhead_us + cVcpSetupTime_us + (SamplePeriod * 10);
 8001b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9c:	18d1      	adds	r1, r2, r3
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	440b      	add	r3, r1
 8001baa:	613b      	str	r3, [r7, #16]
	TotalAveTime_us = (Samples + 1) * SingleTime_us + cPLL2_StartupDelay_us;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	fb03 f202 	mul.w	r2, r3, r2
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	4413      	add	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_END(TotalAveTime_us);
	return TotalAveTime_us;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3730      	adds	r7, #48	; 0x30
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_filter_Init>:
#define _FilterData(field) VL6180xDevDataGet(dev, FilterData.field)
/*
 * One time init
 */
int _filter_Init(VL6180xDev_t dev)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b085      	sub	sp, #20
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
	int i;
	_FilterData(MeasurementIndex) = 0;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61da      	str	r2, [r3, #28]

	_FilterData(Default_ZeroVal) = 0;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	665a      	str	r2, [r3, #100]	; 0x64
	_FilterData(Default_VAVGVal) = 0;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	669a      	str	r2, [r3, #104]	; 0x68
	_FilterData(NoDelay_ZeroVal) = 0;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	66da      	str	r2, [r3, #108]	; 0x6c
	_FilterData(NoDelay_VAVGVal) = 0;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	671a      	str	r2, [r3, #112]	; 0x70
	_FilterData(Previous_VAVGDiff) = 0;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	675a      	str	r2, [r3, #116]	; 0x74

	_FilterData(StdFilteredReads) = 0;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	_FilterData(FilteringOnGoingConsecutiveStates) = 0;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	679a      	str	r2, [r3, #120]	; 0x78

	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	e011      	b.n	8001c2a <_filter_Init+0x64>
		_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3310      	adds	r3, #16
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c14:	809a      	strh	r2, [r3, #4]
		_FilterData(LastReturnRates)[i] = 0;
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	330c      	adds	r3, #12
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3301      	adds	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b09      	cmp	r3, #9
 8001c2e:	ddea      	ble.n	8001c06 <_filter_Init+0x40>
	}
	_FilterData(MeasurementsSinceLastFlush)=0;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	621a      	str	r2, [r3, #32]
	return 0;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <_filter_StdDevDamper>:
									uint32_t SignalRate,
									const uint32_t StdDevLimitLowLight,
									const uint32_t StdDevLimitLowLightSNR,
									const uint32_t StdDevLimitHighLight,
									const uint32_t StdDevLimitHighLightSNR)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b087      	sub	sp, #28
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	603b      	str	r3, [r7, #0]
	uint32_t newStdDev;
	uint16_t SNR;

	if (AmbientRate > 0)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d008      	beq.n	8001c68 <_filter_StdDevDamper+0x26>
		SNR = (uint16_t) ((100 * SignalRate) / AmbientRate);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2264      	movs	r2, #100	; 0x64
 8001c5a:	fb03 f202 	mul.w	r2, r3, r2
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	827b      	strh	r3, [r7, #18]
 8001c66:	e002      	b.n	8001c6e <_filter_StdDevDamper+0x2c>
	else
		SNR = 9999;
 8001c68:	f242 730f 	movw	r3, #9999	; 0x270f
 8001c6c:	827b      	strh	r3, [r7, #18]

	if (SNR >= StdDevLimitLowLightSNR) {
 8001c6e:	8a7b      	ldrh	r3, [r7, #18]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d802      	bhi.n	8001c7c <_filter_StdDevDamper+0x3a>
		newStdDev = StdDevLimitLowLight;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e016      	b.n	8001caa <_filter_StdDevDamper+0x68>
	} else {
		if (SNR <= StdDevLimitHighLightSNR)
 8001c7c:	8a7b      	ldrh	r3, [r7, #18]
 8001c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d302      	bcc.n	8001c8a <_filter_StdDevDamper+0x48>
			newStdDev = StdDevLimitHighLight;
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	e00f      	b.n	8001caa <_filter_StdDevDamper+0x68>
		else {
			newStdDev = (uint32_t)(StdDevLimitHighLight -
									(SNR - StdDevLimitHighLightSNR) *
 8001c8a:	8a7a      	ldrh	r2, [r7, #18]
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	1ad3      	subs	r3, r2, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8001c90:	6a39      	ldr	r1, [r7, #32]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	1a8a      	subs	r2, r1, r2
									(SNR - StdDevLimitHighLightSNR) *
 8001c96:	fb03 f202 	mul.w	r2, r3, r2
									(StdDevLimitLowLightSNR - StdDevLimitHighLightSNR));
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	1acb      	subs	r3, r1, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
			newStdDev = (uint32_t)(StdDevLimitHighLight -
 8001ca4:	6a3a      	ldr	r2, [r7, #32]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	617b      	str	r3, [r7, #20]
		}
	}

	return newStdDev;
 8001caa:	697b      	ldr	r3, [r7, #20]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
	...

08001cb8 <_filter_Start>:
								uint16_t m_trueRange_mm,
								uint16_t m_rawRange_mm,
								uint32_t m_rtnSignalRate,
								uint32_t m_rtnAmbientRate,
								uint16_t errorCode)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b0aa      	sub	sp, #168	; 0xa8
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	817b      	strh	r3, [r7, #10]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	813b      	strh	r3, [r7, #8]
	int status;
	uint16_t m_newTrueRange_mm = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	#if VL6180x_HAVE_MULTI_READ
	uint8_t MultiReadBuf[8];
	#endif
	uint16_t i;
	uint16_t bypassFilter = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t resetVAVGData = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	uint16_t filterErrorCode = NoError;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t filterErrorCodeOnRangingErrorCode = NoError;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	uint16_t registerValue;

	uint32_t register32BitsValue1;
	uint32_t register32BitsValue2;

	uint16_t ValidDistance = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	uint16_t SuspicuousRangingZone = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

	uint16_t WrapAroundFlag = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t NoWrapAroundFlag = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t NoWrapAroundHighConfidenceFlag = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	uint16_t FlushFilter = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	uint32_t RateChange = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	uint16_t StdDevSamplesMinNeeded = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	uint16_t StdDevSamples = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	uint32_t StdDevDistanceSum = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t StdDevDistanceMean = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t StdDevDistance = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t StdDevRateSum = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t StdDevRateMean = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t StdDevRate = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t StdDevLimitWithTargetMove = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t WrapAroundLowReturnRateLimit;
	uint32_t WrapAroundLowReturnRateLimit2;
	uint32_t WrapAroundLowReturnRateFilterLimit;
	uint32_t WrapAroundHighReturnRateFilterLimit;

	uint32_t MAX_VAVGDiff = 1800;
 8001d3a:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001d3e:	657b      	str	r3, [r7, #84]	; 0x54

	uint8_t u8;//, u8_2;
	uint32_t XTalkCompRate_KCps;
	uint32_t StdDevLimit = 300;
 8001d40:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001d44:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t MaxOrInvalidDistance =   255*_GetUpscale(dev);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	7e1b      	ldrb	r3, [r3, #24]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* #define MaxOrInvalidDistance  (uint16_t) (255 * 3) */

	/* Check if distance is Valid or not */
	switch (errorCode) {
 8001d54:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001d58:	3b0c      	subs	r3, #12
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d825      	bhi.n	8001daa <_filter_Start+0xf2>
 8001d5e:	a201      	add	r2, pc, #4	; (adr r2, 8001d64 <_filter_Start+0xac>)
 8001d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d64:	08001d75 	.word	0x08001d75
 8001d68:	08001d83 	.word	0x08001d83
 8001d6c:	08001d75 	.word	0x08001d75
 8001d70:	08001d83 	.word	0x08001d83
	case Raw_Ranging_Algo_Underflow:
	case Ranging_Algo_Underflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 8001d74:	2310      	movs	r3, #16
 8001d76:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		ValidDistance = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8001d80:	e022      	b.n	8001dc8 <_filter_Start+0x110>
	case Raw_Ranging_Algo_Overflow:
	case Ranging_Algo_Overflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 8001d82:	2310      	movs	r3, #16
 8001d84:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		//m_trueRange_mm = MaxOrInvalidDistance;
		m_trueRange_mm = 200*_GetUpscale(dev);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	7e1b      	ldrb	r3, [r3, #24]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	0091      	lsls	r1, r2, #2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	817b      	strh	r3, [r7, #10]
		ValidDistance = 1;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8001da8:	e00e      	b.n	8001dc8 <_filter_Start+0x110>
	default:
		if (m_rawRange_mm >= MaxOrInvalidDistance) {
 8001daa:	893b      	ldrh	r3, [r7, #8]
 8001dac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d806      	bhi.n	8001dc0 <_filter_Start+0x108>
			ValidDistance = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
			bypassFilter = 1; /* Bypass the filter in this case as produced distance is not usable (and also the VAVGVal and ZeroVal values) */
 8001db8:	2301      	movs	r3, #1
 8001dba:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
		} else {
			ValidDistance = 1;
		}
		break;
 8001dbe:	e002      	b.n	8001dc6 <_filter_Start+0x10e>
			ValidDistance = 1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8001dc6:	bf00      	nop
	}
	m_newTrueRange_mm = m_trueRange_mm;
 8001dc8:	897b      	ldrh	r3, [r7, #10]
 8001dca:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	XTalkCompRate_KCps = VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Update signal rate limits depending on crosstalk */
	SignalRateDMax = (uint32_t)_GetDMaxDataRetSignalAt400mm(dev) ;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001dda:	647b      	str	r3, [r7, #68]	; 0x44
	WrapAroundLowReturnRateLimit = WrapAroundLowReturnRateLimit_ROM  + XTalkCompRate_KCps;
 8001ddc:	4b90      	ldr	r3, [pc, #576]	; (8002020 <_filter_Start+0x368>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001de2:	4413      	add	r3, r2
 8001de4:	643b      	str	r3, [r7, #64]	; 0x40
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 8001de6:	4b8f      	ldr	r3, [pc, #572]	; (8002024 <_filter_Start+0x36c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) +
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	4a8d      	ldr	r2, [pc, #564]	; (8002028 <_filter_Start+0x370>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 8001dfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dfc:	4413      	add	r3, r2
 8001dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
									XTalkCompRate_KCps;
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 8001e00:	4b8a      	ldr	r3, [pc, #552]	; (800202c <_filter_Start+0x374>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 8001e0a:	08db      	lsrs	r3, r3, #3
 8001e0c:	4a86      	ldr	r2, [pc, #536]	; (8002028 <_filter_Start+0x370>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 8001e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e16:	4413      	add	r3, r2
 8001e18:	63bb      	str	r3, [r7, #56]	; 0x38
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 8001e1a:	4b85      	ldr	r3, [pc, #532]	; (8002030 <_filter_Start+0x378>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	4a80      	ldr	r2, [pc, #512]	; (8002028 <_filter_Start+0x370>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	089b      	lsrs	r3, r3, #2
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 8001e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e30:	4413      	add	r3, r2
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34


	/* Checks on low range data */
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit)) {
 8001e34:	4b7f      	ldr	r3, [pc, #508]	; (8002034 <_filter_Start+0x37c>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	893a      	ldrh	r2, [r7, #8]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d209      	bcs.n	8001e52 <_filter_Start+0x19a>
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d205      	bcs.n	8001e52 <_filter_Start+0x19a>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 8001e46:	2310      	movs	r3, #16
 8001e48:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		bypassFilter = 1;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit2)) {
 8001e52:	4b79      	ldr	r3, [pc, #484]	; (8002038 <_filter_Start+0x380>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	893a      	ldrh	r2, [r7, #8]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d209      	bcs.n	8001e70 <_filter_Start+0x1b8>
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d205      	bcs.n	8001e70 <_filter_Start+0x1b8>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 8001e64:	2310      	movs	r3, #16
 8001e66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		bypassFilter = 1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < (WrapAroundLowReturnRateLimit2 + WrapAroundLowRawRangeLimit2SuspicuousAddedSignalRate))) {
 8001e70:	4b71      	ldr	r3, [pc, #452]	; (8002038 <_filter_Start+0x380>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	893a      	ldrh	r2, [r7, #8]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d209      	bcs.n	8001e8e <_filter_Start+0x1d6>
 8001e7a:	4b70      	ldr	r3, [pc, #448]	; (800203c <_filter_Start+0x384>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e80:	4413      	add	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d202      	bcs.n	8001e8e <_filter_Start+0x1d6>
		SuspicuousRangingZone = 1; /* On this area, we are in an highly suspicuous wraparound ares, filter parameter will be stengthen */
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	}


	/* Checks on Ambient rate level */
	if (m_rtnAmbientRate > WrapAroundMaximumAmbientRateFilterLimit) {
 8001e8e:	4b6c      	ldr	r3, [pc, #432]	; (8002040 <_filter_Start+0x388>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d905      	bls.n	8001ea6 <_filter_Start+0x1ee>
		/* Too high ambient rate */
		FlushFilter = 1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		bypassFilter = 1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
    
	/*  Checks on Filter flush */
	if (m_rtnSignalRate < MinReturnRateFilterFlush) {
 8001ea6:	4b67      	ldr	r3, [pc, #412]	; (8002044 <_filter_Start+0x38c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d205      	bcs.n	8001ebc <_filter_Start+0x204>
		/* Completely lost target, so flush the filter */
		FlushFilter = 1;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		bypassFilter = 1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if (_FilterData(LastReturnRates)[0] != 0) {
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d020      	beq.n	8001f06 <_filter_Start+0x24e>
		if (m_rtnSignalRate > _FilterData(LastReturnRates)[0])
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d90d      	bls.n	8001eea <_filter_Start+0x232>
			RateChange = (100 *
						(m_rtnSignalRate - _FilterData(LastReturnRates)[0])) /
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 8001ed6:	2264      	movs	r2, #100	; 0x64
 8001ed8:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ee8:	e010      	b.n	8001f0c <_filter_Start+0x254>
		else
			RateChange = (100 *
						(_FilterData(LastReturnRates)[0] - m_rtnSignalRate)) /
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 8001ef2:	2264      	movs	r2, #100	; 0x64
 8001ef4:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f04:	e002      	b.n	8001f0c <_filter_Start+0x254>
	} else
		RateChange = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (RateChange > MaxReturnRateChangeFilterFlush) {
 8001f0c:	4b4e      	ldr	r3, [pc, #312]	; (8002048 <_filter_Start+0x390>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d902      	bls.n	8001f1e <_filter_Start+0x266>
		FlushFilter = 1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	}
	/* TODO optimize filter  using circular buffer */
	if (FlushFilter == 1) {
 8001f1e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d124      	bne.n	8001f70 <_filter_Start+0x2b8>
		_FilterData(MeasurementIndex) = 0;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	61da      	str	r2, [r3, #28]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001f32:	e015      	b.n	8001f60 <_filter_Start+0x2a8>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8001f34:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	3310      	adds	r3, #16
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f44:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 8001f46:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	330c      	adds	r3, #12
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001f56:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001f60:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f64:	2b09      	cmp	r3, #9
 8001f66:	d9e5      	bls.n	8001f34 <_filter_Start+0x27c>
		}
		_FilterData(MeasurementsSinceLastFlush)=0;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	621a      	str	r2, [r3, #32]
 8001f6e:	e02d      	b.n	8001fcc <_filter_Start+0x314>
	} else {
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 8001f70:	2309      	movs	r3, #9
 8001f72:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001f76:	e025      	b.n	8001fc4 <_filter_Start+0x30c>
			_FilterData(LastTrueRange)[i] = _FilterData(LastTrueRange)[i - 1];
 8001f78:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	3310      	adds	r3, #16
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	8898      	ldrh	r0, [r3, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	f101 0310 	add.w	r3, r1, #16
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	4602      	mov	r2, r0
 8001f98:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = _FilterData(LastReturnRates)[i - 1];
 8001f9a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f8b7 009c 	ldrh.w	r0, [r7, #156]	; 0x9c
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	68f9      	ldr	r1, [r7, #12]
 8001fb0:	f100 030c 	add.w	r3, r0, #12
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	609a      	str	r2, [r3, #8]
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 8001fba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001fc4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1d5      	bne.n	8001f78 <_filter_Start+0x2c0>
		}
	}

	if (ValidDistance == 1)
 8001fcc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d103      	bne.n	8001fdc <_filter_Start+0x324>
		_FilterData(LastTrueRange)[0] = m_trueRange_mm;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	897a      	ldrh	r2, [r7, #10]
 8001fd8:	849a      	strh	r2, [r3, #36]	; 0x24
 8001fda:	e003      	b.n	8001fe4 <_filter_Start+0x32c>
	else
		_FilterData(LastTrueRange)[0] = FILTER_INVALID_DISTANCE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe2:	849a      	strh	r2, [r3, #36]	; 0x24
	_FilterData(LastReturnRates)[0] = m_rtnSignalRate;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	639a      	str	r2, [r3, #56]	; 0x38
	_FilterData(MeasurementsSinceLastFlush)++;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	621a      	str	r2, [r3, #32]

	/* Check if we need to go through the filter or not */
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <_filter_Start+0x394>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	893a      	ldrh	r2, [r7, #8]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d203      	bcs.n	8002006 <_filter_Start+0x34e>
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002002:	429a      	cmp	r2, r3
 8002004:	d324      	bcc.n	8002050 <_filter_Start+0x398>
		(m_rtnSignalRate < WrapAroundLowReturnRateFilterLimit)) ||
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <_filter_Start+0x394>)
 8002008:	881b      	ldrh	r3, [r3, #0]
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 800200a:	893a      	ldrh	r2, [r7, #8]
 800200c:	429a      	cmp	r2, r3
 800200e:	d303      	bcc.n	8002018 <_filter_Start+0x360>
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002014:	429a      	cmp	r2, r3
 8002016:	d31b      	bcc.n	8002050 <_filter_Start+0x398>
		(m_rtnSignalRate < WrapAroundHighReturnRateFilterLimit))))
		bypassFilter = 1;
 8002018:	2301      	movs	r3, #1
 800201a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800201e:	e02d      	b.n	800207c <_filter_Start+0x3c4>
 8002020:	080052bc 	.word	0x080052bc
 8002024:	080052c0 	.word	0x080052c0
 8002028:	1a41a41b 	.word	0x1a41a41b
 800202c:	080052c4 	.word	0x080052c4
 8002030:	080052c8 	.word	0x080052c8
 8002034:	080052cc 	.word	0x080052cc
 8002038:	080052ce 	.word	0x080052ce
 800203c:	080052d0 	.word	0x080052d0
 8002040:	080052d4 	.word	0x080052d4
 8002044:	080052d8 	.word	0x080052d8
 8002048:	080052dc 	.word	0x080052dc
 800204c:	080052e0 	.word	0x080052e0
	else {
		/* if some wraparound filtering due to some ranging error code has been detected, update the filter status and bypass the filter */
		if(filterErrorCodeOnRangingErrorCode!=NoError){
 8002050:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002054:	2b00      	cmp	r3, #0
 8002056:	d011      	beq.n	800207c <_filter_Start+0x3c4>
#ifndef PRESERVE_DEVICE_ERROR_CODE
			filterErrorCode = filterErrorCodeOnRangingErrorCode;
#else
			if((errorCode==Raw_Ranging_Algo_Underflow) || (errorCode==Ranging_Algo_Underflow)) {
 8002058:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d003      	beq.n	8002068 <_filter_Start+0x3b0>
 8002060:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002064:	2b0e      	cmp	r3, #14
 8002066:	d103      	bne.n	8002070 <_filter_Start+0x3b8>
				/* Preserves the error codes except for Raw_Ranging_Algo_Underflow and Ranging_Algo_Underflow */
				filterErrorCode = filterErrorCodeOnRangingErrorCode;
 8002068:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800206c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
			}
#endif
			bypassFilter = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			resetVAVGData = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
		}
	}

	/* Check which kind of measurement has been made */
	status = VL6180x_RdByte(dev, 0x01AC, &u8);
 800207c:	f107 0317 	add.w	r3, r7, #23
 8002080:	461a      	mov	r2, r3
 8002082:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fe0b 	bl	8002ca2 <VL6180x_RdByte>
 800208c:	6338      	str	r0, [r7, #48]	; 0x30
	if (status) {
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	2b00      	cmp	r3, #0
 8002092:	f040 82ba 	bne.w	800260a <_filter_Start+0x952>
		VL6180x_ErrLog("0x01AC rd fail");
		goto done_err;
	}
	registerValue = u8;
 8002096:	7dfb      	ldrb	r3, [r7, #23]
 8002098:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Read data for filtering */
#if VL6180x_HAVE_MULTI_READ
	status = VL6180x_RdMulti(dev, 0x10C, MultiReadBuf, 8); /* read only 8 lsb bits */
 800209a:	f107 0218 	add.w	r2, r7, #24
 800209e:	2308      	movs	r3, #8
 80020a0:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 fea4 	bl	8002df2 <VL6180x_RdMulti>
 80020aa:	6338      	str	r0, [r7, #48]	; 0x30
	if (status) {
 80020ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 82ad 	bne.w	800260e <_filter_Start+0x956>
		VL6180x_ErrLog("0x10C multi rd fail");
		goto done_err;
	}
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 80020b4:	7e3b      	ldrb	r3, [r7, #24]
 80020b6:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[1] << 16)
 80020b8:	7e7b      	ldrb	r3, [r7, #25]
 80020ba:	041b      	lsls	r3, r3, #16
 80020bc:	441a      	add	r2, r3
			+ ((uint32_t) MultiReadBuf[2] << 8)
 80020be:	7ebb      	ldrb	r3, [r7, #26]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	4413      	add	r3, r2
			+ ((uint32_t) MultiReadBuf[3] << 0);
 80020c4:	7efa      	ldrb	r2, [r7, #27]
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 80020c6:	4413      	add	r3, r2
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 80020ca:	7f3b      	ldrb	r3, [r7, #28]
 80020cc:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[5] << 16)
 80020ce:	7f7b      	ldrb	r3, [r7, #29]
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	441a      	add	r2, r3
			+ ((uint32_t) MultiReadBuf[6] << 8)
 80020d4:	7fbb      	ldrb	r3, [r7, #30]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	4413      	add	r3, r2
			+ ((uint32_t) MultiReadBuf[7] << 0);
 80020da:	7ffa      	ldrb	r2, [r7, #31]
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 80020dc:	4413      	add	r3, r2
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
		goto done_err;
	}
#endif


	if ((FlushFilter == 1) || ((bypassFilter == 1) && (resetVAVGData == 1))) {
 80020e0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d007      	beq.n	80020f8 <_filter_Start+0x440>
 80020e8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d121      	bne.n	8002134 <_filter_Start+0x47c>
 80020f0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d11d      	bne.n	8002134 <_filter_Start+0x47c>
		if (registerValue != 0x3E) {
 80020f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020fa:	2b3e      	cmp	r3, #62	; 0x3e
 80020fc:	d00a      	beq.n	8002114 <_filter_Start+0x45c>
			status = VL6180x_WrByte(dev, 0x1AC, 0x3E);
 80020fe:	223e      	movs	r2, #62	; 0x3e
 8002100:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 fcfd 	bl	8002b04 <VL6180x_WrByte>
 800210a:	6338      	str	r0, [r7, #48]	; 0x30
			if (status) {
 800210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 827f 	bne.w	8002612 <_filter_Start+0x95a>
			//	VL6180x_ErrLog("0x0F2 bypass wr fail");
			//	goto done_err;
			//}
		}
		/* Set both Default and NoDelay To same value */
		_FilterData(Default_ZeroVal) = register32BitsValue1;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002118:	665a      	str	r2, [r3, #100]	; 0x64
		_FilterData(Default_VAVGVal) = register32BitsValue2;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211e:	669a      	str	r2, [r3, #104]	; 0x68
		_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002124:	66da      	str	r2, [r3, #108]	; 0x6c
		_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212a:	671a      	str	r2, [r3, #112]	; 0x70

		_FilterData(MeasurementIndex) = 0;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
 8002132:	e030      	b.n	8002196 <_filter_Start+0x4de>
	} else {
		if (registerValue == 0x3E) {
 8002134:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002136:	2b3e      	cmp	r3, #62	; 0x3e
 8002138:	d106      	bne.n	8002148 <_filter_Start+0x490>
			_FilterData(Default_ZeroVal) = register32BitsValue1;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800213e:	665a      	str	r2, [r3, #100]	; 0x64
			_FilterData(Default_VAVGVal) = register32BitsValue2;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002144:	669a      	str	r2, [r3, #104]	; 0x68
 8002146:	e005      	b.n	8002154 <_filter_Start+0x49c>
		} else {
			_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800214c:	66da      	str	r2, [r3, #108]	; 0x6c
			_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002152:	671a      	str	r2, [r3, #112]	; 0x70
		}

		if (_FilterData(MeasurementIndex) % WrapAroundNoDelayCheckPeriod == 0) {
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	4a7f      	ldr	r2, [pc, #508]	; (8002358 <_filter_Start+0x6a0>)
 800215a:	8812      	ldrh	r2, [r2, #0]
 800215c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002160:	fb01 f202 	mul.w	r2, r1, r2
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <_filter_Start+0x4b8>
			u8 = 0x3C;
 800216a:	233c      	movs	r3, #60	; 0x3c
 800216c:	75fb      	strb	r3, [r7, #23]
 800216e:	e001      	b.n	8002174 <_filter_Start+0x4bc>
			//u8_2 = 0x05;
		} else {
			u8 = 0x3E;
 8002170:	233e      	movs	r3, #62	; 0x3e
 8002172:	75fb      	strb	r3, [r7, #23]
			//u8_2 = 0x01;
		}
		status = VL6180x_WrByte(dev, 0x01AC, u8);
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	461a      	mov	r2, r3
 8002178:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fcc1 	bl	8002b04 <VL6180x_WrByte>
 8002182:	6338      	str	r0, [r7, #48]	; 0x30
		if (status) {
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 8245 	bne.w	8002616 <_filter_Start+0x95e>
		//status = VL6180x_WrByte(dev, 0x0F2, u8_2);
		//if (status) {
		//	VL6180x_ErrLog("0x0F2  wr fail");
		//	goto done_err;
		//}
		_FilterData(MeasurementIndex)++;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	61da      	str	r2, [r3, #28]
	}

	if (bypassFilter == 1) {
 8002196:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800219a:	2b01      	cmp	r3, #1
 800219c:	d10d      	bne.n	80021ba <_filter_Start+0x502>
		/* Do not go through the filter */

		/* Update filter error code */
		_FilterData(filterError) = filterErrorCode;
 800219e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	67da      	str	r2, [r3, #124]	; 0x7c

		/* Update reported range */
		if(filterErrorCode==RangingFiltered)
 80021a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80021aa:	2b10      	cmp	r3, #16
 80021ac:	d102      	bne.n	80021b4 <_filter_Start+0x4fc>
			m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 80021ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

		return m_newTrueRange_mm;
 80021b4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80021b8:	e230      	b.n	800261c <_filter_Start+0x964>
	}

	/* Computes current VAVGDiff */
	if (_FilterData(Default_VAVGVal) > _FilterData(NoDelay_VAVGVal))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d906      	bls.n	80021d4 <_filter_Start+0x51c>
		VAVGDiff = _FilterData(Default_VAVGVal) - _FilterData(NoDelay_VAVGVal);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	663b      	str	r3, [r7, #96]	; 0x60
 80021d2:	e001      	b.n	80021d8 <_filter_Start+0x520>
	else
		VAVGDiff = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	663b      	str	r3, [r7, #96]	; 0x60
	_FilterData(Previous_VAVGDiff) = VAVGDiff;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021dc:	675a      	str	r2, [r3, #116]	; 0x74

	if(SuspicuousRangingZone==0)
 80021de:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <_filter_Start+0x536>
		MAX_VAVGDiff = MAX_VAVGDiff_ROM;
 80021e6:	4b5d      	ldr	r3, [pc, #372]	; (800235c <_filter_Start+0x6a4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	657b      	str	r3, [r7, #84]	; 0x54
 80021ec:	e006      	b.n	80021fc <_filter_Start+0x544>
	else
		/* In suspicuous area, strengthen the filter */
		MAX_VAVGDiff = MAX_VAVGDiff_ROM / SuspicuousMAX_VAVGDiffRatio;
 80021ee:	4b5b      	ldr	r3, [pc, #364]	; (800235c <_filter_Start+0x6a4>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <_filter_Start+0x6a8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check the VAVGDiff */
	if (_FilterData(Default_ZeroVal) > _FilterData(NoDelay_ZeroVal))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002204:	429a      	cmp	r2, r3
 8002206:	d906      	bls.n	8002216 <_filter_Start+0x55e>
		IdealVAVGDiff = _FilterData(Default_ZeroVal) - _FilterData(NoDelay_ZeroVal);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002214:	e005      	b.n	8002222 <_filter_Start+0x56a>
	else
		IdealVAVGDiff = _FilterData(NoDelay_ZeroVal) - _FilterData(Default_ZeroVal);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (IdealVAVGDiff > MAX_VAVGDiff)
 8002222:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002226:	429a      	cmp	r2, r3
 8002228:	d904      	bls.n	8002234 <_filter_Start+0x57c>
		MinVAVGDiff = IdealVAVGDiff - MAX_VAVGDiff;
 800222a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800222c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	65bb      	str	r3, [r7, #88]	; 0x58
 8002232:	e001      	b.n	8002238 <_filter_Start+0x580>
	else
		MinVAVGDiff = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	65bb      	str	r3, [r7, #88]	; 0x58
	MaxVAVGDiff = IdealVAVGDiff + MAX_VAVGDiff;
 8002238:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800223a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223c:	4413      	add	r3, r2
 800223e:	623b      	str	r3, [r7, #32]
	if (VAVGDiff < MinVAVGDiff || VAVGDiff > MaxVAVGDiff) {
 8002240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002244:	429a      	cmp	r2, r3
 8002246:	d303      	bcc.n	8002250 <_filter_Start+0x598>
 8002248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	429a      	cmp	r2, r3
 800224e:	d906      	bls.n	800225e <_filter_Start+0x5a6>
		WrapAroundFlag = 1;
 8002250:	2301      	movs	r3, #1
 8002252:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		filterErrorCode = RangingFiltered;
 8002256:	2310      	movs	r3, #16
 8002258:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800225c:	e149      	b.n	80024f2 <_filter_Start+0x83a>
	} else {
		/* Go through filtering check */

		if(_FilterData(MeasurementIndex)<=1)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d803      	bhi.n	800226e <_filter_Start+0x5b6>
			/* On measurement after a bypass, uses an increase number of samples */
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES_AFTER_FLUSH_OR_BYPASS;
 8002266:	2305      	movs	r3, #5
 8002268:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800226c:	e002      	b.n	8002274 <_filter_Start+0x5bc>
		else
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES;
 800226e:	2303      	movs	r3, #3
 8002270:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

		/* StdDevLimit Damper on SNR */
		StdDevLimit = _filter_StdDevDamper(m_rtnAmbientRate, m_rtnSignalRate, StdDevLimitLowLight, StdDevLimitLowLightSNR, StdDevLimitHighLight, StdDevLimitHighLightSNR);
 8002274:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <_filter_Start+0x6ac>)
 8002276:	6819      	ldr	r1, [r3, #0]
 8002278:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <_filter_Start+0x6b0>)
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	4b3b      	ldr	r3, [pc, #236]	; (800236c <_filter_Start+0x6b4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a3b      	ldr	r2, [pc, #236]	; (8002370 <_filter_Start+0x6b8>)
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	9201      	str	r2, [sp, #4]
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4603      	mov	r3, r0
 800228a:	460a      	mov	r2, r1
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8002292:	f7ff fcd6 	bl	8001c42 <_filter_StdDevDamper>
 8002296:	6538      	str	r0, [r7, #80]	; 0x50

		/* Standard deviations computations */
		StdDevSamples = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		StdDevDistanceSum = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevDistanceMean = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	67bb      	str	r3, [r7, #120]	; 0x78
		StdDevDistance = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	677b      	str	r3, [r7, #116]	; 0x74
		StdDevRateSum = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	673b      	str	r3, [r7, #112]	; 0x70
		StdDevRateMean = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	66fb      	str	r3, [r7, #108]	; 0x6c
		StdDevRate = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80022bc:	e029      	b.n	8002312 <_filter_Start+0x65a>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 80022be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	3310      	adds	r3, #16
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	889b      	ldrh	r3, [r3, #4]
 80022cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d019      	beq.n	8002308 <_filter_Start+0x650>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 80022d4:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80022d8:	3301      	adds	r3, #1
 80022da:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 80022de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	3310      	adds	r3, #16
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	889b      	ldrh	r3, [r3, #4]
 80022ec:	461a      	mov	r2, r3
 80022ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022f0:	4413      	add	r3, r2
 80022f2:	67fb      	str	r3, [r7, #124]	; 0x7c
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 80022f4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	330c      	adds	r3, #12
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002304:	4413      	add	r3, r2
 8002306:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002308:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800230c:	3301      	adds	r3, #1
 800230e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002312:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002316:	2b09      	cmp	r3, #9
 8002318:	d803      	bhi.n	8002322 <_filter_Start+0x66a>
 800231a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800231e:	2b05      	cmp	r3, #5
 8002320:	d9cd      	bls.n	80022be <_filter_Start+0x606>
			}
		}
		if (StdDevSamples > 0) {
 8002322:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <_filter_Start+0x68a>
			StdDevDistanceMean = (uint32_t) (StdDevDistanceSum / StdDevSamples);
 800232a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800232e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	67bb      	str	r3, [r7, #120]	; 0x78
			StdDevRateMean = (uint32_t) (StdDevRateSum / StdDevSamples);
 8002336:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800233a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		/* TODO optimize shorten Std dev in aisngle loop computation using sum of x2 - (sum of x)2 */
		StdDevSamples = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		StdDevDistanceSum = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevRateSum = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002350:	2300      	movs	r3, #0
 8002352:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002356:	e056      	b.n	8002406 <_filter_Start+0x74e>
 8002358:	080052e2 	.word	0x080052e2
 800235c:	080052e4 	.word	0x080052e4
 8002360:	080052e8 	.word	0x080052e8
 8002364:	080052ec 	.word	0x080052ec
 8002368:	080052f0 	.word	0x080052f0
 800236c:	080052f4 	.word	0x080052f4
 8002370:	080052f8 	.word	0x080052f8
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8002374:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	3310      	adds	r3, #16
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	889b      	ldrh	r3, [r3, #4]
 8002382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002386:	4293      	cmp	r3, r2
 8002388:	d038      	beq.n	80023fc <_filter_Start+0x744>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 800238a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800238e:	3301      	adds	r3, #1
 8002390:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
									(int)(_FilterData(LastTrueRange)[i] -
 8002394:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	3310      	adds	r3, #16
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	889b      	ldrh	r3, [r3, #4]
 80023a2:	461a      	mov	r2, r3
 80023a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	4619      	mov	r1, r3
											StdDevDistanceMean) *
											(int) (_FilterData(LastTrueRange)[i] -
 80023aa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	3310      	adds	r3, #16
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	889b      	ldrh	r3, [r3, #4]
 80023b8:	461a      	mov	r2, r3
 80023ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023bc:	1ad3      	subs	r3, r2, r3
											StdDevDistanceMean) *
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	461a      	mov	r2, r3
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 80023c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023c6:	4413      	add	r3, r2
 80023c8:	67fb      	str	r3, [r7, #124]	; 0x7c
													StdDevDistanceMean));
				StdDevRateSum = (uint32_t) (StdDevRateSum +
									(int) (_FilterData(LastReturnRates)[i] -
 80023ca:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	330c      	adds	r3, #12
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	4619      	mov	r1, r3
											StdDevRateMean) *
											(int) (_FilterData(LastReturnRates)[i] -
 80023de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	330c      	adds	r3, #12
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ee:	1ad3      	subs	r3, r2, r3
											StdDevRateMean) *
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	461a      	mov	r2, r3
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 80023f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023f8:	4413      	add	r3, r2
 80023fa:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 80023fc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002400:	3301      	adds	r3, #1
 8002402:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002406:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800240a:	2b09      	cmp	r3, #9
 800240c:	d803      	bhi.n	8002416 <_filter_Start+0x75e>
 800240e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002412:	2b05      	cmp	r3, #5
 8002414:	d9ae      	bls.n	8002374 <_filter_Start+0x6bc>
													StdDevRateMean));
			}
		}
		if (StdDevSamples >= StdDevSamplesMinNeeded) {
 8002416:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800241a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800241e:	429a      	cmp	r2, r3
 8002420:	d30e      	bcc.n	8002440 <_filter_Start+0x788>
			StdDevDistance = (uint16_t) (StdDevDistanceSum / StdDevSamples);
 8002422:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002426:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	b29b      	uxth	r3, r3
 800242e:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = (uint16_t) (StdDevRateSum / StdDevSamples);
 8002430:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002434:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	b29b      	uxth	r3, r3
 800243c:	66bb      	str	r3, [r7, #104]	; 0x68
 800243e:	e003      	b.n	8002448 <_filter_Start+0x790>
		} else {
			StdDevDistance = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		/* Check Return rate standard deviation */
		if (StdDevRate < StdDevMovingTargetStdDevLimit) {
 8002448:	4b76      	ldr	r3, [pc, #472]	; (8002624 <_filter_Start+0x96c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800244e:	429a      	cmp	r2, r3
 8002450:	d249      	bcs.n	80024e6 <_filter_Start+0x82e>
			if (StdDevSamples < StdDevSamplesMinNeeded) {
 8002452:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8002456:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800245a:	429a      	cmp	r2, r3
 800245c:	d203      	bcs.n	8002466 <_filter_Start+0x7ae>
				//m_newTrueRange_mm = MaxOrInvalidDistance;
				filterErrorCode = RangingFiltered;
 800245e:	2310      	movs	r3, #16
 8002460:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002464:	e045      	b.n	80024f2 <_filter_Start+0x83a>
			} else {
				/* Check distance standard deviation */
				if (StdDevRate < StdDevMovingTargetReturnRateLimit)
 8002466:	4b70      	ldr	r3, [pc, #448]	; (8002628 <_filter_Start+0x970>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800246c:	429a      	cmp	r2, r3
 800246e:	d20e      	bcs.n	800248e <_filter_Start+0x7d6>
					StdDevLimitWithTargetMove = StdDevLimit +
						(((StdDevMovingTargetStdDevForReturnRateLimit -
 8002470:	4b6e      	ldr	r3, [pc, #440]	; (800262c <_filter_Start+0x974>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002476:	1ad3      	subs	r3, r2, r3
							StdDevLimit) * StdDevRate) /
 8002478:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800247a:	fb03 f202 	mul.w	r2, r3, r2
 800247e:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <_filter_Start+0x970>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
					StdDevLimitWithTargetMove = StdDevLimit +
 8002486:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002488:	4413      	add	r3, r2
 800248a:	667b      	str	r3, [r7, #100]	; 0x64
 800248c:	e002      	b.n	8002494 <_filter_Start+0x7dc>
							StdDevMovingTargetReturnRateLimit);
				else
					StdDevLimitWithTargetMove = StdDevMovingTargetStdDevForReturnRateLimit;
 800248e:	4b67      	ldr	r3, [pc, #412]	; (800262c <_filter_Start+0x974>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	667b      	str	r3, [r7, #100]	; 0x64

				if(_FilterData(filterError)==NoError){
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002498:	2b00      	cmp	r3, #0
 800249a:	d105      	bne.n	80024a8 <_filter_Start+0x7f0>
					/* No wrapAround detected yet, so relax constraints on the std dev */
					StdDevLimitWithTargetMove = StdDevLimitWithTargetMove * StdDevNoWrapDetectedMultiplier;
 800249c:	4b64      	ldr	r3, [pc, #400]	; (8002630 <_filter_Start+0x978>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	667b      	str	r3, [r7, #100]	; 0x64
				}

				if (((StdDevDistance * StdDevHighConfidenceSNRLimit) < StdDevLimit) && (StdDevSamples>=FILTER_STDDEV_SAMPLES)) {
 80024a8:	4b62      	ldr	r3, [pc, #392]	; (8002634 <_filter_Start+0x97c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d907      	bls.n	80024c8 <_filter_Start+0x810>
 80024b8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d903      	bls.n	80024c8 <_filter_Start+0x810>
					NoWrapAroundHighConfidenceFlag = 1;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80024c6:	e014      	b.n	80024f2 <_filter_Start+0x83a>
				} else {
					if (StdDevDistance < StdDevLimitWithTargetMove) {
 80024c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d203      	bcs.n	80024d8 <_filter_Start+0x820>
							NoWrapAroundFlag = 1;
 80024d0:	2301      	movs	r3, #1
 80024d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80024d6:	e00c      	b.n	80024f2 <_filter_Start+0x83a>
						} else {
						WrapAroundFlag = 1;
 80024d8:	2301      	movs	r3, #1
 80024da:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
						filterErrorCode = RangingFiltered;
 80024de:	2310      	movs	r3, #16
 80024e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80024e4:	e005      	b.n	80024f2 <_filter_Start+0x83a>
					}
				}
			}
		} else {
			/* Target moving too fast */
			WrapAroundFlag = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			filterErrorCode = RangingFiltered;
 80024ec:	2310      	movs	r3, #16
 80024ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		}
	}

	if (ValidDistance == 0) {
 80024f2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <_filter_Start+0x85e>
		/* In case of invalid distance */
		if (_FilterData(StdFilteredReads) > 0)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002500:	2b00      	cmp	r3, #0
 8002502:	d04e      	beq.n	80025a2 <_filter_Start+0x8ea>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) - 1);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002514:	e045      	b.n	80025a2 <_filter_Start+0x8ea>
	} else {
		if (WrapAroundFlag == 1) {
 8002516:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800251a:	2b01      	cmp	r3, #1
 800251c:	d116      	bne.n	800254c <_filter_Start+0x894>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) +
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002524:	4b44      	ldr	r3, [pc, #272]	; (8002638 <_filter_Start+0x980>)
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	4413      	add	r3, r2
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
											StdFilteredReadsIncrement);
			if (_FilterData(StdFilteredReads) > StdMaxFilteredReads)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002538:	4b40      	ldr	r3, [pc, #256]	; (800263c <_filter_Start+0x984>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d930      	bls.n	80025a2 <_filter_Start+0x8ea>
				_FilterData(StdFilteredReads) = StdMaxFilteredReads;
 8002540:	4b3e      	ldr	r3, [pc, #248]	; (800263c <_filter_Start+0x984>)
 8002542:	881a      	ldrh	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800254a:	e02a      	b.n	80025a2 <_filter_Start+0x8ea>
		} else {
			if (NoWrapAroundFlag == 1) {
 800254c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002550:	2b01      	cmp	r3, #1
 8002552:	d11e      	bne.n	8002592 <_filter_Start+0x8da>
				if (_FilterData(StdFilteredReads) > 0) {
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800255a:	2b00      	cmp	r3, #0
 800255c:	d021      	beq.n	80025a2 <_filter_Start+0x8ea>
					filterErrorCode = RangingFiltered;
 800255e:	2310      	movs	r3, #16
 8002560:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					if (_FilterData(StdFilteredReads) > StdFilteredReadsDecrement)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800256a:	4b35      	ldr	r3, [pc, #212]	; (8002640 <_filter_Start+0x988>)
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d90a      	bls.n	8002588 <_filter_Start+0x8d0>
						_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) -
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <_filter_Start+0x988>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002586:	e00c      	b.n	80025a2 <_filter_Start+0x8ea>
														StdFilteredReadsDecrement);
					else
						_FilterData(StdFilteredReads) = 0;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002590:	e007      	b.n	80025a2 <_filter_Start+0x8ea>
				}
			} else {
				if (NoWrapAroundHighConfidenceFlag == 1) {
 8002592:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002596:	2b01      	cmp	r3, #1
 8002598:	d103      	bne.n	80025a2 <_filter_Start+0x8ea>
					_FilterData(StdFilteredReads) = 0;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	}

	/* If we detect a change from no Error to RangingFilteringOnGoing, then it means that
	 * the filter detected a change in te scene, so discard all previous measurements.
	 */
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d121      	bne.n	80025ee <_filter_Start+0x936>
 80025aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01d      	beq.n	80025ee <_filter_Start+0x936>
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 80025b2:	2301      	movs	r3, #1
 80025b4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80025b8:	e015      	b.n	80025e6 <_filter_Start+0x92e>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 80025ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	3310      	adds	r3, #16
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ca:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 80025cc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	330c      	adds	r3, #12
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 80025dc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80025e0:	3301      	adds	r3, #1
 80025e2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80025e6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	d9e5      	bls.n	80025ba <_filter_Start+0x902>
		}
	}

	/* Update filter error code */
	_FilterData(filterError) = filterErrorCode;
 80025ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	67da      	str	r2, [r3, #124]	; 0x7c

	/* Update reported range */
	if(filterErrorCode==RangingFiltered)
 80025f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d102      	bne.n	8002604 <_filter_Start+0x94c>
		m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 80025fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002600:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	return m_newTrueRange_mm;
 8002604:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002608:	e008      	b.n	800261c <_filter_Start+0x964>
		goto done_err;
 800260a:	bf00      	nop
 800260c:	e004      	b.n	8002618 <_filter_Start+0x960>
		goto done_err;
 800260e:	bf00      	nop
 8002610:	e002      	b.n	8002618 <_filter_Start+0x960>
				goto done_err;
 8002612:	bf00      	nop
 8002614:	e000      	b.n	8002618 <_filter_Start+0x960>
			goto done_err;
 8002616:	bf00      	nop
done_err:
	return -1;
 8002618:	f04f 33ff 	mov.w	r3, #4294967295

#undef MaxOrInvalidDistance
}
 800261c:	4618      	mov	r0, r3
 800261e:	37a0      	adds	r7, #160	; 0xa0
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	080052fc 	.word	0x080052fc
 8002628:	08005300 	.word	0x08005300
 800262c:	08005304 	.word	0x08005304
 8002630:	08005308 	.word	0x08005308
 8002634:	0800530c 	.word	0x0800530c
 8002638:	08005310 	.word	0x08005310
 800263c:	08005312 	.word	0x08005312
 8002640:	08005314 	.word	0x08005314

08002644 <_filter_GetResult>:


static int _filter_GetResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b08b      	sub	sp, #44	; 0x2c
 8002648:	af02      	add	r7, sp, #8
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
	uint32_t m_rawRange_mm = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
	int32_t  FilteredRange;
	const uint8_t scaler = _GetUpscale(dev);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	7e1b      	ldrb	r3, [r3, #24]
 8002656:	75fb      	strb	r3, [r7, #23]
	uint8_t u8;
	int status;

	do {
		status = VL6180x_GetCachedByte(dev, RESULT_RANGE_RAW, &u8);
 8002658:	f107 030f 	add.w	r3, r7, #15
 800265c:	461a      	mov	r2, r3
 800265e:	2164      	movs	r1, #100	; 0x64
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7fe fe58 	bl	8001316 <VL6180x_GetCachedByte>
 8002666:	61f8      	str	r0, [r7, #28]
		if (status) {
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d133      	bne.n	80026d6 <_filter_GetResult+0x92>
		    VL6180x_ErrLog("RESULT_RANGE_RAW rd fail");
		    break;
		}
		m_rawRange_mm = u8;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	61bb      	str	r3, [r7, #24]

		FilteredRange = _filter_Start(dev, pRangeData->range_mm, (m_rawRange_mm * scaler), pRangeData->rtnRate, pRangeData->rtnAmbRate, pRangeData->errorStatus);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	b299      	uxth	r1, r3
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	b29b      	uxth	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	b292      	uxth	r2, r2
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	b298      	uxth	r0, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	691c      	ldr	r4, [r3, #16]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	6892      	ldr	r2, [r2, #8]
 8002692:	b292      	uxth	r2, r2
 8002694:	9201      	str	r2, [sp, #4]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	4623      	mov	r3, r4
 800269a:	4602      	mov	r2, r0
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff fb0b 	bl	8001cb8 <_filter_Start>
 80026a2:	6138      	str	r0, [r7, #16]
		if (FilteredRange < 0) {
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	da03      	bge.n	80026b2 <_filter_GetResult+0x6e>
		    status = -1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	61fb      	str	r3, [r7, #28]
		    break;
 80026b0:	e012      	b.n	80026d8 <_filter_GetResult+0x94>
		}
		pRangeData->FilteredData.range_mm = FilteredRange;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	841a      	strh	r2, [r3, #32]
		pRangeData->FilteredData.rawRange_mm = m_rawRange_mm * scaler;
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	b292      	uxth	r2, r2
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	845a      	strh	r2, [r3, #34]	; 0x22
		pRangeData->FilteredData.filterError= _FilterData(filterError);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
 80026d4:	e000      	b.n	80026d8 <_filter_GetResult+0x94>
		    break;
 80026d6:	bf00      	nop
	} while (0);
	return status;
 80026d8:	69fb      	ldr	r3, [r7, #28]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd90      	pop	{r4, r7, pc}

080026e2 <_GetRateResult>:
#endif /* VL6180x_WRAP_AROUND_FILTER_SUPPORT */

#ifdef VL6180x_HAVE_RATE_DATA

static int _GetRateResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b08c      	sub	sp, #48	; 0x30
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
	uint32_t m_rtnConvTime = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
	uint32_t m_rtnSignalRate = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t m_rtnAmbientRate = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	623b      	str	r3, [r7, #32]
	uint32_t m_rtnSignalCount = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	613b      	str	r3, [r7, #16]
	uint32_t m_rtnAmbientCount = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
	uint32_t m_refConvTime = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
	uint32_t cRtnSignalCountMax = 0x7FFFFFFF;
 8002704:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002708:	61fb      	str	r3, [r7, #28]
	uint32_t cDllPeriods = 6;
 800270a:	2306      	movs	r3, #6
 800270c:	61bb      	str	r3, [r7, #24]
	uint32_t calcConvTime = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c

	int status;

	do {
		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_SIGNAL_COUNT, &m_rtnSignalCount);
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	461a      	mov	r2, r3
 8002718:	216c      	movs	r1, #108	; 0x6c
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe fd8a 	bl	8001234 <VL6180x_GetCachedDWord>
 8002720:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	d156      	bne.n	80027d6 <_GetRateResult+0xf4>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_SIGNAL_COUNT rd fail");
			break;
		}
		if (m_rtnSignalCount > cRtnSignalCountMax) {
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	429a      	cmp	r2, r3
 800272e:	d201      	bcs.n	8002734 <_GetRateResult+0x52>
			m_rtnSignalCount = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_AMB_COUNT, &m_rtnAmbientCount);
 8002734:	f107 030c 	add.w	r3, r7, #12
 8002738:	461a      	mov	r2, r3
 800273a:	2174      	movs	r1, #116	; 0x74
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7fe fd79 	bl	8001234 <VL6180x_GetCachedDWord>
 8002742:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	2b00      	cmp	r3, #0
 8002748:	d147      	bne.n	80027da <_GetRateResult+0xf8>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_AMB_COUNTrd fail");
			break;
		}


		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_CONV_TIME, &m_rtnConvTime);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	461a      	mov	r2, r3
 8002750:	217c      	movs	r1, #124	; 0x7c
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7fe fd6e 	bl	8001234 <VL6180x_GetCachedDWord>
 8002758:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	2b00      	cmp	r3, #0
 800275e:	d13e      	bne.n	80027de <_GetRateResult+0xfc>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_CONV_TIME rd fail");
			break;
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_REFERENCE_CONV_TIME, &m_refConvTime);
 8002760:	f107 0308 	add.w	r3, r7, #8
 8002764:	461a      	mov	r2, r3
 8002766:	2180      	movs	r1, #128	; 0x80
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7fe fd63 	bl	8001234 <VL6180x_GetCachedDWord>
 800276e:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	2b00      	cmp	r3, #0
 8002774:	d135      	bne.n	80027e2 <_GetRateResult+0x100>
			VL6180x_ErrLog("RESULT_RANGE_REFERENCE_CONV_TIME rd fail");
			break;
		}

		pRangeData->rtnConvTime = m_rtnConvTime;
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	615a      	str	r2, [r3, #20]
		pRangeData->refConvTime = m_refConvTime;
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	619a      	str	r2, [r3, #24]

		calcConvTime = m_refConvTime;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (m_rtnConvTime > m_refConvTime) {
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	429a      	cmp	r2, r3
 800278c:	d901      	bls.n	8002792 <_GetRateResult+0xb0>
			calcConvTime = m_rtnConvTime;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if (calcConvTime == 0)
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <_GetRateResult+0xbc>
			calcConvTime = 63000;
 8002798:	f24f 6318 	movw	r3, #63000	; 0xf618
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c

		m_rtnSignalRate = (m_rtnSignalCount * 1000) / calcConvTime;
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027a4:	fb03 f202 	mul.w	r2, r3, r2
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
		m_rtnAmbientRate = (m_rtnAmbientCount * cDllPeriods * 1000) / calcConvTime;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	fb02 f303 	mul.w	r3, r2, r3
 80027b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027bc:	fb03 f202 	mul.w	r2, r3, r2
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c6:	623b      	str	r3, [r7, #32]

		pRangeData->rtnRate = m_rtnSignalRate;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	611a      	str	r2, [r3, #16]
		pRangeData->rtnAmbRate = m_rtnAmbientRate;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6a3a      	ldr	r2, [r7, #32]
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	e006      	b.n	80027e4 <_GetRateResult+0x102>
			break;
 80027d6:	bf00      	nop
 80027d8:	e004      	b.n	80027e4 <_GetRateResult+0x102>
			break;
 80027da:	bf00      	nop
 80027dc:	e002      	b.n	80027e4 <_GetRateResult+0x102>
			break;
 80027de:	bf00      	nop
 80027e0:	e000      	b.n	80027e4 <_GetRateResult+0x102>
			break;
 80027e2:	bf00      	nop


	} while (0);
	return status;
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3730      	adds	r7, #48	; 0x30
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <VL6180x_SqrtUint32>:
/*
 * 32 bit integer square root with not so bad precision (integer result) and is quite fast
 * see http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
 */
uint32_t VL6180x_SqrtUint32(uint32_t num)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
	uint32_t res = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
	uint32_t bit = 1 << 30; /* The second-to-top bit is set: 1 << 30 for 32 bits */
 80027fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027fe:	60bb      	str	r3, [r7, #8]

	/* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8002800:	e002      	b.n	8002808 <VL6180x_SqrtUint32+0x1a>
		bit >>= 2;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	429a      	cmp	r2, r3
 800280e:	d8f8      	bhi.n	8002802 <VL6180x_SqrtUint32+0x14>

	while (bit != 0) {
 8002810:	e017      	b.n	8002842 <VL6180x_SqrtUint32+0x54>
		if (num >= res + bit) {
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4413      	add	r3, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	d30b      	bcc.n	8002836 <VL6180x_SqrtUint32+0x48>
		    num -= res + bit;
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4413      	add	r3, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	607b      	str	r3, [r7, #4]
		    res = (res >> 1) + bit;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	4413      	add	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	e002      	b.n	800283c <VL6180x_SqrtUint32+0x4e>
		} else
		    res >>= 1;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
		bit >>= 2;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e4      	bne.n	8002812 <VL6180x_SqrtUint32+0x24>
	}
	return res;
 8002848:	68fb      	ldr	r3, [r7, #12]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <_DMax_OneTimeInit>:
#endif


/* DMax one time init */
void _DMax_OneTimeInit(VL6180xDev_t dev)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	_DMaxData(ambTuningWindowFactor_K) = DEF_AMBIENT_TUNING;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2250      	movs	r2, #80	; 0x50
 8002860:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
	...

08002870 <_DMax_RawValueAtRateKCps>:


static uint32_t _DMax_RawValueAtRateKCps(VL6180xDev_t dev, int32_t rate)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
	uint32_t RawDMax;
	DMaxFix_t retSignalAt400mm;
	uint32_t ambTuningWindowFactor_K;


	ambTuningWindowFactor_K = _DMaxData(ambTuningWindowFactor_K);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002880:	617b      	str	r3, [r7, #20]
	snrLimit_K              = _DMaxData(snrLimit_K);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002888:	613b      	str	r3, [r7, #16]
	retSignalAt400mm        = _DMaxData(retSignalAt400mm);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002890:	60fb      	str	r3, [r7, #12]
	/* 12 to 18 bits Kcps */
	if (rate > 0) {
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	dd2c      	ble.n	80028f2 <_DMax_RawValueAtRateKCps+0x82>
		DMaxSq = 400 * 400 * 1000 / rate - (400 * 400 / 330);
 8002898:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <_DMax_RawValueAtRateKCps+0x94>)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	fb92 f3f3 	sdiv	r3, r2, r3
 80028a0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80028a4:	61fb      	str	r3, [r7, #28]
		/* K of (1/RtnAmb -1/330 )=> 30bit- (12-18)bit  => 12-18 bits*/
		if (DMaxSq <= 0) {
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	dc02      	bgt.n	80028b2 <_DMax_RawValueAtRateKCps+0x42>
		    RawDMax = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	e022      	b.n	80028f8 <_DMax_RawValueAtRateKCps+0x88>
		} else {
		    /* value can be more 32 bit so base on raneg apply
			 * retSignalAt400mm before or after division to presevr accuracy */
		    if (DMaxSq < (2 << 12)) {
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b8:	da0b      	bge.n	80028d2 <_DMax_RawValueAtRateKCps+0x62>
				DMaxSq = DMaxSq * retSignalAt400mm /
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	4619      	mov	r1, r3
							(snrLimit_K + ambTuningWindowFactor_K);
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	4413      	add	r3, r2
				DMaxSq = DMaxSq * retSignalAt400mm /
 80028ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	e009      	b.n	80028e6 <_DMax_RawValueAtRateKCps+0x76>
				/* max 12 + 12 to 18 -10 => 12-26 bit */
		    } else {
				DMaxSq = DMaxSq / (snrLimit_K + ambTuningWindowFactor_K) * retSignalAt400mm;
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	6939      	ldr	r1, [r7, #16]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	440b      	add	r3, r1
 80028da:	fbb2 f3f3 	udiv	r3, r2, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	61fb      	str	r3, [r7, #28]
				/* 12 to 18 -10 + 12 to 18 *=> 12-26 bit */
		    }
		    RawDMax = VL6180x_SqrtUint32(DMaxSq);
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff80 	bl	80027ee <VL6180x_SqrtUint32>
 80028ee:	61b8      	str	r0, [r7, #24]
 80028f0:	e002      	b.n	80028f8 <_DMax_RawValueAtRateKCps+0x88>
		}
	} else {
		RawDMax = 0x7FFFFFFF; /* bigest possibmle 32bit signed value */
 80028f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80028f6:	61bb      	str	r3, [r7, #24]
	}
	return RawDMax;
 80028f8:	69bb      	ldr	r3, [r7, #24]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	09896800 	.word	0x09896800

08002908 <_DMax_InitData>:
 *  SYSRANGE_MAX_CONVERGENCE_TIME
 *  SYSRANGE_RANGE_CHECK_ENABLES    mask RANGE_CHECK_RANGE_ENABLE_MASK
 *  range 0xb8-0xbb (0xbb)
 */
static int _DMax_InitData(VL6180xDev_t dev)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	int32_t minSignalNeeded;
	uint8_t SysRangeCheckEn;
	uint8_t snrLimit;
	static const int ROMABLE_DATA MaxConvTimeAdjust = -4;

	warning = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");
	do {
		status = VL6180x_RdByte(dev, 0x02A, &u8);
 8002914:	f107 0313 	add.w	r3, r7, #19
 8002918:	461a      	mov	r2, r3
 800291a:	212a      	movs	r1, #42	; 0x2a
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f9c0 	bl	8002ca2 <VL6180x_RdByte>
 8002922:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 8095 	bne.w	8002a56 <_DMax_InitData+0x14e>
		    VL6180x_ErrLog("Reg 0x02A rd fail");
		    break;
		}

		if (u8 == 0) {
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <_DMax_InitData+0x32>
		    warning = CALIBRATION_WARNING;
 8002932:	2301      	movs	r3, #1
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
		    u8 = 40; /* use a default average value */
 8002936:	2328      	movs	r3, #40	; 0x28
 8002938:	74fb      	strb	r3, [r7, #19]
		}
		Reg2A_KCps = Fix7_2_KCPs(u8); /* convert to KCPs */
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	461a      	mov	r2, r3
 800293e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	09db      	lsrs	r3, r3, #7
 8002948:	61fb      	str	r3, [r7, #28]

		status = VL6180x_RdByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, &SysRangeCheckEn);
 800294a:	f107 030a 	add.w	r3, r7, #10
 800294e:	461a      	mov	r2, r3
 8002950:	212d      	movs	r1, #45	; 0x2d
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f9a5 	bl	8002ca2 <VL6180x_RdByte>
 8002958:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d17c      	bne.n	8002a5a <_DMax_InitData+0x152>
		    VL6180x_ErrLog("SYSRANGE_RANGE_CHECK_ENABLES rd fail ");
		    break;
		}

		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &MaxConvTime);
 8002960:	f107 030b 	add.w	r3, r7, #11
 8002964:	461a      	mov	r2, r3
 8002966:	211c      	movs	r1, #28
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f99a 	bl	8002ca2 <VL6180x_RdByte>
 800296e:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d173      	bne.n	8002a5e <_DMax_InitData+0x156>
		    VL6180x_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail ");
			break;
		}

		status = VL6180x_RdDWord(dev, 0x0B8, &RegB8);
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	461a      	mov	r2, r3
 800297c:	21b8      	movs	r1, #184	; 0xb8
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f9f8 	bl	8002d74 <VL6180x_RdDWord>
 8002984:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d16a      	bne.n	8002a62 <_DMax_InitData+0x15a>
		    VL6180x_ErrLog("reg 0x0B8 rd fail ");
		    break;
		}

		status = VL6180x_RdByte(dev, SYSRANGE_MAX_AMBIENT_LEVEL_MULT, &snrLimit);
 800298c:	f107 0309 	add.w	r3, r7, #9
 8002990:	461a      	mov	r2, r3
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f984 	bl	8002ca2 <VL6180x_RdByte>
 800299a:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d161      	bne.n	8002a66 <_DMax_InitData+0x15e>
		    VL6180x_ErrLog("SYSRANGE_MAX_AMBIENT_LEVEL_MULT rd fail ");
		    break;
		}
		_DMaxData(snrLimit_K) = (int32_t)16 * 1000 / snrLimit;
 80029a2:	7a7b      	ldrb	r3, [r7, #9]
 80029a4:	461a      	mov	r2, r3
 80029a6:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80029aa:	fb93 f2f2 	sdiv	r2, r3, r2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		XTalkCompRate_KCps =   VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	61bb      	str	r3, [r7, #24]

		if (Reg2A_KCps >= XTalkCompRate_KCps) {
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d304      	bcc.n	80029cc <_DMax_InitData+0xc4>
		    _DMaxData(retSignalAt400mm) = Reg2A_KCps;
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80029ca:	e003      	b.n	80029d4 <_DMax_InitData+0xcc>
		} else{
		    _DMaxData(retSignalAt400mm) = 0;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			/* Reg2A_K - XTalkCompRate_KCp <0 is invalid */
		}

		/* if xtalk range check is off omit it in snr clipping */
		if (SysRangeCheckEn&RANGE_CHECK_RANGE_ENABLE_MASK) {
 80029d4:	7abb      	ldrb	r3, [r7, #10]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d013      	beq.n	8002a06 <_DMax_InitData+0xfe>
		    status = VL6180x_RdWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &u16);
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	461a      	mov	r2, r3
 80029e4:	2126      	movs	r1, #38	; 0x26
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f98b 	bl	8002d02 <VL6180x_RdWord>
 80029ec:	62f8      	str	r0, [r7, #44]	; 0x2c
		    if (status) {
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d13a      	bne.n	8002a6a <_DMax_InitData+0x162>
				VL6180x_ErrLog("SYSRANGE_RANGE_IGNORE_THRESHOLD rd fail ");
				break;
		    }
		    RangeIgnoreThreshold = Fix7_2_KCPs(u16);
 80029f4:	8a3b      	ldrh	r3, [r7, #16]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029fc:	fb02 f303 	mul.w	r3, r2, r3
 8002a00:	09db      	lsrs	r3, r3, #7
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
 8002a04:	e001      	b.n	8002a0a <_DMax_InitData+0x102>
		} else{
		    RangeIgnoreThreshold  = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
		}

		minSignalNeeded = (RegB8 * 256) / ((int32_t)MaxConvTime + (int32_t)MaxConvTimeAdjust);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	7afa      	ldrb	r2, [r7, #11]
 8002a10:	4611      	mov	r1, r2
 8002a12:	4a1b      	ldr	r2, [pc, #108]	; (8002a80 <_DMax_InitData+0x178>)
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	440a      	add	r2, r1
 8002a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a1c:	623b      	str	r3, [r7, #32]
		/* KCps 8+8 bit -(1 to 6 bit) => 15-10 bit */
		/* minSignalNeeded = max ( minSignalNeeded,  RangeIgnoreThreshold - XTalkCompRate_KCps) */
		if (minSignalNeeded  <= (int32_t)RangeIgnoreThreshold - (int32_t)XTalkCompRate_KCps)
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	6a3a      	ldr	r2, [r7, #32]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	dc03      	bgt.n	8002a32 <_DMax_InitData+0x12a>
		    minSignalNeeded  =  RangeIgnoreThreshold - XTalkCompRate_KCps;
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	623b      	str	r3, [r7, #32]

		u32 = (minSignalNeeded*(uint32_t)snrLimit) / 16;
 8002a32:	7a7b      	ldrb	r3, [r7, #9]
 8002a34:	461a      	mov	r2, r3
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	617b      	str	r3, [r7, #20]
		_DMaxData(ClipSnrLimit) = _DMax_RawValueAtRateKCps(dev, u32);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	4619      	mov	r1, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ff13 	bl	8002870 <_DMax_RawValueAtRateKCps>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8002a54:	e00a      	b.n	8002a6c <_DMax_InitData+0x164>
		    break;
 8002a56:	bf00      	nop
 8002a58:	e008      	b.n	8002a6c <_DMax_InitData+0x164>
		    break;
 8002a5a:	bf00      	nop
 8002a5c:	e006      	b.n	8002a6c <_DMax_InitData+0x164>
			break;
 8002a5e:	bf00      	nop
 8002a60:	e004      	b.n	8002a6c <_DMax_InitData+0x164>
		    break;
 8002a62:	bf00      	nop
 8002a64:	e002      	b.n	8002a6c <_DMax_InitData+0x164>
		    break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <_DMax_InitData+0x164>
				break;
 8002a6a:	bf00      	nop
		/* clip to dmax to min signal snr limit rate*/
	} while (0);
	if (!status)
 8002a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <_DMax_InitData+0x16e>
		status = warning;
 8002a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOG_FUNCTION_END(status);
	return status;
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3730      	adds	r7, #48	; 0x30
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	08005318 	.word	0x08005318

08002a84 <_DMax_Compute>:

static int _DMax_Compute(VL6180xDev_t dev, VL6180x_RangeData_t *pRange)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
	int32_t DMax;
	int scaling;
	uint16_t HwLimitAtScale;
	static const int ROMABLE_DATA rtnAmbLowLimit_KCps = 330 * 1000;

	rtnAmbRate = pRange->rtnAmbRate;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	613b      	str	r3, [r7, #16]
	if (rtnAmbRate  < rtnAmbLowLimit_KCps) {
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <_DMax_Compute+0x78>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d224      	bcs.n	8002aea <_DMax_Compute+0x66>
		DMax = _DMax_RawValueAtRateKCps(dev, rtnAmbRate);
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff fee3 	bl	8002870 <_DMax_RawValueAtRateKCps>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	617b      	str	r3, [r7, #20]
		scaling = _GetUpscale(dev);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7e1b      	ldrb	r3, [r3, #24]
 8002ab2:	60fb      	str	r3, [r7, #12]
		HwLimitAtScale = UpperLimitLookUP[scaling - 1];
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <_DMax_Compute+0x7c>)
 8002aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002abe:	817b      	strh	r3, [r7, #10]

		if (DMax > _DMaxData(ClipSnrLimit)) {
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	4293      	cmp	r3, r2
 8002acc:	dd03      	ble.n	8002ad6 <_DMax_Compute+0x52>
		    DMax = _DMaxData(ClipSnrLimit);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8002ad4:	617b      	str	r3, [r7, #20]
		}
		if (DMax > HwLimitAtScale) {
 8002ad6:	897b      	ldrh	r3, [r7, #10]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	dd01      	ble.n	8002ae2 <_DMax_Compute+0x5e>
		    DMax = HwLimitAtScale;
 8002ade:	897b      	ldrh	r3, [r7, #10]
 8002ae0:	617b      	str	r3, [r7, #20]
		}
		pRange->DMax = DMax;
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	61da      	str	r2, [r3, #28]
 8002ae8:	e002      	b.n	8002af0 <_DMax_Compute+0x6c>
	} else {
		pRange->DMax = 0;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2200      	movs	r2, #0
 8002aee:	61da      	str	r2, [r3, #28]
	}
	return 0;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	0800531c 	.word	0x0800531c
 8002b00:	080052b4 	.word	0x080052b4

08002b04 <VL6180x_WrByte>:
#else
#error "invalid I2C_BUFFER_CONFIG "
#endif


int VL6180x_WrByte(VL6180xDev_t dev, uint16_t index, uint8_t data){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
    DECL_I2C_BUFFER
    VL6180x_I2C_USER_VAR

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
 8002b14:	f107 0308 	add.w	r3, r7, #8
 8002b18:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 8002b1a:	887b      	ldrh	r3, [r7, #2]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]
    buffer[2]=data;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3302      	adds	r3, #2
 8002b34:	787a      	ldrb	r2, [r7, #1]
 8002b36:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)3);
 8002b38:	2203      	movs	r2, #3
 8002b3a:	6979      	ldr	r1, [r7, #20]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f984 	bl	8002e4a <VL6180x_I2CWrite>
 8002b42:	6138      	str	r0, [r7, #16]
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002b44:	693b      	ldr	r3, [r7, #16]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <VL6180x_WrWord>:

int VL6180x_WrWord(VL6180xDev_t dev, uint16_t index, uint16_t data){
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b086      	sub	sp, #24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	807b      	strh	r3, [r7, #2]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	803b      	strh	r3, [r7, #0]
    uint8_t *buffer;
    VL6180x_I2C_USER_VAR

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,4);
 8002b5e:	f107 0308 	add.w	r3, r7, #8
 8002b62:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 8002b64:	887b      	ldrh	r3, [r7, #2]
 8002b66:	0a1b      	lsrs	r3, r3, #8
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3301      	adds	r3, #1
 8002b74:	887a      	ldrh	r2, [r7, #2]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>8;
 8002b7a:	883b      	ldrh	r3, [r7, #0]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3302      	adds	r3, #2
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]
    buffer[3]=data&0xFF;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3303      	adds	r3, #3
 8002b8c:	883a      	ldrh	r2, [r7, #0]
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)4);
 8002b92:	2204      	movs	r2, #4
 8002b94:	6979      	ldr	r1, [r7, #20]
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f957 	bl	8002e4a <VL6180x_I2CWrite>
 8002b9c:	6138      	str	r0, [r7, #16]
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002b9e:	693b      	ldr	r3, [r7, #16]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <VL6180x_WrDWord>:

int VL6180x_WrDWord(VL6180xDev_t dev, uint16_t index, uint32_t data){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	817b      	strh	r3, [r7, #10]
    int  status;
    uint8_t *buffer;


    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,6);
 8002bb6:	f107 0310 	add.w	r3, r7, #16
 8002bba:	61fb      	str	r3, [r7, #28]
    buffer[0]=index>>8;
 8002bbc:	897b      	ldrh	r3, [r7, #10]
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	897a      	ldrh	r2, [r7, #10]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>24;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	0e1a      	lsrs	r2, r3, #24
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3302      	adds	r3, #2
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]
    buffer[3]=(data>>16)&0xFF;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	0c1a      	lsrs	r2, r3, #16
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3303      	adds	r3, #3
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]
    buffer[4]=(data>>8)&0xFF;;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0a1a      	lsrs	r2, r3, #8
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]
    buffer[5]=data&0xFF;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3305      	adds	r3, #5
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]
    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)6);
 8002c00:	2206      	movs	r2, #6
 8002c02:	69f9      	ldr	r1, [r7, #28]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f920 	bl	8002e4a <VL6180x_I2CWrite>
 8002c0a:	61b8      	str	r0, [r7, #24]
    VL6180x_DoneI2CAcces(dev);

    return status;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <VL6180x_UpdateByte>:

int VL6180x_UpdateByte(VL6180xDev_t dev, uint16_t index, uint8_t AndData, uint8_t OrData){
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	4608      	mov	r0, r1
 8002c20:	4611      	mov	r1, r2
 8002c22:	461a      	mov	r2, r3
 8002c24:	4603      	mov	r3, r0
 8002c26:	807b      	strh	r3, [r7, #2]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	707b      	strb	r3, [r7, #1]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	703b      	strb	r3, [r7, #0]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	613b      	str	r3, [r7, #16]
    buffer[0]=index>>8;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	3301      	adds	r3, #1
 8002c46:	887a      	ldrh	r2, [r7, #2]
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *)buffer,(uint8_t)2);
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	6939      	ldr	r1, [r7, #16]
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f8fa 	bl	8002e4a <VL6180x_I2CWrite>
 8002c56:	6178      	str	r0, [r7, #20]
    if( !status ){
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11c      	bne.n	8002c98 <VL6180x_UpdateByte+0x82>
        /* read data direct onto buffer */
        status=VL6180x_I2CRead(dev, &buffer[2],1);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	3302      	adds	r3, #2
 8002c62:	2201      	movs	r2, #1
 8002c64:	4619      	mov	r1, r3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f931 	bl	8002ece <VL6180x_I2CRead>
 8002c6c:	6178      	str	r0, [r7, #20]
        if( !status ){
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d111      	bne.n	8002c98 <VL6180x_UpdateByte+0x82>
            buffer[2]=(buffer[2]&AndData)|OrData;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	3302      	adds	r3, #2
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	787b      	ldrb	r3, [r7, #1]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	b2d9      	uxtb	r1, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	3302      	adds	r3, #2
 8002c84:	783a      	ldrb	r2, [r7, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	701a      	strb	r2, [r3, #0]
            status=VL6180x_I2CWrite(dev, buffer, (uint8_t)3);
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	6939      	ldr	r1, [r7, #16]
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f8da 	bl	8002e4a <VL6180x_I2CWrite>
 8002c96:	6178      	str	r0, [r7, #20]
        }
    }

    VL6180x_DoneI2CAcces(dev);

    return status;
 8002c98:	697b      	ldr	r3, [r7, #20]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <VL6180x_RdByte>:

int VL6180x_RdByte(VL6180xDev_t dev, uint16_t index, uint8_t *data){
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b088      	sub	sp, #32
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	460b      	mov	r3, r1
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	817b      	strh	r3, [r7, #10]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);//为buffer分配地址
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	61bb      	str	r3, [r7, #24]
    buffer[0]=index>>8;//将寄存器地址高8位存入buffer[0]
 8002cb6:	897b      	ldrh	r3, [r7, #10]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;//将寄存器地址低8位存入buffer[1]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	897a      	ldrh	r2, [r7, #10]
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	701a      	strb	r2, [r3, #0]
    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);//向I2C总线发送设备地址及16位寄存器地址
 8002ccc:	2202      	movs	r2, #2
 8002cce:	69b9      	ldr	r1, [r7, #24]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f8ba 	bl	8002e4a <VL6180x_I2CWrite>
 8002cd6:	61f8      	str	r0, [r7, #28]
    if( !status ){
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10c      	bne.n	8002cf8 <VL6180x_RdByte+0x56>
        status=VL6180x_I2CRead(dev, buffer,1);//读取该寄存器中的值，并将其返回到buffer中
 8002cde:	2201      	movs	r2, #1
 8002ce0:	69b9      	ldr	r1, [r7, #24]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f8f3 	bl	8002ece <VL6180x_I2CRead>
 8002ce8:	61f8      	str	r0, [r7, #28]
        if( !status ){
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <VL6180x_RdByte+0x56>
            *data = (uint8_t)buffer[0];//将buffer中的值传给data
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	781a      	ldrb	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	701a      	strb	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);

    return status;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <VL6180x_RdWord>:

int VL6180x_RdWord(VL6180xDev_t dev, uint16_t index, uint16_t *data){
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b088      	sub	sp, #32
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	817b      	strh	r3, [r7, #10]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);
 8002d10:	f107 0310 	add.w	r3, r7, #16
 8002d14:	61bb      	str	r3, [r7, #24]
    buffer[0]=index>>8;
 8002d16:	897b      	ldrh	r3, [r7, #10]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	3301      	adds	r3, #1
 8002d26:	897a      	ldrh	r2, [r7, #10]
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f88a 	bl	8002e4a <VL6180x_I2CWrite>
 8002d36:	61f8      	str	r0, [r7, #28]
    if( !status){
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d115      	bne.n	8002d6a <VL6180x_RdWord+0x68>
        status=VL6180x_I2CRead(dev, buffer,2);
 8002d3e:	2202      	movs	r2, #2
 8002d40:	69b9      	ldr	r1, [r7, #24]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f8c3 	bl	8002ece <VL6180x_I2CRead>
 8002d48:	61f8      	str	r0, [r7, #28]
        if( !status ){
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10c      	bne.n	8002d6a <VL6180x_RdWord+0x68>
            /* VL6180x register are Big endian if cpu is be direct read direct into *data is possible */
            *data=((uint16_t)buffer[0]<<8)|(uint16_t)buffer[1];
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	b21a      	sxth	r2, r3
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	4313      	orrs	r3, r2
 8002d62:	b21b      	sxth	r3, r3
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	801a      	strh	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <VL6180x_RdDWord>:

int  VL6180x_RdDWord(VL6180xDev_t dev, uint16_t index, uint32_t *data){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	817b      	strh	r3, [r7, #10]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,4);
 8002d82:	f107 0310 	add.w	r3, r7, #16
 8002d86:	61bb      	str	r3, [r7, #24]

    buffer[0]=index>>8;
 8002d88:	897b      	ldrh	r3, [r7, #10]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	3301      	adds	r3, #1
 8002d98:	897a      	ldrh	r2, [r7, #10]
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 8002d9e:	2202      	movs	r2, #2
 8002da0:	69b9      	ldr	r1, [r7, #24]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f851 	bl	8002e4a <VL6180x_I2CWrite>
 8002da8:	61f8      	str	r0, [r7, #28]
    if( !status ){
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d11b      	bne.n	8002de8 <VL6180x_RdDWord+0x74>
        status=VL6180x_I2CRead(dev, buffer,4);
 8002db0:	2204      	movs	r2, #4
 8002db2:	69b9      	ldr	r1, [r7, #24]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f88a 	bl	8002ece <VL6180x_I2CRead>
 8002dba:	61f8      	str	r0, [r7, #28]
        if( !status ){
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d112      	bne.n	8002de8 <VL6180x_RdDWord+0x74>
            /* VL6180x register are Big endian if cpu is be direct read direct into data is possible */
            *data=((uint32_t)buffer[0]<<24)|((uint32_t)buffer[1]<<16)|((uint32_t)buffer[2]<<8)|((uint32_t)buffer[3]);
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	061a      	lsls	r2, r3, #24
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	3203      	adds	r2, #3
 8002de0:	7812      	ldrb	r2, [r2, #0]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	601a      	str	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002de8:	69fb      	ldr	r3, [r7, #28]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <VL6180x_RdMulti>:


int  VL6180x_RdMulti(VL6180xDev_t dev, uint16_t index, uint8_t *data, int nData){
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b088      	sub	sp, #32
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	817b      	strh	r3, [r7, #10]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,2);
 8002e02:	f107 0310 	add.w	r3, r7, #16
 8002e06:	61bb      	str	r3, [r7, #24]

    buffer[0]=index>>8;
 8002e08:	897b      	ldrh	r3, [r7, #10]
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	3301      	adds	r3, #1
 8002e18:	897a      	ldrh	r2, [r7, #10]
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 8002e1e:	2202      	movs	r2, #2
 8002e20:	69b9      	ldr	r1, [r7, #24]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f811 	bl	8002e4a <VL6180x_I2CWrite>
 8002e28:	61f8      	str	r0, [r7, #28]
    if( !status ){
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d107      	bne.n	8002e40 <VL6180x_RdMulti+0x4e>
        status=VL6180x_I2CRead(dev, data, nData);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f848 	bl	8002ece <VL6180x_I2CRead>
 8002e3e:	61f8      	str	r0, [r7, #28]
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002e40:	69fb      	ldr	r3, [r7, #28]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <VL6180x_I2CWrite>:
  I2C_Stop();//关闭I2C总线
  return status = 0;
}
#else
int VL6180x_I2CWrite(VL6180xDev_t dev, uint8_t *buff, uint8_t len)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	4613      	mov	r3, r2
 8002e56:	71fb      	strb	r3, [r7, #7]
  int status, i;
  I2C_Start();//开启I2C总线
 8002e58:	f7fd f98a 	bl	8000170 <I2C_Start>
  I2C_SendByte(dev->i2c_dev_addr | 0);//发送8位设备地址及LSB的写方向位，实现写功能
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd f9bc 	bl	80001e0 <I2C_SendByte>
  if (I2C_WaitAck())//如果从机没有应答
 8002e68:	f7fd fa34 	bl	80002d4 <I2C_WaitAck>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <VL6180x_I2CWrite+0x30>
  {
    I2C_Stop();//关闭I2C总线
 8002e72:	f7fd f99d 	bl	80001b0 <I2C_Stop>
    return 1;//返回报错标志
 8002e76:	2301      	movs	r3, #1
 8002e78:	e025      	b.n	8002ec6 <VL6180x_I2CWrite+0x7c>
  }
  for (i = 0; i < len; i++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	e01b      	b.n	8002eb8 <VL6180x_I2CWrite+0x6e>
  {
    I2C_SendByte(buff[i]);//发送buff中的各字节
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	4413      	add	r3, r2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd f9a9 	bl	80001e0 <I2C_SendByte>
    if (i == len - 1)//在发送最后一个字节的数据时
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d109      	bne.n	8002eac <VL6180x_I2CWrite+0x62>
    {
      if (I2C_WaitAck())//等待从机应答
 8002e98:	f7fd fa1c 	bl	80002d4 <I2C_WaitAck>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <VL6180x_I2CWrite+0x68>
      {
        I2C_Stop();//关闭I2C总线
 8002ea2:	f7fd f985 	bl	80001b0 <I2C_Stop>
        status = 1;//返回报错标志
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e002      	b.n	8002eb2 <VL6180x_I2CWrite+0x68>
      }
    }
    else
    {
      status = I2C_WaitAck();//返回报错标志
 8002eac:	f7fd fa12 	bl	80002d4 <I2C_WaitAck>
 8002eb0:	6178      	str	r0, [r7, #20]
  for (i = 0; i < len; i++)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	dbdf      	blt.n	8002e80 <VL6180x_I2CWrite+0x36>
    }
  }
  I2C_Stop();//关闭I2C总线
 8002ec0:	f7fd f976 	bl	80001b0 <I2C_Stop>
  return status;
 8002ec4:	697b      	ldr	r3, [r7, #20]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <VL6180x_I2CRead>:

/* VL6180X底层驱动函数：读 */
int VL6180x_I2CRead(VL6180xDev_t dev, uint8_t *buff, uint8_t len)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	71fb      	strb	r3, [r7, #7]
  int status, i;
  I2C_Start();//开启I2C总线
 8002edc:	f7fd f948 	bl	8000170 <I2C_Start>
  I2C_SendByte(dev->i2c_dev_addr | 1);//发送8位设备地址及LSB的读方向位，实现读功能
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd f978 	bl	80001e0 <I2C_SendByte>
  I2C_WaitAck();//等待从机应答
 8002ef0:	f7fd f9f0 	bl	80002d4 <I2C_WaitAck>
  for (i = 0; i < len; i++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	e01a      	b.n	8002f30 <VL6180x_I2CRead+0x62>
  {
    if (i == len - 1)//在读取最后一个字节的数据时
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d109      	bne.n	8002f18 <VL6180x_I2CRead+0x4a>
    {
      buff[i] = I2C_ReadByte(0);//读取数据，将其保存于buff[i]，并向从机发送非应答信号，终止数据读取
 8002f04:	2000      	movs	r0, #0
 8002f06:	f7fd f9ab 	bl	8000260 <I2C_ReadByte>
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	4413      	add	r3, r2
 8002f12:	b2ca      	uxtb	r2, r1
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	e008      	b.n	8002f2a <VL6180x_I2CRead+0x5c>
    }
    else
    {
      buff[i] = I2C_ReadByte(1);//读取数据，将其保存于buff[i]，并向从机发送应答信号，继续读取数据
 8002f18:	2001      	movs	r0, #1
 8002f1a:	f7fd f9a1 	bl	8000260 <I2C_ReadByte>
 8002f1e:	4601      	mov	r1, r0
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	4413      	add	r3, r2
 8002f26:	b2ca      	uxtb	r2, r1
 8002f28:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	dbe0      	blt.n	8002efa <VL6180x_I2CRead+0x2c>
    }
  }
  I2C_Stop();//关闭I2C总线
 8002f38:	f7fd f93a 	bl	80001b0 <I2C_Stop>
  return status = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f4c:	480c      	ldr	r0, [pc, #48]	; (8002f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f4e:	490d      	ldr	r1, [pc, #52]	; (8002f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f50:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f54:	e002      	b.n	8002f5c <LoopCopyDataInit>

08002f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f5a:	3304      	adds	r3, #4

08002f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f60:	d3f9      	bcc.n	8002f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f64:	4c0a      	ldr	r4, [pc, #40]	; (8002f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f68:	e001      	b.n	8002f6e <LoopFillZerobss>

08002f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f6c:	3204      	adds	r2, #4

08002f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f70:	d3fb      	bcc.n	8002f6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f72:	f7fd fea7 	bl	8000cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f76:	f001 f9a7 	bl	80042c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f7a:	f7fd fb47 	bl	800060c <main>
  bx lr
 8002f7e:	4770      	bx	lr
  ldr r0, =_sdata
 8002f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002f88:	080053c0 	.word	0x080053c0
  ldr r2, =_sbss
 8002f8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002f90:	20000e28 	.word	0x20000e28

08002f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f94:	e7fe      	b.n	8002f94 <ADC1_2_IRQHandler>
	...

08002f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <HAL_Init+0x28>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <HAL_Init+0x28>)
 8002fa2:	f043 0310 	orr.w	r3, r3, #16
 8002fa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa8:	2003      	movs	r0, #3
 8002faa:	f000 f92b 	bl	8003204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fae:	200f      	movs	r0, #15
 8002fb0:	f000 f808 	bl	8002fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb4:	f7fd fd42 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40022000 	.word	0x40022000

08002fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_InitTick+0x54>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_InitTick+0x58>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f935 	bl	8003252 <HAL_SYSTICK_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00e      	b.n	8003010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b0f      	cmp	r3, #15
 8002ff6:	d80a      	bhi.n	800300e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8003000:	f000 f90b 	bl	800321a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003004:	4a06      	ldr	r2, [pc, #24]	; (8003020 <HAL_InitTick+0x5c>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000000 	.word	0x20000000
 800301c:	20000008 	.word	0x20000008
 8003020:	20000004 	.word	0x20000004

08003024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_IncTick+0x1c>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_IncTick+0x20>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4413      	add	r3, r2
 8003034:	4a03      	ldr	r2, [pc, #12]	; (8003044 <HAL_IncTick+0x20>)
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	20000008 	.word	0x20000008
 8003044:	20000e14 	.word	0x20000e14

08003048 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return uwTick;
 800304c:	4b02      	ldr	r3, [pc, #8]	; (8003058 <HAL_GetTick+0x10>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	20000e14 	.word	0x20000e14

0800305c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003064:	f7ff fff0 	bl	8003048 <HAL_GetTick>
 8003068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d005      	beq.n	8003082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <HAL_Delay+0x44>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003082:	bf00      	nop
 8003084:	f7ff ffe0 	bl	8003048 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	429a      	cmp	r2, r3
 8003092:	d8f7      	bhi.n	8003084 <HAL_Delay+0x28>
  {
  }
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000008 	.word	0x20000008

080030a4 <__NVIC_SetPriorityGrouping>:
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <__NVIC_SetPriorityGrouping+0x44>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c0:	4013      	ands	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d6:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <__NVIC_SetPriorityGrouping+0x44>)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	60d3      	str	r3, [r2, #12]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_GetPriorityGrouping>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <__NVIC_GetPriorityGrouping+0x18>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	f003 0307 	and.w	r3, r3, #7
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_SetPriority>:
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	2b00      	cmp	r3, #0
 800311a:	db0a      	blt.n	8003132 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	490c      	ldr	r1, [pc, #48]	; (8003154 <__NVIC_SetPriority+0x4c>)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	0112      	lsls	r2, r2, #4
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	440b      	add	r3, r1
 800312c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003130:	e00a      	b.n	8003148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4908      	ldr	r1, [pc, #32]	; (8003158 <__NVIC_SetPriority+0x50>)
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	3b04      	subs	r3, #4
 8003140:	0112      	lsls	r2, r2, #4
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	440b      	add	r3, r1
 8003146:	761a      	strb	r2, [r3, #24]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000e100 	.word	0xe000e100
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <NVIC_EncodePriority>:
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	; 0x24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f1c3 0307 	rsb	r3, r3, #7
 8003176:	2b04      	cmp	r3, #4
 8003178:	bf28      	it	cs
 800317a:	2304      	movcs	r3, #4
 800317c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3304      	adds	r3, #4
 8003182:	2b06      	cmp	r3, #6
 8003184:	d902      	bls.n	800318c <NVIC_EncodePriority+0x30>
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3b03      	subs	r3, #3
 800318a:	e000      	b.n	800318e <NVIC_EncodePriority+0x32>
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	f04f 32ff 	mov.w	r2, #4294967295
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	401a      	ands	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a4:	f04f 31ff 	mov.w	r1, #4294967295
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43d9      	mvns	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	4313      	orrs	r3, r2
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3724      	adds	r7, #36	; 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <SysTick_Config>:
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d0:	d301      	bcc.n	80031d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00f      	b.n	80031f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031d6:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <SysTick_Config+0x40>)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3b01      	subs	r3, #1
 80031dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031de:	210f      	movs	r1, #15
 80031e0:	f04f 30ff 	mov.w	r0, #4294967295
 80031e4:	f7ff ff90 	bl	8003108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <SysTick_Config+0x40>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <SysTick_Config+0x40>)
 80031f0:	2207      	movs	r2, #7
 80031f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	e000e010 	.word	0xe000e010

08003204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ff49 	bl	80030a4 <__NVIC_SetPriorityGrouping>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800321a:	b580      	push	{r7, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800322c:	f7ff ff5e 	bl	80030ec <__NVIC_GetPriorityGrouping>
 8003230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	6978      	ldr	r0, [r7, #20]
 8003238:	f7ff ff90 	bl	800315c <NVIC_EncodePriority>
 800323c:	4602      	mov	r2, r0
 800323e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ff5f 	bl	8003108 <__NVIC_SetPriority>
}
 800324a:	bf00      	nop
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff ffb0 	bl	80031c0 <SysTick_Config>
 8003260:	4603      	mov	r3, r0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800326c:	b480      	push	{r7}
 800326e:	b08b      	sub	sp, #44	; 0x2c
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800327a:	2300      	movs	r3, #0
 800327c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800327e:	e169      	b.n	8003554 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003280:	2201      	movs	r2, #1
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	429a      	cmp	r2, r3
 800329a:	f040 8158 	bne.w	800354e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4a9a      	ldr	r2, [pc, #616]	; (800350c <HAL_GPIO_Init+0x2a0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d05e      	beq.n	8003366 <HAL_GPIO_Init+0xfa>
 80032a8:	4a98      	ldr	r2, [pc, #608]	; (800350c <HAL_GPIO_Init+0x2a0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d875      	bhi.n	800339a <HAL_GPIO_Init+0x12e>
 80032ae:	4a98      	ldr	r2, [pc, #608]	; (8003510 <HAL_GPIO_Init+0x2a4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d058      	beq.n	8003366 <HAL_GPIO_Init+0xfa>
 80032b4:	4a96      	ldr	r2, [pc, #600]	; (8003510 <HAL_GPIO_Init+0x2a4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d86f      	bhi.n	800339a <HAL_GPIO_Init+0x12e>
 80032ba:	4a96      	ldr	r2, [pc, #600]	; (8003514 <HAL_GPIO_Init+0x2a8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d052      	beq.n	8003366 <HAL_GPIO_Init+0xfa>
 80032c0:	4a94      	ldr	r2, [pc, #592]	; (8003514 <HAL_GPIO_Init+0x2a8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d869      	bhi.n	800339a <HAL_GPIO_Init+0x12e>
 80032c6:	4a94      	ldr	r2, [pc, #592]	; (8003518 <HAL_GPIO_Init+0x2ac>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d04c      	beq.n	8003366 <HAL_GPIO_Init+0xfa>
 80032cc:	4a92      	ldr	r2, [pc, #584]	; (8003518 <HAL_GPIO_Init+0x2ac>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d863      	bhi.n	800339a <HAL_GPIO_Init+0x12e>
 80032d2:	4a92      	ldr	r2, [pc, #584]	; (800351c <HAL_GPIO_Init+0x2b0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d046      	beq.n	8003366 <HAL_GPIO_Init+0xfa>
 80032d8:	4a90      	ldr	r2, [pc, #576]	; (800351c <HAL_GPIO_Init+0x2b0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d85d      	bhi.n	800339a <HAL_GPIO_Init+0x12e>
 80032de:	2b12      	cmp	r3, #18
 80032e0:	d82a      	bhi.n	8003338 <HAL_GPIO_Init+0xcc>
 80032e2:	2b12      	cmp	r3, #18
 80032e4:	d859      	bhi.n	800339a <HAL_GPIO_Init+0x12e>
 80032e6:	a201      	add	r2, pc, #4	; (adr r2, 80032ec <HAL_GPIO_Init+0x80>)
 80032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ec:	08003367 	.word	0x08003367
 80032f0:	08003341 	.word	0x08003341
 80032f4:	08003353 	.word	0x08003353
 80032f8:	08003395 	.word	0x08003395
 80032fc:	0800339b 	.word	0x0800339b
 8003300:	0800339b 	.word	0x0800339b
 8003304:	0800339b 	.word	0x0800339b
 8003308:	0800339b 	.word	0x0800339b
 800330c:	0800339b 	.word	0x0800339b
 8003310:	0800339b 	.word	0x0800339b
 8003314:	0800339b 	.word	0x0800339b
 8003318:	0800339b 	.word	0x0800339b
 800331c:	0800339b 	.word	0x0800339b
 8003320:	0800339b 	.word	0x0800339b
 8003324:	0800339b 	.word	0x0800339b
 8003328:	0800339b 	.word	0x0800339b
 800332c:	0800339b 	.word	0x0800339b
 8003330:	08003349 	.word	0x08003349
 8003334:	0800335d 	.word	0x0800335d
 8003338:	4a79      	ldr	r2, [pc, #484]	; (8003520 <HAL_GPIO_Init+0x2b4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800333e:	e02c      	b.n	800339a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	623b      	str	r3, [r7, #32]
          break;
 8003346:	e029      	b.n	800339c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	3304      	adds	r3, #4
 800334e:	623b      	str	r3, [r7, #32]
          break;
 8003350:	e024      	b.n	800339c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	3308      	adds	r3, #8
 8003358:	623b      	str	r3, [r7, #32]
          break;
 800335a:	e01f      	b.n	800339c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	330c      	adds	r3, #12
 8003362:	623b      	str	r3, [r7, #32]
          break;
 8003364:	e01a      	b.n	800339c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800336e:	2304      	movs	r3, #4
 8003370:	623b      	str	r3, [r7, #32]
          break;
 8003372:	e013      	b.n	800339c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d105      	bne.n	8003388 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800337c:	2308      	movs	r3, #8
 800337e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	611a      	str	r2, [r3, #16]
          break;
 8003386:	e009      	b.n	800339c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003388:	2308      	movs	r3, #8
 800338a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	615a      	str	r2, [r3, #20]
          break;
 8003392:	e003      	b.n	800339c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003394:	2300      	movs	r3, #0
 8003396:	623b      	str	r3, [r7, #32]
          break;
 8003398:	e000      	b.n	800339c <HAL_GPIO_Init+0x130>
          break;
 800339a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2bff      	cmp	r3, #255	; 0xff
 80033a0:	d801      	bhi.n	80033a6 <HAL_GPIO_Init+0x13a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	e001      	b.n	80033aa <HAL_GPIO_Init+0x13e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3304      	adds	r3, #4
 80033aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2bff      	cmp	r3, #255	; 0xff
 80033b0:	d802      	bhi.n	80033b8 <HAL_GPIO_Init+0x14c>
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	e002      	b.n	80033be <HAL_GPIO_Init+0x152>
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	3b08      	subs	r3, #8
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	210f      	movs	r1, #15
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	401a      	ands	r2, r3
 80033d0:	6a39      	ldr	r1, [r7, #32]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	fa01 f303 	lsl.w	r3, r1, r3
 80033d8:	431a      	orrs	r2, r3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80b1 	beq.w	800354e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033ec:	4b4d      	ldr	r3, [pc, #308]	; (8003524 <HAL_GPIO_Init+0x2b8>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	4a4c      	ldr	r2, [pc, #304]	; (8003524 <HAL_GPIO_Init+0x2b8>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6193      	str	r3, [r2, #24]
 80033f8:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <HAL_GPIO_Init+0x2b8>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003404:	4a48      	ldr	r2, [pc, #288]	; (8003528 <HAL_GPIO_Init+0x2bc>)
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	3302      	adds	r3, #2
 800340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003410:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	220f      	movs	r2, #15
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4013      	ands	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a40      	ldr	r2, [pc, #256]	; (800352c <HAL_GPIO_Init+0x2c0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d013      	beq.n	8003458 <HAL_GPIO_Init+0x1ec>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a3f      	ldr	r2, [pc, #252]	; (8003530 <HAL_GPIO_Init+0x2c4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00d      	beq.n	8003454 <HAL_GPIO_Init+0x1e8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a3e      	ldr	r2, [pc, #248]	; (8003534 <HAL_GPIO_Init+0x2c8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d007      	beq.n	8003450 <HAL_GPIO_Init+0x1e4>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a3d      	ldr	r2, [pc, #244]	; (8003538 <HAL_GPIO_Init+0x2cc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d101      	bne.n	800344c <HAL_GPIO_Init+0x1e0>
 8003448:	2303      	movs	r3, #3
 800344a:	e006      	b.n	800345a <HAL_GPIO_Init+0x1ee>
 800344c:	2304      	movs	r3, #4
 800344e:	e004      	b.n	800345a <HAL_GPIO_Init+0x1ee>
 8003450:	2302      	movs	r3, #2
 8003452:	e002      	b.n	800345a <HAL_GPIO_Init+0x1ee>
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_GPIO_Init+0x1ee>
 8003458:	2300      	movs	r3, #0
 800345a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345c:	f002 0203 	and.w	r2, r2, #3
 8003460:	0092      	lsls	r2, r2, #2
 8003462:	4093      	lsls	r3, r2
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800346a:	492f      	ldr	r1, [pc, #188]	; (8003528 <HAL_GPIO_Init+0x2bc>)
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	3302      	adds	r3, #2
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d006      	beq.n	8003492 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003484:	4b2d      	ldr	r3, [pc, #180]	; (800353c <HAL_GPIO_Init+0x2d0>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	492c      	ldr	r1, [pc, #176]	; (800353c <HAL_GPIO_Init+0x2d0>)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	600b      	str	r3, [r1, #0]
 8003490:	e006      	b.n	80034a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003492:	4b2a      	ldr	r3, [pc, #168]	; (800353c <HAL_GPIO_Init+0x2d0>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	43db      	mvns	r3, r3
 800349a:	4928      	ldr	r1, [pc, #160]	; (800353c <HAL_GPIO_Init+0x2d0>)
 800349c:	4013      	ands	r3, r2
 800349e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d006      	beq.n	80034ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034ac:	4b23      	ldr	r3, [pc, #140]	; (800353c <HAL_GPIO_Init+0x2d0>)
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	4922      	ldr	r1, [pc, #136]	; (800353c <HAL_GPIO_Init+0x2d0>)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
 80034b8:	e006      	b.n	80034c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <HAL_GPIO_Init+0x2d0>)
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	491e      	ldr	r1, [pc, #120]	; (800353c <HAL_GPIO_Init+0x2d0>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d006      	beq.n	80034e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034d4:	4b19      	ldr	r3, [pc, #100]	; (800353c <HAL_GPIO_Init+0x2d0>)
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	4918      	ldr	r1, [pc, #96]	; (800353c <HAL_GPIO_Init+0x2d0>)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	4313      	orrs	r3, r2
 80034de:	608b      	str	r3, [r1, #8]
 80034e0:	e006      	b.n	80034f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034e2:	4b16      	ldr	r3, [pc, #88]	; (800353c <HAL_GPIO_Init+0x2d0>)
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	4914      	ldr	r1, [pc, #80]	; (800353c <HAL_GPIO_Init+0x2d0>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d021      	beq.n	8003540 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034fc:	4b0f      	ldr	r3, [pc, #60]	; (800353c <HAL_GPIO_Init+0x2d0>)
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	490e      	ldr	r1, [pc, #56]	; (800353c <HAL_GPIO_Init+0x2d0>)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	4313      	orrs	r3, r2
 8003506:	60cb      	str	r3, [r1, #12]
 8003508:	e021      	b.n	800354e <HAL_GPIO_Init+0x2e2>
 800350a:	bf00      	nop
 800350c:	10320000 	.word	0x10320000
 8003510:	10310000 	.word	0x10310000
 8003514:	10220000 	.word	0x10220000
 8003518:	10210000 	.word	0x10210000
 800351c:	10120000 	.word	0x10120000
 8003520:	10110000 	.word	0x10110000
 8003524:	40021000 	.word	0x40021000
 8003528:	40010000 	.word	0x40010000
 800352c:	40010800 	.word	0x40010800
 8003530:	40010c00 	.word	0x40010c00
 8003534:	40011000 	.word	0x40011000
 8003538:	40011400 	.word	0x40011400
 800353c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_GPIO_Init+0x304>)
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	43db      	mvns	r3, r3
 8003548:	4909      	ldr	r1, [pc, #36]	; (8003570 <HAL_GPIO_Init+0x304>)
 800354a:	4013      	ands	r3, r2
 800354c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	3301      	adds	r3, #1
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	fa22 f303 	lsr.w	r3, r2, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	f47f ae8e 	bne.w	8003280 <HAL_GPIO_Init+0x14>
  }
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	372c      	adds	r7, #44	; 0x2c
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	40010400 	.word	0x40010400

08003574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	887b      	ldrh	r3, [r7, #2]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	e001      	b.n	8003596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003596:	7bfb      	ldrb	r3, [r7, #15]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	807b      	strh	r3, [r7, #2]
 80035ae:	4613      	mov	r3, r2
 80035b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035b2:	787b      	ldrb	r3, [r7, #1]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035b8:	887a      	ldrh	r2, [r7, #2]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035be:	e003      	b.n	80035c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035c0:	887b      	ldrh	r3, [r7, #2]
 80035c2:	041a      	lsls	r2, r3, #16
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	611a      	str	r2, [r3, #16]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
	...

080035d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e272      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8087 	beq.w	8003702 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035f4:	4b92      	ldr	r3, [pc, #584]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d00c      	beq.n	800361a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003600:	4b8f      	ldr	r3, [pc, #572]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b08      	cmp	r3, #8
 800360a:	d112      	bne.n	8003632 <HAL_RCC_OscConfig+0x5e>
 800360c:	4b8c      	ldr	r3, [pc, #560]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003618:	d10b      	bne.n	8003632 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361a:	4b89      	ldr	r3, [pc, #548]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d06c      	beq.n	8003700 <HAL_RCC_OscConfig+0x12c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d168      	bne.n	8003700 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e24c      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363a:	d106      	bne.n	800364a <HAL_RCC_OscConfig+0x76>
 800363c:	4b80      	ldr	r3, [pc, #512]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a7f      	ldr	r2, [pc, #508]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	e02e      	b.n	80036a8 <HAL_RCC_OscConfig+0xd4>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0x98>
 8003652:	4b7b      	ldr	r3, [pc, #492]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7a      	ldr	r2, [pc, #488]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4b78      	ldr	r3, [pc, #480]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a77      	ldr	r2, [pc, #476]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003664:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e01d      	b.n	80036a8 <HAL_RCC_OscConfig+0xd4>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0xbc>
 8003676:	4b72      	ldr	r3, [pc, #456]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a71      	ldr	r2, [pc, #452]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800367c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6e      	ldr	r2, [pc, #440]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e00b      	b.n	80036a8 <HAL_RCC_OscConfig+0xd4>
 8003690:	4b6b      	ldr	r3, [pc, #428]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a6a      	ldr	r2, [pc, #424]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b68      	ldr	r3, [pc, #416]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a67      	ldr	r2, [pc, #412]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80036a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d013      	beq.n	80036d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7ff fcca 	bl	8003048 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b8:	f7ff fcc6 	bl	8003048 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e200      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b5d      	ldr	r3, [pc, #372]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0xe4>
 80036d6:	e014      	b.n	8003702 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7ff fcb6 	bl	8003048 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e0:	f7ff fcb2 	bl	8003048 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e1ec      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x10c>
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d063      	beq.n	80037d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800370e:	4b4c      	ldr	r3, [pc, #304]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800371a:	4b49      	ldr	r3, [pc, #292]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b08      	cmp	r3, #8
 8003724:	d11c      	bne.n	8003760 <HAL_RCC_OscConfig+0x18c>
 8003726:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d116      	bne.n	8003760 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003732:	4b43      	ldr	r3, [pc, #268]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_RCC_OscConfig+0x176>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d001      	beq.n	800374a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e1c0      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4939      	ldr	r1, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	e03a      	b.n	80037d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003768:	4b36      	ldr	r3, [pc, #216]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7ff fc6b 	bl	8003048 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003776:	f7ff fc67 	bl	8003048 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e1a1      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4927      	ldr	r1, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
 80037a8:	e015      	b.n	80037d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037aa:	4b26      	ldr	r3, [pc, #152]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7ff fc4a 	bl	8003048 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b8:	f7ff fc46 	bl	8003048 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e180      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d03a      	beq.n	8003858 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d019      	beq.n	800381e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ea:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_RCC_OscConfig+0x274>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f0:	f7ff fc2a 	bl	8003048 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f8:	f7ff fc26 	bl	8003048 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e160      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003816:	2001      	movs	r0, #1
 8003818:	f000 fad8 	bl	8003dcc <RCC_Delay>
 800381c:	e01c      	b.n	8003858 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_RCC_OscConfig+0x274>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003824:	f7ff fc10 	bl	8003048 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382a:	e00f      	b.n	800384c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382c:	f7ff fc0c 	bl	8003048 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d908      	bls.n	800384c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e146      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	42420000 	.word	0x42420000
 8003848:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384c:	4b92      	ldr	r3, [pc, #584]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e9      	bne.n	800382c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80a6 	beq.w	80039b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003866:	2300      	movs	r3, #0
 8003868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386a:	4b8b      	ldr	r3, [pc, #556]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10d      	bne.n	8003892 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	4b88      	ldr	r3, [pc, #544]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	4a87      	ldr	r2, [pc, #540]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	61d3      	str	r3, [r2, #28]
 8003882:	4b85      	ldr	r3, [pc, #532]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003892:	4b82      	ldr	r3, [pc, #520]	; (8003a9c <HAL_RCC_OscConfig+0x4c8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d118      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389e:	4b7f      	ldr	r3, [pc, #508]	; (8003a9c <HAL_RCC_OscConfig+0x4c8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a7e      	ldr	r2, [pc, #504]	; (8003a9c <HAL_RCC_OscConfig+0x4c8>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038aa:	f7ff fbcd 	bl	8003048 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b2:	f7ff fbc9 	bl	8003048 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b64      	cmp	r3, #100	; 0x64
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e103      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c4:	4b75      	ldr	r3, [pc, #468]	; (8003a9c <HAL_RCC_OscConfig+0x4c8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d106      	bne.n	80038e6 <HAL_RCC_OscConfig+0x312>
 80038d8:	4b6f      	ldr	r3, [pc, #444]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4a6e      	ldr	r2, [pc, #440]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6213      	str	r3, [r2, #32]
 80038e4:	e02d      	b.n	8003942 <HAL_RCC_OscConfig+0x36e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0x334>
 80038ee:	4b6a      	ldr	r3, [pc, #424]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	4a69      	ldr	r2, [pc, #420]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	6213      	str	r3, [r2, #32]
 80038fa:	4b67      	ldr	r3, [pc, #412]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	4a66      	ldr	r2, [pc, #408]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003900:	f023 0304 	bic.w	r3, r3, #4
 8003904:	6213      	str	r3, [r2, #32]
 8003906:	e01c      	b.n	8003942 <HAL_RCC_OscConfig+0x36e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	2b05      	cmp	r3, #5
 800390e:	d10c      	bne.n	800392a <HAL_RCC_OscConfig+0x356>
 8003910:	4b61      	ldr	r3, [pc, #388]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4a60      	ldr	r2, [pc, #384]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003916:	f043 0304 	orr.w	r3, r3, #4
 800391a:	6213      	str	r3, [r2, #32]
 800391c:	4b5e      	ldr	r3, [pc, #376]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	4a5d      	ldr	r2, [pc, #372]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6213      	str	r3, [r2, #32]
 8003928:	e00b      	b.n	8003942 <HAL_RCC_OscConfig+0x36e>
 800392a:	4b5b      	ldr	r3, [pc, #364]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4a5a      	ldr	r2, [pc, #360]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	6213      	str	r3, [r2, #32]
 8003936:	4b58      	ldr	r3, [pc, #352]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	4a57      	ldr	r2, [pc, #348]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	f023 0304 	bic.w	r3, r3, #4
 8003940:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d015      	beq.n	8003976 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394a:	f7ff fb7d 	bl	8003048 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003952:	f7ff fb79 	bl	8003048 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e0b1      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003968:	4b4b      	ldr	r3, [pc, #300]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ee      	beq.n	8003952 <HAL_RCC_OscConfig+0x37e>
 8003974:	e014      	b.n	80039a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003976:	f7ff fb67 	bl	8003048 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7ff fb63 	bl	8003048 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e09b      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003994:	4b40      	ldr	r3, [pc, #256]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ee      	bne.n	800397e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d105      	bne.n	80039b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a6:	4b3c      	ldr	r3, [pc, #240]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	4a3b      	ldr	r2, [pc, #236]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 8087 	beq.w	8003aca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d061      	beq.n	8003a8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d146      	bne.n	8003a5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d0:	4b33      	ldr	r3, [pc, #204]	; (8003aa0 <HAL_RCC_OscConfig+0x4cc>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d6:	f7ff fb37 	bl	8003048 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039de:	f7ff fb33 	bl	8003048 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e06d      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f0:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f0      	bne.n	80039de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d108      	bne.n	8003a18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a06:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	4921      	ldr	r1, [pc, #132]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a18:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a19      	ldr	r1, [r3, #32]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	491b      	ldr	r1, [pc, #108]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <HAL_RCC_OscConfig+0x4cc>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a36:	f7ff fb07 	bl	8003048 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7ff fb03 	bl	8003048 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e03d      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x46a>
 8003a5c:	e035      	b.n	8003aca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <HAL_RCC_OscConfig+0x4cc>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a64:	f7ff faf0 	bl	8003048 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7ff faec 	bl	8003048 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e026      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x498>
 8003a8a:	e01e      	b.n	8003aca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d107      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e019      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_OscConfig+0x500>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d001      	beq.n	8003aca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000

08003ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0d0      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aec:	4b6a      	ldr	r3, [pc, #424]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d910      	bls.n	8003b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b67      	ldr	r3, [pc, #412]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 0207 	bic.w	r2, r3, #7
 8003b02:	4965      	ldr	r1, [pc, #404]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b63      	ldr	r3, [pc, #396]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0b8      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b34:	4b59      	ldr	r3, [pc, #356]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a58      	ldr	r2, [pc, #352]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b4c:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4a52      	ldr	r2, [pc, #328]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b58:	4b50      	ldr	r3, [pc, #320]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	494d      	ldr	r1, [pc, #308]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d040      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	4b47      	ldr	r3, [pc, #284]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d115      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e07f      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d107      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b96:	4b41      	ldr	r3, [pc, #260]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e073      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba6:	4b3d      	ldr	r3, [pc, #244]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e06b      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb6:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f023 0203 	bic.w	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4936      	ldr	r1, [pc, #216]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc8:	f7ff fa3e 	bl	8003048 <HAL_GetTick>
 8003bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd0:	f7ff fa3a 	bl	8003048 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e053      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be6:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 020c 	and.w	r2, r3, #12
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d1eb      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d210      	bcs.n	8003c28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 0207 	bic.w	r2, r3, #7
 8003c0e:	4922      	ldr	r1, [pc, #136]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e032      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4916      	ldr	r1, [pc, #88]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	490e      	ldr	r1, [pc, #56]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c66:	f000 f821 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	490a      	ldr	r1, [pc, #40]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c78:	5ccb      	ldrb	r3, [r1, r3]
 8003c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7e:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <HAL_RCC_ClockConfig+0x1cc>)
 8003c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <HAL_RCC_ClockConfig+0x1d0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff f99c 	bl	8002fc4 <HAL_InitTick>

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40022000 	.word	0x40022000
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	08005294 	.word	0x08005294
 8003ca4:	20000000 	.word	0x20000000
 8003ca8:	20000004 	.word	0x20000004

08003cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cac:	b490      	push	{r4, r7}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cb2:	4b29      	ldr	r3, [pc, #164]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xac>)
 8003cb4:	1d3c      	adds	r4, r7, #4
 8003cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cbc:	f240 2301 	movw	r3, #513	; 0x201
 8003cc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cd6:	4b21      	ldr	r3, [pc, #132]	; (8003d5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d002      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x40>
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d003      	beq.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x46>
 8003cea:	e02b      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cec:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cee:	623b      	str	r3, [r7, #32]
      break;
 8003cf0:	e02b      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	0c9b      	lsrs	r3, r3, #18
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	3328      	adds	r3, #40	; 0x28
 8003cfc:	443b      	add	r3, r7
 8003cfe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d02:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d012      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	0c5b      	lsrs	r3, r3, #17
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	3328      	adds	r3, #40	; 0x28
 8003d1a:	443b      	add	r3, r7
 8003d1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d26:	fb03 f202 	mul.w	r2, r3, r2
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
 8003d32:	e004      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4a0b      	ldr	r2, [pc, #44]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d38:	fb02 f303 	mul.w	r3, r2, r3
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	623b      	str	r3, [r7, #32]
      break;
 8003d42:	e002      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d46:	623b      	str	r3, [r7, #32]
      break;
 8003d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3728      	adds	r7, #40	; 0x28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc90      	pop	{r4, r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	08005284 	.word	0x08005284
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	007a1200 	.word	0x007a1200
 8003d64:	003d0900 	.word	0x003d0900

08003d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d6c:	4b02      	ldr	r3, [pc, #8]	; (8003d78 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	20000000 	.word	0x20000000

08003d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d80:	f7ff fff2 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	080052a4 	.word	0x080052a4

08003da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003da8:	f7ff ffde 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	0adb      	lsrs	r3, r3, #11
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	080052a4 	.word	0x080052a4

08003dcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <RCC_Delay+0x34>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <RCC_Delay+0x38>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	0a5b      	lsrs	r3, r3, #9
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003de8:	bf00      	nop
  }
  while (Delay --);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	60fa      	str	r2, [r7, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f9      	bne.n	8003de8 <RCC_Delay+0x1c>
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	20000000 	.word	0x20000000
 8003e04:	10624dd3 	.word	0x10624dd3

08003e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e03f      	b.n	8003e9a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fc fe36 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	; 0x24
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f9a7 	bl	80041a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b08a      	sub	sp, #40	; 0x28
 8003ea6:	af02      	add	r7, sp, #8
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d17c      	bne.n	8003fbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_UART_Transmit+0x2c>
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e075      	b.n	8003fbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_UART_Transmit+0x3e>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e06e      	b.n	8003fbe <HAL_UART_Transmit+0x11c>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2221      	movs	r2, #33	; 0x21
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ef6:	f7ff f8a7 	bl	8003048 <HAL_GetTick>
 8003efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	88fa      	ldrh	r2, [r7, #6]
 8003f00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	88fa      	ldrh	r2, [r7, #6]
 8003f06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f10:	d108      	bne.n	8003f24 <HAL_UART_Transmit+0x82>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	e003      	b.n	8003f2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f34:	e02a      	b.n	8003f8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2180      	movs	r1, #128	; 0x80
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f8e2 	bl	800410a <UART_WaitOnFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e036      	b.n	8003fbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10b      	bne.n	8003f6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	3302      	adds	r3, #2
 8003f6a:	61bb      	str	r3, [r7, #24]
 8003f6c:	e007      	b.n	8003f7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	781a      	ldrb	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1cf      	bne.n	8003f36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2140      	movs	r1, #64	; 0x40
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f8b2 	bl	800410a <UART_WaitOnFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e006      	b.n	8003fbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e000      	b.n	8003fbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3720      	adds	r7, #32
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b08a      	sub	sp, #40	; 0x28
 8003fca:	af02      	add	r7, sp, #8
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	f040 808c 	bne.w	8004100 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_UART_Receive+0x2e>
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e084      	b.n	8004102 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_UART_Receive+0x40>
 8004002:	2302      	movs	r3, #2
 8004004:	e07d      	b.n	8004102 <HAL_UART_Receive+0x13c>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2222      	movs	r2, #34	; 0x22
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004022:	f7ff f811 	bl	8003048 <HAL_GetTick>
 8004026:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	88fa      	ldrh	r2, [r7, #6]
 800402c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	88fa      	ldrh	r2, [r7, #6]
 8004032:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403c:	d108      	bne.n	8004050 <HAL_UART_Receive+0x8a>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d104      	bne.n	8004050 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	e003      	b.n	8004058 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004060:	e043      	b.n	80040ea <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	2120      	movs	r1, #32
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f84c 	bl	800410a <UART_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e042      	b.n	8004102 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10c      	bne.n	800409c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	b29b      	uxth	r3, r3
 800408a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408e:	b29a      	uxth	r2, r3
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	3302      	adds	r3, #2
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	e01f      	b.n	80040dc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a4:	d007      	beq.n	80040b6 <HAL_UART_Receive+0xf0>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <HAL_UART_Receive+0xfe>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e008      	b.n	80040d6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3301      	adds	r3, #1
 80040da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1b6      	bne.n	8004062 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	4613      	mov	r3, r2
 8004118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411a:	e02c      	b.n	8004176 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d028      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <UART_WaitOnFlagUntilTimeout+0x30>
 800412a:	f7fe ff8d 	bl	8003048 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	429a      	cmp	r2, r3
 8004138:	d21d      	bcs.n	8004176 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004148:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e00f      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4013      	ands	r3, r2
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	bf0c      	ite	eq
 8004186:	2301      	moveq	r3, #1
 8004188:	2300      	movne	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	429a      	cmp	r2, r3
 8004192:	d0c3      	beq.n	800411c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041da:	f023 030c 	bic.w	r3, r3, #12
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2c      	ldr	r2, [pc, #176]	; (80042b4 <UART_SetConfig+0x114>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d103      	bne.n	8004210 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004208:	f7ff fdcc 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	e002      	b.n	8004216 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004210:	f7ff fdb4 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8004214:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009a      	lsls	r2, r3, #2
 8004220:	441a      	add	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <UART_SetConfig+0x118>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	0119      	lsls	r1, r3, #4
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	009a      	lsls	r2, r3, #2
 8004240:	441a      	add	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	fbb2 f2f3 	udiv	r2, r2, r3
 800424c:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <UART_SetConfig+0x118>)
 800424e:	fba3 0302 	umull	r0, r3, r3, r2
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	2064      	movs	r0, #100	; 0x64
 8004256:	fb00 f303 	mul.w	r3, r0, r3
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	3332      	adds	r3, #50	; 0x32
 8004260:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <UART_SetConfig+0x118>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800426c:	4419      	add	r1, r3
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	009a      	lsls	r2, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	fbb2 f2f3 	udiv	r2, r2, r3
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <UART_SetConfig+0x118>)
 8004286:	fba3 0302 	umull	r0, r3, r3, r2
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	2064      	movs	r0, #100	; 0x64
 800428e:	fb00 f303 	mul.w	r3, r0, r3
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	3332      	adds	r3, #50	; 0x32
 8004298:	4a07      	ldr	r2, [pc, #28]	; (80042b8 <UART_SetConfig+0x118>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	f003 020f 	and.w	r2, r3, #15
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	440a      	add	r2, r1
 80042aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40013800 	.word	0x40013800
 80042b8:	51eb851f 	.word	0x51eb851f

080042bc <__errno>:
 80042bc:	4b01      	ldr	r3, [pc, #4]	; (80042c4 <__errno+0x8>)
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	2000000c 	.word	0x2000000c

080042c8 <__libc_init_array>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	2600      	movs	r6, #0
 80042cc:	4d0c      	ldr	r5, [pc, #48]	; (8004300 <__libc_init_array+0x38>)
 80042ce:	4c0d      	ldr	r4, [pc, #52]	; (8004304 <__libc_init_array+0x3c>)
 80042d0:	1b64      	subs	r4, r4, r5
 80042d2:	10a4      	asrs	r4, r4, #2
 80042d4:	42a6      	cmp	r6, r4
 80042d6:	d109      	bne.n	80042ec <__libc_init_array+0x24>
 80042d8:	f000 ffb6 	bl	8005248 <_init>
 80042dc:	2600      	movs	r6, #0
 80042de:	4d0a      	ldr	r5, [pc, #40]	; (8004308 <__libc_init_array+0x40>)
 80042e0:	4c0a      	ldr	r4, [pc, #40]	; (800430c <__libc_init_array+0x44>)
 80042e2:	1b64      	subs	r4, r4, r5
 80042e4:	10a4      	asrs	r4, r4, #2
 80042e6:	42a6      	cmp	r6, r4
 80042e8:	d105      	bne.n	80042f6 <__libc_init_array+0x2e>
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
 80042ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f0:	4798      	blx	r3
 80042f2:	3601      	adds	r6, #1
 80042f4:	e7ee      	b.n	80042d4 <__libc_init_array+0xc>
 80042f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042fa:	4798      	blx	r3
 80042fc:	3601      	adds	r6, #1
 80042fe:	e7f2      	b.n	80042e6 <__libc_init_array+0x1e>
 8004300:	080053b8 	.word	0x080053b8
 8004304:	080053b8 	.word	0x080053b8
 8004308:	080053b8 	.word	0x080053b8
 800430c:	080053bc 	.word	0x080053bc

08004310 <memset>:
 8004310:	4603      	mov	r3, r0
 8004312:	4402      	add	r2, r0
 8004314:	4293      	cmp	r3, r2
 8004316:	d100      	bne.n	800431a <memset+0xa>
 8004318:	4770      	bx	lr
 800431a:	f803 1b01 	strb.w	r1, [r3], #1
 800431e:	e7f9      	b.n	8004314 <memset+0x4>

08004320 <iprintf>:
 8004320:	b40f      	push	{r0, r1, r2, r3}
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <iprintf+0x2c>)
 8004324:	b513      	push	{r0, r1, r4, lr}
 8004326:	681c      	ldr	r4, [r3, #0]
 8004328:	b124      	cbz	r4, 8004334 <iprintf+0x14>
 800432a:	69a3      	ldr	r3, [r4, #24]
 800432c:	b913      	cbnz	r3, 8004334 <iprintf+0x14>
 800432e:	4620      	mov	r0, r4
 8004330:	f000 f866 	bl	8004400 <__sinit>
 8004334:	ab05      	add	r3, sp, #20
 8004336:	4620      	mov	r0, r4
 8004338:	9a04      	ldr	r2, [sp, #16]
 800433a:	68a1      	ldr	r1, [r4, #8]
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	f000 f9bb 	bl	80046b8 <_vfiprintf_r>
 8004342:	b002      	add	sp, #8
 8004344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004348:	b004      	add	sp, #16
 800434a:	4770      	bx	lr
 800434c:	2000000c 	.word	0x2000000c

08004350 <std>:
 8004350:	2300      	movs	r3, #0
 8004352:	b510      	push	{r4, lr}
 8004354:	4604      	mov	r4, r0
 8004356:	e9c0 3300 	strd	r3, r3, [r0]
 800435a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800435e:	6083      	str	r3, [r0, #8]
 8004360:	8181      	strh	r1, [r0, #12]
 8004362:	6643      	str	r3, [r0, #100]	; 0x64
 8004364:	81c2      	strh	r2, [r0, #14]
 8004366:	6183      	str	r3, [r0, #24]
 8004368:	4619      	mov	r1, r3
 800436a:	2208      	movs	r2, #8
 800436c:	305c      	adds	r0, #92	; 0x5c
 800436e:	f7ff ffcf 	bl	8004310 <memset>
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <std+0x38>)
 8004374:	6224      	str	r4, [r4, #32]
 8004376:	6263      	str	r3, [r4, #36]	; 0x24
 8004378:	4b04      	ldr	r3, [pc, #16]	; (800438c <std+0x3c>)
 800437a:	62a3      	str	r3, [r4, #40]	; 0x28
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <std+0x40>)
 800437e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <std+0x44>)
 8004382:	6323      	str	r3, [r4, #48]	; 0x30
 8004384:	bd10      	pop	{r4, pc}
 8004386:	bf00      	nop
 8004388:	08004c65 	.word	0x08004c65
 800438c:	08004c87 	.word	0x08004c87
 8004390:	08004cbf 	.word	0x08004cbf
 8004394:	08004ce3 	.word	0x08004ce3

08004398 <_cleanup_r>:
 8004398:	4901      	ldr	r1, [pc, #4]	; (80043a0 <_cleanup_r+0x8>)
 800439a:	f000 b8af 	b.w	80044fc <_fwalk_reent>
 800439e:	bf00      	nop
 80043a0:	08004fb5 	.word	0x08004fb5

080043a4 <__sfmoreglue>:
 80043a4:	2268      	movs	r2, #104	; 0x68
 80043a6:	b570      	push	{r4, r5, r6, lr}
 80043a8:	1e4d      	subs	r5, r1, #1
 80043aa:	4355      	muls	r5, r2
 80043ac:	460e      	mov	r6, r1
 80043ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043b2:	f000 f8e5 	bl	8004580 <_malloc_r>
 80043b6:	4604      	mov	r4, r0
 80043b8:	b140      	cbz	r0, 80043cc <__sfmoreglue+0x28>
 80043ba:	2100      	movs	r1, #0
 80043bc:	e9c0 1600 	strd	r1, r6, [r0]
 80043c0:	300c      	adds	r0, #12
 80043c2:	60a0      	str	r0, [r4, #8]
 80043c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043c8:	f7ff ffa2 	bl	8004310 <memset>
 80043cc:	4620      	mov	r0, r4
 80043ce:	bd70      	pop	{r4, r5, r6, pc}

080043d0 <__sfp_lock_acquire>:
 80043d0:	4801      	ldr	r0, [pc, #4]	; (80043d8 <__sfp_lock_acquire+0x8>)
 80043d2:	f000 b8b3 	b.w	800453c <__retarget_lock_acquire_recursive>
 80043d6:	bf00      	nop
 80043d8:	20000e19 	.word	0x20000e19

080043dc <__sfp_lock_release>:
 80043dc:	4801      	ldr	r0, [pc, #4]	; (80043e4 <__sfp_lock_release+0x8>)
 80043de:	f000 b8ae 	b.w	800453e <__retarget_lock_release_recursive>
 80043e2:	bf00      	nop
 80043e4:	20000e19 	.word	0x20000e19

080043e8 <__sinit_lock_acquire>:
 80043e8:	4801      	ldr	r0, [pc, #4]	; (80043f0 <__sinit_lock_acquire+0x8>)
 80043ea:	f000 b8a7 	b.w	800453c <__retarget_lock_acquire_recursive>
 80043ee:	bf00      	nop
 80043f0:	20000e1a 	.word	0x20000e1a

080043f4 <__sinit_lock_release>:
 80043f4:	4801      	ldr	r0, [pc, #4]	; (80043fc <__sinit_lock_release+0x8>)
 80043f6:	f000 b8a2 	b.w	800453e <__retarget_lock_release_recursive>
 80043fa:	bf00      	nop
 80043fc:	20000e1a 	.word	0x20000e1a

08004400 <__sinit>:
 8004400:	b510      	push	{r4, lr}
 8004402:	4604      	mov	r4, r0
 8004404:	f7ff fff0 	bl	80043e8 <__sinit_lock_acquire>
 8004408:	69a3      	ldr	r3, [r4, #24]
 800440a:	b11b      	cbz	r3, 8004414 <__sinit+0x14>
 800440c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004410:	f7ff bff0 	b.w	80043f4 <__sinit_lock_release>
 8004414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004418:	6523      	str	r3, [r4, #80]	; 0x50
 800441a:	4b13      	ldr	r3, [pc, #76]	; (8004468 <__sinit+0x68>)
 800441c:	4a13      	ldr	r2, [pc, #76]	; (800446c <__sinit+0x6c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	62a2      	str	r2, [r4, #40]	; 0x28
 8004422:	42a3      	cmp	r3, r4
 8004424:	bf08      	it	eq
 8004426:	2301      	moveq	r3, #1
 8004428:	4620      	mov	r0, r4
 800442a:	bf08      	it	eq
 800442c:	61a3      	streq	r3, [r4, #24]
 800442e:	f000 f81f 	bl	8004470 <__sfp>
 8004432:	6060      	str	r0, [r4, #4]
 8004434:	4620      	mov	r0, r4
 8004436:	f000 f81b 	bl	8004470 <__sfp>
 800443a:	60a0      	str	r0, [r4, #8]
 800443c:	4620      	mov	r0, r4
 800443e:	f000 f817 	bl	8004470 <__sfp>
 8004442:	2200      	movs	r2, #0
 8004444:	2104      	movs	r1, #4
 8004446:	60e0      	str	r0, [r4, #12]
 8004448:	6860      	ldr	r0, [r4, #4]
 800444a:	f7ff ff81 	bl	8004350 <std>
 800444e:	2201      	movs	r2, #1
 8004450:	2109      	movs	r1, #9
 8004452:	68a0      	ldr	r0, [r4, #8]
 8004454:	f7ff ff7c 	bl	8004350 <std>
 8004458:	2202      	movs	r2, #2
 800445a:	2112      	movs	r1, #18
 800445c:	68e0      	ldr	r0, [r4, #12]
 800445e:	f7ff ff77 	bl	8004350 <std>
 8004462:	2301      	movs	r3, #1
 8004464:	61a3      	str	r3, [r4, #24]
 8004466:	e7d1      	b.n	800440c <__sinit+0xc>
 8004468:	08005320 	.word	0x08005320
 800446c:	08004399 	.word	0x08004399

08004470 <__sfp>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	4607      	mov	r7, r0
 8004474:	f7ff ffac 	bl	80043d0 <__sfp_lock_acquire>
 8004478:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <__sfp+0x84>)
 800447a:	681e      	ldr	r6, [r3, #0]
 800447c:	69b3      	ldr	r3, [r6, #24]
 800447e:	b913      	cbnz	r3, 8004486 <__sfp+0x16>
 8004480:	4630      	mov	r0, r6
 8004482:	f7ff ffbd 	bl	8004400 <__sinit>
 8004486:	3648      	adds	r6, #72	; 0x48
 8004488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800448c:	3b01      	subs	r3, #1
 800448e:	d503      	bpl.n	8004498 <__sfp+0x28>
 8004490:	6833      	ldr	r3, [r6, #0]
 8004492:	b30b      	cbz	r3, 80044d8 <__sfp+0x68>
 8004494:	6836      	ldr	r6, [r6, #0]
 8004496:	e7f7      	b.n	8004488 <__sfp+0x18>
 8004498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800449c:	b9d5      	cbnz	r5, 80044d4 <__sfp+0x64>
 800449e:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <__sfp+0x88>)
 80044a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044a4:	60e3      	str	r3, [r4, #12]
 80044a6:	6665      	str	r5, [r4, #100]	; 0x64
 80044a8:	f000 f847 	bl	800453a <__retarget_lock_init_recursive>
 80044ac:	f7ff ff96 	bl	80043dc <__sfp_lock_release>
 80044b0:	2208      	movs	r2, #8
 80044b2:	4629      	mov	r1, r5
 80044b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044bc:	6025      	str	r5, [r4, #0]
 80044be:	61a5      	str	r5, [r4, #24]
 80044c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044c4:	f7ff ff24 	bl	8004310 <memset>
 80044c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044d0:	4620      	mov	r0, r4
 80044d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044d4:	3468      	adds	r4, #104	; 0x68
 80044d6:	e7d9      	b.n	800448c <__sfp+0x1c>
 80044d8:	2104      	movs	r1, #4
 80044da:	4638      	mov	r0, r7
 80044dc:	f7ff ff62 	bl	80043a4 <__sfmoreglue>
 80044e0:	4604      	mov	r4, r0
 80044e2:	6030      	str	r0, [r6, #0]
 80044e4:	2800      	cmp	r0, #0
 80044e6:	d1d5      	bne.n	8004494 <__sfp+0x24>
 80044e8:	f7ff ff78 	bl	80043dc <__sfp_lock_release>
 80044ec:	230c      	movs	r3, #12
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	e7ee      	b.n	80044d0 <__sfp+0x60>
 80044f2:	bf00      	nop
 80044f4:	08005320 	.word	0x08005320
 80044f8:	ffff0001 	.word	0xffff0001

080044fc <_fwalk_reent>:
 80044fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004500:	4606      	mov	r6, r0
 8004502:	4688      	mov	r8, r1
 8004504:	2700      	movs	r7, #0
 8004506:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800450a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800450e:	f1b9 0901 	subs.w	r9, r9, #1
 8004512:	d505      	bpl.n	8004520 <_fwalk_reent+0x24>
 8004514:	6824      	ldr	r4, [r4, #0]
 8004516:	2c00      	cmp	r4, #0
 8004518:	d1f7      	bne.n	800450a <_fwalk_reent+0xe>
 800451a:	4638      	mov	r0, r7
 800451c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004520:	89ab      	ldrh	r3, [r5, #12]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d907      	bls.n	8004536 <_fwalk_reent+0x3a>
 8004526:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800452a:	3301      	adds	r3, #1
 800452c:	d003      	beq.n	8004536 <_fwalk_reent+0x3a>
 800452e:	4629      	mov	r1, r5
 8004530:	4630      	mov	r0, r6
 8004532:	47c0      	blx	r8
 8004534:	4307      	orrs	r7, r0
 8004536:	3568      	adds	r5, #104	; 0x68
 8004538:	e7e9      	b.n	800450e <_fwalk_reent+0x12>

0800453a <__retarget_lock_init_recursive>:
 800453a:	4770      	bx	lr

0800453c <__retarget_lock_acquire_recursive>:
 800453c:	4770      	bx	lr

0800453e <__retarget_lock_release_recursive>:
 800453e:	4770      	bx	lr

08004540 <sbrk_aligned>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	4e0e      	ldr	r6, [pc, #56]	; (800457c <sbrk_aligned+0x3c>)
 8004544:	460c      	mov	r4, r1
 8004546:	6831      	ldr	r1, [r6, #0]
 8004548:	4605      	mov	r5, r0
 800454a:	b911      	cbnz	r1, 8004552 <sbrk_aligned+0x12>
 800454c:	f000 fb7a 	bl	8004c44 <_sbrk_r>
 8004550:	6030      	str	r0, [r6, #0]
 8004552:	4621      	mov	r1, r4
 8004554:	4628      	mov	r0, r5
 8004556:	f000 fb75 	bl	8004c44 <_sbrk_r>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	d00a      	beq.n	8004574 <sbrk_aligned+0x34>
 800455e:	1cc4      	adds	r4, r0, #3
 8004560:	f024 0403 	bic.w	r4, r4, #3
 8004564:	42a0      	cmp	r0, r4
 8004566:	d007      	beq.n	8004578 <sbrk_aligned+0x38>
 8004568:	1a21      	subs	r1, r4, r0
 800456a:	4628      	mov	r0, r5
 800456c:	f000 fb6a 	bl	8004c44 <_sbrk_r>
 8004570:	3001      	adds	r0, #1
 8004572:	d101      	bne.n	8004578 <sbrk_aligned+0x38>
 8004574:	f04f 34ff 	mov.w	r4, #4294967295
 8004578:	4620      	mov	r0, r4
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	20000e20 	.word	0x20000e20

08004580 <_malloc_r>:
 8004580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004584:	1ccd      	adds	r5, r1, #3
 8004586:	f025 0503 	bic.w	r5, r5, #3
 800458a:	3508      	adds	r5, #8
 800458c:	2d0c      	cmp	r5, #12
 800458e:	bf38      	it	cc
 8004590:	250c      	movcc	r5, #12
 8004592:	2d00      	cmp	r5, #0
 8004594:	4607      	mov	r7, r0
 8004596:	db01      	blt.n	800459c <_malloc_r+0x1c>
 8004598:	42a9      	cmp	r1, r5
 800459a:	d905      	bls.n	80045a8 <_malloc_r+0x28>
 800459c:	230c      	movs	r3, #12
 800459e:	2600      	movs	r6, #0
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	4630      	mov	r0, r6
 80045a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045a8:	4e2e      	ldr	r6, [pc, #184]	; (8004664 <_malloc_r+0xe4>)
 80045aa:	f000 fdc5 	bl	8005138 <__malloc_lock>
 80045ae:	6833      	ldr	r3, [r6, #0]
 80045b0:	461c      	mov	r4, r3
 80045b2:	bb34      	cbnz	r4, 8004602 <_malloc_r+0x82>
 80045b4:	4629      	mov	r1, r5
 80045b6:	4638      	mov	r0, r7
 80045b8:	f7ff ffc2 	bl	8004540 <sbrk_aligned>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	4604      	mov	r4, r0
 80045c0:	d14d      	bne.n	800465e <_malloc_r+0xde>
 80045c2:	6834      	ldr	r4, [r6, #0]
 80045c4:	4626      	mov	r6, r4
 80045c6:	2e00      	cmp	r6, #0
 80045c8:	d140      	bne.n	800464c <_malloc_r+0xcc>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	4631      	mov	r1, r6
 80045ce:	4638      	mov	r0, r7
 80045d0:	eb04 0803 	add.w	r8, r4, r3
 80045d4:	f000 fb36 	bl	8004c44 <_sbrk_r>
 80045d8:	4580      	cmp	r8, r0
 80045da:	d13a      	bne.n	8004652 <_malloc_r+0xd2>
 80045dc:	6821      	ldr	r1, [r4, #0]
 80045de:	3503      	adds	r5, #3
 80045e0:	1a6d      	subs	r5, r5, r1
 80045e2:	f025 0503 	bic.w	r5, r5, #3
 80045e6:	3508      	adds	r5, #8
 80045e8:	2d0c      	cmp	r5, #12
 80045ea:	bf38      	it	cc
 80045ec:	250c      	movcc	r5, #12
 80045ee:	4638      	mov	r0, r7
 80045f0:	4629      	mov	r1, r5
 80045f2:	f7ff ffa5 	bl	8004540 <sbrk_aligned>
 80045f6:	3001      	adds	r0, #1
 80045f8:	d02b      	beq.n	8004652 <_malloc_r+0xd2>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	442b      	add	r3, r5
 80045fe:	6023      	str	r3, [r4, #0]
 8004600:	e00e      	b.n	8004620 <_malloc_r+0xa0>
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	1b52      	subs	r2, r2, r5
 8004606:	d41e      	bmi.n	8004646 <_malloc_r+0xc6>
 8004608:	2a0b      	cmp	r2, #11
 800460a:	d916      	bls.n	800463a <_malloc_r+0xba>
 800460c:	1961      	adds	r1, r4, r5
 800460e:	42a3      	cmp	r3, r4
 8004610:	6025      	str	r5, [r4, #0]
 8004612:	bf18      	it	ne
 8004614:	6059      	strne	r1, [r3, #4]
 8004616:	6863      	ldr	r3, [r4, #4]
 8004618:	bf08      	it	eq
 800461a:	6031      	streq	r1, [r6, #0]
 800461c:	5162      	str	r2, [r4, r5]
 800461e:	604b      	str	r3, [r1, #4]
 8004620:	4638      	mov	r0, r7
 8004622:	f104 060b 	add.w	r6, r4, #11
 8004626:	f000 fd8d 	bl	8005144 <__malloc_unlock>
 800462a:	f026 0607 	bic.w	r6, r6, #7
 800462e:	1d23      	adds	r3, r4, #4
 8004630:	1af2      	subs	r2, r6, r3
 8004632:	d0b6      	beq.n	80045a2 <_malloc_r+0x22>
 8004634:	1b9b      	subs	r3, r3, r6
 8004636:	50a3      	str	r3, [r4, r2]
 8004638:	e7b3      	b.n	80045a2 <_malloc_r+0x22>
 800463a:	6862      	ldr	r2, [r4, #4]
 800463c:	42a3      	cmp	r3, r4
 800463e:	bf0c      	ite	eq
 8004640:	6032      	streq	r2, [r6, #0]
 8004642:	605a      	strne	r2, [r3, #4]
 8004644:	e7ec      	b.n	8004620 <_malloc_r+0xa0>
 8004646:	4623      	mov	r3, r4
 8004648:	6864      	ldr	r4, [r4, #4]
 800464a:	e7b2      	b.n	80045b2 <_malloc_r+0x32>
 800464c:	4634      	mov	r4, r6
 800464e:	6876      	ldr	r6, [r6, #4]
 8004650:	e7b9      	b.n	80045c6 <_malloc_r+0x46>
 8004652:	230c      	movs	r3, #12
 8004654:	4638      	mov	r0, r7
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	f000 fd74 	bl	8005144 <__malloc_unlock>
 800465c:	e7a1      	b.n	80045a2 <_malloc_r+0x22>
 800465e:	6025      	str	r5, [r4, #0]
 8004660:	e7de      	b.n	8004620 <_malloc_r+0xa0>
 8004662:	bf00      	nop
 8004664:	20000e1c 	.word	0x20000e1c

08004668 <__sfputc_r>:
 8004668:	6893      	ldr	r3, [r2, #8]
 800466a:	b410      	push	{r4}
 800466c:	3b01      	subs	r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	6093      	str	r3, [r2, #8]
 8004672:	da07      	bge.n	8004684 <__sfputc_r+0x1c>
 8004674:	6994      	ldr	r4, [r2, #24]
 8004676:	42a3      	cmp	r3, r4
 8004678:	db01      	blt.n	800467e <__sfputc_r+0x16>
 800467a:	290a      	cmp	r1, #10
 800467c:	d102      	bne.n	8004684 <__sfputc_r+0x1c>
 800467e:	bc10      	pop	{r4}
 8004680:	f000 bb34 	b.w	8004cec <__swbuf_r>
 8004684:	6813      	ldr	r3, [r2, #0]
 8004686:	1c58      	adds	r0, r3, #1
 8004688:	6010      	str	r0, [r2, #0]
 800468a:	7019      	strb	r1, [r3, #0]
 800468c:	4608      	mov	r0, r1
 800468e:	bc10      	pop	{r4}
 8004690:	4770      	bx	lr

08004692 <__sfputs_r>:
 8004692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004694:	4606      	mov	r6, r0
 8004696:	460f      	mov	r7, r1
 8004698:	4614      	mov	r4, r2
 800469a:	18d5      	adds	r5, r2, r3
 800469c:	42ac      	cmp	r4, r5
 800469e:	d101      	bne.n	80046a4 <__sfputs_r+0x12>
 80046a0:	2000      	movs	r0, #0
 80046a2:	e007      	b.n	80046b4 <__sfputs_r+0x22>
 80046a4:	463a      	mov	r2, r7
 80046a6:	4630      	mov	r0, r6
 80046a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ac:	f7ff ffdc 	bl	8004668 <__sfputc_r>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	d1f3      	bne.n	800469c <__sfputs_r+0xa>
 80046b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046b8 <_vfiprintf_r>:
 80046b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046bc:	460d      	mov	r5, r1
 80046be:	4614      	mov	r4, r2
 80046c0:	4698      	mov	r8, r3
 80046c2:	4606      	mov	r6, r0
 80046c4:	b09d      	sub	sp, #116	; 0x74
 80046c6:	b118      	cbz	r0, 80046d0 <_vfiprintf_r+0x18>
 80046c8:	6983      	ldr	r3, [r0, #24]
 80046ca:	b90b      	cbnz	r3, 80046d0 <_vfiprintf_r+0x18>
 80046cc:	f7ff fe98 	bl	8004400 <__sinit>
 80046d0:	4b89      	ldr	r3, [pc, #548]	; (80048f8 <_vfiprintf_r+0x240>)
 80046d2:	429d      	cmp	r5, r3
 80046d4:	d11b      	bne.n	800470e <_vfiprintf_r+0x56>
 80046d6:	6875      	ldr	r5, [r6, #4]
 80046d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046da:	07d9      	lsls	r1, r3, #31
 80046dc:	d405      	bmi.n	80046ea <_vfiprintf_r+0x32>
 80046de:	89ab      	ldrh	r3, [r5, #12]
 80046e0:	059a      	lsls	r2, r3, #22
 80046e2:	d402      	bmi.n	80046ea <_vfiprintf_r+0x32>
 80046e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046e6:	f7ff ff29 	bl	800453c <__retarget_lock_acquire_recursive>
 80046ea:	89ab      	ldrh	r3, [r5, #12]
 80046ec:	071b      	lsls	r3, r3, #28
 80046ee:	d501      	bpl.n	80046f4 <_vfiprintf_r+0x3c>
 80046f0:	692b      	ldr	r3, [r5, #16]
 80046f2:	b9eb      	cbnz	r3, 8004730 <_vfiprintf_r+0x78>
 80046f4:	4629      	mov	r1, r5
 80046f6:	4630      	mov	r0, r6
 80046f8:	f000 fb5c 	bl	8004db4 <__swsetup_r>
 80046fc:	b1c0      	cbz	r0, 8004730 <_vfiprintf_r+0x78>
 80046fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004700:	07dc      	lsls	r4, r3, #31
 8004702:	d50e      	bpl.n	8004722 <_vfiprintf_r+0x6a>
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	b01d      	add	sp, #116	; 0x74
 800470a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800470e:	4b7b      	ldr	r3, [pc, #492]	; (80048fc <_vfiprintf_r+0x244>)
 8004710:	429d      	cmp	r5, r3
 8004712:	d101      	bne.n	8004718 <_vfiprintf_r+0x60>
 8004714:	68b5      	ldr	r5, [r6, #8]
 8004716:	e7df      	b.n	80046d8 <_vfiprintf_r+0x20>
 8004718:	4b79      	ldr	r3, [pc, #484]	; (8004900 <_vfiprintf_r+0x248>)
 800471a:	429d      	cmp	r5, r3
 800471c:	bf08      	it	eq
 800471e:	68f5      	ldreq	r5, [r6, #12]
 8004720:	e7da      	b.n	80046d8 <_vfiprintf_r+0x20>
 8004722:	89ab      	ldrh	r3, [r5, #12]
 8004724:	0598      	lsls	r0, r3, #22
 8004726:	d4ed      	bmi.n	8004704 <_vfiprintf_r+0x4c>
 8004728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800472a:	f7ff ff08 	bl	800453e <__retarget_lock_release_recursive>
 800472e:	e7e9      	b.n	8004704 <_vfiprintf_r+0x4c>
 8004730:	2300      	movs	r3, #0
 8004732:	9309      	str	r3, [sp, #36]	; 0x24
 8004734:	2320      	movs	r3, #32
 8004736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800473a:	2330      	movs	r3, #48	; 0x30
 800473c:	f04f 0901 	mov.w	r9, #1
 8004740:	f8cd 800c 	str.w	r8, [sp, #12]
 8004744:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004904 <_vfiprintf_r+0x24c>
 8004748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800474c:	4623      	mov	r3, r4
 800474e:	469a      	mov	sl, r3
 8004750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004754:	b10a      	cbz	r2, 800475a <_vfiprintf_r+0xa2>
 8004756:	2a25      	cmp	r2, #37	; 0x25
 8004758:	d1f9      	bne.n	800474e <_vfiprintf_r+0x96>
 800475a:	ebba 0b04 	subs.w	fp, sl, r4
 800475e:	d00b      	beq.n	8004778 <_vfiprintf_r+0xc0>
 8004760:	465b      	mov	r3, fp
 8004762:	4622      	mov	r2, r4
 8004764:	4629      	mov	r1, r5
 8004766:	4630      	mov	r0, r6
 8004768:	f7ff ff93 	bl	8004692 <__sfputs_r>
 800476c:	3001      	adds	r0, #1
 800476e:	f000 80aa 	beq.w	80048c6 <_vfiprintf_r+0x20e>
 8004772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004774:	445a      	add	r2, fp
 8004776:	9209      	str	r2, [sp, #36]	; 0x24
 8004778:	f89a 3000 	ldrb.w	r3, [sl]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80a2 	beq.w	80048c6 <_vfiprintf_r+0x20e>
 8004782:	2300      	movs	r3, #0
 8004784:	f04f 32ff 	mov.w	r2, #4294967295
 8004788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800478c:	f10a 0a01 	add.w	sl, sl, #1
 8004790:	9304      	str	r3, [sp, #16]
 8004792:	9307      	str	r3, [sp, #28]
 8004794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004798:	931a      	str	r3, [sp, #104]	; 0x68
 800479a:	4654      	mov	r4, sl
 800479c:	2205      	movs	r2, #5
 800479e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a2:	4858      	ldr	r0, [pc, #352]	; (8004904 <_vfiprintf_r+0x24c>)
 80047a4:	f000 fcba 	bl	800511c <memchr>
 80047a8:	9a04      	ldr	r2, [sp, #16]
 80047aa:	b9d8      	cbnz	r0, 80047e4 <_vfiprintf_r+0x12c>
 80047ac:	06d1      	lsls	r1, r2, #27
 80047ae:	bf44      	itt	mi
 80047b0:	2320      	movmi	r3, #32
 80047b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047b6:	0713      	lsls	r3, r2, #28
 80047b8:	bf44      	itt	mi
 80047ba:	232b      	movmi	r3, #43	; 0x2b
 80047bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047c0:	f89a 3000 	ldrb.w	r3, [sl]
 80047c4:	2b2a      	cmp	r3, #42	; 0x2a
 80047c6:	d015      	beq.n	80047f4 <_vfiprintf_r+0x13c>
 80047c8:	4654      	mov	r4, sl
 80047ca:	2000      	movs	r0, #0
 80047cc:	f04f 0c0a 	mov.w	ip, #10
 80047d0:	9a07      	ldr	r2, [sp, #28]
 80047d2:	4621      	mov	r1, r4
 80047d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047d8:	3b30      	subs	r3, #48	; 0x30
 80047da:	2b09      	cmp	r3, #9
 80047dc:	d94e      	bls.n	800487c <_vfiprintf_r+0x1c4>
 80047de:	b1b0      	cbz	r0, 800480e <_vfiprintf_r+0x156>
 80047e0:	9207      	str	r2, [sp, #28]
 80047e2:	e014      	b.n	800480e <_vfiprintf_r+0x156>
 80047e4:	eba0 0308 	sub.w	r3, r0, r8
 80047e8:	fa09 f303 	lsl.w	r3, r9, r3
 80047ec:	4313      	orrs	r3, r2
 80047ee:	46a2      	mov	sl, r4
 80047f0:	9304      	str	r3, [sp, #16]
 80047f2:	e7d2      	b.n	800479a <_vfiprintf_r+0xe2>
 80047f4:	9b03      	ldr	r3, [sp, #12]
 80047f6:	1d19      	adds	r1, r3, #4
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	9103      	str	r1, [sp, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bfbb      	ittet	lt
 8004800:	425b      	neglt	r3, r3
 8004802:	f042 0202 	orrlt.w	r2, r2, #2
 8004806:	9307      	strge	r3, [sp, #28]
 8004808:	9307      	strlt	r3, [sp, #28]
 800480a:	bfb8      	it	lt
 800480c:	9204      	strlt	r2, [sp, #16]
 800480e:	7823      	ldrb	r3, [r4, #0]
 8004810:	2b2e      	cmp	r3, #46	; 0x2e
 8004812:	d10c      	bne.n	800482e <_vfiprintf_r+0x176>
 8004814:	7863      	ldrb	r3, [r4, #1]
 8004816:	2b2a      	cmp	r3, #42	; 0x2a
 8004818:	d135      	bne.n	8004886 <_vfiprintf_r+0x1ce>
 800481a:	9b03      	ldr	r3, [sp, #12]
 800481c:	3402      	adds	r4, #2
 800481e:	1d1a      	adds	r2, r3, #4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	9203      	str	r2, [sp, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	bfb8      	it	lt
 8004828:	f04f 33ff 	movlt.w	r3, #4294967295
 800482c:	9305      	str	r3, [sp, #20]
 800482e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004908 <_vfiprintf_r+0x250>
 8004832:	2203      	movs	r2, #3
 8004834:	4650      	mov	r0, sl
 8004836:	7821      	ldrb	r1, [r4, #0]
 8004838:	f000 fc70 	bl	800511c <memchr>
 800483c:	b140      	cbz	r0, 8004850 <_vfiprintf_r+0x198>
 800483e:	2340      	movs	r3, #64	; 0x40
 8004840:	eba0 000a 	sub.w	r0, r0, sl
 8004844:	fa03 f000 	lsl.w	r0, r3, r0
 8004848:	9b04      	ldr	r3, [sp, #16]
 800484a:	3401      	adds	r4, #1
 800484c:	4303      	orrs	r3, r0
 800484e:	9304      	str	r3, [sp, #16]
 8004850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004854:	2206      	movs	r2, #6
 8004856:	482d      	ldr	r0, [pc, #180]	; (800490c <_vfiprintf_r+0x254>)
 8004858:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800485c:	f000 fc5e 	bl	800511c <memchr>
 8004860:	2800      	cmp	r0, #0
 8004862:	d03f      	beq.n	80048e4 <_vfiprintf_r+0x22c>
 8004864:	4b2a      	ldr	r3, [pc, #168]	; (8004910 <_vfiprintf_r+0x258>)
 8004866:	bb1b      	cbnz	r3, 80048b0 <_vfiprintf_r+0x1f8>
 8004868:	9b03      	ldr	r3, [sp, #12]
 800486a:	3307      	adds	r3, #7
 800486c:	f023 0307 	bic.w	r3, r3, #7
 8004870:	3308      	adds	r3, #8
 8004872:	9303      	str	r3, [sp, #12]
 8004874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004876:	443b      	add	r3, r7
 8004878:	9309      	str	r3, [sp, #36]	; 0x24
 800487a:	e767      	b.n	800474c <_vfiprintf_r+0x94>
 800487c:	460c      	mov	r4, r1
 800487e:	2001      	movs	r0, #1
 8004880:	fb0c 3202 	mla	r2, ip, r2, r3
 8004884:	e7a5      	b.n	80047d2 <_vfiprintf_r+0x11a>
 8004886:	2300      	movs	r3, #0
 8004888:	f04f 0c0a 	mov.w	ip, #10
 800488c:	4619      	mov	r1, r3
 800488e:	3401      	adds	r4, #1
 8004890:	9305      	str	r3, [sp, #20]
 8004892:	4620      	mov	r0, r4
 8004894:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004898:	3a30      	subs	r2, #48	; 0x30
 800489a:	2a09      	cmp	r2, #9
 800489c:	d903      	bls.n	80048a6 <_vfiprintf_r+0x1ee>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0c5      	beq.n	800482e <_vfiprintf_r+0x176>
 80048a2:	9105      	str	r1, [sp, #20]
 80048a4:	e7c3      	b.n	800482e <_vfiprintf_r+0x176>
 80048a6:	4604      	mov	r4, r0
 80048a8:	2301      	movs	r3, #1
 80048aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80048ae:	e7f0      	b.n	8004892 <_vfiprintf_r+0x1da>
 80048b0:	ab03      	add	r3, sp, #12
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	462a      	mov	r2, r5
 80048b6:	4630      	mov	r0, r6
 80048b8:	4b16      	ldr	r3, [pc, #88]	; (8004914 <_vfiprintf_r+0x25c>)
 80048ba:	a904      	add	r1, sp, #16
 80048bc:	f3af 8000 	nop.w
 80048c0:	4607      	mov	r7, r0
 80048c2:	1c78      	adds	r0, r7, #1
 80048c4:	d1d6      	bne.n	8004874 <_vfiprintf_r+0x1bc>
 80048c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048c8:	07d9      	lsls	r1, r3, #31
 80048ca:	d405      	bmi.n	80048d8 <_vfiprintf_r+0x220>
 80048cc:	89ab      	ldrh	r3, [r5, #12]
 80048ce:	059a      	lsls	r2, r3, #22
 80048d0:	d402      	bmi.n	80048d8 <_vfiprintf_r+0x220>
 80048d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048d4:	f7ff fe33 	bl	800453e <__retarget_lock_release_recursive>
 80048d8:	89ab      	ldrh	r3, [r5, #12]
 80048da:	065b      	lsls	r3, r3, #25
 80048dc:	f53f af12 	bmi.w	8004704 <_vfiprintf_r+0x4c>
 80048e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048e2:	e711      	b.n	8004708 <_vfiprintf_r+0x50>
 80048e4:	ab03      	add	r3, sp, #12
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	462a      	mov	r2, r5
 80048ea:	4630      	mov	r0, r6
 80048ec:	4b09      	ldr	r3, [pc, #36]	; (8004914 <_vfiprintf_r+0x25c>)
 80048ee:	a904      	add	r1, sp, #16
 80048f0:	f000 f882 	bl	80049f8 <_printf_i>
 80048f4:	e7e4      	b.n	80048c0 <_vfiprintf_r+0x208>
 80048f6:	bf00      	nop
 80048f8:	08005344 	.word	0x08005344
 80048fc:	08005364 	.word	0x08005364
 8004900:	08005324 	.word	0x08005324
 8004904:	08005384 	.word	0x08005384
 8004908:	0800538a 	.word	0x0800538a
 800490c:	0800538e 	.word	0x0800538e
 8004910:	00000000 	.word	0x00000000
 8004914:	08004693 	.word	0x08004693

08004918 <_printf_common>:
 8004918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800491c:	4616      	mov	r6, r2
 800491e:	4699      	mov	r9, r3
 8004920:	688a      	ldr	r2, [r1, #8]
 8004922:	690b      	ldr	r3, [r1, #16]
 8004924:	4607      	mov	r7, r0
 8004926:	4293      	cmp	r3, r2
 8004928:	bfb8      	it	lt
 800492a:	4613      	movlt	r3, r2
 800492c:	6033      	str	r3, [r6, #0]
 800492e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004932:	460c      	mov	r4, r1
 8004934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004938:	b10a      	cbz	r2, 800493e <_printf_common+0x26>
 800493a:	3301      	adds	r3, #1
 800493c:	6033      	str	r3, [r6, #0]
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	0699      	lsls	r1, r3, #26
 8004942:	bf42      	ittt	mi
 8004944:	6833      	ldrmi	r3, [r6, #0]
 8004946:	3302      	addmi	r3, #2
 8004948:	6033      	strmi	r3, [r6, #0]
 800494a:	6825      	ldr	r5, [r4, #0]
 800494c:	f015 0506 	ands.w	r5, r5, #6
 8004950:	d106      	bne.n	8004960 <_printf_common+0x48>
 8004952:	f104 0a19 	add.w	sl, r4, #25
 8004956:	68e3      	ldr	r3, [r4, #12]
 8004958:	6832      	ldr	r2, [r6, #0]
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	42ab      	cmp	r3, r5
 800495e:	dc28      	bgt.n	80049b2 <_printf_common+0x9a>
 8004960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004964:	1e13      	subs	r3, r2, #0
 8004966:	6822      	ldr	r2, [r4, #0]
 8004968:	bf18      	it	ne
 800496a:	2301      	movne	r3, #1
 800496c:	0692      	lsls	r2, r2, #26
 800496e:	d42d      	bmi.n	80049cc <_printf_common+0xb4>
 8004970:	4649      	mov	r1, r9
 8004972:	4638      	mov	r0, r7
 8004974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004978:	47c0      	blx	r8
 800497a:	3001      	adds	r0, #1
 800497c:	d020      	beq.n	80049c0 <_printf_common+0xa8>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	68e5      	ldr	r5, [r4, #12]
 8004982:	f003 0306 	and.w	r3, r3, #6
 8004986:	2b04      	cmp	r3, #4
 8004988:	bf18      	it	ne
 800498a:	2500      	movne	r5, #0
 800498c:	6832      	ldr	r2, [r6, #0]
 800498e:	f04f 0600 	mov.w	r6, #0
 8004992:	68a3      	ldr	r3, [r4, #8]
 8004994:	bf08      	it	eq
 8004996:	1aad      	subeq	r5, r5, r2
 8004998:	6922      	ldr	r2, [r4, #16]
 800499a:	bf08      	it	eq
 800499c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049a0:	4293      	cmp	r3, r2
 80049a2:	bfc4      	itt	gt
 80049a4:	1a9b      	subgt	r3, r3, r2
 80049a6:	18ed      	addgt	r5, r5, r3
 80049a8:	341a      	adds	r4, #26
 80049aa:	42b5      	cmp	r5, r6
 80049ac:	d11a      	bne.n	80049e4 <_printf_common+0xcc>
 80049ae:	2000      	movs	r0, #0
 80049b0:	e008      	b.n	80049c4 <_printf_common+0xac>
 80049b2:	2301      	movs	r3, #1
 80049b4:	4652      	mov	r2, sl
 80049b6:	4649      	mov	r1, r9
 80049b8:	4638      	mov	r0, r7
 80049ba:	47c0      	blx	r8
 80049bc:	3001      	adds	r0, #1
 80049be:	d103      	bne.n	80049c8 <_printf_common+0xb0>
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c8:	3501      	adds	r5, #1
 80049ca:	e7c4      	b.n	8004956 <_printf_common+0x3e>
 80049cc:	2030      	movs	r0, #48	; 0x30
 80049ce:	18e1      	adds	r1, r4, r3
 80049d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049da:	4422      	add	r2, r4
 80049dc:	3302      	adds	r3, #2
 80049de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049e2:	e7c5      	b.n	8004970 <_printf_common+0x58>
 80049e4:	2301      	movs	r3, #1
 80049e6:	4622      	mov	r2, r4
 80049e8:	4649      	mov	r1, r9
 80049ea:	4638      	mov	r0, r7
 80049ec:	47c0      	blx	r8
 80049ee:	3001      	adds	r0, #1
 80049f0:	d0e6      	beq.n	80049c0 <_printf_common+0xa8>
 80049f2:	3601      	adds	r6, #1
 80049f4:	e7d9      	b.n	80049aa <_printf_common+0x92>
	...

080049f8 <_printf_i>:
 80049f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049fc:	7e0f      	ldrb	r7, [r1, #24]
 80049fe:	4691      	mov	r9, r2
 8004a00:	2f78      	cmp	r7, #120	; 0x78
 8004a02:	4680      	mov	r8, r0
 8004a04:	460c      	mov	r4, r1
 8004a06:	469a      	mov	sl, r3
 8004a08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a0e:	d807      	bhi.n	8004a20 <_printf_i+0x28>
 8004a10:	2f62      	cmp	r7, #98	; 0x62
 8004a12:	d80a      	bhi.n	8004a2a <_printf_i+0x32>
 8004a14:	2f00      	cmp	r7, #0
 8004a16:	f000 80d9 	beq.w	8004bcc <_printf_i+0x1d4>
 8004a1a:	2f58      	cmp	r7, #88	; 0x58
 8004a1c:	f000 80a4 	beq.w	8004b68 <_printf_i+0x170>
 8004a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a28:	e03a      	b.n	8004aa0 <_printf_i+0xa8>
 8004a2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a2e:	2b15      	cmp	r3, #21
 8004a30:	d8f6      	bhi.n	8004a20 <_printf_i+0x28>
 8004a32:	a101      	add	r1, pc, #4	; (adr r1, 8004a38 <_printf_i+0x40>)
 8004a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a38:	08004a91 	.word	0x08004a91
 8004a3c:	08004aa5 	.word	0x08004aa5
 8004a40:	08004a21 	.word	0x08004a21
 8004a44:	08004a21 	.word	0x08004a21
 8004a48:	08004a21 	.word	0x08004a21
 8004a4c:	08004a21 	.word	0x08004a21
 8004a50:	08004aa5 	.word	0x08004aa5
 8004a54:	08004a21 	.word	0x08004a21
 8004a58:	08004a21 	.word	0x08004a21
 8004a5c:	08004a21 	.word	0x08004a21
 8004a60:	08004a21 	.word	0x08004a21
 8004a64:	08004bb3 	.word	0x08004bb3
 8004a68:	08004ad5 	.word	0x08004ad5
 8004a6c:	08004b95 	.word	0x08004b95
 8004a70:	08004a21 	.word	0x08004a21
 8004a74:	08004a21 	.word	0x08004a21
 8004a78:	08004bd5 	.word	0x08004bd5
 8004a7c:	08004a21 	.word	0x08004a21
 8004a80:	08004ad5 	.word	0x08004ad5
 8004a84:	08004a21 	.word	0x08004a21
 8004a88:	08004a21 	.word	0x08004a21
 8004a8c:	08004b9d 	.word	0x08004b9d
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	1d1a      	adds	r2, r3, #4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	602a      	str	r2, [r5, #0]
 8004a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0a4      	b.n	8004bee <_printf_i+0x1f6>
 8004aa4:	6820      	ldr	r0, [r4, #0]
 8004aa6:	6829      	ldr	r1, [r5, #0]
 8004aa8:	0606      	lsls	r6, r0, #24
 8004aaa:	f101 0304 	add.w	r3, r1, #4
 8004aae:	d50a      	bpl.n	8004ac6 <_printf_i+0xce>
 8004ab0:	680e      	ldr	r6, [r1, #0]
 8004ab2:	602b      	str	r3, [r5, #0]
 8004ab4:	2e00      	cmp	r6, #0
 8004ab6:	da03      	bge.n	8004ac0 <_printf_i+0xc8>
 8004ab8:	232d      	movs	r3, #45	; 0x2d
 8004aba:	4276      	negs	r6, r6
 8004abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac0:	230a      	movs	r3, #10
 8004ac2:	485e      	ldr	r0, [pc, #376]	; (8004c3c <_printf_i+0x244>)
 8004ac4:	e019      	b.n	8004afa <_printf_i+0x102>
 8004ac6:	680e      	ldr	r6, [r1, #0]
 8004ac8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004acc:	602b      	str	r3, [r5, #0]
 8004ace:	bf18      	it	ne
 8004ad0:	b236      	sxthne	r6, r6
 8004ad2:	e7ef      	b.n	8004ab4 <_printf_i+0xbc>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	6820      	ldr	r0, [r4, #0]
 8004ad8:	1d19      	adds	r1, r3, #4
 8004ada:	6029      	str	r1, [r5, #0]
 8004adc:	0601      	lsls	r1, r0, #24
 8004ade:	d501      	bpl.n	8004ae4 <_printf_i+0xec>
 8004ae0:	681e      	ldr	r6, [r3, #0]
 8004ae2:	e002      	b.n	8004aea <_printf_i+0xf2>
 8004ae4:	0646      	lsls	r6, r0, #25
 8004ae6:	d5fb      	bpl.n	8004ae0 <_printf_i+0xe8>
 8004ae8:	881e      	ldrh	r6, [r3, #0]
 8004aea:	2f6f      	cmp	r7, #111	; 0x6f
 8004aec:	bf0c      	ite	eq
 8004aee:	2308      	moveq	r3, #8
 8004af0:	230a      	movne	r3, #10
 8004af2:	4852      	ldr	r0, [pc, #328]	; (8004c3c <_printf_i+0x244>)
 8004af4:	2100      	movs	r1, #0
 8004af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004afa:	6865      	ldr	r5, [r4, #4]
 8004afc:	2d00      	cmp	r5, #0
 8004afe:	bfa8      	it	ge
 8004b00:	6821      	ldrge	r1, [r4, #0]
 8004b02:	60a5      	str	r5, [r4, #8]
 8004b04:	bfa4      	itt	ge
 8004b06:	f021 0104 	bicge.w	r1, r1, #4
 8004b0a:	6021      	strge	r1, [r4, #0]
 8004b0c:	b90e      	cbnz	r6, 8004b12 <_printf_i+0x11a>
 8004b0e:	2d00      	cmp	r5, #0
 8004b10:	d04d      	beq.n	8004bae <_printf_i+0x1b6>
 8004b12:	4615      	mov	r5, r2
 8004b14:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b18:	fb03 6711 	mls	r7, r3, r1, r6
 8004b1c:	5dc7      	ldrb	r7, [r0, r7]
 8004b1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b22:	4637      	mov	r7, r6
 8004b24:	42bb      	cmp	r3, r7
 8004b26:	460e      	mov	r6, r1
 8004b28:	d9f4      	bls.n	8004b14 <_printf_i+0x11c>
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d10b      	bne.n	8004b46 <_printf_i+0x14e>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	07de      	lsls	r6, r3, #31
 8004b32:	d508      	bpl.n	8004b46 <_printf_i+0x14e>
 8004b34:	6923      	ldr	r3, [r4, #16]
 8004b36:	6861      	ldr	r1, [r4, #4]
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	bfde      	ittt	le
 8004b3c:	2330      	movle	r3, #48	; 0x30
 8004b3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b46:	1b52      	subs	r2, r2, r5
 8004b48:	6122      	str	r2, [r4, #16]
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	4640      	mov	r0, r8
 8004b50:	f8cd a000 	str.w	sl, [sp]
 8004b54:	aa03      	add	r2, sp, #12
 8004b56:	f7ff fedf 	bl	8004918 <_printf_common>
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	d14c      	bne.n	8004bf8 <_printf_i+0x200>
 8004b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b62:	b004      	add	sp, #16
 8004b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b68:	4834      	ldr	r0, [pc, #208]	; (8004c3c <_printf_i+0x244>)
 8004b6a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b6e:	6829      	ldr	r1, [r5, #0]
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b76:	6029      	str	r1, [r5, #0]
 8004b78:	061d      	lsls	r5, r3, #24
 8004b7a:	d514      	bpl.n	8004ba6 <_printf_i+0x1ae>
 8004b7c:	07df      	lsls	r7, r3, #31
 8004b7e:	bf44      	itt	mi
 8004b80:	f043 0320 	orrmi.w	r3, r3, #32
 8004b84:	6023      	strmi	r3, [r4, #0]
 8004b86:	b91e      	cbnz	r6, 8004b90 <_printf_i+0x198>
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	f023 0320 	bic.w	r3, r3, #32
 8004b8e:	6023      	str	r3, [r4, #0]
 8004b90:	2310      	movs	r3, #16
 8004b92:	e7af      	b.n	8004af4 <_printf_i+0xfc>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	f043 0320 	orr.w	r3, r3, #32
 8004b9a:	6023      	str	r3, [r4, #0]
 8004b9c:	2378      	movs	r3, #120	; 0x78
 8004b9e:	4828      	ldr	r0, [pc, #160]	; (8004c40 <_printf_i+0x248>)
 8004ba0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ba4:	e7e3      	b.n	8004b6e <_printf_i+0x176>
 8004ba6:	0659      	lsls	r1, r3, #25
 8004ba8:	bf48      	it	mi
 8004baa:	b2b6      	uxthmi	r6, r6
 8004bac:	e7e6      	b.n	8004b7c <_printf_i+0x184>
 8004bae:	4615      	mov	r5, r2
 8004bb0:	e7bb      	b.n	8004b2a <_printf_i+0x132>
 8004bb2:	682b      	ldr	r3, [r5, #0]
 8004bb4:	6826      	ldr	r6, [r4, #0]
 8004bb6:	1d18      	adds	r0, r3, #4
 8004bb8:	6961      	ldr	r1, [r4, #20]
 8004bba:	6028      	str	r0, [r5, #0]
 8004bbc:	0635      	lsls	r5, r6, #24
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	d501      	bpl.n	8004bc6 <_printf_i+0x1ce>
 8004bc2:	6019      	str	r1, [r3, #0]
 8004bc4:	e002      	b.n	8004bcc <_printf_i+0x1d4>
 8004bc6:	0670      	lsls	r0, r6, #25
 8004bc8:	d5fb      	bpl.n	8004bc2 <_printf_i+0x1ca>
 8004bca:	8019      	strh	r1, [r3, #0]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4615      	mov	r5, r2
 8004bd0:	6123      	str	r3, [r4, #16]
 8004bd2:	e7ba      	b.n	8004b4a <_printf_i+0x152>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	1d1a      	adds	r2, r3, #4
 8004bda:	602a      	str	r2, [r5, #0]
 8004bdc:	681d      	ldr	r5, [r3, #0]
 8004bde:	6862      	ldr	r2, [r4, #4]
 8004be0:	4628      	mov	r0, r5
 8004be2:	f000 fa9b 	bl	800511c <memchr>
 8004be6:	b108      	cbz	r0, 8004bec <_printf_i+0x1f4>
 8004be8:	1b40      	subs	r0, r0, r5
 8004bea:	6060      	str	r0, [r4, #4]
 8004bec:	6863      	ldr	r3, [r4, #4]
 8004bee:	6123      	str	r3, [r4, #16]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf6:	e7a8      	b.n	8004b4a <_printf_i+0x152>
 8004bf8:	462a      	mov	r2, r5
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	4640      	mov	r0, r8
 8004bfe:	6923      	ldr	r3, [r4, #16]
 8004c00:	47d0      	blx	sl
 8004c02:	3001      	adds	r0, #1
 8004c04:	d0ab      	beq.n	8004b5e <_printf_i+0x166>
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	079b      	lsls	r3, r3, #30
 8004c0a:	d413      	bmi.n	8004c34 <_printf_i+0x23c>
 8004c0c:	68e0      	ldr	r0, [r4, #12]
 8004c0e:	9b03      	ldr	r3, [sp, #12]
 8004c10:	4298      	cmp	r0, r3
 8004c12:	bfb8      	it	lt
 8004c14:	4618      	movlt	r0, r3
 8004c16:	e7a4      	b.n	8004b62 <_printf_i+0x16a>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	4632      	mov	r2, r6
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	4640      	mov	r0, r8
 8004c20:	47d0      	blx	sl
 8004c22:	3001      	adds	r0, #1
 8004c24:	d09b      	beq.n	8004b5e <_printf_i+0x166>
 8004c26:	3501      	adds	r5, #1
 8004c28:	68e3      	ldr	r3, [r4, #12]
 8004c2a:	9903      	ldr	r1, [sp, #12]
 8004c2c:	1a5b      	subs	r3, r3, r1
 8004c2e:	42ab      	cmp	r3, r5
 8004c30:	dcf2      	bgt.n	8004c18 <_printf_i+0x220>
 8004c32:	e7eb      	b.n	8004c0c <_printf_i+0x214>
 8004c34:	2500      	movs	r5, #0
 8004c36:	f104 0619 	add.w	r6, r4, #25
 8004c3a:	e7f5      	b.n	8004c28 <_printf_i+0x230>
 8004c3c:	08005395 	.word	0x08005395
 8004c40:	080053a6 	.word	0x080053a6

08004c44 <_sbrk_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	2300      	movs	r3, #0
 8004c48:	4d05      	ldr	r5, [pc, #20]	; (8004c60 <_sbrk_r+0x1c>)
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	602b      	str	r3, [r5, #0]
 8004c50:	f7fc f802 	bl	8000c58 <_sbrk>
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	d102      	bne.n	8004c5e <_sbrk_r+0x1a>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	b103      	cbz	r3, 8004c5e <_sbrk_r+0x1a>
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
 8004c60:	20000e24 	.word	0x20000e24

08004c64 <__sread>:
 8004c64:	b510      	push	{r4, lr}
 8004c66:	460c      	mov	r4, r1
 8004c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c6c:	f000 fab8 	bl	80051e0 <_read_r>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	bfab      	itete	ge
 8004c74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c76:	89a3      	ldrhlt	r3, [r4, #12]
 8004c78:	181b      	addge	r3, r3, r0
 8004c7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c7e:	bfac      	ite	ge
 8004c80:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c82:	81a3      	strhlt	r3, [r4, #12]
 8004c84:	bd10      	pop	{r4, pc}

08004c86 <__swrite>:
 8004c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c8a:	461f      	mov	r7, r3
 8004c8c:	898b      	ldrh	r3, [r1, #12]
 8004c8e:	4605      	mov	r5, r0
 8004c90:	05db      	lsls	r3, r3, #23
 8004c92:	460c      	mov	r4, r1
 8004c94:	4616      	mov	r6, r2
 8004c96:	d505      	bpl.n	8004ca4 <__swrite+0x1e>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca0:	f000 f9c4 	bl	800502c <_lseek_r>
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	4632      	mov	r2, r6
 8004ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cac:	81a3      	strh	r3, [r4, #12]
 8004cae:	4628      	mov	r0, r5
 8004cb0:	463b      	mov	r3, r7
 8004cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cba:	f000 b869 	b.w	8004d90 <_write_r>

08004cbe <__sseek>:
 8004cbe:	b510      	push	{r4, lr}
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc6:	f000 f9b1 	bl	800502c <_lseek_r>
 8004cca:	1c43      	adds	r3, r0, #1
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	bf15      	itete	ne
 8004cd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cda:	81a3      	strheq	r3, [r4, #12]
 8004cdc:	bf18      	it	ne
 8004cde:	81a3      	strhne	r3, [r4, #12]
 8004ce0:	bd10      	pop	{r4, pc}

08004ce2 <__sclose>:
 8004ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce6:	f000 b8d3 	b.w	8004e90 <_close_r>
	...

08004cec <__swbuf_r>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	460e      	mov	r6, r1
 8004cf0:	4614      	mov	r4, r2
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	b118      	cbz	r0, 8004cfe <__swbuf_r+0x12>
 8004cf6:	6983      	ldr	r3, [r0, #24]
 8004cf8:	b90b      	cbnz	r3, 8004cfe <__swbuf_r+0x12>
 8004cfa:	f7ff fb81 	bl	8004400 <__sinit>
 8004cfe:	4b21      	ldr	r3, [pc, #132]	; (8004d84 <__swbuf_r+0x98>)
 8004d00:	429c      	cmp	r4, r3
 8004d02:	d12b      	bne.n	8004d5c <__swbuf_r+0x70>
 8004d04:	686c      	ldr	r4, [r5, #4]
 8004d06:	69a3      	ldr	r3, [r4, #24]
 8004d08:	60a3      	str	r3, [r4, #8]
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	071a      	lsls	r2, r3, #28
 8004d0e:	d52f      	bpl.n	8004d70 <__swbuf_r+0x84>
 8004d10:	6923      	ldr	r3, [r4, #16]
 8004d12:	b36b      	cbz	r3, 8004d70 <__swbuf_r+0x84>
 8004d14:	6923      	ldr	r3, [r4, #16]
 8004d16:	6820      	ldr	r0, [r4, #0]
 8004d18:	b2f6      	uxtb	r6, r6
 8004d1a:	1ac0      	subs	r0, r0, r3
 8004d1c:	6963      	ldr	r3, [r4, #20]
 8004d1e:	4637      	mov	r7, r6
 8004d20:	4283      	cmp	r3, r0
 8004d22:	dc04      	bgt.n	8004d2e <__swbuf_r+0x42>
 8004d24:	4621      	mov	r1, r4
 8004d26:	4628      	mov	r0, r5
 8004d28:	f000 f944 	bl	8004fb4 <_fflush_r>
 8004d2c:	bb30      	cbnz	r0, 8004d7c <__swbuf_r+0x90>
 8004d2e:	68a3      	ldr	r3, [r4, #8]
 8004d30:	3001      	adds	r0, #1
 8004d32:	3b01      	subs	r3, #1
 8004d34:	60a3      	str	r3, [r4, #8]
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	6022      	str	r2, [r4, #0]
 8004d3c:	701e      	strb	r6, [r3, #0]
 8004d3e:	6963      	ldr	r3, [r4, #20]
 8004d40:	4283      	cmp	r3, r0
 8004d42:	d004      	beq.n	8004d4e <__swbuf_r+0x62>
 8004d44:	89a3      	ldrh	r3, [r4, #12]
 8004d46:	07db      	lsls	r3, r3, #31
 8004d48:	d506      	bpl.n	8004d58 <__swbuf_r+0x6c>
 8004d4a:	2e0a      	cmp	r6, #10
 8004d4c:	d104      	bne.n	8004d58 <__swbuf_r+0x6c>
 8004d4e:	4621      	mov	r1, r4
 8004d50:	4628      	mov	r0, r5
 8004d52:	f000 f92f 	bl	8004fb4 <_fflush_r>
 8004d56:	b988      	cbnz	r0, 8004d7c <__swbuf_r+0x90>
 8004d58:	4638      	mov	r0, r7
 8004d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <__swbuf_r+0x9c>)
 8004d5e:	429c      	cmp	r4, r3
 8004d60:	d101      	bne.n	8004d66 <__swbuf_r+0x7a>
 8004d62:	68ac      	ldr	r4, [r5, #8]
 8004d64:	e7cf      	b.n	8004d06 <__swbuf_r+0x1a>
 8004d66:	4b09      	ldr	r3, [pc, #36]	; (8004d8c <__swbuf_r+0xa0>)
 8004d68:	429c      	cmp	r4, r3
 8004d6a:	bf08      	it	eq
 8004d6c:	68ec      	ldreq	r4, [r5, #12]
 8004d6e:	e7ca      	b.n	8004d06 <__swbuf_r+0x1a>
 8004d70:	4621      	mov	r1, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	f000 f81e 	bl	8004db4 <__swsetup_r>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d0cb      	beq.n	8004d14 <__swbuf_r+0x28>
 8004d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8004d80:	e7ea      	b.n	8004d58 <__swbuf_r+0x6c>
 8004d82:	bf00      	nop
 8004d84:	08005344 	.word	0x08005344
 8004d88:	08005364 	.word	0x08005364
 8004d8c:	08005324 	.word	0x08005324

08004d90 <_write_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4604      	mov	r4, r0
 8004d94:	4608      	mov	r0, r1
 8004d96:	4611      	mov	r1, r2
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4d05      	ldr	r5, [pc, #20]	; (8004db0 <_write_r+0x20>)
 8004d9c:	602a      	str	r2, [r5, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f7fb ff0e 	bl	8000bc0 <_write>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d102      	bne.n	8004dae <_write_r+0x1e>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	b103      	cbz	r3, 8004dae <_write_r+0x1e>
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	20000e24 	.word	0x20000e24

08004db4 <__swsetup_r>:
 8004db4:	4b32      	ldr	r3, [pc, #200]	; (8004e80 <__swsetup_r+0xcc>)
 8004db6:	b570      	push	{r4, r5, r6, lr}
 8004db8:	681d      	ldr	r5, [r3, #0]
 8004dba:	4606      	mov	r6, r0
 8004dbc:	460c      	mov	r4, r1
 8004dbe:	b125      	cbz	r5, 8004dca <__swsetup_r+0x16>
 8004dc0:	69ab      	ldr	r3, [r5, #24]
 8004dc2:	b913      	cbnz	r3, 8004dca <__swsetup_r+0x16>
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f7ff fb1b 	bl	8004400 <__sinit>
 8004dca:	4b2e      	ldr	r3, [pc, #184]	; (8004e84 <__swsetup_r+0xd0>)
 8004dcc:	429c      	cmp	r4, r3
 8004dce:	d10f      	bne.n	8004df0 <__swsetup_r+0x3c>
 8004dd0:	686c      	ldr	r4, [r5, #4]
 8004dd2:	89a3      	ldrh	r3, [r4, #12]
 8004dd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dd8:	0719      	lsls	r1, r3, #28
 8004dda:	d42c      	bmi.n	8004e36 <__swsetup_r+0x82>
 8004ddc:	06dd      	lsls	r5, r3, #27
 8004dde:	d411      	bmi.n	8004e04 <__swsetup_r+0x50>
 8004de0:	2309      	movs	r3, #9
 8004de2:	6033      	str	r3, [r6, #0]
 8004de4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	e03e      	b.n	8004e6e <__swsetup_r+0xba>
 8004df0:	4b25      	ldr	r3, [pc, #148]	; (8004e88 <__swsetup_r+0xd4>)
 8004df2:	429c      	cmp	r4, r3
 8004df4:	d101      	bne.n	8004dfa <__swsetup_r+0x46>
 8004df6:	68ac      	ldr	r4, [r5, #8]
 8004df8:	e7eb      	b.n	8004dd2 <__swsetup_r+0x1e>
 8004dfa:	4b24      	ldr	r3, [pc, #144]	; (8004e8c <__swsetup_r+0xd8>)
 8004dfc:	429c      	cmp	r4, r3
 8004dfe:	bf08      	it	eq
 8004e00:	68ec      	ldreq	r4, [r5, #12]
 8004e02:	e7e6      	b.n	8004dd2 <__swsetup_r+0x1e>
 8004e04:	0758      	lsls	r0, r3, #29
 8004e06:	d512      	bpl.n	8004e2e <__swsetup_r+0x7a>
 8004e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e0a:	b141      	cbz	r1, 8004e1e <__swsetup_r+0x6a>
 8004e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e10:	4299      	cmp	r1, r3
 8004e12:	d002      	beq.n	8004e1a <__swsetup_r+0x66>
 8004e14:	4630      	mov	r0, r6
 8004e16:	f000 f99b 	bl	8005150 <_free_r>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	6363      	str	r3, [r4, #52]	; 0x34
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e24:	81a3      	strh	r3, [r4, #12]
 8004e26:	2300      	movs	r3, #0
 8004e28:	6063      	str	r3, [r4, #4]
 8004e2a:	6923      	ldr	r3, [r4, #16]
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	89a3      	ldrh	r3, [r4, #12]
 8004e30:	f043 0308 	orr.w	r3, r3, #8
 8004e34:	81a3      	strh	r3, [r4, #12]
 8004e36:	6923      	ldr	r3, [r4, #16]
 8004e38:	b94b      	cbnz	r3, 8004e4e <__swsetup_r+0x9a>
 8004e3a:	89a3      	ldrh	r3, [r4, #12]
 8004e3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e44:	d003      	beq.n	8004e4e <__swsetup_r+0x9a>
 8004e46:	4621      	mov	r1, r4
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f000 f927 	bl	800509c <__smakebuf_r>
 8004e4e:	89a0      	ldrh	r0, [r4, #12]
 8004e50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e54:	f010 0301 	ands.w	r3, r0, #1
 8004e58:	d00a      	beq.n	8004e70 <__swsetup_r+0xbc>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60a3      	str	r3, [r4, #8]
 8004e5e:	6963      	ldr	r3, [r4, #20]
 8004e60:	425b      	negs	r3, r3
 8004e62:	61a3      	str	r3, [r4, #24]
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	b943      	cbnz	r3, 8004e7a <__swsetup_r+0xc6>
 8004e68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e6c:	d1ba      	bne.n	8004de4 <__swsetup_r+0x30>
 8004e6e:	bd70      	pop	{r4, r5, r6, pc}
 8004e70:	0781      	lsls	r1, r0, #30
 8004e72:	bf58      	it	pl
 8004e74:	6963      	ldrpl	r3, [r4, #20]
 8004e76:	60a3      	str	r3, [r4, #8]
 8004e78:	e7f4      	b.n	8004e64 <__swsetup_r+0xb0>
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e7f7      	b.n	8004e6e <__swsetup_r+0xba>
 8004e7e:	bf00      	nop
 8004e80:	2000000c 	.word	0x2000000c
 8004e84:	08005344 	.word	0x08005344
 8004e88:	08005364 	.word	0x08005364
 8004e8c:	08005324 	.word	0x08005324

08004e90 <_close_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	2300      	movs	r3, #0
 8004e94:	4d05      	ldr	r5, [pc, #20]	; (8004eac <_close_r+0x1c>)
 8004e96:	4604      	mov	r4, r0
 8004e98:	4608      	mov	r0, r1
 8004e9a:	602b      	str	r3, [r5, #0]
 8004e9c:	f7fb feac 	bl	8000bf8 <_close>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d102      	bne.n	8004eaa <_close_r+0x1a>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	b103      	cbz	r3, 8004eaa <_close_r+0x1a>
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	20000e24 	.word	0x20000e24

08004eb0 <__sflush_r>:
 8004eb0:	898a      	ldrh	r2, [r1, #12]
 8004eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	0710      	lsls	r0, r2, #28
 8004eb8:	460c      	mov	r4, r1
 8004eba:	d457      	bmi.n	8004f6c <__sflush_r+0xbc>
 8004ebc:	684b      	ldr	r3, [r1, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	dc04      	bgt.n	8004ecc <__sflush_r+0x1c>
 8004ec2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dc01      	bgt.n	8004ecc <__sflush_r+0x1c>
 8004ec8:	2000      	movs	r0, #0
 8004eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ece:	2e00      	cmp	r6, #0
 8004ed0:	d0fa      	beq.n	8004ec8 <__sflush_r+0x18>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ed8:	682f      	ldr	r7, [r5, #0]
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	d032      	beq.n	8004f44 <__sflush_r+0x94>
 8004ede:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ee0:	89a3      	ldrh	r3, [r4, #12]
 8004ee2:	075a      	lsls	r2, r3, #29
 8004ee4:	d505      	bpl.n	8004ef2 <__sflush_r+0x42>
 8004ee6:	6863      	ldr	r3, [r4, #4]
 8004ee8:	1ac0      	subs	r0, r0, r3
 8004eea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004eec:	b10b      	cbz	r3, 8004ef2 <__sflush_r+0x42>
 8004eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ef0:	1ac0      	subs	r0, r0, r3
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ef8:	4628      	mov	r0, r5
 8004efa:	6a21      	ldr	r1, [r4, #32]
 8004efc:	47b0      	blx	r6
 8004efe:	1c43      	adds	r3, r0, #1
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	d106      	bne.n	8004f12 <__sflush_r+0x62>
 8004f04:	6829      	ldr	r1, [r5, #0]
 8004f06:	291d      	cmp	r1, #29
 8004f08:	d82c      	bhi.n	8004f64 <__sflush_r+0xb4>
 8004f0a:	4a29      	ldr	r2, [pc, #164]	; (8004fb0 <__sflush_r+0x100>)
 8004f0c:	40ca      	lsrs	r2, r1
 8004f0e:	07d6      	lsls	r6, r2, #31
 8004f10:	d528      	bpl.n	8004f64 <__sflush_r+0xb4>
 8004f12:	2200      	movs	r2, #0
 8004f14:	6062      	str	r2, [r4, #4]
 8004f16:	6922      	ldr	r2, [r4, #16]
 8004f18:	04d9      	lsls	r1, r3, #19
 8004f1a:	6022      	str	r2, [r4, #0]
 8004f1c:	d504      	bpl.n	8004f28 <__sflush_r+0x78>
 8004f1e:	1c42      	adds	r2, r0, #1
 8004f20:	d101      	bne.n	8004f26 <__sflush_r+0x76>
 8004f22:	682b      	ldr	r3, [r5, #0]
 8004f24:	b903      	cbnz	r3, 8004f28 <__sflush_r+0x78>
 8004f26:	6560      	str	r0, [r4, #84]	; 0x54
 8004f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f2a:	602f      	str	r7, [r5, #0]
 8004f2c:	2900      	cmp	r1, #0
 8004f2e:	d0cb      	beq.n	8004ec8 <__sflush_r+0x18>
 8004f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f34:	4299      	cmp	r1, r3
 8004f36:	d002      	beq.n	8004f3e <__sflush_r+0x8e>
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f000 f909 	bl	8005150 <_free_r>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	6360      	str	r0, [r4, #52]	; 0x34
 8004f42:	e7c2      	b.n	8004eca <__sflush_r+0x1a>
 8004f44:	6a21      	ldr	r1, [r4, #32]
 8004f46:	2301      	movs	r3, #1
 8004f48:	4628      	mov	r0, r5
 8004f4a:	47b0      	blx	r6
 8004f4c:	1c41      	adds	r1, r0, #1
 8004f4e:	d1c7      	bne.n	8004ee0 <__sflush_r+0x30>
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0c4      	beq.n	8004ee0 <__sflush_r+0x30>
 8004f56:	2b1d      	cmp	r3, #29
 8004f58:	d001      	beq.n	8004f5e <__sflush_r+0xae>
 8004f5a:	2b16      	cmp	r3, #22
 8004f5c:	d101      	bne.n	8004f62 <__sflush_r+0xb2>
 8004f5e:	602f      	str	r7, [r5, #0]
 8004f60:	e7b2      	b.n	8004ec8 <__sflush_r+0x18>
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f68:	81a3      	strh	r3, [r4, #12]
 8004f6a:	e7ae      	b.n	8004eca <__sflush_r+0x1a>
 8004f6c:	690f      	ldr	r7, [r1, #16]
 8004f6e:	2f00      	cmp	r7, #0
 8004f70:	d0aa      	beq.n	8004ec8 <__sflush_r+0x18>
 8004f72:	0793      	lsls	r3, r2, #30
 8004f74:	bf18      	it	ne
 8004f76:	2300      	movne	r3, #0
 8004f78:	680e      	ldr	r6, [r1, #0]
 8004f7a:	bf08      	it	eq
 8004f7c:	694b      	ldreq	r3, [r1, #20]
 8004f7e:	1bf6      	subs	r6, r6, r7
 8004f80:	600f      	str	r7, [r1, #0]
 8004f82:	608b      	str	r3, [r1, #8]
 8004f84:	2e00      	cmp	r6, #0
 8004f86:	dd9f      	ble.n	8004ec8 <__sflush_r+0x18>
 8004f88:	4633      	mov	r3, r6
 8004f8a:	463a      	mov	r2, r7
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	6a21      	ldr	r1, [r4, #32]
 8004f90:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004f94:	47e0      	blx	ip
 8004f96:	2800      	cmp	r0, #0
 8004f98:	dc06      	bgt.n	8004fa8 <__sflush_r+0xf8>
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	e790      	b.n	8004eca <__sflush_r+0x1a>
 8004fa8:	4407      	add	r7, r0
 8004faa:	1a36      	subs	r6, r6, r0
 8004fac:	e7ea      	b.n	8004f84 <__sflush_r+0xd4>
 8004fae:	bf00      	nop
 8004fb0:	20400001 	.word	0x20400001

08004fb4 <_fflush_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	690b      	ldr	r3, [r1, #16]
 8004fb8:	4605      	mov	r5, r0
 8004fba:	460c      	mov	r4, r1
 8004fbc:	b913      	cbnz	r3, 8004fc4 <_fflush_r+0x10>
 8004fbe:	2500      	movs	r5, #0
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	b118      	cbz	r0, 8004fce <_fflush_r+0x1a>
 8004fc6:	6983      	ldr	r3, [r0, #24]
 8004fc8:	b90b      	cbnz	r3, 8004fce <_fflush_r+0x1a>
 8004fca:	f7ff fa19 	bl	8004400 <__sinit>
 8004fce:	4b14      	ldr	r3, [pc, #80]	; (8005020 <_fflush_r+0x6c>)
 8004fd0:	429c      	cmp	r4, r3
 8004fd2:	d11b      	bne.n	800500c <_fflush_r+0x58>
 8004fd4:	686c      	ldr	r4, [r5, #4]
 8004fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0ef      	beq.n	8004fbe <_fflush_r+0xa>
 8004fde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fe0:	07d0      	lsls	r0, r2, #31
 8004fe2:	d404      	bmi.n	8004fee <_fflush_r+0x3a>
 8004fe4:	0599      	lsls	r1, r3, #22
 8004fe6:	d402      	bmi.n	8004fee <_fflush_r+0x3a>
 8004fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fea:	f7ff faa7 	bl	800453c <__retarget_lock_acquire_recursive>
 8004fee:	4628      	mov	r0, r5
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	f7ff ff5d 	bl	8004eb0 <__sflush_r>
 8004ff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	07da      	lsls	r2, r3, #31
 8004ffc:	d4e0      	bmi.n	8004fc0 <_fflush_r+0xc>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	059b      	lsls	r3, r3, #22
 8005002:	d4dd      	bmi.n	8004fc0 <_fflush_r+0xc>
 8005004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005006:	f7ff fa9a 	bl	800453e <__retarget_lock_release_recursive>
 800500a:	e7d9      	b.n	8004fc0 <_fflush_r+0xc>
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <_fflush_r+0x70>)
 800500e:	429c      	cmp	r4, r3
 8005010:	d101      	bne.n	8005016 <_fflush_r+0x62>
 8005012:	68ac      	ldr	r4, [r5, #8]
 8005014:	e7df      	b.n	8004fd6 <_fflush_r+0x22>
 8005016:	4b04      	ldr	r3, [pc, #16]	; (8005028 <_fflush_r+0x74>)
 8005018:	429c      	cmp	r4, r3
 800501a:	bf08      	it	eq
 800501c:	68ec      	ldreq	r4, [r5, #12]
 800501e:	e7da      	b.n	8004fd6 <_fflush_r+0x22>
 8005020:	08005344 	.word	0x08005344
 8005024:	08005364 	.word	0x08005364
 8005028:	08005324 	.word	0x08005324

0800502c <_lseek_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	2200      	movs	r2, #0
 8005036:	4d05      	ldr	r5, [pc, #20]	; (800504c <_lseek_r+0x20>)
 8005038:	602a      	str	r2, [r5, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	f7fb fe00 	bl	8000c40 <_lseek>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d102      	bne.n	800504a <_lseek_r+0x1e>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	b103      	cbz	r3, 800504a <_lseek_r+0x1e>
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	bd38      	pop	{r3, r4, r5, pc}
 800504c:	20000e24 	.word	0x20000e24

08005050 <__swhatbuf_r>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	460e      	mov	r6, r1
 8005054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005058:	4614      	mov	r4, r2
 800505a:	2900      	cmp	r1, #0
 800505c:	461d      	mov	r5, r3
 800505e:	b096      	sub	sp, #88	; 0x58
 8005060:	da08      	bge.n	8005074 <__swhatbuf_r+0x24>
 8005062:	2200      	movs	r2, #0
 8005064:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005068:	602a      	str	r2, [r5, #0]
 800506a:	061a      	lsls	r2, r3, #24
 800506c:	d410      	bmi.n	8005090 <__swhatbuf_r+0x40>
 800506e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005072:	e00e      	b.n	8005092 <__swhatbuf_r+0x42>
 8005074:	466a      	mov	r2, sp
 8005076:	f000 f8c5 	bl	8005204 <_fstat_r>
 800507a:	2800      	cmp	r0, #0
 800507c:	dbf1      	blt.n	8005062 <__swhatbuf_r+0x12>
 800507e:	9a01      	ldr	r2, [sp, #4]
 8005080:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005084:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005088:	425a      	negs	r2, r3
 800508a:	415a      	adcs	r2, r3
 800508c:	602a      	str	r2, [r5, #0]
 800508e:	e7ee      	b.n	800506e <__swhatbuf_r+0x1e>
 8005090:	2340      	movs	r3, #64	; 0x40
 8005092:	2000      	movs	r0, #0
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	b016      	add	sp, #88	; 0x58
 8005098:	bd70      	pop	{r4, r5, r6, pc}
	...

0800509c <__smakebuf_r>:
 800509c:	898b      	ldrh	r3, [r1, #12]
 800509e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050a0:	079d      	lsls	r5, r3, #30
 80050a2:	4606      	mov	r6, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	d507      	bpl.n	80050b8 <__smakebuf_r+0x1c>
 80050a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	6123      	str	r3, [r4, #16]
 80050b0:	2301      	movs	r3, #1
 80050b2:	6163      	str	r3, [r4, #20]
 80050b4:	b002      	add	sp, #8
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	466a      	mov	r2, sp
 80050ba:	ab01      	add	r3, sp, #4
 80050bc:	f7ff ffc8 	bl	8005050 <__swhatbuf_r>
 80050c0:	9900      	ldr	r1, [sp, #0]
 80050c2:	4605      	mov	r5, r0
 80050c4:	4630      	mov	r0, r6
 80050c6:	f7ff fa5b 	bl	8004580 <_malloc_r>
 80050ca:	b948      	cbnz	r0, 80050e0 <__smakebuf_r+0x44>
 80050cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d0:	059a      	lsls	r2, r3, #22
 80050d2:	d4ef      	bmi.n	80050b4 <__smakebuf_r+0x18>
 80050d4:	f023 0303 	bic.w	r3, r3, #3
 80050d8:	f043 0302 	orr.w	r3, r3, #2
 80050dc:	81a3      	strh	r3, [r4, #12]
 80050de:	e7e3      	b.n	80050a8 <__smakebuf_r+0xc>
 80050e0:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <__smakebuf_r+0x7c>)
 80050e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	6020      	str	r0, [r4, #0]
 80050e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	9b00      	ldr	r3, [sp, #0]
 80050f0:	6120      	str	r0, [r4, #16]
 80050f2:	6163      	str	r3, [r4, #20]
 80050f4:	9b01      	ldr	r3, [sp, #4]
 80050f6:	b15b      	cbz	r3, 8005110 <__smakebuf_r+0x74>
 80050f8:	4630      	mov	r0, r6
 80050fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050fe:	f000 f893 	bl	8005228 <_isatty_r>
 8005102:	b128      	cbz	r0, 8005110 <__smakebuf_r+0x74>
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	81a3      	strh	r3, [r4, #12]
 8005110:	89a0      	ldrh	r0, [r4, #12]
 8005112:	4305      	orrs	r5, r0
 8005114:	81a5      	strh	r5, [r4, #12]
 8005116:	e7cd      	b.n	80050b4 <__smakebuf_r+0x18>
 8005118:	08004399 	.word	0x08004399

0800511c <memchr>:
 800511c:	4603      	mov	r3, r0
 800511e:	b510      	push	{r4, lr}
 8005120:	b2c9      	uxtb	r1, r1
 8005122:	4402      	add	r2, r0
 8005124:	4293      	cmp	r3, r2
 8005126:	4618      	mov	r0, r3
 8005128:	d101      	bne.n	800512e <memchr+0x12>
 800512a:	2000      	movs	r0, #0
 800512c:	e003      	b.n	8005136 <memchr+0x1a>
 800512e:	7804      	ldrb	r4, [r0, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	428c      	cmp	r4, r1
 8005134:	d1f6      	bne.n	8005124 <memchr+0x8>
 8005136:	bd10      	pop	{r4, pc}

08005138 <__malloc_lock>:
 8005138:	4801      	ldr	r0, [pc, #4]	; (8005140 <__malloc_lock+0x8>)
 800513a:	f7ff b9ff 	b.w	800453c <__retarget_lock_acquire_recursive>
 800513e:	bf00      	nop
 8005140:	20000e18 	.word	0x20000e18

08005144 <__malloc_unlock>:
 8005144:	4801      	ldr	r0, [pc, #4]	; (800514c <__malloc_unlock+0x8>)
 8005146:	f7ff b9fa 	b.w	800453e <__retarget_lock_release_recursive>
 800514a:	bf00      	nop
 800514c:	20000e18 	.word	0x20000e18

08005150 <_free_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4605      	mov	r5, r0
 8005154:	2900      	cmp	r1, #0
 8005156:	d040      	beq.n	80051da <_free_r+0x8a>
 8005158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800515c:	1f0c      	subs	r4, r1, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	bfb8      	it	lt
 8005162:	18e4      	addlt	r4, r4, r3
 8005164:	f7ff ffe8 	bl	8005138 <__malloc_lock>
 8005168:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <_free_r+0x8c>)
 800516a:	6813      	ldr	r3, [r2, #0]
 800516c:	b933      	cbnz	r3, 800517c <_free_r+0x2c>
 800516e:	6063      	str	r3, [r4, #4]
 8005170:	6014      	str	r4, [r2, #0]
 8005172:	4628      	mov	r0, r5
 8005174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005178:	f7ff bfe4 	b.w	8005144 <__malloc_unlock>
 800517c:	42a3      	cmp	r3, r4
 800517e:	d908      	bls.n	8005192 <_free_r+0x42>
 8005180:	6820      	ldr	r0, [r4, #0]
 8005182:	1821      	adds	r1, r4, r0
 8005184:	428b      	cmp	r3, r1
 8005186:	bf01      	itttt	eq
 8005188:	6819      	ldreq	r1, [r3, #0]
 800518a:	685b      	ldreq	r3, [r3, #4]
 800518c:	1809      	addeq	r1, r1, r0
 800518e:	6021      	streq	r1, [r4, #0]
 8005190:	e7ed      	b.n	800516e <_free_r+0x1e>
 8005192:	461a      	mov	r2, r3
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	b10b      	cbz	r3, 800519c <_free_r+0x4c>
 8005198:	42a3      	cmp	r3, r4
 800519a:	d9fa      	bls.n	8005192 <_free_r+0x42>
 800519c:	6811      	ldr	r1, [r2, #0]
 800519e:	1850      	adds	r0, r2, r1
 80051a0:	42a0      	cmp	r0, r4
 80051a2:	d10b      	bne.n	80051bc <_free_r+0x6c>
 80051a4:	6820      	ldr	r0, [r4, #0]
 80051a6:	4401      	add	r1, r0
 80051a8:	1850      	adds	r0, r2, r1
 80051aa:	4283      	cmp	r3, r0
 80051ac:	6011      	str	r1, [r2, #0]
 80051ae:	d1e0      	bne.n	8005172 <_free_r+0x22>
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	4401      	add	r1, r0
 80051b6:	6011      	str	r1, [r2, #0]
 80051b8:	6053      	str	r3, [r2, #4]
 80051ba:	e7da      	b.n	8005172 <_free_r+0x22>
 80051bc:	d902      	bls.n	80051c4 <_free_r+0x74>
 80051be:	230c      	movs	r3, #12
 80051c0:	602b      	str	r3, [r5, #0]
 80051c2:	e7d6      	b.n	8005172 <_free_r+0x22>
 80051c4:	6820      	ldr	r0, [r4, #0]
 80051c6:	1821      	adds	r1, r4, r0
 80051c8:	428b      	cmp	r3, r1
 80051ca:	bf01      	itttt	eq
 80051cc:	6819      	ldreq	r1, [r3, #0]
 80051ce:	685b      	ldreq	r3, [r3, #4]
 80051d0:	1809      	addeq	r1, r1, r0
 80051d2:	6021      	streq	r1, [r4, #0]
 80051d4:	6063      	str	r3, [r4, #4]
 80051d6:	6054      	str	r4, [r2, #4]
 80051d8:	e7cb      	b.n	8005172 <_free_r+0x22>
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	20000e1c 	.word	0x20000e1c

080051e0 <_read_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4604      	mov	r4, r0
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	2200      	movs	r2, #0
 80051ea:	4d05      	ldr	r5, [pc, #20]	; (8005200 <_read_r+0x20>)
 80051ec:	602a      	str	r2, [r5, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	f7fb fcc9 	bl	8000b86 <_read>
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	d102      	bne.n	80051fe <_read_r+0x1e>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	b103      	cbz	r3, 80051fe <_read_r+0x1e>
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	bd38      	pop	{r3, r4, r5, pc}
 8005200:	20000e24 	.word	0x20000e24

08005204 <_fstat_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	2300      	movs	r3, #0
 8005208:	4d06      	ldr	r5, [pc, #24]	; (8005224 <_fstat_r+0x20>)
 800520a:	4604      	mov	r4, r0
 800520c:	4608      	mov	r0, r1
 800520e:	4611      	mov	r1, r2
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	f7fb fcfc 	bl	8000c0e <_fstat>
 8005216:	1c43      	adds	r3, r0, #1
 8005218:	d102      	bne.n	8005220 <_fstat_r+0x1c>
 800521a:	682b      	ldr	r3, [r5, #0]
 800521c:	b103      	cbz	r3, 8005220 <_fstat_r+0x1c>
 800521e:	6023      	str	r3, [r4, #0]
 8005220:	bd38      	pop	{r3, r4, r5, pc}
 8005222:	bf00      	nop
 8005224:	20000e24 	.word	0x20000e24

08005228 <_isatty_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	2300      	movs	r3, #0
 800522c:	4d05      	ldr	r5, [pc, #20]	; (8005244 <_isatty_r+0x1c>)
 800522e:	4604      	mov	r4, r0
 8005230:	4608      	mov	r0, r1
 8005232:	602b      	str	r3, [r5, #0]
 8005234:	f7fb fcfa 	bl	8000c2c <_isatty>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	d102      	bne.n	8005242 <_isatty_r+0x1a>
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	b103      	cbz	r3, 8005242 <_isatty_r+0x1a>
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	20000e24 	.word	0x20000e24

08005248 <_init>:
 8005248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524a:	bf00      	nop
 800524c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524e:	bc08      	pop	{r3}
 8005250:	469e      	mov	lr, r3
 8005252:	4770      	bx	lr

08005254 <_fini>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	bf00      	nop
 8005258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525a:	bc08      	pop	{r3}
 800525c:	469e      	mov	lr, r3
 800525e:	4770      	bx	lr
