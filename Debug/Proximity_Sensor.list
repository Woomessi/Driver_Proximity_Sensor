
Proximity_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007528  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08007638  08007638  00017638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ad4  08007ad4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007ad4  08007ad4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ad4  08007ad4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ad8  08007ad8  00017ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db8  200001dc  08007cb8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f94  08007cb8  00020f94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098e9  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5f  00000000  00000000  00029aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194b9  00000000  00000000  0002cca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaa3  00000000  00000000  00046161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008941e  00000000  00000000  00050c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da022  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a18  00000000  00000000  000da074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007620 	.word	0x08007620

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007620 	.word	0x08007620

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <I2C_Delay>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
static void I2C_Delay(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
		ѭ������Ϊ7ʱ��SCLƵ�� = 347KHz�� SCL�ߵ�ƽʱ��1.5us��SCL�͵�ƽʱ��2.87us 
	 	ѭ������Ϊ5ʱ��SCLƵ�� = 421KHz�� SCL�ߵ�ƽʱ��1.25us��SCL�͵�ƽʱ��2.375us 
        
    IAR���̱���Ч�ʸߣ���������Ϊ7
	*/
	for (i = 0; i < 29; i++);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	e002      	b.n	8000a9a <I2C_Delay+0x12>
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	3301      	adds	r3, #1
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b1c      	cmp	r3, #28
 8000a9e:	d9f9      	bls.n	8000a94 <I2C_Delay+0xc>
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <I2C_Start>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Start(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C���������ź� */
	I2C_SDA_HIGH();
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <I2C_Start+0x3c>)
 8000ab6:	f003 f9d0 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 8000aba:	2201      	movs	r2, #1
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <I2C_Start+0x3c>)
 8000ac0:	f003 f9cb 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay();
 8000ac4:	f7ff ffe0 	bl	8000a88 <I2C_Delay>
	I2C_SDA_LOW();
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2140      	movs	r1, #64	; 0x40
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <I2C_Start+0x3c>)
 8000ace:	f003 f9c4 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay();
 8000ad2:	f7ff ffd9 	bl	8000a88 <I2C_Delay>
	I2C_SCL_LOW();
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <I2C_Start+0x3c>)
 8000adc:	f003 f9bd 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay();
 8000ae0:	f7ff ffd2 	bl	8000a88 <I2C_Delay>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40010c00 	.word	0x40010c00

08000aec <I2C_Stop>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Stop(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C����ֹͣ�ź� */
	I2C_SDA_LOW();
 8000af0:	2200      	movs	r2, #0
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <I2C_Stop+0x2c>)
 8000af6:	f003 f9b0 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 8000afa:	2201      	movs	r2, #1
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <I2C_Stop+0x2c>)
 8000b00:	f003 f9ab 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay();
 8000b04:	f7ff ffc0 	bl	8000a88 <I2C_Delay>
	I2C_SDA_HIGH();
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2140      	movs	r1, #64	; 0x40
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <I2C_Stop+0x2c>)
 8000b0e:	f003 f9a4 	bl	8003e5a <HAL_GPIO_WritePin>
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <I2C_SendByte>:
  * �������: Byte �� �ȴ����͵��ֽ�
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_SendByte(uint8_t Byte)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	/* �ȷ����ֽڵĸ�λbit7 */
	for (i = 0; i < 8; i++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	e02c      	b.n	8000b86 <I2C_SendByte+0x6a>
	{		
		if (Byte & 0x80)//提取当前字节最高有效位
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da05      	bge.n	8000b40 <I2C_SendByte+0x24>
		{
			I2C_SDA_HIGH();
 8000b34:	2201      	movs	r2, #1
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	4817      	ldr	r0, [pc, #92]	; (8000b98 <I2C_SendByte+0x7c>)
 8000b3a:	f003 f98e 	bl	8003e5a <HAL_GPIO_WritePin>
 8000b3e:	e004      	b.n	8000b4a <I2C_SendByte+0x2e>
		}
		else
		{
			I2C_SDA_LOW();
 8000b40:	2200      	movs	r2, #0
 8000b42:	2140      	movs	r1, #64	; 0x40
 8000b44:	4814      	ldr	r0, [pc, #80]	; (8000b98 <I2C_SendByte+0x7c>)
 8000b46:	f003 f988 	bl	8003e5a <HAL_GPIO_WritePin>
		}
		I2C_Delay();
 8000b4a:	f7ff ff9d 	bl	8000a88 <I2C_Delay>
		I2C_SCL_HIGH();
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <I2C_SendByte+0x7c>)
 8000b54:	f003 f981 	bl	8003e5a <HAL_GPIO_WritePin>
		I2C_Delay();	
 8000b58:	f7ff ff96 	bl	8000a88 <I2C_Delay>
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2180      	movs	r1, #128	; 0x80
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <I2C_SendByte+0x7c>)
 8000b62:	f003 f97a 	bl	8003e5a <HAL_GPIO_WritePin>
		if (i == 7)
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	2b07      	cmp	r3, #7
 8000b6a:	d104      	bne.n	8000b76 <I2C_SendByte+0x5a>
		{
			I2C_SDA_HIGH(); //
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2140      	movs	r1, #64	; 0x40
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <I2C_SendByte+0x7c>)
 8000b72:	f003 f972 	bl	8003e5a <HAL_GPIO_WritePin>
		}
		Byte <<= 1;//左移一位，以读取下一位
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	71fb      	strb	r3, [r7, #7]
		I2C_Delay();
 8000b7c:	f7ff ff84 	bl	8000a88 <I2C_Delay>
	for (i = 0; i < 8; i++)
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	3301      	adds	r3, #1
 8000b84:	73fb      	strb	r3, [r7, #15]
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	2b07      	cmp	r3, #7
 8000b8a:	d9cf      	bls.n	8000b2c <I2C_SendByte+0x10>
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <I2C_ReadByte>:
  * �������: ��
  * �� �� ֵ: ����������
  * ˵    ������
  */
uint8_t I2C_ReadByte(uint8_t ack)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t value;//读取值

	value = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < 8; i++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	e01d      	b.n	8000bec <I2C_ReadByte+0x50>
	{
		value <<= 1;
 8000bb0:	7bbb      	ldrb	r3, [r7, #14]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	73bb      	strb	r3, [r7, #14]
		I2C_SCL_HIGH();
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	4814      	ldr	r0, [pc, #80]	; (8000c0c <I2C_ReadByte+0x70>)
 8000bbc:	f003 f94d 	bl	8003e5a <HAL_GPIO_WritePin>
		I2C_Delay();
 8000bc0:	f7ff ff62 	bl	8000a88 <I2C_Delay>
		if (I2C_SDA_READ())
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	4811      	ldr	r0, [pc, #68]	; (8000c0c <I2C_ReadByte+0x70>)
 8000bc8:	f003 f930 	bl	8003e2c <HAL_GPIO_ReadPin>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <I2C_ReadByte+0x3c>
		{
			value++;
 8000bd2:	7bbb      	ldrb	r3, [r7, #14]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	73bb      	strb	r3, [r7, #14]
		}
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <I2C_ReadByte+0x70>)
 8000bde:	f003 f93c 	bl	8003e5a <HAL_GPIO_WritePin>
		I2C_Delay();
 8000be2:	f7ff ff51 	bl	8000a88 <I2C_Delay>
	for (i = 0; i < 8; i++)
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	3301      	adds	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	d9de      	bls.n	8000bb0 <I2C_ReadByte+0x14>
	}
  if(ack==0)
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <I2C_ReadByte+0x62>
		I2C_NAck();
 8000bf8:	f000 f856 	bl	8000ca8 <I2C_NAck>
 8000bfc:	e001      	b.n	8000c02 <I2C_ReadByte+0x66>
	else
		I2C_Ack();
 8000bfe:	f000 f833 	bl	8000c68 <I2C_Ack>
	return value;
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40010c00 	.word	0x40010c00

08000c10 <I2C_WaitAck>:
  * �������: ��
  * �� �� ֵ: ����0��ʾ��ȷӦ��1��ʾ��������Ӧ
  * ˵    ������
  */
uint8_t I2C_WaitAck(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 8000c16:	2201      	movs	r2, #1
 8000c18:	2140      	movs	r1, #64	; 0x40
 8000c1a:	4812      	ldr	r0, [pc, #72]	; (8000c64 <I2C_WaitAck+0x54>)
 8000c1c:	f003 f91d 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay();
 8000c20:	f7ff ff32 	bl	8000a88 <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����SCL = 1, ��ʱ�����᷵��ACKӦ�� */
 8000c24:	2201      	movs	r2, #1
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	480e      	ldr	r0, [pc, #56]	; (8000c64 <I2C_WaitAck+0x54>)
 8000c2a:	f003 f916 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay();
 8000c2e:	f7ff ff2b 	bl	8000a88 <I2C_Delay>
	if (I2C_SDA_READ())	/* CPU��ȡSDA����״̬ */
 8000c32:	2140      	movs	r1, #64	; 0x40
 8000c34:	480b      	ldr	r0, [pc, #44]	; (8000c64 <I2C_WaitAck+0x54>)
 8000c36:	f003 f8f9 	bl	8003e2c <HAL_GPIO_ReadPin>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <I2C_WaitAck+0x36>
	{
		re = 1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	e001      	b.n	8000c4a <I2C_WaitAck+0x3a>
	}
	else
	{
		re = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_LOW();
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <I2C_WaitAck+0x54>)
 8000c50:	f003 f903 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay();
 8000c54:	f7ff ff18 	bl	8000a88 <I2C_Delay>
	return re;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40010c00 	.word	0x40010c00

08000c68 <I2C_Ack>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Ack(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	I2C_SDA_LOW();	/* CPU����SDA = 0 */
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2140      	movs	r1, #64	; 0x40
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <I2C_Ack+0x3c>)
 8000c72:	f003 f8f2 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay();
 8000c76:	f7ff ff07 	bl	8000a88 <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����1��ʱ�� */
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <I2C_Ack+0x3c>)
 8000c80:	f003 f8eb 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay();
 8000c84:	f7ff ff00 	bl	8000a88 <I2C_Delay>
	I2C_SCL_LOW();
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <I2C_Ack+0x3c>)
 8000c8e:	f003 f8e4 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay();
 8000c92:	f7ff fef9 	bl	8000a88 <I2C_Delay>
	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 8000c96:	2201      	movs	r2, #1
 8000c98:	2140      	movs	r1, #64	; 0x40
 8000c9a:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <I2C_Ack+0x3c>)
 8000c9c:	f003 f8dd 	bl	8003e5a <HAL_GPIO_WritePin>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010c00 	.word	0x40010c00

08000ca8 <I2C_NAck>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_NAck(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	I2C_SDA_HIGH();	/* CPU����SDA = 1 */
 8000cac:	2201      	movs	r2, #1
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	480a      	ldr	r0, [pc, #40]	; (8000cdc <I2C_NAck+0x34>)
 8000cb2:	f003 f8d2 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay();
 8000cb6:	f7ff fee7 	bl	8000a88 <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����1��ʱ�� */
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <I2C_NAck+0x34>)
 8000cc0:	f003 f8cb 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay();
 8000cc4:	f7ff fee0 	bl	8000a88 <I2C_Delay>
	I2C_SCL_LOW();
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <I2C_NAck+0x34>)
 8000cce:	f003 f8c4 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay();	
 8000cd2:	f7ff fed9 	bl	8000a88 <I2C_Delay>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40010c00 	.word	0x40010c00

08000ce0 <I2C_Delay2>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
static void I2C_Delay2(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
		ѭ������Ϊ7ʱ��SCLƵ�� = 347KHz�� SCL�ߵ�ƽʱ��1.5us��SCL�͵�ƽʱ��2.87us 
	 	ѭ������Ϊ5ʱ��SCLƵ�� = 421KHz�� SCL�ߵ�ƽʱ��1.25us��SCL�͵�ƽʱ��2.375us 
        
    IAR���̱���Ч�ʸߣ���������Ϊ7
	*/
	for (i = 0; i < 29; i++);
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	71fb      	strb	r3, [r7, #7]
 8000cea:	e002      	b.n	8000cf2 <I2C_Delay2+0x12>
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b1c      	cmp	r3, #28
 8000cf6:	d9f9      	bls.n	8000cec <I2C_Delay2+0xc>
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <I2C_Start2>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Start2(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C���������ź� */
	I2C_SDA_HIGH();
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0e:	480e      	ldr	r0, [pc, #56]	; (8000d48 <I2C_Start2+0x44>)
 8000d10:	f003 f8a3 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1a:	480b      	ldr	r0, [pc, #44]	; (8000d48 <I2C_Start2+0x44>)
 8000d1c:	f003 f89d 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000d20:	f7ff ffde 	bl	8000ce0 <I2C_Delay2>
	I2C_SDA_LOW();
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <I2C_Start2+0x44>)
 8000d2c:	f003 f895 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000d30:	f7ff ffd6 	bl	8000ce0 <I2C_Delay2>
	I2C_SCL_LOW();
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <I2C_Start2+0x44>)
 8000d3c:	f003 f88d 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000d40:	f7ff ffce 	bl	8000ce0 <I2C_Delay2>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40010c00 	.word	0x40010c00

08000d4c <I2C_Stop2>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Stop2(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C����ֹͣ�ź� */
	I2C_SDA_LOW();
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d56:	4809      	ldr	r0, [pc, #36]	; (8000d7c <I2C_Stop2+0x30>)
 8000d58:	f003 f87f 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <I2C_Stop2+0x30>)
 8000d64:	f003 f879 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000d68:	f7ff ffba 	bl	8000ce0 <I2C_Delay2>
	I2C_SDA_HIGH();
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d72:	4802      	ldr	r0, [pc, #8]	; (8000d7c <I2C_Stop2+0x30>)
 8000d74:	f003 f871 	bl	8003e5a <HAL_GPIO_WritePin>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40010c00 	.word	0x40010c00

08000d80 <I2C_SendByte2>:
  * �������: Byte �� �ȴ����͵��ֽ�
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_SendByte2(uint8_t Byte)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	/* �ȷ����ֽڵĸ�λbit7 */
	for (i = 0; i < 8; i++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]
 8000d8e:	e031      	b.n	8000df4 <I2C_SendByte2+0x74>
	{		
		if (Byte & 0x80)//提取当前字节最高有效位
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	da06      	bge.n	8000da6 <I2C_SendByte2+0x26>
		{
			I2C_SDA_HIGH();
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9e:	4819      	ldr	r0, [pc, #100]	; (8000e04 <I2C_SendByte2+0x84>)
 8000da0:	f003 f85b 	bl	8003e5a <HAL_GPIO_WritePin>
 8000da4:	e005      	b.n	8000db2 <I2C_SendByte2+0x32>
		}
		else
		{
			I2C_SDA_LOW();
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dac:	4815      	ldr	r0, [pc, #84]	; (8000e04 <I2C_SendByte2+0x84>)
 8000dae:	f003 f854 	bl	8003e5a <HAL_GPIO_WritePin>
		}
		I2C_Delay2();
 8000db2:	f7ff ff95 	bl	8000ce0 <I2C_Delay2>
		I2C_SCL_HIGH();
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbc:	4811      	ldr	r0, [pc, #68]	; (8000e04 <I2C_SendByte2+0x84>)
 8000dbe:	f003 f84c 	bl	8003e5a <HAL_GPIO_WritePin>
		I2C_Delay2();
 8000dc2:	f7ff ff8d 	bl	8000ce0 <I2C_Delay2>
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <I2C_SendByte2+0x84>)
 8000dce:	f003 f844 	bl	8003e5a <HAL_GPIO_WritePin>
		if (i == 7)
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	2b07      	cmp	r3, #7
 8000dd6:	d105      	bne.n	8000de4 <I2C_SendByte2+0x64>
		{
			I2C_SDA_HIGH(); //
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dde:	4809      	ldr	r0, [pc, #36]	; (8000e04 <I2C_SendByte2+0x84>)
 8000de0:	f003 f83b 	bl	8003e5a <HAL_GPIO_WritePin>
		}
		Byte <<= 1;//左移一位，以读取下一位
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
		I2C_Delay2();
 8000dea:	f7ff ff79 	bl	8000ce0 <I2C_Delay2>
	for (i = 0; i < 8; i++)
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	3301      	adds	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	2b07      	cmp	r3, #7
 8000df8:	d9ca      	bls.n	8000d90 <I2C_SendByte2+0x10>
	}
}
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <I2C_WaitAck2>:
  * �������: ��
  * �� �� ֵ: ����0��ʾ��ȷӦ��1��ʾ��������Ӧ
  * ˵    ������
  */
uint8_t I2C_WaitAck2(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e14:	4813      	ldr	r0, [pc, #76]	; (8000e64 <I2C_WaitAck2+0x5c>)
 8000e16:	f003 f820 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000e1a:	f7ff ff61 	bl	8000ce0 <I2C_Delay2>
	I2C_SCL_HIGH();	/* CPU����SCL = 1, ��ʱ�����᷵��ACKӦ�� */
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e24:	480f      	ldr	r0, [pc, #60]	; (8000e64 <I2C_WaitAck2+0x5c>)
 8000e26:	f003 f818 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000e2a:	f7ff ff59 	bl	8000ce0 <I2C_Delay2>
	if (I2C_SDA_READ())	/* CPU��ȡSDA����״̬ */
 8000e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e32:	480c      	ldr	r0, [pc, #48]	; (8000e64 <I2C_WaitAck2+0x5c>)
 8000e34:	f002 fffa 	bl	8003e2c <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d002      	beq.n	8000e44 <I2C_WaitAck2+0x3c>
	{
		re = 1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	e001      	b.n	8000e48 <I2C_WaitAck2+0x40>
	}
	else
	{
		re = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_LOW();
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <I2C_WaitAck2+0x5c>)
 8000e50:	f003 f803 	bl	8003e5a <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000e54:	f7ff ff44 	bl	8000ce0 <I2C_Delay2>
	return re;
 8000e58:	79fb      	ldrb	r3, [r7, #7]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40010c00 	.word	0x40010c00

08000e68 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e70:	1d39      	adds	r1, r7, #4
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	2201      	movs	r2, #1
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <__io_putchar+0x20>)
 8000e7a:	f003 fc6e 	bl	800475a <HAL_UART_Transmit>
  return ch;
 8000e7e:	687b      	ldr	r3, [r7, #4]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200001f8 	.word	0x200001f8

08000e8c <__io_getchar>:
#else
#define PUTCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

GETCHAR_PROTOTYPE
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  uint8_t ch;
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e92:	1df9      	adds	r1, r7, #7
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <__io_getchar+0x20>)
 8000e9c:	f003 fcef 	bl	800487e <HAL_UART_Receive>
  return ch;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001f8 	.word	0x200001f8

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init(); //初始化HAL库
 8000eb6:	f002 fccb 	bl	8003850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config(); //初始化时钟树
 8000eba:	f000 f8bb 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init(); //初始化GPIO端口
 8000ebe:	f000 f925 	bl	800110c <MX_GPIO_Init>
  MX_USART1_UART_Init();//初始化串口1
 8000ec2:	f000 f8f9 	bl	80010b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /*基于TCA9535端口扩展器，拉低VL6180X的GPIO0端口，复位所有的TOF传感器，使其设备地址恢复为初始地址0x52*/
  TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_CONFIG_PORT0_REG, 0x00);//设置TCA9535端口扩展器Port0为输出模式
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2106      	movs	r1, #6
 8000eca:	2040      	movs	r0, #64	; 0x40
 8000ecc:	f000 fb5c 	bl	8001588 <TCA9535_WrByte>
  TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_CONFIG_PORT1_REG, 0x00);//设置TCA9535端口扩展器Port1为输出模式
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	2040      	movs	r0, #64	; 0x40
 8000ed6:	f000 fb57 	bl	8001588 <TCA9535_WrByte>

  TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT0_REG, 0x00);//复位TCA9535端口扩展器Port0所有引脚
 8000eda:	2200      	movs	r2, #0
 8000edc:	2102      	movs	r1, #2
 8000ede:	2040      	movs	r0, #64	; 0x40
 8000ee0:	f000 fb52 	bl	8001588 <TCA9535_WrByte>
  TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT1_REG, 0x00);//复位TCA9535端口扩展器Port1所有引脚
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2103      	movs	r1, #3
 8000ee8:	2040      	movs	r0, #64	; 0x40
 8000eea:	f000 fb4d 	bl	8001588 <TCA9535_WrByte>

  int i, id, FinalI2cAddr, status, enabled_port0_pin, enabled_port1_pin;
//  id = 0;//给id赋初值，保证其地址的正确
  enabled_port0_pin = 0x00;//表达Port0中待置位的8个引脚，向其8位二进制数中某一位写1，即置位相应引脚
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  enabled_port1_pin = 0x00;//表达Port1中待置位的8个引脚，向其8位二进制数中某一位写1，即置位相应引脚
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]

  //逐一更新各传感器的地址
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e042      	b.n	8000f82 <main+0xd2>
  {
	if(i < 8)//当前端口为Port0
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	2b07      	cmp	r3, #7
 8000f00:	dc0b      	bgt.n	8000f1a <main+0x6a>
	{
		/*
		 * 从Port0第一个引脚P00开始，逐一置位下一个引脚，并保持上一个引脚的置位。
		 * enabled_port0_pin二进制值与要置位的引脚的关系为2*enabled_port0_pin+1
		 */
		enabled_port0_pin = 2*enabled_port0_pin + 1;
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	3301      	adds	r3, #1
 8000f08:	613b      	str	r3, [r7, #16]
		TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT0_REG, enabled_port0_pin);//向相应寄存器写入enabled_port0_pin，使能当前TOF传感器
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	2102      	movs	r1, #2
 8000f12:	2040      	movs	r0, #64	; 0x40
 8000f14:	f000 fb38 	bl	8001588 <TCA9535_WrByte>
 8000f18:	e00a      	b.n	8000f30 <main+0x80>
	}
	else//当前端口为Port1,其它操作同Port0
	{
		enabled_port1_pin = 2*enabled_port1_pin + 1;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	3301      	adds	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
		TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT1_REG, enabled_port1_pin);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	2103      	movs	r1, #3
 8000f2a:	2040      	movs	r0, #64	; 0x40
 8000f2c:	f000 fb2c 	bl	8001588 <TCA9535_WrByte>
	}
    HAL_Delay(2);//延时以保证使能成功
 8000f30:	2002      	movs	r0, #2
 8000f32:	f002 fcef 	bl	8003914 <HAL_Delay>
    Devs[i].i2c_dev_addr = 0x52;//刚刚使能的TOF传感器，保存访问地址为默认地址0x52
 8000f36:	4a3e      	ldr	r2, [pc, #248]	; (8001030 <main+0x180>)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	21d4      	movs	r1, #212	; 0xd4
 8000f3c:	fb01 f303 	mul.w	r3, r1, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	33d0      	adds	r3, #208	; 0xd0
 8000f44:	2252      	movs	r2, #82	; 0x52
 8000f46:	601a      	str	r2, [r3, #0]
    FinalI2cAddr = 0x52 + ((i + 1) * 2);//获取修改后的地址（独一无二，不同于0x52）
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	332a      	adds	r3, #42	; 0x2a
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
    status = VL6180x_SetI2CAddress(&Devs[i], FinalI2cAddr); //将修改后的地址写入TOF传感器保存设备地址的寄存器
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	22d4      	movs	r2, #212	; 0xd4
 8000f54:	fb02 f303 	mul.w	r3, r2, r3
 8000f58:	4a35      	ldr	r2, [pc, #212]	; (8001030 <main+0x180>)
 8000f5a:	4413      	add	r3, r2
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fbfc 	bl	8001760 <VL6180x_SetI2CAddress>
 8000f68:	6078      	str	r0, [r7, #4]
    Devs[i].i2c_dev_addr = FinalI2cAddr;//记录修改后的地址
 8000f6a:	4a31      	ldr	r2, [pc, #196]	; (8001030 <main+0x180>)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	21d4      	movs	r1, #212	; 0xd4
 8000f70:	fb01 f303 	mul.w	r3, r1, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	33d0      	adds	r3, #208	; 0xd0
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	ddb9      	ble.n	8000efc <main+0x4c>
//    status = VL6180x_RdByte(&Devs[i], IDENTIFICATION_MODEL_ID, &id);//测试I2C读值是否正常
  }
  //初始化TOF模块
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e049      	b.n	8001022 <main+0x172>
  {
    VL6180x_InitData(&Devs[i]);
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	22d4      	movs	r2, #212	; 0xd4
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	4a26      	ldr	r2, [pc, #152]	; (8001030 <main+0x180>)
 8000f98:	4413      	add	r3, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fb56 	bl	800164c <VL6180x_InitData>
    VL6180x_Prepare(&Devs[i]);
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	22d4      	movs	r2, #212	; 0xd4
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4a21      	ldr	r2, [pc, #132]	; (8001030 <main+0x180>)
 8000faa:	4413      	add	r3, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fc47 	bl	8001840 <VL6180x_Prepare>
//    /* 调整测量范围
    VL6180x_SetGroupParamHold(&Devs[i], 1);
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	22d4      	movs	r2, #212	; 0xd4
 8000fb6:	fb02 f303 	mul.w	r3, r2, r3
 8000fba:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <main+0x180>)
 8000fbc:	4413      	add	r3, r2
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fc24 	bl	800180e <VL6180x_SetGroupParamHold>
    VL6180x_RangeGetThresholds(&Devs[i], NULL, NULL);
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	22d4      	movs	r2, #212	; 0xd4
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
 8000fce:	4a18      	ldr	r2, [pc, #96]	; (8001030 <main+0x180>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 ff46 	bl	8001e68 <VL6180x_RangeGetThresholds>
    VL6180x_UpscaleSetScaling(&Devs[i], 3);//三倍测量范围
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	22d4      	movs	r2, #212	; 0xd4
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	4a12      	ldr	r2, [pc, #72]	; (8001030 <main+0x180>)
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2103      	movs	r1, #3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 f898 	bl	8002120 <VL6180x_UpscaleSetScaling>
    VL6180x_RangeSetThresholds(&Devs[i], 0, 600, 0);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	22d4      	movs	r2, #212	; 0xd4
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <main+0x180>)
 8000ffa:	1898      	adds	r0, r3, r2
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001002:	2100      	movs	r1, #0
 8001004:	f000 fee4 	bl	8001dd0 <VL6180x_RangeSetThresholds>
    VL6180x_SetGroupParamHold(&Devs[i], 0);
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	22d4      	movs	r2, #212	; 0xd4
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <main+0x180>)
 8001012:	4413      	add	r3, r2
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fbf9 	bl	800180e <VL6180x_SetGroupParamHold>
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	ddb2      	ble.n	8000f8e <main+0xde>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	Sample_SimpleRanging();//TOF传感器VL6180X的测距函数
 8001028:	f000 f8e2 	bl	80011f0 <Sample_SimpleRanging>
  {
 800102c:	e7fc      	b.n	8001028 <main+0x178>
 800102e:	bf00      	nop
 8001030:	2000023c 	.word	0x2000023c

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b090      	sub	sp, #64	; 0x40
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2228      	movs	r2, #40	; 0x28
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fdc0 	bl	8004bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105a:	2301      	movs	r3, #1
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105e:	2310      	movs	r3, #16
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001062:	2302      	movs	r3, #2
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001066:	2300      	movs	r3, #0
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800106a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0318 	add.w	r3, r7, #24
 8001074:	4618      	mov	r0, r3
 8001076:	f002 ff09 	bl	8003e8c <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001080:	f000 f910 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001088:	2302      	movs	r3, #2
 800108a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001094:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2101      	movs	r1, #1
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 f976 	bl	8004390 <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010aa:	f000 f8fb 	bl	80012a4 <Error_Handler>
  }
}
 80010ae:	bf00      	nop
 80010b0:	3740      	adds	r7, #64	; 0x40
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <MX_USART1_UART_Init+0x50>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010f0:	f003 fae6 	bl	80046c0 <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010fa:	f000 f8d3 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001f8 	.word	0x200001f8
 8001108:	40013800 	.word	0x40013800

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <MX_GPIO_Init+0xd8>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <MX_GPIO_Init+0xd8>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <MX_GPIO_Init+0xd8>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <MX_GPIO_Init+0xd8>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <MX_GPIO_Init+0xd8>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_GPIO_Init+0xd8>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_GPIO_Init+0xd8>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <MX_GPIO_Init+0xd8>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_GPIO_Init+0xd8>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800116e:	481e      	ldr	r0, [pc, #120]	; (80011e8 <MX_GPIO_Init+0xdc>)
 8001170:	f002 fe73 	bl	8003e5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|CAP_SCL_Pin
 8001174:	2200      	movs	r2, #0
 8001176:	f64f 71c7 	movw	r1, #65479	; 0xffc7
 800117a:	481c      	ldr	r0, [pc, #112]	; (80011ec <MX_GPIO_Init+0xe0>)
 800117c:	f002 fe6d 	bl	8003e5a <HAL_GPIO_WritePin>
                          |CAP_SDA_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|TOF_SDA_Pin|TOF_SCL_Pin|EXP_SDA_Pin
                          |EXP_SCL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001180:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4619      	mov	r1, r3
 8001198:	4813      	ldr	r0, [pc, #76]	; (80011e8 <MX_GPIO_Init+0xdc>)
 800119a:	f002 fcc3 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800119e:	f24f 0307 	movw	r3, #61447	; 0xf007
 80011a2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4619      	mov	r1, r3
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <MX_GPIO_Init+0xe0>)
 80011b8:	f002 fcb4 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAP_SCL_Pin CAP_SDA_Pin TOF_SDA_Pin TOF_SCL_Pin
                           EXP_SDA_Pin EXP_SCL_Pin */
  GPIO_InitStruct.Pin = CAP_SCL_Pin|CAP_SDA_Pin|TOF_SDA_Pin|TOF_SCL_Pin
 80011bc:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 80011c0:	613b      	str	r3, [r7, #16]
                          |EXP_SDA_Pin|EXP_SCL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011c2:	2311      	movs	r3, #17
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_GPIO_Init+0xe0>)
 80011d6:	f002 fca5 	bl	8003b24 <HAL_GPIO_Init>

}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010800 	.word	0x40010800
 80011ec:	40010c00 	.word	0x40010c00

080011f0 <Sample_SimpleRanging>:

/* USER CODE BEGIN 4 */
void Sample_SimpleRanging(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80011f6:	af00      	add	r7, sp, #0
  VL6180x_RangeData_t Range[DEVICE_NUMBER];//存储各设备测距值
//  clock_t start, end;
//  start = clock();
  for (int i = 0; i <= DEVICE_NUMBER - 1; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80011fe:	e03e      	b.n	800127e <Sample_SimpleRanging+0x8e>
  {
    VL6180x_RangePollMeasurement(&Devs[i], &Range[i]);//测距操作
 8001200:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001204:	22d4      	movs	r2, #212	; 0xd4
 8001206:	fb02 f303 	mul.w	r3, r2, r3
 800120a:	4a22      	ldr	r2, [pc, #136]	; (8001294 <Sample_SimpleRanging+0xa4>)
 800120c:	1898      	adds	r0, r3, r2
 800120e:	1d39      	adds	r1, r7, #4
 8001210:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	4619      	mov	r1, r3
 8001220:	f000 fc21 	bl	8001a66 <VL6180x_RangePollMeasurement>
    if (Range[i].errorStatus == 0)//串口输出
 8001224:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001228:	f5a3 7121 	sub.w	r1, r3, #644	; 0x284
 800122c:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	440b      	add	r3, r1
 800123a:	3308      	adds	r3, #8
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d114      	bne.n	800126c <Sample_SimpleRanging+0x7c>
    {
      printf("range %d: %ld mm\r\n", i + 1, Range[i].range_mm);
 8001242:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001246:	1c58      	adds	r0, r3, #1
 8001248:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800124c:	f5a3 7121 	sub.w	r1, r3, #644	; 0x284
 8001250:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4601      	mov	r1, r0
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <Sample_SimpleRanging+0xa8>)
 8001266:	f004 f917 	bl	8005498 <iprintf>
 800126a:	e003      	b.n	8001274 <Sample_SimpleRanging+0x84>
    }
    else
    {
      printf("%s\r\n", "error");
 800126c:	490b      	ldr	r1, [pc, #44]	; (800129c <Sample_SimpleRanging+0xac>)
 800126e:	480c      	ldr	r0, [pc, #48]	; (80012a0 <Sample_SimpleRanging+0xb0>)
 8001270:	f004 f912 	bl	8005498 <iprintf>
  for (int i = 0; i <= DEVICE_NUMBER - 1; i++)
 8001274:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001278:	3301      	adds	r3, #1
 800127a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800127e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001282:	2b0f      	cmp	r3, #15
 8001284:	ddbc      	ble.n	8001200 <Sample_SimpleRanging+0x10>
    }
  }
//  end = clock();
//  double cycle = (double)(end-start);
//  printf("cycle: %f ms\r\n", cycle*1000);
}
 8001286:	bf00      	nop
 8001288:	bf00      	nop
 800128a:	f507 7722 	add.w	r7, r7, #648	; 0x288
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000023c 	.word	0x2000023c
 8001298:	08007638 	.word	0x08007638
 800129c:	0800764c 	.word	0x0800764c
 80012a0:	08007654 	.word	0x08007654

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <Error_Handler+0x8>
	...

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_MspInit+0x5c>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4a14      	ldr	r2, [pc, #80]	; (800130c <HAL_MspInit+0x5c>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_MspInit+0x5c>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_MspInit+0x5c>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <HAL_MspInit+0x5c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <HAL_MspInit+0x5c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_MspInit+0x60>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <HAL_MspInit+0x60>)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000

08001314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <HAL_UART_MspInit+0x8c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d131      	bne.n	8001398 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_UART_MspInit+0x90>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <HAL_UART_MspInit+0x90>)
 800133a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_UART_MspInit+0x90>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_UART_MspInit+0x90>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <HAL_UART_MspInit+0x90>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_UART_MspInit+0x90>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001368:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4619      	mov	r1, r3
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <HAL_UART_MspInit+0x94>)
 800137a:	f002 fbd3 	bl	8003b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800137e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <HAL_UART_MspInit+0x94>)
 8001394:	f002 fbc6 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001398:	bf00      	nop
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40013800 	.word	0x40013800
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010800 	.word	0x40010800

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <NMI_Handler+0x4>

080013b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <HardFault_Handler+0x4>

080013b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <MemManage_Handler+0x4>

080013be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <BusFault_Handler+0x4>

080013c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <UsageFault_Handler+0x4>

080013ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f2:	f002 fa73 	bl	80038dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
	return 1;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <_kill>:

int _kill(int pid, int sig)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001412:	f003 fbaf 	bl	8004b74 <__errno>
 8001416:	4603      	mov	r3, r0
 8001418:	2216      	movs	r2, #22
 800141a:	601a      	str	r2, [r3, #0]
	return -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_exit>:

void _exit (int status)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ffe7 	bl	8001408 <_kill>
	while (1) {}		/* Make sure we hang here */
 800143a:	e7fe      	b.n	800143a <_exit+0x12>

0800143c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00a      	b.n	8001464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800144e:	f7ff fd1d 	bl	8000e8c <__io_getchar>
 8001452:	4601      	mov	r1, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf0      	blt.n	800144e <_read+0x12>
	}

return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e009      	b.n	800149c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fce9 	bl	8000e68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf1      	blt.n	8001488 <_write+0x12>
	}
	return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_close>:

int _close(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return -1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d4:	605a      	str	r2, [r3, #4]
	return 0;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <_isatty>:

int _isatty(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	return 1;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b085      	sub	sp, #20
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
	return 0;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
	...

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f003 fb18 	bl	8004b74 <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20005000 	.word	0x20005000
 8001570:	00000400 	.word	0x00000400
 8001574:	20000f7c 	.word	0x20000f7c
 8001578:	20000f98 	.word	0x20000f98

0800157c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <TCA9535_WrByte>:
#include "tca9535.h"

int TCA9535_WrByte(uint8_t dev, uint8_t index, uint8_t data){
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
 8001592:	460b      	mov	r3, r1
 8001594:	71bb      	strb	r3, [r7, #6]
 8001596:	4613      	mov	r3, r2
 8001598:	717b      	strb	r3, [r7, #5]
    int status;
    int a = 5;
 800159a:	2305      	movs	r3, #5
 800159c:	60fb      	str	r3, [r7, #12]
    uint8_t *buffer = &a;//初始化指针
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	617b      	str	r3, [r7, #20]

    buffer[0] = index;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	79ba      	ldrb	r2, [r7, #6]
 80015a8:	701a      	strb	r2, [r3, #0]
    buffer[1] = data;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	797a      	ldrb	r2, [r7, #5]
 80015b0:	701a      	strb	r2, [r3, #0]

    status = I2C2Write(dev, buffer,(uint8_t)2);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2202      	movs	r2, #2
 80015b6:	6979      	ldr	r1, [r7, #20]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f806 	bl	80015ca <I2C2Write>
 80015be:	6138      	str	r0, [r7, #16]
    return status;
 80015c0:	693b      	ldr	r3, [r7, #16]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <I2C2Write>:
}

//I2C底层通讯函数选择
/* TCA9535底层驱动函数：写 */
int I2C2Write(uint8_t addr, uint8_t *buff, uint8_t len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	6039      	str	r1, [r7, #0]
 80015d4:	71fb      	strb	r3, [r7, #7]
 80015d6:	4613      	mov	r3, r2
 80015d8:	71bb      	strb	r3, [r7, #6]
  int status, i;
  I2C_Start2();//开启I2C总线
 80015da:	f7ff fb93 	bl	8000d04 <I2C_Start2>
  I2C_SendByte2(addr | 0);//发送8位设备地址及LSB的写方向位，实现写功能
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fbcd 	bl	8000d80 <I2C_SendByte2>
  if (I2C_WaitAck2())//如果从机没有应答
 80015e6:	f7ff fc0f 	bl	8000e08 <I2C_WaitAck2>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <I2C2Write+0x2e>
  {
    I2C_Stop2();//关闭I2C总线
 80015f0:	f7ff fbac 	bl	8000d4c <I2C_Stop2>
    return 1;//返回报错标志
 80015f4:	2301      	movs	r3, #1
 80015f6:	e025      	b.n	8001644 <I2C2Write+0x7a>
  }
  for (i = 0; i < len; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	e01b      	b.n	8001636 <I2C2Write+0x6c>
  {
    I2C_SendByte2(buff[i]);//发送buff中的各字节
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fbba 	bl	8000d80 <I2C_SendByte2>
    if (i == len - 1)//在发送最后一个字节的数据时
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	3b01      	subs	r3, #1
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	429a      	cmp	r2, r3
 8001614:	d109      	bne.n	800162a <I2C2Write+0x60>
    {
      if (I2C_WaitAck2())//等待从机应答
 8001616:	f7ff fbf7 	bl	8000e08 <I2C_WaitAck2>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <I2C2Write+0x66>
      {
        I2C_Stop2();//关闭I2C总线
 8001620:	f7ff fb94 	bl	8000d4c <I2C_Stop2>
        status = 1;//返回报错标志
 8001624:	2301      	movs	r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e002      	b.n	8001630 <I2C2Write+0x66>
      }
    }
    else
    {
      status = I2C_WaitAck2();//返回报错标志
 800162a:	f7ff fbed 	bl	8000e08 <I2C_WaitAck2>
 800162e:	60f8      	str	r0, [r7, #12]
  for (i = 0; i < len; i++)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	3301      	adds	r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	429a      	cmp	r2, r3
 800163c:	dbdf      	blt.n	80015fe <I2C2Write+0x34>
    }
  }
  I2C_Stop2();//关闭I2C总线
 800163e:	f7ff fb85 	bl	8000d4c <I2C_Stop2>
  return status;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <VL6180x_InitData>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_InitData(VL6180xDev_t dev)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	uint16_t u16;
	uint32_t XTalkCompRate_KCps;

	LOG_FUNCTION_START("");

	VL6180xDevDataSet(dev, EceFactorM, DEF_ECE_FACTOR_M);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2255      	movs	r2, #85	; 0x55
 8001658:	811a      	strh	r2, [r3, #8]
	VL6180xDevDataSet(dev, EceFactorD, DEF_ECE_FACTOR_D);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2264      	movs	r2, #100	; 0x64
 800165e:	815a      	strh	r2, [r3, #10]

	VL6180xDevDataSet(dev, RangeIgnore.Enabled, 0);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	741a      	strb	r2, [r3, #16]

#ifdef VL6180x_HAVE_UPSCALE_DATA
	VL6180xDevDataSet(dev, UpscaleFactor,  DEF_UPSCALE);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	761a      	strb	r2, [r3, #24]
#endif

#ifdef VL6180x_HAVE_ALS_DATA
	VL6180xDevDataSet(dev, IntegrationPeriod, DEF_INT_PEFRIOD);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2264      	movs	r2, #100	; 0x64
 8001670:	825a      	strh	r2, [r3, #18]
	VL6180xDevDataSet(dev, AlsGainCode, DEF_ALS_GAIN);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	829a      	strh	r2, [r3, #20]
	VL6180xDevDataSet(dev, AlsScaler, DEF_ALS_SCALER);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	82da      	strh	r2, [r3, #22]
#endif

#ifdef VL6180x_HAVE_WRAP_AROUND_DATA
	VL6180xDevDataSet(dev, WrapAroundFilterActive, (VL6180x_WRAP_AROUND_FILTER_SUPPORT > 0));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	765a      	strb	r2, [r3, #25]
	VL6180xDevDataSet(dev, DMaxEnable, DEF_DMAX_ENABLE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
#endif

	_DMax_OneTimeInit(dev);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f001 fd3d 	bl	800310c <_DMax_OneTimeInit>
	do {

		/* backup offset initial value from nvm these must be done prior any over call that use offset */
		status = VL6180x_RdByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, (uint8_t *)&offset);
 8001692:	f107 0313 	add.w	r3, r7, #19
 8001696:	461a      	mov	r2, r3
 8001698:	2124      	movs	r1, #36	; 0x24
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f001 ff5d 	bl	800355a <VL6180x_RdByte>
 80016a0:	61f8      	str	r0, [r7, #28]
		if (status) {
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d14a      	bne.n	800173e <VL6180x_InitData+0xf2>
			VL6180x_ErrLog("SYSRANGE_PART_TO_PART_RANGE_OFFSET rd fail");
			break;
		}
		VL6180xDevDataSet(dev, Part2PartOffsetNVM, offset);
 80016a8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

		status = VL6180x_RdDWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &CalValue);
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	461a      	mov	r2, r3
 80016b8:	2126      	movs	r1, #38	; 0x26
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f001 ffb6 	bl	800362c <VL6180x_RdDWord>
 80016c0:	61f8      	str	r0, [r7, #28]
		if (status) {
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d13c      	bne.n	8001742 <VL6180x_InitData+0xf6>
			VL6180x_ErrLog("Part2PartAmbNVM rd fail");
			break;
		}
		if ((CalValue&0xFFFF0000) == 0) {
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	0c1b      	lsrs	r3, r3, #16
 80016cc:	041b      	lsls	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <VL6180x_InitData+0x8a>
			CalValue = 0x00CE03F8;
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <VL6180x_InitData+0x110>)
 80016d4:	60fb      	str	r3, [r7, #12]
		}
		VL6180xDevDataSet(dev, Part2PartAmbNVM, CalValue);
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	601a      	str	r2, [r3, #0]

		status = VL6180x_RdWord(dev, SYSRANGE_CROSSTALK_COMPENSATION_RATE , &u16);
 80016dc:	f107 030a 	add.w	r3, r7, #10
 80016e0:	461a      	mov	r2, r3
 80016e2:	211e      	movs	r1, #30
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f001 ff68 	bl	80035ba <VL6180x_RdWord>
 80016ea:	61f8      	str	r0, [r7, #28]
		if (status) {
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d129      	bne.n	8001746 <VL6180x_InitData+0xfa>
			VL6180x_ErrLog("SYSRANGE_CROSSTALK_COMPENSATION_RATE rd fail ");
			break;
		}
		XTalkCompRate_KCps = Fix7_2_KCPs(u16);
 80016f2:	897b      	ldrh	r3, [r7, #10]
 80016f4:	461a      	mov	r2, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fb02 f303 	mul.w	r3, r2, r3
 80016fe:	09db      	lsrs	r3, r3, #7
 8001700:	61bb      	str	r3, [r7, #24]
		VL6180xDevDataSet(dev, XTalkCompRate_KCps, XTalkCompRate_KCps);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	605a      	str	r2, [r3, #4]

		dmax_status = _DMax_InitData(dev);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f001 fd59 	bl	80031c0 <_DMax_InitData>
 800170e:	6178      	str	r0, [r7, #20]
		if (dmax_status < 0) {
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db19      	blt.n	800174a <VL6180x_InitData+0xfe>
			VL6180x_ErrLog("DMax init failure");
			break;
		}

		/* Read or wait for fresh out of reset  */
		status = VL6180x_RdByte(dev, SYSTEM_FRESH_OUT_OF_RESET, &FreshOutReset);
 8001716:	f107 0312 	add.w	r3, r7, #18
 800171a:	461a      	mov	r2, r3
 800171c:	2116      	movs	r1, #22
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f001 ff1b 	bl	800355a <VL6180x_RdByte>
 8001724:	61f8      	str	r0, [r7, #28]
		if (status) {
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d110      	bne.n	800174e <VL6180x_InitData+0x102>
			VL6180x_ErrLog("SYSTEM_FRESH_OUT_OF_RESET rd fail");
			break;
		}
		if (FreshOutReset != 1 || dmax_status)
 800172c:	7cbb      	ldrb	r3, [r7, #18]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d102      	bne.n	8001738 <VL6180x_InitData+0xec>
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00b      	beq.n	8001750 <VL6180x_InitData+0x104>
			status = CALIBRATION_WARNING;
 8001738:	2301      	movs	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	e008      	b.n	8001750 <VL6180x_InitData+0x104>
			break;
 800173e:	bf00      	nop
 8001740:	e006      	b.n	8001750 <VL6180x_InitData+0x104>
			break;
 8001742:	bf00      	nop
 8001744:	e004      	b.n	8001750 <VL6180x_InitData+0x104>
			break;
 8001746:	bf00      	nop
 8001748:	e002      	b.n	8001750 <VL6180x_InitData+0x104>
			break;
 800174a:	bf00      	nop
 800174c:	e000      	b.n	8001750 <VL6180x_InitData+0x104>
			break;
 800174e:	bf00      	nop

	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 8001750:	69fb      	ldr	r3, [r7, #28]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	00ce03f8 	.word	0x00ce03f8

08001760 <VL6180x_SetI2CAddress>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_SetI2CAddress(VL6180xDev_t dev, uint8_t NewAddress)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
	int status;
	LOG_FUNCTION_START("");

	status = VL6180x_WrByte(dev, I2C_SLAVE_DEVICE_ADDRESS, NewAddress / 2);
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	f240 2112 	movw	r1, #530	; 0x212
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f001 fe1f 	bl	80033bc <VL6180x_WrByte>
 800177e:	60f8      	str	r0, [r7, #12]
	if (status) {
		VL6180x_ErrLog("new i2c addr Wr fail");
	}
	LOG_FUNCTION_END(status);
	return status;
 8001780:	68fb      	ldr	r3, [r7, #12]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <VL6180x_StaticInit>:
}



int VL6180x_StaticInit(VL6180xDev_t dev)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
	int status = 0, init_status;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
	/* TODO doc When using configurable scaling but using 1x as start condition
	 * load tunning upscale  or not ??? */
	if (_GetUpscale(dev) == 1 && !(VL6180x_UPSCALE_SUPPORT < 0))
		init_status = VL6180x_RangeStaticInit(dev);
	else
		init_status = VL6180x_UpscaleStaticInit(dev);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fd3c 	bl	8002214 <VL6180x_UpscaleStaticInit>
 800179c:	6138      	str	r0, [r7, #16]

	if (init_status < 0) {
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db2c      	blt.n	80017fe <VL6180x_StaticInit+0x74>
	#if REFRESH_CACHED_DATA_AFTER_INIT
	#ifdef VL6180x_HAVE_ALS_DATA
	/* update cached value after tuning applied */
	do {
		uint8_t data;
		status =  VL6180x_RdByte(dev, FW_ALS_RESULT_SCALER, &data);
 80017a4:	f107 030f 	add.w	r3, r7, #15
 80017a8:	461a      	mov	r2, r3
 80017aa:	f44f 7190 	mov.w	r1, #288	; 0x120
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f001 fed3 	bl	800355a <VL6180x_RdByte>
 80017b4:	6178      	str	r0, [r7, #20]
		if (status)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d114      	bne.n	80017e6 <VL6180x_StaticInit+0x5c>
			break;
		VL6180xDevDataSet(dev, AlsScaler, data);
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	82da      	strh	r2, [r3, #22]

		status =  VL6180x_RdByte(dev, SYSALS_ANALOGUE_GAIN, &data);
 80017c4:	f107 030f 	add.w	r3, r7, #15
 80017c8:	461a      	mov	r2, r3
 80017ca:	213f      	movs	r1, #63	; 0x3f
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f001 fec4 	bl	800355a <VL6180x_RdByte>
 80017d2:	6178      	str	r0, [r7, #20]
		if (status)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d107      	bne.n	80017ea <VL6180x_StaticInit+0x60>
			break;
		VL6180x_AlsSetAnalogueGain(dev, data);
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	4619      	mov	r1, r3
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f8c9 	bl	8001976 <VL6180x_AlsSetAnalogueGain>
 80017e4:	e002      	b.n	80017ec <VL6180x_StaticInit+0x62>
			break;
 80017e6:	bf00      	nop
 80017e8:	e000      	b.n	80017ec <VL6180x_StaticInit+0x62>
			break;
 80017ea:	bf00      	nop
	#endif
	#endif /* REFRESH_CACHED_DATA_AFTER_INIT */
	if (status < 0) {
		VL6180x_ErrLog("StaticInit fail");
	}
	if (!status && init_status) {
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d107      	bne.n	8001802 <VL6180x_StaticInit+0x78>
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <VL6180x_StaticInit+0x78>
		status = init_status;
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e002      	b.n	8001804 <VL6180x_StaticInit+0x7a>
		goto error;
 80017fe:	bf00      	nop
 8001800:	e000      	b.n	8001804 <VL6180x_StaticInit+0x7a>
	}
error:
 8001802:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8001804:	697b      	ldr	r3, [r7, #20]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <VL6180x_SetGroupParamHold>:


int VL6180x_SetGroupParamHold(VL6180xDev_t dev, int Hold)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t value;

	LOG_FUNCTION_START("%d", Hold);
	if (Hold)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <VL6180x_SetGroupParamHold+0x16>
		value = 1;
 800181e:	2301      	movs	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
 8001822:	e001      	b.n	8001828 <VL6180x_SetGroupParamHold+0x1a>
	else
		value = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]
	status = VL6180x_WrByte(dev, SYSTEM_GROUPED_PARAMETER_HOLD, value);
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	461a      	mov	r2, r3
 800182c:	2117      	movs	r1, #23
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f001 fdc4 	bl	80033bc <VL6180x_WrByte>
 8001834:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(status);
	return status;
 8001836:	68bb      	ldr	r3, [r7, #8]

}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <VL6180x_Prepare>:

int VL6180x_Prepare(VL6180xDev_t dev)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	int status;
	LOG_FUNCTION_START("");

	do {
		status = VL6180x_StaticInit(dev);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff9e 	bl	800178a <VL6180x_StaticInit>
 800184e:	60f8      	str	r0, [r7, #12]
		if (status < 0)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	db42      	blt.n	80018dc <VL6180x_Prepare+0x9c>
			break;

		/* set range InterruptMode to new sample */
		status = VL6180x_RangeConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 8001856:	2104      	movs	r1, #4
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 fcf9 	bl	8002250 <VL6180x_RangeConfigInterrupt>
 800185e:	60f8      	str	r0, [r7, #12]
		if (status)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d13c      	bne.n	80018e0 <VL6180x_Prepare+0xa0>
			break;

		/* set default threshold */
		status = VL6180x_RangeSetRawThresholds(dev, 10, 200);
 8001866:	22c8      	movs	r2, #200	; 0xc8
 8001868:	210a      	movs	r1, #10
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fa92 	bl	8001d94 <VL6180x_RangeSetRawThresholds>
 8001870:	60f8      	str	r0, [r7, #12]
		if (status) {
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d135      	bne.n	80018e4 <VL6180x_Prepare+0xa4>
			VL6180x_ErrLog("VL6180x_RangeSetRawThresholds fail");
			break;
		}
	#if VL6180x_ALS_SUPPORT
		status = VL6180x_AlsSetIntegrationPeriod(dev, 100);
 8001878:	2164      	movs	r1, #100	; 0x64
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f8c4 	bl	8001a08 <VL6180x_AlsSetIntegrationPeriod>
 8001880:	60f8      	str	r0, [r7, #12]
		if (status)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d12f      	bne.n	80018e8 <VL6180x_Prepare+0xa8>
			break;
		status = VL6180x_AlsSetInterMeasurementPeriod(dev,  200);
 8001888:	21c8      	movs	r1, #200	; 0xc8
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f89a 	bl	80019c4 <VL6180x_AlsSetInterMeasurementPeriod>
 8001890:	60f8      	str	r0, [r7, #12]
		if (status)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d129      	bne.n	80018ec <VL6180x_Prepare+0xac>
			break;
		status = VL6180x_AlsSetAnalogueGain(dev,  0);
 8001898:	2100      	movs	r1, #0
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f86b 	bl	8001976 <VL6180x_AlsSetAnalogueGain>
 80018a0:	60f8      	str	r0, [r7, #12]
		if (status)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d123      	bne.n	80018f0 <VL6180x_Prepare+0xb0>
			break;
		status = VL6180x_AlsSetThresholds(dev, 0, 0xFF);
 80018a8:	22ff      	movs	r2, #255	; 0xff
 80018aa:	2100      	movs	r1, #0
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f844 	bl	800193a <VL6180x_AlsSetThresholds>
 80018b2:	60f8      	str	r0, [r7, #12]
		if (status)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d11c      	bne.n	80018f4 <VL6180x_Prepare+0xb4>
			break;
		/* set Als InterruptMode to new sample */
		status = VL6180x_AlsConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 80018ba:	2104      	movs	r1, #4
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f821 	bl	8001904 <VL6180x_AlsConfigInterrupt>
 80018c2:	60f8      	str	r0, [r7, #12]
		if (status) {
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d116      	bne.n	80018f8 <VL6180x_Prepare+0xb8>
			VL6180x_ErrLog("VL6180x_AlsConfigInterrupt fail");
			break;
		}
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
		_filter_Init(dev);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fdd7 	bl	800247e <_filter_Init>
	#endif
		/* make sure to reset any left previous condition that can hangs first poll */
		status = VL6180x_ClearAllInterrupt(dev);
 80018d0:	2107      	movs	r1, #7
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fb22 	bl	8001f1c <VL6180x_ClearInterrupt>
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	e00e      	b.n	80018fa <VL6180x_Prepare+0xba>
			break;
 80018dc:	bf00      	nop
 80018de:	e00c      	b.n	80018fa <VL6180x_Prepare+0xba>
			break;
 80018e0:	bf00      	nop
 80018e2:	e00a      	b.n	80018fa <VL6180x_Prepare+0xba>
			break;
 80018e4:	bf00      	nop
 80018e6:	e008      	b.n	80018fa <VL6180x_Prepare+0xba>
			break;
 80018e8:	bf00      	nop
 80018ea:	e006      	b.n	80018fa <VL6180x_Prepare+0xba>
			break;
 80018ec:	bf00      	nop
 80018ee:	e004      	b.n	80018fa <VL6180x_Prepare+0xba>
			break;
 80018f0:	bf00      	nop
 80018f2:	e002      	b.n	80018fa <VL6180x_Prepare+0xba>
			break;
 80018f4:	bf00      	nop
 80018f6:	e000      	b.n	80018fa <VL6180x_Prepare+0xba>
			break;
 80018f8:	bf00      	nop
	} while (0);
	LOG_FUNCTION_END(status);

	return status;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <VL6180x_AlsConfigInterrupt>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_AlsConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	70fb      	strb	r3, [r7, #3]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	2b04      	cmp	r3, #4
 8001914:	d809      	bhi.n	800192a <VL6180x_AlsConfigInterrupt+0x26>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO, (uint8_t)(~CONFIG_GPIO_ALS_MASK), (ConfigGpioInt << 3));
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	22c7      	movs	r2, #199	; 0xc7
 800191e:	2114      	movs	r1, #20
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f001 fdd4 	bl	80034ce <VL6180x_UpdateByte>
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	e002      	b.n	8001930 <VL6180x_AlsConfigInterrupt+0x2c>
	} else {
		VL6180x_ErrLog("Invalid config mode param %d", (int)ConfigGpioInt);
		status = INVALID_PARAMS;
 800192a:	f06f 0301 	mvn.w	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8001930:	68fb      	ldr	r3, [r7, #12]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <VL6180x_AlsSetThresholds>:



int VL6180x_AlsSetThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	70fb      	strb	r3, [r7, #3]
 8001946:	4613      	mov	r3, r2
 8001948:	70bb      	strb	r3, [r7, #2]
	int status;

	LOG_FUNCTION_START("%d %d", (int)low, (int)high);

	status = VL6180x_WrByte(dev, SYSALS_THRESH_LOW, low);
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	461a      	mov	r2, r3
 800194e:	213c      	movs	r1, #60	; 0x3c
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f001 fd33 	bl	80033bc <VL6180x_WrByte>
 8001956:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <VL6180x_AlsSetThresholds+0x32>
		status = VL6180x_WrByte(dev, SYSALS_THRESH_HIGH, high);
 800195e:	78bb      	ldrb	r3, [r7, #2]
 8001960:	461a      	mov	r2, r3
 8001962:	213a      	movs	r1, #58	; 0x3a
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f001 fd29 	bl	80033bc <VL6180x_WrByte>
 800196a:	60f8      	str	r0, [r7, #12]
	}

	LOG_FUNCTION_END(status) ;
	return status;
 800196c:	68fb      	ldr	r3, [r7, #12]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <VL6180x_AlsSetAnalogueGain>:


int VL6180x_AlsSetAnalogueGain(VL6180xDev_t dev, uint8_t gain)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	70fb      	strb	r3, [r7, #3]
	int status;
	uint8_t GainTotal;

	LOG_FUNCTION_START("%d", (int)gain);
	gain &= ~0x40;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001988:	70fb      	strb	r3, [r7, #3]
	if (gain > 7) {
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	2b07      	cmp	r3, #7
 800198e:	d901      	bls.n	8001994 <VL6180x_AlsSetAnalogueGain+0x1e>
		gain = 7;
 8001990:	2307      	movs	r3, #7
 8001992:	70fb      	strb	r3, [r7, #3]
	}
	GainTotal = gain | 0x40;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800199a:	73fb      	strb	r3, [r7, #15]

	status = VL6180x_WrByte(dev, SYSALS_ANALOGUE_GAIN, GainTotal);
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	461a      	mov	r2, r3
 80019a0:	213f      	movs	r1, #63	; 0x3f
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f001 fd0a 	bl	80033bc <VL6180x_WrByte>
 80019a8:	60b8      	str	r0, [r7, #8]
	if (!status) {
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d103      	bne.n	80019b8 <VL6180x_AlsSetAnalogueGain+0x42>
		VL6180xDevDataSet(dev, AlsGainCode, gain);
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	829a      	strh	r2, [r3, #20]
	}

	LOG_FUNCTION_END_FMT(status, "%d %d", (int)gain, (int)GainTotal);
	return status;
 80019b8:	68bb      	ldr	r3, [r7, #8]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <VL6180x_AlsSetInterMeasurementPeriod>:

int VL6180x_AlsSetInterMeasurementPeriod(VL6180xDev_t dev,  uint16_t intermeasurement_period_ms)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
	int status;

	LOG_FUNCTION_START("%d", (int)intermeasurement_period_ms);
	/* clipping: range is 0-2550ms */
	if (intermeasurement_period_ms >= 255 * 10)
 80019d0:	887b      	ldrh	r3, [r7, #2]
 80019d2:	f640 12f5 	movw	r2, #2549	; 0x9f5
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d902      	bls.n	80019e0 <VL6180x_AlsSetInterMeasurementPeriod+0x1c>
		intermeasurement_period_ms = 255 * 10;
 80019da:	f640 13f6 	movw	r3, #2550	; 0x9f6
 80019de:	807b      	strh	r3, [r7, #2]
	status = VL6180x_WrByte(dev, SYSALS_INTERMEASUREMENT_PERIOD, (uint8_t)(intermeasurement_period_ms / 10));
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <VL6180x_AlsSetInterMeasurementPeriod+0x40>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	08db      	lsrs	r3, r3, #3
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	213e      	movs	r1, #62	; 0x3e
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f001 fce2 	bl	80033bc <VL6180x_WrByte>
 80019f8:	60f8      	str	r0, [r7, #12]

	LOG_FUNCTION_END_FMT(status, "%d", (int)intermeasurement_period_ms);
	return status;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	cccccccd 	.word	0xcccccccd

08001a08 <VL6180x_AlsSetIntegrationPeriod>:


int VL6180x_AlsSetIntegrationPeriod(VL6180xDev_t dev, uint16_t period_ms)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
	int status;
	uint16_t SetIntegrationPeriod;

	LOG_FUNCTION_START("%d", (int)period_ms);

	if (period_ms >= 1)
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <VL6180x_AlsSetIntegrationPeriod+0x1a>
		SetIntegrationPeriod = period_ms - 1;
 8001a1a:	887b      	ldrh	r3, [r7, #2]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	81fb      	strh	r3, [r7, #14]
 8001a20:	e001      	b.n	8001a26 <VL6180x_AlsSetIntegrationPeriod+0x1e>
	else
		SetIntegrationPeriod = period_ms;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	81fb      	strh	r3, [r7, #14]

	if (SetIntegrationPeriod > 464) {
 8001a26:	89fb      	ldrh	r3, [r7, #14]
 8001a28:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8001a2c:	d903      	bls.n	8001a36 <VL6180x_AlsSetIntegrationPeriod+0x2e>
		SetIntegrationPeriod = 464;
 8001a2e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8001a32:	81fb      	strh	r3, [r7, #14]
 8001a34:	e005      	b.n	8001a42 <VL6180x_AlsSetIntegrationPeriod+0x3a>
	} else if (SetIntegrationPeriod == 255)   {
 8001a36:	89fb      	ldrh	r3, [r7, #14]
 8001a38:	2bff      	cmp	r3, #255	; 0xff
 8001a3a:	d102      	bne.n	8001a42 <VL6180x_AlsSetIntegrationPeriod+0x3a>
		SetIntegrationPeriod++; /* can't write 255 since this causes the device to lock out.*/
 8001a3c:	89fb      	ldrh	r3, [r7, #14]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	81fb      	strh	r3, [r7, #14]
	}

	status = VL6180x_WrWord(dev, SYSALS_INTEGRATION_PERIOD, SetIntegrationPeriod);
 8001a42:	89fb      	ldrh	r3, [r7, #14]
 8001a44:	461a      	mov	r2, r3
 8001a46:	2140      	movs	r1, #64	; 0x40
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f001 fcdc 	bl	8003406 <VL6180x_WrWord>
 8001a4e:	60b8      	str	r0, [r7, #8]
	if (!status) {
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <VL6180x_AlsSetIntegrationPeriod+0x54>
		VL6180xDevDataSet(dev, IntegrationPeriod, SetIntegrationPeriod) ;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	89fa      	ldrh	r2, [r7, #14]
 8001a5a:	825a      	strh	r2, [r3, #18]
	}
	LOG_FUNCTION_END_FMT(status, "%d", (int)SetIntegrationPeriod);
	return status;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <VL6180x_RangePollMeasurement>:

#endif /* HAVE_ALS_SUPPORT */


int VL6180x_RangePollMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
		VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		goto done;
	}
	#endif
	/* //![single_shot_snipet] */
	status = VL6180x_RangeSetSystemMode(dev, MODE_START_STOP | MODE_SINGLESHOT);
 8001a70:	2101      	movs	r1, #1
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fc44 	bl	8002300 <VL6180x_RangeSetSystemMode>
 8001a78:	6178      	str	r0, [r7, #20]
	if (status) {
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d12d      	bne.n	8001adc <VL6180x_RangePollMeasurement+0x76>
	}


	/* poll for new sample ready */
	while (1) {
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4619      	mov	r1, r3
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 fa30 	bl	8001eec <VL6180x_RangeGetInterruptStatus>
 8001a8c:	6178      	str	r0, [r7, #20]
		if (status) {
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10c      	bne.n	8001aae <VL6180x_RangePollMeasurement+0x48>
			break;
		}
		if (IntStatus.status.Range == RES_INT_STAT_GPIO_NEW_SAMPLE_READY || IntStatus.status.Error != 0) {
 8001a94:	7b3b      	ldrb	r3, [r7, #12]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d007      	beq.n	8001ab0 <VL6180x_RangePollMeasurement+0x4a>
 8001aa0:	7b3b      	ldrb	r3, [r7, #12]
 8001aa2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <VL6180x_RangePollMeasurement+0x4a>
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 8001aac:	e7e8      	b.n	8001a80 <VL6180x_RangePollMeasurement+0x1a>
			break;
 8001aae:	bf00      	nop

		VL6180x_PollDelay(dev);
	}
	/* //![single_shot_snipet] */

	if (!status) {
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d104      	bne.n	8001ac0 <VL6180x_RangePollMeasurement+0x5a>
		status = VL6180x_RangeGetMeasurement(dev, pRangeData);
 8001ab6:	6839      	ldr	r1, [r7, #0]
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f8df 	bl	8001c7c <VL6180x_RangeGetMeasurement>
 8001abe:	6178      	str	r0, [r7, #20]
	}

	/*  clear range interrupt source */
	ClrStatus = VL6180x_RangeClearInterrupt(dev);
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fa2a 	bl	8001f1c <VL6180x_ClearInterrupt>
 8001ac8:	6138      	str	r0, [r7, #16]
	if (ClrStatus) {
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <VL6180x_RangePollMeasurement+0x7a>
		VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		/*  leave initial status if already in error  */
		if (!status) {
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d104      	bne.n	8001ae0 <VL6180x_RangePollMeasurement+0x7a>
			status = ClrStatus;
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e002      	b.n	8001ae2 <VL6180x_RangePollMeasurement+0x7c>
		goto done;
 8001adc:	bf00      	nop
 8001ade:	e000      	b.n	8001ae2 <VL6180x_RangePollMeasurement+0x7c>
		}
	}
done:
 8001ae0:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8001ae2:	697b      	ldr	r3, [r7, #20]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <VL6180x_GetCachedDWord>:


#if VL6180x_CACHED_REG

int VL6180x_GetCachedDWord(VL6180xDev_t dev, uint16_t  index, uint32_t *pValue)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	460b      	mov	r3, r1
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	817b      	strh	r3, [r7, #10]
	int status;
	uint32_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d024      	beq.n	8001b4e <VL6180x_GetCachedDWord+0x62>
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	2b4c      	cmp	r3, #76	; 0x4c
 8001b08:	d921      	bls.n	8001b4e <VL6180x_GetCachedDWord+0x62>
		index >= VL6180x_FIRST_CACHED_INDEX  &&
 8001b0a:	897b      	ldrh	r3, [r7, #10]
 8001b0c:	2b81      	cmp	r3, #129	; 0x81
 8001b0e:	d81e      	bhi.n	8001b4e <VL6180x_GetCachedDWord+0x62>
		index <= (VL6180x_LAST_CACHED_INDEX - 3)) {
		uint8_t *pBytes = &VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8001b10:	897b      	ldrh	r3, [r7, #10]
 8001b12:	3b4d      	subs	r3, #77	; 0x4d
 8001b14:	3380      	adds	r3, #128	; 0x80
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4413      	add	r3, r2
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	61bb      	str	r3, [r7, #24]
		Value = ((uint32_t)pBytes[0] << 24) |
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	061a      	lsls	r2, r3, #24
				((uint32_t)pBytes[1] << 16) |
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	3301      	adds	r3, #1
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	041b      	lsls	r3, r3, #16
		Value = ((uint32_t)pBytes[0] << 24) |
 8001b2c:	431a      	orrs	r2, r3
				((uint32_t)pBytes[2] << 8) |
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	3302      	adds	r3, #2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	021b      	lsls	r3, r3, #8
				((uint32_t)pBytes[1] << 16) |
 8001b36:	4313      	orrs	r3, r2
				(uint32_t)pBytes[3];
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	3203      	adds	r2, #3
 8001b3c:	7812      	ldrb	r2, [r2, #0]
		Value = ((uint32_t)pBytes[0] << 24) |
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]
		*pValue = Value;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	601a      	str	r2, [r3, #0]
		status = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
		index <= (VL6180x_LAST_CACHED_INDEX - 3)) {
 8001b4c:	e006      	b.n	8001b5c <VL6180x_GetCachedDWord+0x70>
	} else {
		status =  VL6180x_RdDWord(dev, index, pValue);
 8001b4e:	897b      	ldrh	r3, [r7, #10]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4619      	mov	r1, r3
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f001 fd69 	bl	800362c <VL6180x_RdDWord>
 8001b5a:	61f8      	str	r0, [r7, #28]
	}
	return status;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3720      	adds	r7, #32
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <VL6180x_GetCachedWord>:

int VL6180x_GetCachedWord(VL6180xDev_t dev, uint16_t  index, uint16_t *pValue)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b088      	sub	sp, #32
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	817b      	strh	r3, [r7, #10]
	int status;
	uint32_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01b      	beq.n	8001bb6 <VL6180x_GetCachedWord+0x50>
 8001b7e:	897b      	ldrh	r3, [r7, #10]
 8001b80:	2b4c      	cmp	r3, #76	; 0x4c
 8001b82:	d918      	bls.n	8001bb6 <VL6180x_GetCachedWord+0x50>
		index >= VL6180x_FIRST_CACHED_INDEX  &&
 8001b84:	897b      	ldrh	r3, [r7, #10]
 8001b86:	2b83      	cmp	r3, #131	; 0x83
 8001b88:	d815      	bhi.n	8001bb6 <VL6180x_GetCachedWord+0x50>
		index <= (VL6180x_LAST_CACHED_INDEX - 1)) {
		uint8_t *pBytes = &VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8001b8a:	897b      	ldrh	r3, [r7, #10]
 8001b8c:	3b4d      	subs	r3, #77	; 0x4d
 8001b8e:	3380      	adds	r3, #128	; 0x80
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	3301      	adds	r3, #1
 8001b96:	61bb      	str	r3, [r7, #24]
		Value = ((uint32_t)pBytes[0] << 8) | (uint32_t)pBytes[1];
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	3201      	adds	r2, #1
 8001ba2:	7812      	ldrb	r2, [r2, #0]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]
		*pValue = Value;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	801a      	strh	r2, [r3, #0]
		status = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
		index <= (VL6180x_LAST_CACHED_INDEX - 1)) {
 8001bb4:	e006      	b.n	8001bc4 <VL6180x_GetCachedWord+0x5e>
	} else {
		status =  VL6180x_RdWord(dev, index, pValue);
 8001bb6:	897b      	ldrh	r3, [r7, #10]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f001 fcfc 	bl	80035ba <VL6180x_RdWord>
 8001bc2:	61f8      	str	r0, [r7, #28]
	}
	return status;
 8001bc4:	69fb      	ldr	r3, [r7, #28]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3720      	adds	r7, #32
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <VL6180x_GetCachedByte>:

int VL6180x_GetCachedByte(VL6180xDev_t dev, uint16_t  index, uint8_t *pValue)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	817b      	strh	r3, [r7, #10]
	int status;
	uint8_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d012      	beq.n	8001c0c <VL6180x_GetCachedByte+0x3e>
 8001be6:	897b      	ldrh	r3, [r7, #10]
 8001be8:	2b4c      	cmp	r3, #76	; 0x4c
 8001bea:	d90f      	bls.n	8001c0c <VL6180x_GetCachedByte+0x3e>
		index >= VL6180x_FIRST_CACHED_INDEX &&
 8001bec:	897b      	ldrh	r3, [r7, #10]
 8001bee:	2b84      	cmp	r3, #132	; 0x84
 8001bf0:	d80c      	bhi.n	8001c0c <VL6180x_GetCachedByte+0x3e>
		index <= VL6180x_LAST_CACHED_INDEX) {
		Value = VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8001bf2:	897b      	ldrh	r3, [r7, #10]
 8001bf4:	3b4d      	subs	r3, #77	; 0x4d
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001bfe:	74fb      	strb	r3, [r7, #19]
		*pValue = Value;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7cfa      	ldrb	r2, [r7, #19]
 8001c04:	701a      	strb	r2, [r3, #0]
		status = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e006      	b.n	8001c1a <VL6180x_GetCachedByte+0x4c>
	} else {
		status =  VL6180x_RdByte(dev, index, pValue);
 8001c0c:	897b      	ldrh	r3, [r7, #10]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4619      	mov	r1, r3
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f001 fca1 	bl	800355a <VL6180x_RdByte>
 8001c18:	6178      	str	r0, [r7, #20]
	}
	return status;
 8001c1a:	697b      	ldr	r3, [r7, #20]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_CachedRegs_Fetch>:


int _CachedRegs_Fetch(VL6180xDev_t dev)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	int status;
	uint8_t *Buffer;
	if (VL6180xDevDataGet(dev, CacheFilled) == 0) {
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10e      	bne.n	8001c54 <_CachedRegs_Fetch+0x30>
		VL6180xDevDataSet(dev, CacheFilled, 1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		Buffer = &VL6180xDevDataGet(dev, CachedRegs[0]);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3381      	adds	r3, #129	; 0x81
 8001c42:	60bb      	str	r3, [r7, #8]
		status = VL6180x_RdMulti(dev, VL6180x_FIRST_CACHED_INDEX, Buffer, VL6180x_CACHED_REG_CNT);
 8001c44:	2338      	movs	r3, #56	; 0x38
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	214d      	movs	r1, #77	; 0x4d
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f001 fd2d 	bl	80036aa <VL6180x_RdMulti>
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	e001      	b.n	8001c58 <_CachedRegs_Fetch+0x34>
	} else {
		status = 0 ;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
	}
	return status;
 8001c58:	68fb      	ldr	r3, [r7, #12]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_CachedRegs_Flush>:

void _CachedRegs_Flush(VL6180xDev_t dev)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
	VL6180xDevDataSet(dev, CacheFilled, 0);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <VL6180x_RangeGetMeasurement>:
#endif /* VL6180x_CACHED_REG */



int VL6180x_RangeGetMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	uint16_t RawRate;
	uint8_t RawStatus;

	LOG_FUNCTION_START("");

	status = _CachedRegs_Fetch(dev);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffcc 	bl	8001c24 <_CachedRegs_Fetch>
 8001c8c:	60f8      	str	r0, [r7, #12]
	if (status) {
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d153      	bne.n	8001d3c <VL6180x_RangeGetMeasurement+0xc0>
		VL6180x_ErrLog("Cache register read fail");
		goto error;
	}
	status = VL6180x_RangeGetResult(dev, &pRangeData->range_mm);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4619      	mov	r1, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f85c 	bl	8001d56 <VL6180x_RangeGetResult>
 8001c9e:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d14c      	bne.n	8001d40 <VL6180x_RangeGetMeasurement+0xc4>
		status = VL6180x_GetCachedWord(dev, RESULT_RANGE_SIGNAL_RATE, &RawRate);
 8001ca6:	f107 030a 	add.w	r3, r7, #10
 8001caa:	461a      	mov	r2, r3
 8001cac:	2166      	movs	r1, #102	; 0x66
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ff59 	bl	8001b66 <VL6180x_GetCachedWord>
 8001cb4:	60f8      	str	r0, [r7, #12]
		if (!status) {
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d144      	bne.n	8001d46 <VL6180x_RangeGetMeasurement+0xca>
			pRangeData->signalRate_mcps = VL6180x_9to7Conv(RawRate);
 8001cbc:	897b      	ldrh	r3, [r7, #10]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
			status = VL6180x_GetCachedByte(dev, RESULT_RANGE_STATUS, &RawStatus);
 8001cc4:	f107 0309 	add.w	r3, r7, #9
 8001cc8:	461a      	mov	r2, r3
 8001cca:	214d      	movs	r1, #77	; 0x4d
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff7e 	bl	8001bce <VL6180x_GetCachedByte>
 8001cd2:	60f8      	str	r0, [r7, #12]
			if (!status) {
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d105      	bne.n	8001ce6 <VL6180x_RangeGetMeasurement+0x6a>
				pRangeData->errorStatus = RawStatus >> 4;
 8001cda:	7a7b      	ldrb	r3, [r7, #9]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	609a      	str	r2, [r3, #8]
			} else {
				VL6180x_ErrLog("Rd RESULT_RANGE_STATUS fail");
			}
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT || VL6180x_HAVE_DMAX_RANGING
			status = _GetRateResult(dev, pRangeData);
 8001ce6:	6839      	ldr	r1, [r7, #0]
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f001 f956 	bl	8002f9a <_GetRateResult>
 8001cee:	60f8      	str	r0, [r7, #12]
			if (status)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d126      	bne.n	8001d44 <VL6180x_RangeGetMeasurement+0xc8>
				goto error;
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
			/* if enabled run filter */
			if (_IsWrapArroundActive(dev)) {
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7e5b      	ldrb	r3, [r3, #25]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d014      	beq.n	8001d28 <VL6180x_RangeGetMeasurement+0xac>
				status = _filter_GetResult(dev, pRangeData);
 8001cfe:	6839      	ldr	r1, [r7, #0]
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f001 f8fb 	bl	8002efc <_filter_GetResult>
 8001d06:	60f8      	str	r0, [r7, #12]
				if (!status) {
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10c      	bne.n	8001d28 <VL6180x_RangeGetMeasurement+0xac>
					/* patch the range status and measure if it is filtered */
					if(pRangeData->FilteredData.filterError != NoError) {
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <VL6180x_RangeGetMeasurement+0xac>
						pRangeData->errorStatus = pRangeData->FilteredData.filterError;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	609a      	str	r2, [r3, #8]
						pRangeData->range_mm = pRangeData->FilteredData.range_mm;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	8c1b      	ldrh	r3, [r3, #32]
 8001d22:	461a      	mov	r2, r3
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	601a      	str	r2, [r3, #0]
				}
			}
	#endif

	#if VL6180x_HAVE_DMAX_RANGING
			if (_IsDMaxActive(dev)) {
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <VL6180x_RangeGetMeasurement+0xca>
				_DMax_Compute(dev, pRangeData);
 8001d32:	6839      	ldr	r1, [r7, #0]
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f001 fb01 	bl	800333c <_DMax_Compute>
 8001d3a:	e004      	b.n	8001d46 <VL6180x_RangeGetMeasurement+0xca>
		goto error;
 8001d3c:	bf00      	nop
 8001d3e:	e002      	b.n	8001d46 <VL6180x_RangeGetMeasurement+0xca>
		    VL6180x_ErrLog("Rd RESULT_RANGE_SIGNAL_RATE fail");
		}
	} else {
		VL6180x_ErrLog("VL6180x_GetRangeResult fail");
	}
error:
 8001d40:	bf00      	nop
 8001d42:	e000      	b.n	8001d46 <VL6180x_RangeGetMeasurement+0xca>
				goto error;
 8001d44:	bf00      	nop
	_CachedRegs_Flush(dev);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ff8b 	bl	8001c62 <_CachedRegs_Flush>
	LOG_FUNCTION_END_FMT(status, "%d %d %d", (int)pRangeData->range_mm, (int)pRangeData->signalRate_mcps,  (int)pRangeData->errorStatus) ;
	return status;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <VL6180x_RangeGetResult>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeGetResult(VL6180xDev_t dev, int32_t *pRange_mm)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
	uint8_t RawRange;
	int32_t Upscale;

	LOG_FUNCTION_START("%p", pRange_mm);

	status = VL6180x_GetCachedByte(dev, RESULT_RANGE_VAL, &RawRange);
 8001d60:	f107 030f 	add.w	r3, r7, #15
 8001d64:	461a      	mov	r2, r3
 8001d66:	2162      	movs	r1, #98	; 0x62
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff30 	bl	8001bce <VL6180x_GetCachedByte>
 8001d6e:	6178      	str	r0, [r7, #20]
	if (!status) {
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <VL6180x_RangeGetResult+0x34>
		Upscale = _GetUpscale(dev);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7e1b      	ldrb	r3, [r3, #24]
 8001d7a:	613b      	str	r3, [r7, #16]
		*pRange_mm = Upscale * (int32_t)RawRange;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	fb03 f202 	mul.w	r2, r3, r2
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	601a      	str	r2, [r3, #0]
	}
	LOG_FUNCTION_END_FMT(status, "%d", (int)*pRange_mm);
	return status;
 8001d8a:	697b      	ldr	r3, [r7, #20]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <VL6180x_RangeSetRawThresholds>:

int VL6180x_RangeSetRawThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
 8001da0:	4613      	mov	r3, r2
 8001da2:	70bb      	strb	r3, [r7, #2]
	int status;
	LOG_FUNCTION_START("%d %d", (int) low, (int)high);
	/* TODO we can optimize here grouping high/low in a word but that's cpu endianness dependent */
	status = VL6180x_WrByte(dev, SYSRANGE_THRESH_HIGH, high);
 8001da4:	78bb      	ldrb	r3, [r7, #2]
 8001da6:	461a      	mov	r2, r3
 8001da8:	2119      	movs	r1, #25
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f001 fb06 	bl	80033bc <VL6180x_WrByte>
 8001db0:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d106      	bne.n	8001dc6 <VL6180x_RangeSetRawThresholds+0x32>
		status = VL6180x_WrByte(dev, SYSRANGE_THRESH_LOW, low);
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	211a      	movs	r1, #26
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f001 fafc 	bl	80033bc <VL6180x_WrByte>
 8001dc4:	60f8      	str	r0, [r7, #12]
	}

	LOG_FUNCTION_END(status);
	return status;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <VL6180x_RangeSetThresholds>:

int VL6180x_RangeSetThresholds(VL6180xDev_t dev, uint16_t low, uint16_t high, int UseSafeParamHold)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	817b      	strh	r3, [r7, #10]
 8001dde:	4613      	mov	r3, r2
 8001de0:	813b      	strh	r3, [r7, #8]
	int status;
	int scale;
	LOG_FUNCTION_START("%d %d", (int) low, (int)high);
	scale = _GetUpscale(dev, UpscaleFactor);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	7e1b      	ldrb	r3, [r3, #24]
 8001de6:	61bb      	str	r3, [r7, #24]
	if (low > scale * 255 || high > scale * 255) {
 8001de8:	8979      	ldrh	r1, [r7, #10]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4613      	mov	r3, r2
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	4299      	cmp	r1, r3
 8001df4:	dc06      	bgt.n	8001e04 <VL6180x_RangeSetThresholds+0x34>
 8001df6:	8939      	ldrh	r1, [r7, #8]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	1a9b      	subs	r3, r3, r2
 8001e00:	4299      	cmp	r1, r3
 8001e02:	dd03      	ble.n	8001e0c <VL6180x_RangeSetThresholds+0x3c>
		status = INVALID_PARAMS;
 8001e04:	f06f 0301 	mvn.w	r3, #1
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	e028      	b.n	8001e5e <VL6180x_RangeSetThresholds+0x8e>
	} else {
		do {
			if (UseSafeParamHold) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <VL6180x_RangeSetThresholds+0x52>
				status = VL6180x_SetGroupParamHold(dev, 1);
 8001e12:	2101      	movs	r1, #1
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7ff fcfa 	bl	800180e <VL6180x_SetGroupParamHold>
 8001e1a:	61f8      	str	r0, [r7, #28]
				if (status)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d11c      	bne.n	8001e5c <VL6180x_RangeSetThresholds+0x8c>
					break;
		    }
		    status = VL6180x_RangeSetRawThresholds(dev, (uint8_t)(low / scale), (uint8_t)(high / scale));
 8001e22:	897a      	ldrh	r2, [r7, #10]
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e2a:	b2d9      	uxtb	r1, r3
 8001e2c:	893a      	ldrh	r2, [r7, #8]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f7ff ffab 	bl	8001d94 <VL6180x_RangeSetRawThresholds>
 8001e3e:	61f8      	str	r0, [r7, #28]
		    if (status) {
				VL6180x_ErrLog("VL6180x_RangeSetRawThresholds fail");
		    }
		    if (UseSafeParamHold) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <VL6180x_RangeSetThresholds+0x8e>
				int HoldStatus;
				/* tryt to unset param hold vene if previous fail */
				HoldStatus = VL6180x_SetGroupParamHold(dev, 0);
 8001e46:	2100      	movs	r1, #0
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7ff fce0 	bl	800180e <VL6180x_SetGroupParamHold>
 8001e4e:	6178      	str	r0, [r7, #20]
				if (!status)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d103      	bne.n	8001e5e <VL6180x_RangeSetThresholds+0x8e>
					status = HoldStatus;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	e000      	b.n	8001e5e <VL6180x_RangeSetThresholds+0x8e>
					break;
 8001e5c:	bf00      	nop
		    }
		} while (0);
	}

	LOG_FUNCTION_END(status);
	return status;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <VL6180x_RangeGetThresholds>:


int VL6180x_RangeGetThresholds(VL6180xDev_t dev, uint16_t *low, uint16_t *high)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
	int status = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
	uint8_t RawLow, RawHigh;
	int scale;

	LOG_FUNCTION_START("%p %p", low , high);

	scale = _GetUpscale(dev, UpscaleFactor);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	7e1b      	ldrb	r3, [r3, #24]
 8001e7c:	61bb      	str	r3, [r7, #24]
	do {
		if (high != NULL) {
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <VL6180x_RangeGetThresholds+0x44>
			status = VL6180x_RdByte(dev, SYSRANGE_THRESH_HIGH, &RawHigh);
 8001e84:	f107 0316 	add.w	r3, r7, #22
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2119      	movs	r1, #25
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f001 fb64 	bl	800355a <VL6180x_RdByte>
 8001e92:	61f8      	str	r0, [r7, #28]
			if (status) {
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d120      	bne.n	8001edc <VL6180x_RangeGetThresholds+0x74>
				VL6180x_ErrLog("rd SYSRANGE_THRESH_HIGH fail");
				break;
			}
			*high = (uint16_t)RawHigh * scale;
 8001e9a:	7dbb      	ldrb	r3, [r7, #22]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	b292      	uxth	r2, r2
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	801a      	strh	r2, [r3, #0]
		}
		if (low != NULL) {
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d017      	beq.n	8001ee2 <VL6180x_RangeGetThresholds+0x7a>
		    status = VL6180x_RdByte(dev, SYSRANGE_THRESH_LOW, &RawLow);
 8001eb2:	f107 0317 	add.w	r3, r7, #23
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	211a      	movs	r1, #26
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f001 fb4d 	bl	800355a <VL6180x_RdByte>
 8001ec0:	61f8      	str	r0, [r7, #28]
			if (status) {
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10b      	bne.n	8001ee0 <VL6180x_RangeGetThresholds+0x78>
				VL6180x_ErrLog("rd SYSRANGE_THRESH_LOW fail");
				break;
		    }
		    *low = (uint16_t)RawLow * scale;
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	b292      	uxth	r2, r2
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	801a      	strh	r2, [r3, #0]
 8001eda:	e002      	b.n	8001ee2 <VL6180x_RangeGetThresholds+0x7a>
				break;
 8001edc:	bf00      	nop
 8001ede:	e000      	b.n	8001ee2 <VL6180x_RangeGetThresholds+0x7a>
				break;
 8001ee0:	bf00      	nop
		}
	} while (0);
	LOG_FUNCTION_END_FMT(status, "%d %d", (int)*low , (int)*high);
	return status;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <VL6180x_RangeGetInterruptStatus>:


int VL6180x_RangeGetInterruptStatus(VL6180xDev_t dev, uint8_t *pIntStatus)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t IntStatus;
	LOG_FUNCTION_START("%p", pIntStatus);
	/* FIXME we are grouping "error" with over status the user must check implicitly for it
	 * not just new sample or over status , that will nevr show up in case of error*/
	status = VL6180x_GetCachedByte(dev, RESULT_INTERRUPT_STATUS_GPIO, &IntStatus);
 8001ef6:	f107 030b 	add.w	r3, r7, #11
 8001efa:	461a      	mov	r2, r3
 8001efc:	214f      	movs	r1, #79	; 0x4f
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fe65 	bl	8001bce <VL6180x_GetCachedByte>
 8001f04:	60f8      	str	r0, [r7, #12]
	*pIntStatus = IntStatus & 0xC7;
 8001f06:	7afb      	ldrb	r3, [r7, #11]
 8001f08:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END_FMT(status, "%d", (int)*pIntStatus);
	return status;
 8001f12:	68fb      	ldr	r3, [r7, #12]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <VL6180x_ClearInterrupt>:
	LOG_FUNCTION_END_FMT(status, "%d", (int)*IntStatus);
	return status;
}

int VL6180x_ClearInterrupt(VL6180xDev_t dev, uint8_t IntClear)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
	int status;
	LOG_FUNCTION_START("%d", (int)IntClear);
	if (IntClear <= 7) {
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	2b07      	cmp	r3, #7
 8001f2c:	d807      	bhi.n	8001f3e <VL6180x_ClearInterrupt+0x22>
		status = VL6180x_WrByte(dev, SYSTEM_INTERRUPT_CLEAR, IntClear);
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	461a      	mov	r2, r3
 8001f32:	2115      	movs	r1, #21
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f001 fa41 	bl	80033bc <VL6180x_WrByte>
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	e002      	b.n	8001f44 <VL6180x_ClearInterrupt+0x28>
	} else {
		status = INVALID_PARAMS;
 8001f3e:	f06f 0301 	mvn.w	r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8001f44:	68fb      	ldr	r3, [r7, #12]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_UpscaleInitPatch0>:
}

#if VL6180x_UPSCALE_SUPPORT != 1

static int _UpscaleInitPatch0(VL6180xDev_t dev)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
	int status;
	uint32_t CalValue = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
	CalValue = VL6180xDevDataGet(dev, Part2PartAmbNVM);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60fb      	str	r3, [r7, #12]
	status = VL6180x_WrDWord(dev, 0xDA, CalValue);
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	21da      	movs	r1, #218	; 0xda
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f001 fa7b 	bl	8003460 <VL6180x_WrDWord>
 8001f6a:	60b8      	str	r0, [r7, #8]
	return status;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <VL6180x_UpscaleRegInit>:

/* only include up-scaling register setting when up-scale support is configured in */
int VL6180x_UpscaleRegInit(VL6180xDev_t dev)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
	/*  apply REGISTER_TUNING_ER02_100614_CustomerView.txt */
	VL6180x_WrByte(dev, 0x0207, 0x01);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f240 2107 	movw	r1, #519	; 0x207
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f001 fa19 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0208, 0x01);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f001 fa13 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0096, 0x00);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2196      	movs	r1, #150	; 0x96
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f001 fa0e 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0097, 0x54);
 8001fa0:	2254      	movs	r2, #84	; 0x54
 8001fa2:	2197      	movs	r1, #151	; 0x97
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f001 fa09 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e3, 0x01);
 8001faa:	2201      	movs	r2, #1
 8001fac:	21e3      	movs	r1, #227	; 0xe3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f001 fa04 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e4, 0x03);
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	21e4      	movs	r1, #228	; 0xe4
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f001 f9ff 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e5, 0x02);
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	21e5      	movs	r1, #229	; 0xe5
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f001 f9fa 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e6, 0x01);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	21e6      	movs	r1, #230	; 0xe6
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f001 f9f5 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e7, 0x03);
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	21e7      	movs	r1, #231	; 0xe7
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f001 f9f0 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00f5, 0x02);
 8001fdc:	2202      	movs	r2, #2
 8001fde:	21f5      	movs	r1, #245	; 0xf5
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f001 f9eb 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00d9, 0x05);
 8001fe6:	2205      	movs	r2, #5
 8001fe8:	21d9      	movs	r1, #217	; 0xd9
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f001 f9e6 	bl	80033bc <VL6180x_WrByte>

	_UpscaleInitPatch0(dev);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ffac 	bl	8001f4e <_UpscaleInitPatch0>

	VL6180x_WrByte(dev, 0x009f, 0x00);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	219f      	movs	r1, #159	; 0x9f
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f001 f9de 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00a3, 0x28);
 8002000:	2228      	movs	r2, #40	; 0x28
 8002002:	21a3      	movs	r1, #163	; 0xa3
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f001 f9d9 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b7, 0x00);
 800200a:	2200      	movs	r2, #0
 800200c:	21b7      	movs	r1, #183	; 0xb7
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f001 f9d4 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00bb, 0x28);
 8002014:	2228      	movs	r2, #40	; 0x28
 8002016:	21bb      	movs	r1, #187	; 0xbb
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f001 f9cf 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b2, 0x09);
 800201e:	2209      	movs	r2, #9
 8002020:	21b2      	movs	r1, #178	; 0xb2
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f001 f9ca 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ca, 0x09);
 8002028:	2209      	movs	r2, #9
 800202a:	21ca      	movs	r1, #202	; 0xca
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f001 f9c5 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0198, 0x01);
 8002032:	2201      	movs	r2, #1
 8002034:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f001 f9bf 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01b0, 0x17);
 800203e:	2217      	movs	r2, #23
 8002040:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f001 f9b9 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ad, 0x00);
 800204a:	2200      	movs	r2, #0
 800204c:	f240 11ad 	movw	r1, #429	; 0x1ad
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f001 f9b3 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ff, 0x05);
 8002056:	2205      	movs	r2, #5
 8002058:	21ff      	movs	r1, #255	; 0xff
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f001 f9ae 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0100, 0x05);
 8002060:	2205      	movs	r2, #5
 8002062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f001 f9a8 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0199, 0x05);
 800206c:	2205      	movs	r2, #5
 800206e:	f240 1199 	movw	r1, #409	; 0x199
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f001 f9a2 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a6, 0x1b);
 8002078:	221b      	movs	r2, #27
 800207a:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f001 f99c 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ac, 0x3e);
 8002084:	223e      	movs	r2, #62	; 0x3e
 8002086:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f001 f996 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a7, 0x1f);
 8002090:	221f      	movs	r2, #31
 8002092:	f240 11a7 	movw	r1, #423	; 0x1a7
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f001 f990 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0030, 0x00);
 800209c:	2200      	movs	r2, #0
 800209e:	2130      	movs	r1, #48	; 0x30
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f001 f98b 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0011, 0x10);
 80020a6:	2210      	movs	r2, #16
 80020a8:	2111      	movs	r1, #17
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f001 f986 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x010a, 0x30);
 80020b0:	2230      	movs	r2, #48	; 0x30
 80020b2:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f001 f980 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003f, 0x46);
 80020bc:	2246      	movs	r2, #70	; 0x46
 80020be:	213f      	movs	r1, #63	; 0x3f
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f001 f97b 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0031, 0xFF);
 80020c6:	22ff      	movs	r2, #255	; 0xff
 80020c8:	2131      	movs	r1, #49	; 0x31
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f001 f976 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0040, 0x63);
 80020d0:	2263      	movs	r2, #99	; 0x63
 80020d2:	2140      	movs	r1, #64	; 0x40
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f001 f971 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002e, 0x01);
 80020da:	2201      	movs	r2, #1
 80020dc:	212e      	movs	r1, #46	; 0x2e
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f001 f96c 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002c, 0xff);
 80020e4:	22ff      	movs	r2, #255	; 0xff
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f001 f967 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x001b, 0x09);
 80020ee:	2209      	movs	r2, #9
 80020f0:	211b      	movs	r1, #27
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f001 f962 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003e, 0x31);
 80020f8:	2231      	movs	r2, #49	; 0x31
 80020fa:	213e      	movs	r1, #62	; 0x3e
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f001 f95d 	bl	80033bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0014, 0x24);
 8002102:	2224      	movs	r2, #36	; 0x24
 8002104:	2114      	movs	r1, #20
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f001 f958 	bl	80033bc <VL6180x_WrByte>
#if VL6180x_EXTENDED_RANGE
	VL6180x_RangeSetMaxConvergenceTime(dev, 63);
#else
	VL6180x_RangeSetMaxConvergenceTime(dev, 50);
 800210c:	2132      	movs	r1, #50	; 0x32
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8d0 	bl	80022b4 <VL6180x_RangeSetMaxConvergenceTime>
#endif
	return 0;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <VL6180x_UpscaleSetScaling>:
#else
#define VL6180x_UpscaleRegInit(...) -1
#endif

int VL6180x_UpscaleSetScaling(VL6180xDev_t dev, uint8_t scaling)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
	/* we are in fixed config so only allow configured factor */
	#define min_scaling VL6180x_UPSCALE_SUPPORT
	#define max_scaling VL6180x_UPSCALE_SUPPORT
#endif

	if (scaling >= min_scaling  && scaling <= max_scaling) {
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d063      	beq.n	80021fa <VL6180x_UpscaleSetScaling+0xda>
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d860      	bhi.n	80021fa <VL6180x_UpscaleSetScaling+0xda>

		Scaler = ScalerLookUP[scaling - 1];
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	3b01      	subs	r3, #1
 800213c:	4a34      	ldr	r2, [pc, #208]	; (8002210 <VL6180x_UpscaleSetScaling+0xf0>)
 800213e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002142:	823b      	strh	r3, [r7, #16]
		status = VL6180x_WrWord(dev, RANGE_SCALER, Scaler);
 8002144:	8a3b      	ldrh	r3, [r7, #16]
 8002146:	461a      	mov	r2, r3
 8002148:	2196      	movs	r1, #150	; 0x96
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f001 f95b 	bl	8003406 <VL6180x_WrWord>
 8002150:	6178      	str	r0, [r7, #20]
		_SetUpscale(dev, scaling);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	761a      	strb	r2, [r3, #24]

		/* Apply scaling on  part-2-part offset */
		Offset = VL6180xDevDataGet(dev, Part2PartOffsetNVM) / scaling;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800215e:	461a      	mov	r2, r3
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	fb92 f3f3 	sdiv	r3, r2, r3
 8002166:	73fb      	strb	r3, [r7, #15]
		status = VL6180x_WrByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, Offset);
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	461a      	mov	r2, r3
 800216c:	2124      	movs	r1, #36	; 0x24
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f001 f924 	bl	80033bc <VL6180x_WrByte>
 8002174:	6178      	str	r0, [r7, #20]

		/* Apply scaling on CrossTalkValidHeight */
		if (status == 0) {
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10a      	bne.n	8002192 <VL6180x_UpscaleSetScaling+0x72>
			status = VL6180x_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
									DEF_CROSS_TALK_VALID_HEIGHT_VALUE /  scaling);
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	2214      	movs	r2, #20
 8002180:	fb92 f3f3 	sdiv	r3, r2, r3
			status = VL6180x_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	2121      	movs	r1, #33	; 0x21
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f001 f916 	bl	80033bc <VL6180x_WrByte>
 8002190:	6178      	str	r0, [r7, #20]
		}
		/* Apply scaling on RangeIgnore ValidHeight if enabled */
		if( status == 0){
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d119      	bne.n	80021cc <VL6180x_UpscaleSetScaling+0xac>
			if(  VL6180xDevDataGet(dev, RangeIgnore.Enabled) !=0 ){
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7c1b      	ldrb	r3, [r3, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d015      	beq.n	80021cc <VL6180x_UpscaleSetScaling+0xac>
				ValidHeight = VL6180xDevDataGet(dev, RangeIgnore.ValidHeight);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	899b      	ldrh	r3, [r3, #12]
 80021a4:	827b      	strh	r3, [r7, #18]
				ValidHeight  /= _GetUpscale(dev);
 80021a6:	8a7b      	ldrh	r3, [r7, #18]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	7e12      	ldrb	r2, [r2, #24]
 80021ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80021b0:	827b      	strh	r3, [r7, #18]
				if( ValidHeight > 255 )
 80021b2:	8a7b      	ldrh	r3, [r7, #18]
 80021b4:	2bff      	cmp	r3, #255	; 0xff
 80021b6:	d901      	bls.n	80021bc <VL6180x_UpscaleSetScaling+0x9c>
					ValidHeight = 255;
 80021b8:	23ff      	movs	r3, #255	; 0xff
 80021ba:	827b      	strh	r3, [r7, #18]

				status = VL6180x_WrByte(dev, SYSRANGE_RANGE_IGNORE_VALID_HEIGHT,
 80021bc:	8a7b      	ldrh	r3, [r7, #18]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	2125      	movs	r1, #37	; 0x25
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f001 f8f9 	bl	80033bc <VL6180x_WrByte>
 80021ca:	6178      	str	r0, [r7, #20]
							ValidHeight );
			}
		}

#if !VL6180x_EXTENDED_RANGE
		if (status == 0) {
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10a      	bne.n	80021e8 <VL6180x_UpscaleSetScaling+0xc8>
			status = VL6180x_RangeSetEceState(dev, scaling == 1); /* enable ece only at 1x scaling */
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f84e 	bl	8002282 <VL6180x_RangeSetEceState>
 80021e6:	6178      	str	r0, [r7, #20]
		}
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <VL6180x_UpscaleSetScaling+0xe2>
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d006      	beq.n	8002202 <VL6180x_UpscaleSetScaling+0xe2>
			status = NOT_GUARANTEED ;
 80021f4:	2303      	movs	r3, #3
 80021f6:	617b      	str	r3, [r7, #20]
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 80021f8:	e003      	b.n	8002202 <VL6180x_UpscaleSetScaling+0xe2>
		}
#endif
	} else {
		status = INVALID_PARAMS;
 80021fa:	f06f 0301 	mvn.w	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	e000      	b.n	8002204 <VL6180x_UpscaleSetScaling+0xe4>
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 8002202:	bf00      	nop
	}
#undef min_scaling
#undef max_scaling
	LOG_FUNCTION_END(status);
	return status;
 8002204:	697b      	ldr	r3, [r7, #20]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	08007684 	.word	0x08007684

08002214 <VL6180x_UpscaleStaticInit>:
	return status;
}


static int  VL6180x_UpscaleStaticInit(VL6180xDev_t dev)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	/* todo make these a fail macro in case only 1x is suppoted */
	int status;

	LOG_FUNCTION_START("");
	do {
		status = VL6180x_UpscaleRegInit(dev);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff feaa 	bl	8001f76 <VL6180x_UpscaleRegInit>
 8002222:	60f8      	str	r0, [r7, #12]
		if (status) {
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
			VL6180x_ErrLog("VL6180x_RangeSetEceState fail");
			break;
		}
#endif
	} while (0);
	if (!status) {
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10b      	bne.n	8002246 <VL6180x_UpscaleStaticInit+0x32>
		/*  must write the scaler at least once to the device to ensure the scaler is in a known state. */
		status = VL6180x_UpscaleSetScaling(dev, _GetUpscale(dev));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7e1b      	ldrb	r3, [r3, #24]
 8002232:	4619      	mov	r1, r3
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ff73 	bl	8002120 <VL6180x_UpscaleSetScaling>
 800223a:	60f8      	str	r0, [r7, #12]
		VL6180x_WrByte(dev, 0x016, 0x00); /* change fresh out of set status to 0 */
 800223c:	2200      	movs	r2, #0
 800223e:	2116      	movs	r1, #22
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f001 f8bb 	bl	80033bc <VL6180x_WrByte>
	}
	LOG_FUNCTION_END(status);
	return status;
 8002246:	68fb      	ldr	r3, [r7, #12]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <VL6180x_RangeConfigInterrupt>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	70fb      	strb	r3, [r7, #3]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b04      	cmp	r3, #4
 8002260:	d807      	bhi.n	8002272 <VL6180x_RangeConfigInterrupt+0x22>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO,
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	22f8      	movs	r2, #248	; 0xf8
 8002266:	2114      	movs	r1, #20
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f001 f930 	bl	80034ce <VL6180x_UpdateByte>
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	e002      	b.n	8002278 <VL6180x_RangeConfigInterrupt+0x28>
									(uint8_t)(~CONFIG_GPIO_RANGE_MASK),
									ConfigGpioInt);
	} else {
		VL6180x_ErrLog("Invalid config mode param %d", (int)ConfigGpioInt);
		status = INVALID_PARAMS;
 8002272:	f06f 0301 	mvn.w	r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8002278:	68fb      	ldr	r3, [r7, #12]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <VL6180x_RangeSetEceState>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeSetEceState(VL6180xDev_t dev, int enable)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t or_mask;

	LOG_FUNCTION_START("%d", (int)enable);
	if (enable)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <VL6180x_RangeSetEceState+0x16>
		or_mask = RANGE_CHECK_ECE_ENABLE_MASK;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
 8002296:	e001      	b.n	800229c <VL6180x_RangeSetEceState+0x1a>
	else
		or_mask = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]

	status = VL6180x_UpdateByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, ~RANGE_CHECK_ECE_ENABLE_MASK, or_mask);
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	22fe      	movs	r2, #254	; 0xfe
 80022a0:	212d      	movs	r1, #45	; 0x2d
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f001 f913 	bl	80034ce <VL6180x_UpdateByte>
 80022a8:	60b8      	str	r0, [r7, #8]
	LOG_FUNCTION_END(status);
	return status;
 80022aa:	68bb      	ldr	r3, [r7, #8]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <VL6180x_RangeSetMaxConvergenceTime>:


int VL6180x_RangeSetMaxConvergenceTime(VL6180xDev_t dev, uint8_t  MaxConTime_msec)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	70fb      	strb	r3, [r7, #3]
	int status = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
	LOG_FUNCTION_START("%d", (int)MaxConTime_msec);
	do {
		status = VL6180x_WrByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, MaxConTime_msec);
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	461a      	mov	r2, r3
 80022c8:	211c      	movs	r1, #28
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f001 f876 	bl	80033bc <VL6180x_WrByte>
 80022d0:	60f8      	str	r0, [r7, #12]
		if (status) {
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10b      	bne.n	80022f0 <VL6180x_RangeSetMaxConvergenceTime+0x3c>
			break;
		}
		status = VL6180x_RangeSetEarlyConvergenceEestimateThreshold(dev);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f82a 	bl	8002332 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>
 80022de:	60f8      	str	r0, [r7, #12]
		if (status) {
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <VL6180x_RangeSetMaxConvergenceTime+0x40>
			break;
		}
		status = _DMax_InitData(dev);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 ff6a 	bl	80031c0 <_DMax_InitData>
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	e002      	b.n	80022f6 <VL6180x_RangeSetMaxConvergenceTime+0x42>
			break;
 80022f0:	bf00      	nop
 80022f2:	e000      	b.n	80022f6 <VL6180x_RangeSetMaxConvergenceTime+0x42>
			break;
 80022f4:	bf00      	nop
	} while (0);
	LOG_FUNCTION_END(status);
	return status;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <VL6180x_RangeSetSystemMode>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeSetSystemMode(VL6180xDev_t dev, uint8_t  mode)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("%d", (int)mode);
	/* FIXME we are not checking device is ready via @a VL6180x_RangeWaitDeviceReady
	 * so if called back to back real fast we are not checking
	 * if previous mode "set" got absorbed => bit 0 must be 0 so that it work
	 */
	if (mode <= 3) {
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d807      	bhi.n	8002322 <VL6180x_RangeSetSystemMode+0x22>
		status = VL6180x_WrByte(dev, SYSRANGE_START, mode);
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	461a      	mov	r2, r3
 8002316:	2118      	movs	r1, #24
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f001 f84f 	bl	80033bc <VL6180x_WrByte>
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	e002      	b.n	8002328 <VL6180x_RangeSetSystemMode+0x28>
		if (status) {
		    VL6180x_ErrLog("SYSRANGE_START wr fail");
		}
	} else {
		status = INVALID_PARAMS;
 8002322:	f06f 0301 	mvn.w	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8002328:	68fb      	ldr	r3, [r7, #12]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>:
	return status;
}


static int VL6180x_RangeSetEarlyConvergenceEestimateThreshold(VL6180xDev_t dev)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b08e      	sub	sp, #56	; 0x38
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	int status;

	const uint32_t cMicroSecPerMilliSec  = 1000;
 800233a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233e:	633b      	str	r3, [r7, #48]	; 0x30
	const uint32_t cEceSampleTime_us     = 500;
 8002340:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ece_factor_m          = VL6180xDevDataGet(dev, EceFactorM);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	891b      	ldrh	r3, [r3, #8]
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ece_factor_d          = VL6180xDevDataGet(dev, EceFactorD);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	895b      	ldrh	r3, [r3, #10]
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t AveTime;

	LOG_FUNCTION_START("");

	do {
		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &u8);
 8002352:	f107 030f 	add.w	r3, r7, #15
 8002356:	461a      	mov	r2, r3
 8002358:	211c      	movs	r1, #28
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f001 f8fd 	bl	800355a <VL6180x_RdByte>
 8002360:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 8002362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002364:	2b00      	cmp	r3, #0
 8002366:	d138      	bne.n	80023da <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xa8>
			VL6180x_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail");
			break;
		}
		maxConv_ms = u8;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	623b      	str	r3, [r7, #32]
		AveTime = _GetAveTotalTime(dev);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f83c 	bl	80023ea <_GetAveTotalTime>
 8002372:	61f8      	str	r0, [r7, #28]
		if (AveTime < 0) {
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b00      	cmp	r3, #0
 8002378:	da03      	bge.n	8002382 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0x50>
			status = -1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8002380:	e02e      	b.n	80023e0 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
		}

		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002386:	fb03 f202 	mul.w	r2, r3, r2
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	61bb      	str	r3, [r7, #24]
		status = VL6180x_RdDWord(dev, 0xB8, &fineThresh);
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	461a      	mov	r2, r3
 8002396:	21b8      	movs	r1, #184	; 0xb8
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f001 f947 	bl	800362c <VL6180x_RdDWord>
 800239e:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 80023a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11b      	bne.n	80023de <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xac>
			VL6180x_ErrLog("reg 0xB8 rd fail");
			break;
		}
		fineThresh *= 256;
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	613b      	str	r3, [r7, #16]
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	fb03 f202 	mul.w	r2, r3, r2
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c6:	617b      	str	r3, [r7, #20]

		status = VL6180x_WrWord(dev, SYSRANGE_EARLY_CONVERGENCE_ESTIMATE, (uint16_t)eceThresh);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	2122      	movs	r1, #34	; 0x22
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f001 f818 	bl	8003406 <VL6180x_WrWord>
 80023d6:	6378      	str	r0, [r7, #52]	; 0x34
 80023d8:	e002      	b.n	80023e0 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
			break;
 80023da:	bf00      	nop
 80023dc:	e000      	b.n	80023e0 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
			break;
 80023de:	bf00      	nop
	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 80023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3738      	adds	r7, #56	; 0x38
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_GetAveTotalTime>:
/*
 * Return >0 = time
 *       <0 1 if fail to get read data from device to compute time
 */
static int32_t _GetAveTotalTime(VL6180xDev_t dev)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b08c      	sub	sp, #48	; 0x30
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
	uint32_t cFwOverhead_us = 24;
 80023f2:	2318      	movs	r3, #24
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t cVcpSetupTime_us = 70;
 80023f6:	2346      	movs	r3, #70	; 0x46
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t cPLL2_StartupDelay_us = 200;
 80023fa:	23c8      	movs	r3, #200	; 0xc8
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t cMeasMask = 0x07;
 80023fe:	2307      	movs	r3, #7
 8002400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t u8;
	int status;

	LOG_FUNCTION_START("");

	status = VL6180x_RdByte(dev, 0x109, &u8);
 8002404:	f107 030b 	add.w	r3, r7, #11
 8002408:	461a      	mov	r2, r3
 800240a:	f240 1109 	movw	r1, #265	; 0x109
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f001 f8a3 	bl	800355a <VL6180x_RdByte>
 8002414:	61f8      	str	r0, [r7, #28]
	if (status) {
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <_GetAveTotalTime+0x38>
		VL6180x_ErrLog("rd 0x109 fail");
		return -1;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
 8002420:	e029      	b.n	8002476 <_GetAveTotalTime+0x8c>
	}
	Samples = u8 & cMeasMask;
 8002422:	7afa      	ldrb	r2, [r7, #11]
 8002424:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002428:	4013      	ands	r3, r2
 800242a:	b2db      	uxtb	r3, r3
 800242c:	61bb      	str	r3, [r7, #24]
	status = VL6180x_RdByte(dev, READOUT_AVERAGING_SAMPLE_PERIOD, &u8);
 800242e:	f107 030b 	add.w	r3, r7, #11
 8002432:	461a      	mov	r2, r3
 8002434:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f001 f88e 	bl	800355a <VL6180x_RdByte>
 800243e:	61f8      	str	r0, [r7, #28]
	if (status) {
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <_GetAveTotalTime+0x62>
		VL6180x_ErrLog("i2c READOUT_AVERAGING_SAMPLE_PERIOD fail");
		return -1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	e014      	b.n	8002476 <_GetAveTotalTime+0x8c>
	}
	SamplePeriod = u8;
 800244c:	7afb      	ldrb	r3, [r7, #11]
 800244e:	617b      	str	r3, [r7, #20]
	SingleTime_us = cFwOverhead_us + cVcpSetupTime_us + (SamplePeriod * 10);
 8002450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	18d1      	adds	r1, r2, r3
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	440b      	add	r3, r1
 8002462:	613b      	str	r3, [r7, #16]
	TotalAveTime_us = (Samples + 1) * SingleTime_us + cPLL2_StartupDelay_us;
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	3301      	adds	r3, #1
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	fb03 f202 	mul.w	r2, r3, r2
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	4413      	add	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_END(TotalAveTime_us);
	return TotalAveTime_us;
 8002474:	68fb      	ldr	r3, [r7, #12]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3730      	adds	r7, #48	; 0x30
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <_filter_Init>:
#define _FilterData(field) VL6180xDevDataGet(dev, FilterData.field)
/*
 * One time init
 */
int _filter_Init(VL6180xDev_t dev)
{
 800247e:	b480      	push	{r7}
 8002480:	b085      	sub	sp, #20
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
	int i;
	_FilterData(MeasurementIndex) = 0;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	61da      	str	r2, [r3, #28]

	_FilterData(Default_ZeroVal) = 0;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	665a      	str	r2, [r3, #100]	; 0x64
	_FilterData(Default_VAVGVal) = 0;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	669a      	str	r2, [r3, #104]	; 0x68
	_FilterData(NoDelay_ZeroVal) = 0;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	66da      	str	r2, [r3, #108]	; 0x6c
	_FilterData(NoDelay_VAVGVal) = 0;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	671a      	str	r2, [r3, #112]	; 0x70
	_FilterData(Previous_VAVGDiff) = 0;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	675a      	str	r2, [r3, #116]	; 0x74

	_FilterData(StdFilteredReads) = 0;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	_FilterData(FilteringOnGoingConsecutiveStates) = 0;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	679a      	str	r2, [r3, #120]	; 0x78

	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e011      	b.n	80024e2 <_filter_Init+0x64>
		_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3310      	adds	r3, #16
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024cc:	809a      	strh	r2, [r3, #4]
		_FilterData(LastReturnRates)[i] = 0;
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	330c      	adds	r3, #12
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3301      	adds	r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	ddea      	ble.n	80024be <_filter_Init+0x40>
	}
	_FilterData(MeasurementsSinceLastFlush)=0;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	621a      	str	r2, [r3, #32]
	return 0;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <_filter_StdDevDamper>:
									uint32_t SignalRate,
									const uint32_t StdDevLimitLowLight,
									const uint32_t StdDevLimitLowLightSNR,
									const uint32_t StdDevLimitHighLight,
									const uint32_t StdDevLimitHighLightSNR)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b087      	sub	sp, #28
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	603b      	str	r3, [r7, #0]
	uint32_t newStdDev;
	uint16_t SNR;

	if (AmbientRate > 0)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <_filter_StdDevDamper+0x26>
		SNR = (uint16_t) ((100 * SignalRate) / AmbientRate);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2264      	movs	r2, #100	; 0x64
 8002512:	fb03 f202 	mul.w	r2, r3, r2
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	827b      	strh	r3, [r7, #18]
 800251e:	e002      	b.n	8002526 <_filter_StdDevDamper+0x2c>
	else
		SNR = 9999;
 8002520:	f242 730f 	movw	r3, #9999	; 0x270f
 8002524:	827b      	strh	r3, [r7, #18]

	if (SNR >= StdDevLimitLowLightSNR) {
 8002526:	8a7b      	ldrh	r3, [r7, #18]
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d802      	bhi.n	8002534 <_filter_StdDevDamper+0x3a>
		newStdDev = StdDevLimitLowLight;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	e016      	b.n	8002562 <_filter_StdDevDamper+0x68>
	} else {
		if (SNR <= StdDevLimitHighLightSNR)
 8002534:	8a7b      	ldrh	r3, [r7, #18]
 8002536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002538:	429a      	cmp	r2, r3
 800253a:	d302      	bcc.n	8002542 <_filter_StdDevDamper+0x48>
			newStdDev = StdDevLimitHighLight;
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e00f      	b.n	8002562 <_filter_StdDevDamper+0x68>
		else {
			newStdDev = (uint32_t)(StdDevLimitHighLight -
									(SNR - StdDevLimitHighLightSNR) *
 8002542:	8a7a      	ldrh	r2, [r7, #18]
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	1ad3      	subs	r3, r2, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8002548:	6a39      	ldr	r1, [r7, #32]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	1a8a      	subs	r2, r1, r2
									(SNR - StdDevLimitHighLightSNR) *
 800254e:	fb03 f202 	mul.w	r2, r3, r2
									(StdDevLimitLowLightSNR - StdDevLimitHighLightSNR));
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	1acb      	subs	r3, r1, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
			newStdDev = (uint32_t)(StdDevLimitHighLight -
 800255c:	6a3a      	ldr	r2, [r7, #32]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
		}
	}

	return newStdDev;
 8002562:	697b      	ldr	r3, [r7, #20]
}
 8002564:	4618      	mov	r0, r3
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
	...

08002570 <_filter_Start>:
								uint16_t m_trueRange_mm,
								uint16_t m_rawRange_mm,
								uint32_t m_rtnSignalRate,
								uint32_t m_rtnAmbientRate,
								uint16_t errorCode)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b0aa      	sub	sp, #168	; 0xa8
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	817b      	strh	r3, [r7, #10]
 800257e:	4613      	mov	r3, r2
 8002580:	813b      	strh	r3, [r7, #8]
	int status;
	uint16_t m_newTrueRange_mm = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	#if VL6180x_HAVE_MULTI_READ
	uint8_t MultiReadBuf[8];
	#endif
	uint16_t i;
	uint16_t bypassFilter = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t resetVAVGData = 1;
 800258e:	2301      	movs	r3, #1
 8002590:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	uint16_t filterErrorCode = NoError;
 8002594:	2300      	movs	r3, #0
 8002596:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t filterErrorCodeOnRangingErrorCode = NoError;
 800259a:	2300      	movs	r3, #0
 800259c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	uint16_t registerValue;

	uint32_t register32BitsValue1;
	uint32_t register32BitsValue2;

	uint16_t ValidDistance = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	uint16_t SuspicuousRangingZone = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

	uint16_t WrapAroundFlag = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t NoWrapAroundFlag = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t NoWrapAroundHighConfidenceFlag = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	uint16_t FlushFilter = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	uint32_t RateChange = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	uint16_t StdDevSamplesMinNeeded = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	uint16_t StdDevSamples = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	uint32_t StdDevDistanceSum = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t StdDevDistanceMean = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t StdDevDistance = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t StdDevRateSum = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t StdDevRateMean = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t StdDevRate = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t StdDevLimitWithTargetMove = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t WrapAroundLowReturnRateLimit;
	uint32_t WrapAroundLowReturnRateLimit2;
	uint32_t WrapAroundLowReturnRateFilterLimit;
	uint32_t WrapAroundHighReturnRateFilterLimit;

	uint32_t MAX_VAVGDiff = 1800;
 80025f2:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80025f6:	657b      	str	r3, [r7, #84]	; 0x54

	uint8_t u8;//, u8_2;
	uint32_t XTalkCompRate_KCps;
	uint32_t StdDevLimit = 300;
 80025f8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80025fc:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t MaxOrInvalidDistance =   255*_GetUpscale(dev);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	7e1b      	ldrb	r3, [r3, #24]
 8002602:	461a      	mov	r2, r3
 8002604:	4613      	mov	r3, r2
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* #define MaxOrInvalidDistance  (uint16_t) (255 * 3) */

	/* Check if distance is Valid or not */
	switch (errorCode) {
 800260c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002610:	3b0c      	subs	r3, #12
 8002612:	2b03      	cmp	r3, #3
 8002614:	d825      	bhi.n	8002662 <_filter_Start+0xf2>
 8002616:	a201      	add	r2, pc, #4	; (adr r2, 800261c <_filter_Start+0xac>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	0800262d 	.word	0x0800262d
 8002620:	0800263b 	.word	0x0800263b
 8002624:	0800262d 	.word	0x0800262d
 8002628:	0800263b 	.word	0x0800263b
	case Raw_Ranging_Algo_Underflow:
	case Ranging_Algo_Underflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 800262c:	2310      	movs	r3, #16
 800262e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		ValidDistance = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8002638:	e022      	b.n	8002680 <_filter_Start+0x110>
	case Raw_Ranging_Algo_Overflow:
	case Ranging_Algo_Overflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 800263a:	2310      	movs	r3, #16
 800263c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		//m_trueRange_mm = MaxOrInvalidDistance;
		m_trueRange_mm = 200*_GetUpscale(dev);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	7e1b      	ldrb	r3, [r3, #24]
 8002644:	b29b      	uxth	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	0092      	lsls	r2, r2, #2
 800264a:	4413      	add	r3, r2
 800264c:	461a      	mov	r2, r3
 800264e:	0091      	lsls	r1, r2, #2
 8002650:	461a      	mov	r2, r3
 8002652:	460b      	mov	r3, r1
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	817b      	strh	r3, [r7, #10]
		ValidDistance = 1;
 800265a:	2301      	movs	r3, #1
 800265c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8002660:	e00e      	b.n	8002680 <_filter_Start+0x110>
	default:
		if (m_rawRange_mm >= MaxOrInvalidDistance) {
 8002662:	893b      	ldrh	r3, [r7, #8]
 8002664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002666:	429a      	cmp	r2, r3
 8002668:	d806      	bhi.n	8002678 <_filter_Start+0x108>
			ValidDistance = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
			bypassFilter = 1; /* Bypass the filter in this case as produced distance is not usable (and also the VAVGVal and ZeroVal values) */
 8002670:	2301      	movs	r3, #1
 8002672:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
		} else {
			ValidDistance = 1;
		}
		break;
 8002676:	e002      	b.n	800267e <_filter_Start+0x10e>
			ValidDistance = 1;
 8002678:	2301      	movs	r3, #1
 800267a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 800267e:	bf00      	nop
	}
	m_newTrueRange_mm = m_trueRange_mm;
 8002680:	897b      	ldrh	r3, [r7, #10]
 8002682:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	XTalkCompRate_KCps = VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Update signal rate limits depending on crosstalk */
	SignalRateDMax = (uint32_t)_GetDMaxDataRetSignalAt400mm(dev) ;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
	WrapAroundLowReturnRateLimit = WrapAroundLowReturnRateLimit_ROM  + XTalkCompRate_KCps;
 8002694:	4b90      	ldr	r3, [pc, #576]	; (80028d8 <_filter_Start+0x368>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800269a:	4413      	add	r3, r2
 800269c:	643b      	str	r3, [r7, #64]	; 0x40
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 800269e:	4b8f      	ldr	r3, [pc, #572]	; (80028dc <_filter_Start+0x36c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) +
 80026a8:	08db      	lsrs	r3, r3, #3
 80026aa:	4a8d      	ldr	r2, [pc, #564]	; (80028e0 <_filter_Start+0x370>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 80026b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026b4:	4413      	add	r3, r2
 80026b6:	63fb      	str	r3, [r7, #60]	; 0x3c
									XTalkCompRate_KCps;
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 80026b8:	4b8a      	ldr	r3, [pc, #552]	; (80028e4 <_filter_Start+0x374>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026be:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 80026c2:	08db      	lsrs	r3, r3, #3
 80026c4:	4a86      	ldr	r2, [pc, #536]	; (80028e0 <_filter_Start+0x370>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 80026cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026ce:	4413      	add	r3, r2
 80026d0:	63bb      	str	r3, [r7, #56]	; 0x38
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 80026d2:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <_filter_Start+0x378>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 80026dc:	08db      	lsrs	r3, r3, #3
 80026de:	4a80      	ldr	r2, [pc, #512]	; (80028e0 <_filter_Start+0x370>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	089b      	lsrs	r3, r3, #2
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 80026e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026e8:	4413      	add	r3, r2
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34


	/* Checks on low range data */
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit)) {
 80026ec:	4b7f      	ldr	r3, [pc, #508]	; (80028ec <_filter_Start+0x37c>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	893a      	ldrh	r2, [r7, #8]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d209      	bcs.n	800270a <_filter_Start+0x19a>
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d205      	bcs.n	800270a <_filter_Start+0x19a>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 80026fe:	2310      	movs	r3, #16
 8002700:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		bypassFilter = 1;
 8002704:	2301      	movs	r3, #1
 8002706:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit2)) {
 800270a:	4b79      	ldr	r3, [pc, #484]	; (80028f0 <_filter_Start+0x380>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	893a      	ldrh	r2, [r7, #8]
 8002710:	429a      	cmp	r2, r3
 8002712:	d209      	bcs.n	8002728 <_filter_Start+0x1b8>
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002718:	429a      	cmp	r2, r3
 800271a:	d205      	bcs.n	8002728 <_filter_Start+0x1b8>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 800271c:	2310      	movs	r3, #16
 800271e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		bypassFilter = 1;
 8002722:	2301      	movs	r3, #1
 8002724:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < (WrapAroundLowReturnRateLimit2 + WrapAroundLowRawRangeLimit2SuspicuousAddedSignalRate))) {
 8002728:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <_filter_Start+0x380>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	893a      	ldrh	r2, [r7, #8]
 800272e:	429a      	cmp	r2, r3
 8002730:	d209      	bcs.n	8002746 <_filter_Start+0x1d6>
 8002732:	4b70      	ldr	r3, [pc, #448]	; (80028f4 <_filter_Start+0x384>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002738:	4413      	add	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	d202      	bcs.n	8002746 <_filter_Start+0x1d6>
		SuspicuousRangingZone = 1; /* On this area, we are in an highly suspicuous wraparound ares, filter parameter will be stengthen */
 8002740:	2301      	movs	r3, #1
 8002742:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	}


	/* Checks on Ambient rate level */
	if (m_rtnAmbientRate > WrapAroundMaximumAmbientRateFilterLimit) {
 8002746:	4b6c      	ldr	r3, [pc, #432]	; (80028f8 <_filter_Start+0x388>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800274e:	429a      	cmp	r2, r3
 8002750:	d905      	bls.n	800275e <_filter_Start+0x1ee>
		/* Too high ambient rate */
		FlushFilter = 1;
 8002752:	2301      	movs	r3, #1
 8002754:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		bypassFilter = 1;
 8002758:	2301      	movs	r3, #1
 800275a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
    
	/*  Checks on Filter flush */
	if (m_rtnSignalRate < MinReturnRateFilterFlush) {
 800275e:	4b67      	ldr	r3, [pc, #412]	; (80028fc <_filter_Start+0x38c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	d205      	bcs.n	8002774 <_filter_Start+0x204>
		/* Completely lost target, so flush the filter */
		FlushFilter = 1;
 8002768:	2301      	movs	r3, #1
 800276a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		bypassFilter = 1;
 800276e:	2301      	movs	r3, #1
 8002770:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if (_FilterData(LastReturnRates)[0] != 0) {
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <_filter_Start+0x24e>
		if (m_rtnSignalRate > _FilterData(LastReturnRates)[0])
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	d90d      	bls.n	80027a2 <_filter_Start+0x232>
			RateChange = (100 *
						(m_rtnSignalRate - _FilterData(LastReturnRates)[0])) /
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 800278e:	2264      	movs	r2, #100	; 0x64
 8002790:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 8002798:	fbb2 f3f3 	udiv	r3, r2, r3
 800279c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027a0:	e010      	b.n	80027c4 <_filter_Start+0x254>
		else
			RateChange = (100 *
						(_FilterData(LastReturnRates)[0] - m_rtnSignalRate)) /
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 80027aa:	2264      	movs	r2, #100	; 0x64
 80027ac:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027bc:	e002      	b.n	80027c4 <_filter_Start+0x254>
	} else
		RateChange = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (RateChange > MaxReturnRateChangeFilterFlush) {
 80027c4:	4b4e      	ldr	r3, [pc, #312]	; (8002900 <_filter_Start+0x390>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d902      	bls.n	80027d6 <_filter_Start+0x266>
		FlushFilter = 1;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	}
	/* TODO optimize filter  using circular buffer */
	if (FlushFilter == 1) {
 80027d6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d124      	bne.n	8002828 <_filter_Start+0x2b8>
		_FilterData(MeasurementIndex) = 0;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	61da      	str	r2, [r3, #28]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80027ea:	e015      	b.n	8002818 <_filter_Start+0x2a8>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 80027ec:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	3310      	adds	r3, #16
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027fc:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 80027fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	330c      	adds	r3, #12
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 800280e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002812:	3301      	adds	r3, #1
 8002814:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002818:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800281c:	2b09      	cmp	r3, #9
 800281e:	d9e5      	bls.n	80027ec <_filter_Start+0x27c>
		}
		_FilterData(MeasurementsSinceLastFlush)=0;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	621a      	str	r2, [r3, #32]
 8002826:	e02d      	b.n	8002884 <_filter_Start+0x314>
	} else {
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 8002828:	2309      	movs	r3, #9
 800282a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800282e:	e025      	b.n	800287c <_filter_Start+0x30c>
			_FilterData(LastTrueRange)[i] = _FilterData(LastTrueRange)[i - 1];
 8002830:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002834:	3b01      	subs	r3, #1
 8002836:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	3310      	adds	r3, #16
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	8898      	ldrh	r0, [r3, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	f101 0310 	add.w	r3, r1, #16
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	4602      	mov	r2, r0
 8002850:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = _FilterData(LastReturnRates)[i - 1];
 8002852:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002856:	3b01      	subs	r3, #1
 8002858:	f8b7 009c 	ldrh.w	r0, [r7, #156]	; 0x9c
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	330c      	adds	r3, #12
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	f100 030c 	add.w	r3, r0, #12
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	609a      	str	r2, [r3, #8]
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 8002872:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002876:	3b01      	subs	r3, #1
 8002878:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800287c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1d5      	bne.n	8002830 <_filter_Start+0x2c0>
		}
	}

	if (ValidDistance == 1)
 8002884:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002888:	2b01      	cmp	r3, #1
 800288a:	d103      	bne.n	8002894 <_filter_Start+0x324>
		_FilterData(LastTrueRange)[0] = m_trueRange_mm;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	897a      	ldrh	r2, [r7, #10]
 8002890:	849a      	strh	r2, [r3, #36]	; 0x24
 8002892:	e003      	b.n	800289c <_filter_Start+0x32c>
	else
		_FilterData(LastTrueRange)[0] = FILTER_INVALID_DISTANCE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800289a:	849a      	strh	r2, [r3, #36]	; 0x24
	_FilterData(LastReturnRates)[0] = m_rtnSignalRate;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
	_FilterData(MeasurementsSinceLastFlush)++;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	621a      	str	r2, [r3, #32]

	/* Check if we need to go through the filter or not */
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 80028ac:	4b15      	ldr	r3, [pc, #84]	; (8002904 <_filter_Start+0x394>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	893a      	ldrh	r2, [r7, #8]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d203      	bcs.n	80028be <_filter_Start+0x34e>
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d324      	bcc.n	8002908 <_filter_Start+0x398>
		(m_rtnSignalRate < WrapAroundLowReturnRateFilterLimit)) ||
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <_filter_Start+0x394>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 80028c2:	893a      	ldrh	r2, [r7, #8]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d303      	bcc.n	80028d0 <_filter_Start+0x360>
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d31b      	bcc.n	8002908 <_filter_Start+0x398>
		(m_rtnSignalRate < WrapAroundHighReturnRateFilterLimit))))
		bypassFilter = 1;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80028d6:	e02d      	b.n	8002934 <_filter_Start+0x3c4>
 80028d8:	08007694 	.word	0x08007694
 80028dc:	08007698 	.word	0x08007698
 80028e0:	1a41a41b 	.word	0x1a41a41b
 80028e4:	0800769c 	.word	0x0800769c
 80028e8:	080076a0 	.word	0x080076a0
 80028ec:	080076a4 	.word	0x080076a4
 80028f0:	080076a6 	.word	0x080076a6
 80028f4:	080076a8 	.word	0x080076a8
 80028f8:	080076ac 	.word	0x080076ac
 80028fc:	080076b0 	.word	0x080076b0
 8002900:	080076b4 	.word	0x080076b4
 8002904:	080076b8 	.word	0x080076b8
	else {
		/* if some wraparound filtering due to some ranging error code has been detected, update the filter status and bypass the filter */
		if(filterErrorCodeOnRangingErrorCode!=NoError){
 8002908:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800290c:	2b00      	cmp	r3, #0
 800290e:	d011      	beq.n	8002934 <_filter_Start+0x3c4>
#ifndef PRESERVE_DEVICE_ERROR_CODE
			filterErrorCode = filterErrorCodeOnRangingErrorCode;
#else
			if((errorCode==Raw_Ranging_Algo_Underflow) || (errorCode==Ranging_Algo_Underflow)) {
 8002910:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002914:	2b0c      	cmp	r3, #12
 8002916:	d003      	beq.n	8002920 <_filter_Start+0x3b0>
 8002918:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800291c:	2b0e      	cmp	r3, #14
 800291e:	d103      	bne.n	8002928 <_filter_Start+0x3b8>
				/* Preserves the error codes except for Raw_Ranging_Algo_Underflow and Ranging_Algo_Underflow */
				filterErrorCode = filterErrorCodeOnRangingErrorCode;
 8002920:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002924:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
			}
#endif
			bypassFilter = 1;
 8002928:	2301      	movs	r3, #1
 800292a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			resetVAVGData = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
		}
	}

	/* Check which kind of measurement has been made */
	status = VL6180x_RdByte(dev, 0x01AC, &u8);
 8002934:	f107 0317 	add.w	r3, r7, #23
 8002938:	461a      	mov	r2, r3
 800293a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fe0b 	bl	800355a <VL6180x_RdByte>
 8002944:	6338      	str	r0, [r7, #48]	; 0x30
	if (status) {
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 82ba 	bne.w	8002ec2 <_filter_Start+0x952>
		VL6180x_ErrLog("0x01AC rd fail");
		goto done_err;
	}
	registerValue = u8;
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Read data for filtering */
#if VL6180x_HAVE_MULTI_READ
	status = VL6180x_RdMulti(dev, 0x10C, MultiReadBuf, 8); /* read only 8 lsb bits */
 8002952:	f107 0218 	add.w	r2, r7, #24
 8002956:	2308      	movs	r3, #8
 8002958:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fea4 	bl	80036aa <VL6180x_RdMulti>
 8002962:	6338      	str	r0, [r7, #48]	; 0x30
	if (status) {
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 82ad 	bne.w	8002ec6 <_filter_Start+0x956>
		VL6180x_ErrLog("0x10C multi rd fail");
		goto done_err;
	}
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 800296c:	7e3b      	ldrb	r3, [r7, #24]
 800296e:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[1] << 16)
 8002970:	7e7b      	ldrb	r3, [r7, #25]
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	441a      	add	r2, r3
			+ ((uint32_t) MultiReadBuf[2] << 8)
 8002976:	7ebb      	ldrb	r3, [r7, #26]
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	4413      	add	r3, r2
			+ ((uint32_t) MultiReadBuf[3] << 0);
 800297c:	7efa      	ldrb	r2, [r7, #27]
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 800297e:	4413      	add	r3, r2
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 8002982:	7f3b      	ldrb	r3, [r7, #28]
 8002984:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[5] << 16)
 8002986:	7f7b      	ldrb	r3, [r7, #29]
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	441a      	add	r2, r3
			+ ((uint32_t) MultiReadBuf[6] << 8)
 800298c:	7fbb      	ldrb	r3, [r7, #30]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	4413      	add	r3, r2
			+ ((uint32_t) MultiReadBuf[7] << 0);
 8002992:	7ffa      	ldrb	r2, [r7, #31]
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 8002994:	4413      	add	r3, r2
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
		goto done_err;
	}
#endif


	if ((FlushFilter == 1) || ((bypassFilter == 1) && (resetVAVGData == 1))) {
 8002998:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800299c:	2b01      	cmp	r3, #1
 800299e:	d007      	beq.n	80029b0 <_filter_Start+0x440>
 80029a0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d121      	bne.n	80029ec <_filter_Start+0x47c>
 80029a8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d11d      	bne.n	80029ec <_filter_Start+0x47c>
		if (registerValue != 0x3E) {
 80029b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029b2:	2b3e      	cmp	r3, #62	; 0x3e
 80029b4:	d00a      	beq.n	80029cc <_filter_Start+0x45c>
			status = VL6180x_WrByte(dev, 0x1AC, 0x3E);
 80029b6:	223e      	movs	r2, #62	; 0x3e
 80029b8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fcfd 	bl	80033bc <VL6180x_WrByte>
 80029c2:	6338      	str	r0, [r7, #48]	; 0x30
			if (status) {
 80029c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 827f 	bne.w	8002eca <_filter_Start+0x95a>
			//	VL6180x_ErrLog("0x0F2 bypass wr fail");
			//	goto done_err;
			//}
		}
		/* Set both Default and NoDelay To same value */
		_FilterData(Default_ZeroVal) = register32BitsValue1;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d0:	665a      	str	r2, [r3, #100]	; 0x64
		_FilterData(Default_VAVGVal) = register32BitsValue2;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d6:	669a      	str	r2, [r3, #104]	; 0x68
		_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029dc:	66da      	str	r2, [r3, #108]	; 0x6c
		_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e2:	671a      	str	r2, [r3, #112]	; 0x70

		_FilterData(MeasurementIndex) = 0;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
 80029ea:	e030      	b.n	8002a4e <_filter_Start+0x4de>
	} else {
		if (registerValue == 0x3E) {
 80029ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029ee:	2b3e      	cmp	r3, #62	; 0x3e
 80029f0:	d106      	bne.n	8002a00 <_filter_Start+0x490>
			_FilterData(Default_ZeroVal) = register32BitsValue1;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f6:	665a      	str	r2, [r3, #100]	; 0x64
			_FilterData(Default_VAVGVal) = register32BitsValue2;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	669a      	str	r2, [r3, #104]	; 0x68
 80029fe:	e005      	b.n	8002a0c <_filter_Start+0x49c>
		} else {
			_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a04:	66da      	str	r2, [r3, #108]	; 0x6c
			_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0a:	671a      	str	r2, [r3, #112]	; 0x70
		}

		if (_FilterData(MeasurementIndex) % WrapAroundNoDelayCheckPeriod == 0) {
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	4a7f      	ldr	r2, [pc, #508]	; (8002c10 <_filter_Start+0x6a0>)
 8002a12:	8812      	ldrh	r2, [r2, #0]
 8002a14:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a18:	fb01 f202 	mul.w	r2, r1, r2
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <_filter_Start+0x4b8>
			u8 = 0x3C;
 8002a22:	233c      	movs	r3, #60	; 0x3c
 8002a24:	75fb      	strb	r3, [r7, #23]
 8002a26:	e001      	b.n	8002a2c <_filter_Start+0x4bc>
			//u8_2 = 0x05;
		} else {
			u8 = 0x3E;
 8002a28:	233e      	movs	r3, #62	; 0x3e
 8002a2a:	75fb      	strb	r3, [r7, #23]
			//u8_2 = 0x01;
		}
		status = VL6180x_WrByte(dev, 0x01AC, u8);
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fcc1 	bl	80033bc <VL6180x_WrByte>
 8002a3a:	6338      	str	r0, [r7, #48]	; 0x30
		if (status) {
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 8245 	bne.w	8002ece <_filter_Start+0x95e>
		//status = VL6180x_WrByte(dev, 0x0F2, u8_2);
		//if (status) {
		//	VL6180x_ErrLog("0x0F2  wr fail");
		//	goto done_err;
		//}
		_FilterData(MeasurementIndex)++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	61da      	str	r2, [r3, #28]
	}

	if (bypassFilter == 1) {
 8002a4e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d10d      	bne.n	8002a72 <_filter_Start+0x502>
		/* Do not go through the filter */

		/* Update filter error code */
		_FilterData(filterError) = filterErrorCode;
 8002a56:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	67da      	str	r2, [r3, #124]	; 0x7c

		/* Update reported range */
		if(filterErrorCode==RangingFiltered)
 8002a5e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d102      	bne.n	8002a6c <_filter_Start+0x4fc>
			m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 8002a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a68:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

		return m_newTrueRange_mm;
 8002a6c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002a70:	e230      	b.n	8002ed4 <_filter_Start+0x964>
	}

	/* Computes current VAVGDiff */
	if (_FilterData(Default_VAVGVal) > _FilterData(NoDelay_VAVGVal))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d906      	bls.n	8002a8c <_filter_Start+0x51c>
		VAVGDiff = _FilterData(Default_VAVGVal) - _FilterData(NoDelay_VAVGVal);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	663b      	str	r3, [r7, #96]	; 0x60
 8002a8a:	e001      	b.n	8002a90 <_filter_Start+0x520>
	else
		VAVGDiff = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	663b      	str	r3, [r7, #96]	; 0x60
	_FilterData(Previous_VAVGDiff) = VAVGDiff;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a94:	675a      	str	r2, [r3, #116]	; 0x74

	if(SuspicuousRangingZone==0)
 8002a96:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <_filter_Start+0x536>
		MAX_VAVGDiff = MAX_VAVGDiff_ROM;
 8002a9e:	4b5d      	ldr	r3, [pc, #372]	; (8002c14 <_filter_Start+0x6a4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8002aa4:	e006      	b.n	8002ab4 <_filter_Start+0x544>
	else
		/* In suspicuous area, strengthen the filter */
		MAX_VAVGDiff = MAX_VAVGDiff_ROM / SuspicuousMAX_VAVGDiffRatio;
 8002aa6:	4b5b      	ldr	r3, [pc, #364]	; (8002c14 <_filter_Start+0x6a4>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b5b      	ldr	r3, [pc, #364]	; (8002c18 <_filter_Start+0x6a8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check the VAVGDiff */
	if (_FilterData(Default_ZeroVal) > _FilterData(NoDelay_ZeroVal))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d906      	bls.n	8002ace <_filter_Start+0x55e>
		IdealVAVGDiff = _FilterData(Default_ZeroVal) - _FilterData(NoDelay_ZeroVal);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002acc:	e005      	b.n	8002ada <_filter_Start+0x56a>
	else
		IdealVAVGDiff = _FilterData(NoDelay_ZeroVal) - _FilterData(Default_ZeroVal);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (IdealVAVGDiff > MAX_VAVGDiff)
 8002ada:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d904      	bls.n	8002aec <_filter_Start+0x57c>
		MinVAVGDiff = IdealVAVGDiff - MAX_VAVGDiff;
 8002ae2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002aea:	e001      	b.n	8002af0 <_filter_Start+0x580>
	else
		MinVAVGDiff = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	65bb      	str	r3, [r7, #88]	; 0x58
	MaxVAVGDiff = IdealVAVGDiff + MAX_VAVGDiff;
 8002af0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af4:	4413      	add	r3, r2
 8002af6:	623b      	str	r3, [r7, #32]
	if (VAVGDiff < MinVAVGDiff || VAVGDiff > MaxVAVGDiff) {
 8002af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d303      	bcc.n	8002b08 <_filter_Start+0x598>
 8002b00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d906      	bls.n	8002b16 <_filter_Start+0x5a6>
		WrapAroundFlag = 1;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		filterErrorCode = RangingFiltered;
 8002b0e:	2310      	movs	r3, #16
 8002b10:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002b14:	e149      	b.n	8002daa <_filter_Start+0x83a>
	} else {
		/* Go through filtering check */

		if(_FilterData(MeasurementIndex)<=1)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d803      	bhi.n	8002b26 <_filter_Start+0x5b6>
			/* On measurement after a bypass, uses an increase number of samples */
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES_AFTER_FLUSH_OR_BYPASS;
 8002b1e:	2305      	movs	r3, #5
 8002b20:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002b24:	e002      	b.n	8002b2c <_filter_Start+0x5bc>
		else
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES;
 8002b26:	2303      	movs	r3, #3
 8002b28:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

		/* StdDevLimit Damper on SNR */
		StdDevLimit = _filter_StdDevDamper(m_rtnAmbientRate, m_rtnSignalRate, StdDevLimitLowLight, StdDevLimitLowLightSNR, StdDevLimitHighLight, StdDevLimitHighLightSNR);
 8002b2c:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <_filter_Start+0x6ac>)
 8002b2e:	6819      	ldr	r1, [r3, #0]
 8002b30:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <_filter_Start+0x6b0>)
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <_filter_Start+0x6b4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a3b      	ldr	r2, [pc, #236]	; (8002c28 <_filter_Start+0x6b8>)
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	9201      	str	r2, [sp, #4]
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	4603      	mov	r3, r0
 8002b42:	460a      	mov	r2, r1
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8002b4a:	f7ff fcd6 	bl	80024fa <_filter_StdDevDamper>
 8002b4e:	6538      	str	r0, [r7, #80]	; 0x50

		/* Standard deviations computations */
		StdDevSamples = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		StdDevDistanceSum = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevDistanceMean = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	67bb      	str	r3, [r7, #120]	; 0x78
		StdDevDistance = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	677b      	str	r3, [r7, #116]	; 0x74
		StdDevRateSum = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	673b      	str	r3, [r7, #112]	; 0x70
		StdDevRateMean = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	66fb      	str	r3, [r7, #108]	; 0x6c
		StdDevRate = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002b74:	e029      	b.n	8002bca <_filter_Start+0x65a>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8002b76:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	3310      	adds	r3, #16
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	889b      	ldrh	r3, [r3, #4]
 8002b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d019      	beq.n	8002bc0 <_filter_Start+0x650>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8002b8c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002b90:	3301      	adds	r3, #1
 8002b92:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8002b96:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	3310      	adds	r3, #16
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	889b      	ldrh	r3, [r3, #4]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ba8:	4413      	add	r3, r2
 8002baa:	67fb      	str	r3, [r7, #124]	; 0x7c
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8002bac:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	330c      	adds	r3, #12
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002bbc:	4413      	add	r3, r2
 8002bbe:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002bc0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002bca:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002bce:	2b09      	cmp	r3, #9
 8002bd0:	d803      	bhi.n	8002bda <_filter_Start+0x66a>
 8002bd2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002bd6:	2b05      	cmp	r3, #5
 8002bd8:	d9cd      	bls.n	8002b76 <_filter_Start+0x606>
			}
		}
		if (StdDevSamples > 0) {
 8002bda:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <_filter_Start+0x68a>
			StdDevDistanceMean = (uint32_t) (StdDevDistanceSum / StdDevSamples);
 8002be2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002be6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	67bb      	str	r3, [r7, #120]	; 0x78
			StdDevRateMean = (uint32_t) (StdDevRateSum / StdDevSamples);
 8002bee:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002bf2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		/* TODO optimize shorten Std dev in aisngle loop computation using sum of x2 - (sum of x)2 */
		StdDevSamples = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		StdDevDistanceSum = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevRateSum = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002c0e:	e056      	b.n	8002cbe <_filter_Start+0x74e>
 8002c10:	080076ba 	.word	0x080076ba
 8002c14:	080076bc 	.word	0x080076bc
 8002c18:	080076c0 	.word	0x080076c0
 8002c1c:	080076c4 	.word	0x080076c4
 8002c20:	080076c8 	.word	0x080076c8
 8002c24:	080076cc 	.word	0x080076cc
 8002c28:	080076d0 	.word	0x080076d0
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8002c2c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	3310      	adds	r3, #16
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	889b      	ldrh	r3, [r3, #4]
 8002c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d038      	beq.n	8002cb4 <_filter_Start+0x744>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8002c42:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002c46:	3301      	adds	r3, #1
 8002c48:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
									(int)(_FilterData(LastTrueRange)[i] -
 8002c4c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	3310      	adds	r3, #16
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	889b      	ldrh	r3, [r3, #4]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	4619      	mov	r1, r3
											StdDevDistanceMean) *
											(int) (_FilterData(LastTrueRange)[i] -
 8002c62:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	3310      	adds	r3, #16
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	889b      	ldrh	r3, [r3, #4]
 8002c70:	461a      	mov	r2, r3
 8002c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c74:	1ad3      	subs	r3, r2, r3
											StdDevDistanceMean) *
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	461a      	mov	r2, r3
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 8002c7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c7e:	4413      	add	r3, r2
 8002c80:	67fb      	str	r3, [r7, #124]	; 0x7c
													StdDevDistanceMean));
				StdDevRateSum = (uint32_t) (StdDevRateSum +
									(int) (_FilterData(LastReturnRates)[i] -
 8002c82:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	4619      	mov	r1, r3
											StdDevRateMean) *
											(int) (_FilterData(LastReturnRates)[i] -
 8002c96:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca6:	1ad3      	subs	r3, r2, r3
											StdDevRateMean) *
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	461a      	mov	r2, r3
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 8002cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb0:	4413      	add	r3, r2
 8002cb2:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002cb4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002cbe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002cc2:	2b09      	cmp	r3, #9
 8002cc4:	d803      	bhi.n	8002cce <_filter_Start+0x75e>
 8002cc6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	d9ae      	bls.n	8002c2c <_filter_Start+0x6bc>
													StdDevRateMean));
			}
		}
		if (StdDevSamples >= StdDevSamplesMinNeeded) {
 8002cce:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8002cd2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d30e      	bcc.n	8002cf8 <_filter_Start+0x788>
			StdDevDistance = (uint16_t) (StdDevDistanceSum / StdDevSamples);
 8002cda:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002cde:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = (uint16_t) (StdDevRateSum / StdDevSamples);
 8002ce8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002cec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cf6:	e003      	b.n	8002d00 <_filter_Start+0x790>
		} else {
			StdDevDistance = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		/* Check Return rate standard deviation */
		if (StdDevRate < StdDevMovingTargetStdDevLimit) {
 8002d00:	4b76      	ldr	r3, [pc, #472]	; (8002edc <_filter_Start+0x96c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d249      	bcs.n	8002d9e <_filter_Start+0x82e>
			if (StdDevSamples < StdDevSamplesMinNeeded) {
 8002d0a:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8002d0e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d203      	bcs.n	8002d1e <_filter_Start+0x7ae>
				//m_newTrueRange_mm = MaxOrInvalidDistance;
				filterErrorCode = RangingFiltered;
 8002d16:	2310      	movs	r3, #16
 8002d18:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002d1c:	e045      	b.n	8002daa <_filter_Start+0x83a>
			} else {
				/* Check distance standard deviation */
				if (StdDevRate < StdDevMovingTargetReturnRateLimit)
 8002d1e:	4b70      	ldr	r3, [pc, #448]	; (8002ee0 <_filter_Start+0x970>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d20e      	bcs.n	8002d46 <_filter_Start+0x7d6>
					StdDevLimitWithTargetMove = StdDevLimit +
						(((StdDevMovingTargetStdDevForReturnRateLimit -
 8002d28:	4b6e      	ldr	r3, [pc, #440]	; (8002ee4 <_filter_Start+0x974>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2e:	1ad3      	subs	r3, r2, r3
							StdDevLimit) * StdDevRate) /
 8002d30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d32:	fb03 f202 	mul.w	r2, r3, r2
 8002d36:	4b6a      	ldr	r3, [pc, #424]	; (8002ee0 <_filter_Start+0x970>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
					StdDevLimitWithTargetMove = StdDevLimit +
 8002d3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d40:	4413      	add	r3, r2
 8002d42:	667b      	str	r3, [r7, #100]	; 0x64
 8002d44:	e002      	b.n	8002d4c <_filter_Start+0x7dc>
							StdDevMovingTargetReturnRateLimit);
				else
					StdDevLimitWithTargetMove = StdDevMovingTargetStdDevForReturnRateLimit;
 8002d46:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <_filter_Start+0x974>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	667b      	str	r3, [r7, #100]	; 0x64

				if(_FilterData(filterError)==NoError){
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <_filter_Start+0x7f0>
					/* No wrapAround detected yet, so relax constraints on the std dev */
					StdDevLimitWithTargetMove = StdDevLimitWithTargetMove * StdDevNoWrapDetectedMultiplier;
 8002d54:	4b64      	ldr	r3, [pc, #400]	; (8002ee8 <_filter_Start+0x978>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	667b      	str	r3, [r7, #100]	; 0x64
				}

				if (((StdDevDistance * StdDevHighConfidenceSNRLimit) < StdDevLimit) && (StdDevSamples>=FILTER_STDDEV_SAMPLES)) {
 8002d60:	4b62      	ldr	r3, [pc, #392]	; (8002eec <_filter_Start+0x97c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d907      	bls.n	8002d80 <_filter_Start+0x810>
 8002d70:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d903      	bls.n	8002d80 <_filter_Start+0x810>
					NoWrapAroundHighConfidenceFlag = 1;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002d7e:	e014      	b.n	8002daa <_filter_Start+0x83a>
				} else {
					if (StdDevDistance < StdDevLimitWithTargetMove) {
 8002d80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d203      	bcs.n	8002d90 <_filter_Start+0x820>
							NoWrapAroundFlag = 1;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8002d8e:	e00c      	b.n	8002daa <_filter_Start+0x83a>
						} else {
						WrapAroundFlag = 1;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
						filterErrorCode = RangingFiltered;
 8002d96:	2310      	movs	r3, #16
 8002d98:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002d9c:	e005      	b.n	8002daa <_filter_Start+0x83a>
					}
				}
			}
		} else {
			/* Target moving too fast */
			WrapAroundFlag = 1;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			filterErrorCode = RangingFiltered;
 8002da4:	2310      	movs	r3, #16
 8002da6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		}
	}

	if (ValidDistance == 0) {
 8002daa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10d      	bne.n	8002dce <_filter_Start+0x85e>
		/* In case of invalid distance */
		if (_FilterData(StdFilteredReads) > 0)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d04e      	beq.n	8002e5a <_filter_Start+0x8ea>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) - 1);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002dcc:	e045      	b.n	8002e5a <_filter_Start+0x8ea>
	} else {
		if (WrapAroundFlag == 1) {
 8002dce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d116      	bne.n	8002e04 <_filter_Start+0x894>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) +
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002ddc:	4b44      	ldr	r3, [pc, #272]	; (8002ef0 <_filter_Start+0x980>)
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
											StdFilteredReadsIncrement);
			if (_FilterData(StdFilteredReads) > StdMaxFilteredReads)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002df0:	4b40      	ldr	r3, [pc, #256]	; (8002ef4 <_filter_Start+0x984>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d930      	bls.n	8002e5a <_filter_Start+0x8ea>
				_FilterData(StdFilteredReads) = StdMaxFilteredReads;
 8002df8:	4b3e      	ldr	r3, [pc, #248]	; (8002ef4 <_filter_Start+0x984>)
 8002dfa:	881a      	ldrh	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002e02:	e02a      	b.n	8002e5a <_filter_Start+0x8ea>
		} else {
			if (NoWrapAroundFlag == 1) {
 8002e04:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d11e      	bne.n	8002e4a <_filter_Start+0x8da>
				if (_FilterData(StdFilteredReads) > 0) {
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d021      	beq.n	8002e5a <_filter_Start+0x8ea>
					filterErrorCode = RangingFiltered;
 8002e16:	2310      	movs	r3, #16
 8002e18:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					if (_FilterData(StdFilteredReads) > StdFilteredReadsDecrement)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002e22:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <_filter_Start+0x988>)
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d90a      	bls.n	8002e40 <_filter_Start+0x8d0>
						_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) -
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <_filter_Start+0x988>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002e3e:	e00c      	b.n	8002e5a <_filter_Start+0x8ea>
														StdFilteredReadsDecrement);
					else
						_FilterData(StdFilteredReads) = 0;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002e48:	e007      	b.n	8002e5a <_filter_Start+0x8ea>
				}
			} else {
				if (NoWrapAroundHighConfidenceFlag == 1) {
 8002e4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d103      	bne.n	8002e5a <_filter_Start+0x8ea>
					_FilterData(StdFilteredReads) = 0;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	}

	/* If we detect a change from no Error to RangingFilteringOnGoing, then it means that
	 * the filter detected a change in te scene, so discard all previous measurements.
	 */
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d121      	bne.n	8002ea6 <_filter_Start+0x936>
 8002e62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01d      	beq.n	8002ea6 <_filter_Start+0x936>
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002e70:	e015      	b.n	8002e9e <_filter_Start+0x92e>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8002e72:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	3310      	adds	r3, #16
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e82:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 8002e84:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 8002e94:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002e98:	3301      	adds	r3, #1
 8002e9a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002e9e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002ea2:	2b09      	cmp	r3, #9
 8002ea4:	d9e5      	bls.n	8002e72 <_filter_Start+0x902>
		}
	}

	/* Update filter error code */
	_FilterData(filterError) = filterErrorCode;
 8002ea6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	67da      	str	r2, [r3, #124]	; 0x7c

	/* Update reported range */
	if(filterErrorCode==RangingFiltered)
 8002eae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d102      	bne.n	8002ebc <_filter_Start+0x94c>
		m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 8002eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	return m_newTrueRange_mm;
 8002ebc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002ec0:	e008      	b.n	8002ed4 <_filter_Start+0x964>
		goto done_err;
 8002ec2:	bf00      	nop
 8002ec4:	e004      	b.n	8002ed0 <_filter_Start+0x960>
		goto done_err;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <_filter_Start+0x960>
				goto done_err;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <_filter_Start+0x960>
			goto done_err;
 8002ece:	bf00      	nop
done_err:
	return -1;
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295

#undef MaxOrInvalidDistance
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	37a0      	adds	r7, #160	; 0xa0
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	080076d4 	.word	0x080076d4
 8002ee0:	080076d8 	.word	0x080076d8
 8002ee4:	080076dc 	.word	0x080076dc
 8002ee8:	080076e0 	.word	0x080076e0
 8002eec:	080076e4 	.word	0x080076e4
 8002ef0:	080076e8 	.word	0x080076e8
 8002ef4:	080076ea 	.word	0x080076ea
 8002ef8:	080076ec 	.word	0x080076ec

08002efc <_filter_GetResult>:


static int _filter_GetResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b08b      	sub	sp, #44	; 0x2c
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
	uint32_t m_rawRange_mm = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
	int32_t  FilteredRange;
	const uint8_t scaler = _GetUpscale(dev);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7e1b      	ldrb	r3, [r3, #24]
 8002f0e:	75fb      	strb	r3, [r7, #23]
	uint8_t u8;
	int status;

	do {
		status = VL6180x_GetCachedByte(dev, RESULT_RANGE_RAW, &u8);
 8002f10:	f107 030f 	add.w	r3, r7, #15
 8002f14:	461a      	mov	r2, r3
 8002f16:	2164      	movs	r1, #100	; 0x64
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7fe fe58 	bl	8001bce <VL6180x_GetCachedByte>
 8002f1e:	61f8      	str	r0, [r7, #28]
		if (status) {
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d133      	bne.n	8002f8e <_filter_GetResult+0x92>
		    VL6180x_ErrLog("RESULT_RANGE_RAW rd fail");
		    break;
		}
		m_rawRange_mm = u8;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	61bb      	str	r3, [r7, #24]

		FilteredRange = _filter_Start(dev, pRangeData->range_mm, (m_rawRange_mm * scaler), pRangeData->rtnRate, pRangeData->rtnAmbRate, pRangeData->errorStatus);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	b299      	uxth	r1, r3
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	b292      	uxth	r2, r2
 8002f38:	fb02 f303 	mul.w	r3, r2, r3
 8002f3c:	b298      	uxth	r0, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	691c      	ldr	r4, [r3, #16]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	6892      	ldr	r2, [r2, #8]
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	9201      	str	r2, [sp, #4]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	4623      	mov	r3, r4
 8002f52:	4602      	mov	r2, r0
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff fb0b 	bl	8002570 <_filter_Start>
 8002f5a:	6138      	str	r0, [r7, #16]
		if (FilteredRange < 0) {
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	da03      	bge.n	8002f6a <_filter_GetResult+0x6e>
		    status = -1;
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295
 8002f66:	61fb      	str	r3, [r7, #28]
		    break;
 8002f68:	e012      	b.n	8002f90 <_filter_GetResult+0x94>
		}
		pRangeData->FilteredData.range_mm = FilteredRange;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	841a      	strh	r2, [r3, #32]
		pRangeData->FilteredData.rawRange_mm = m_rawRange_mm * scaler;
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	845a      	strh	r2, [r3, #34]	; 0x22
		pRangeData->FilteredData.filterError= _FilterData(filterError);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f8c:	e000      	b.n	8002f90 <_filter_GetResult+0x94>
		    break;
 8002f8e:	bf00      	nop
	} while (0);
	return status;
 8002f90:	69fb      	ldr	r3, [r7, #28]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3724      	adds	r7, #36	; 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd90      	pop	{r4, r7, pc}

08002f9a <_GetRateResult>:
#endif /* VL6180x_WRAP_AROUND_FILTER_SUPPORT */

#ifdef VL6180x_HAVE_RATE_DATA

static int _GetRateResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b08c      	sub	sp, #48	; 0x30
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
	uint32_t m_rtnConvTime = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
	uint32_t m_rtnSignalRate = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t m_rtnAmbientRate = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	623b      	str	r3, [r7, #32]
	uint32_t m_rtnSignalCount = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]
	uint32_t m_rtnAmbientCount = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
	uint32_t m_refConvTime = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
	uint32_t cRtnSignalCountMax = 0x7FFFFFFF;
 8002fbc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002fc0:	61fb      	str	r3, [r7, #28]
	uint32_t cDllPeriods = 6;
 8002fc2:	2306      	movs	r3, #6
 8002fc4:	61bb      	str	r3, [r7, #24]
	uint32_t calcConvTime = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c

	int status;

	do {
		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_SIGNAL_COUNT, &m_rtnSignalCount);
 8002fca:	f107 0310 	add.w	r3, r7, #16
 8002fce:	461a      	mov	r2, r3
 8002fd0:	216c      	movs	r1, #108	; 0x6c
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe fd8a 	bl	8001aec <VL6180x_GetCachedDWord>
 8002fd8:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d156      	bne.n	800308e <_GetRateResult+0xf4>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_SIGNAL_COUNT rd fail");
			break;
		}
		if (m_rtnSignalCount > cRtnSignalCountMax) {
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d201      	bcs.n	8002fec <_GetRateResult+0x52>
			m_rtnSignalCount = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_AMB_COUNT, &m_rtnAmbientCount);
 8002fec:	f107 030c 	add.w	r3, r7, #12
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2174      	movs	r1, #116	; 0x74
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fe fd79 	bl	8001aec <VL6180x_GetCachedDWord>
 8002ffa:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d147      	bne.n	8003092 <_GetRateResult+0xf8>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_AMB_COUNTrd fail");
			break;
		}


		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_CONV_TIME, &m_rtnConvTime);
 8003002:	f107 0314 	add.w	r3, r7, #20
 8003006:	461a      	mov	r2, r3
 8003008:	217c      	movs	r1, #124	; 0x7c
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe fd6e 	bl	8001aec <VL6180x_GetCachedDWord>
 8003010:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d13e      	bne.n	8003096 <_GetRateResult+0xfc>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_CONV_TIME rd fail");
			break;
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_REFERENCE_CONV_TIME, &m_refConvTime);
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	461a      	mov	r2, r3
 800301e:	2180      	movs	r1, #128	; 0x80
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7fe fd63 	bl	8001aec <VL6180x_GetCachedDWord>
 8003026:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	d135      	bne.n	800309a <_GetRateResult+0x100>
			VL6180x_ErrLog("RESULT_RANGE_REFERENCE_CONV_TIME rd fail");
			break;
		}

		pRangeData->rtnConvTime = m_rtnConvTime;
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	615a      	str	r2, [r3, #20]
		pRangeData->refConvTime = m_refConvTime;
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	619a      	str	r2, [r3, #24]

		calcConvTime = m_refConvTime;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (m_rtnConvTime > m_refConvTime) {
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	d901      	bls.n	800304a <_GetRateResult+0xb0>
			calcConvTime = m_rtnConvTime;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if (calcConvTime == 0)
 800304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <_GetRateResult+0xbc>
			calcConvTime = 63000;
 8003050:	f24f 6318 	movw	r3, #63000	; 0xf618
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c

		m_rtnSignalRate = (m_rtnSignalCount * 1000) / calcConvTime;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800305c:	fb03 f202 	mul.w	r2, r3, r2
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	fbb2 f3f3 	udiv	r3, r2, r3
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
		m_rtnAmbientRate = (m_rtnAmbientCount * cDllPeriods * 1000) / calcConvTime;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	fb02 f303 	mul.w	r3, r2, r3
 8003070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003074:	fb03 f202 	mul.w	r2, r3, r2
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	623b      	str	r3, [r7, #32]

		pRangeData->rtnRate = m_rtnSignalRate;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003084:	611a      	str	r2, [r3, #16]
		pRangeData->rtnAmbRate = m_rtnAmbientRate;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	e006      	b.n	800309c <_GetRateResult+0x102>
			break;
 800308e:	bf00      	nop
 8003090:	e004      	b.n	800309c <_GetRateResult+0x102>
			break;
 8003092:	bf00      	nop
 8003094:	e002      	b.n	800309c <_GetRateResult+0x102>
			break;
 8003096:	bf00      	nop
 8003098:	e000      	b.n	800309c <_GetRateResult+0x102>
			break;
 800309a:	bf00      	nop


	} while (0);
	return status;
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3730      	adds	r7, #48	; 0x30
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <VL6180x_SqrtUint32>:
/*
 * 32 bit integer square root with not so bad precision (integer result) and is quite fast
 * see http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
 */
uint32_t VL6180x_SqrtUint32(uint32_t num)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b085      	sub	sp, #20
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
	uint32_t res = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
	uint32_t bit = 1 << 30; /* The second-to-top bit is set: 1 << 30 for 32 bits */
 80030b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030b6:	60bb      	str	r3, [r7, #8]

	/* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80030b8:	e002      	b.n	80030c0 <VL6180x_SqrtUint32+0x1a>
		bit >>= 2;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d8f8      	bhi.n	80030ba <VL6180x_SqrtUint32+0x14>

	while (bit != 0) {
 80030c8:	e017      	b.n	80030fa <VL6180x_SqrtUint32+0x54>
		if (num >= res + bit) {
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4413      	add	r3, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d30b      	bcc.n	80030ee <VL6180x_SqrtUint32+0x48>
		    num -= res + bit;
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4413      	add	r3, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	607b      	str	r3, [r7, #4]
		    res = (res >> 1) + bit;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	4413      	add	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	e002      	b.n	80030f4 <VL6180x_SqrtUint32+0x4e>
		} else
		    res >>= 1;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	60fb      	str	r3, [r7, #12]
		bit >>= 2;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e4      	bne.n	80030ca <VL6180x_SqrtUint32+0x24>
	}
	return res;
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr

0800310c <_DMax_OneTimeInit>:
#endif


/* DMax one time init */
void _DMax_OneTimeInit(VL6180xDev_t dev)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
	_DMaxData(ambTuningWindowFactor_K) = DEF_AMBIENT_TUNING;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2250      	movs	r2, #80	; 0x50
 8003118:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
	...

08003128 <_DMax_RawValueAtRateKCps>:


static uint32_t _DMax_RawValueAtRateKCps(VL6180xDev_t dev, int32_t rate)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
	uint32_t RawDMax;
	DMaxFix_t retSignalAt400mm;
	uint32_t ambTuningWindowFactor_K;


	ambTuningWindowFactor_K = _DMaxData(ambTuningWindowFactor_K);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003138:	617b      	str	r3, [r7, #20]
	snrLimit_K              = _DMaxData(snrLimit_K);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003140:	613b      	str	r3, [r7, #16]
	retSignalAt400mm        = _DMaxData(retSignalAt400mm);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003148:	60fb      	str	r3, [r7, #12]
	/* 12 to 18 bits Kcps */
	if (rate > 0) {
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	dd2c      	ble.n	80031aa <_DMax_RawValueAtRateKCps+0x82>
		DMaxSq = 400 * 400 * 1000 / rate - (400 * 400 / 330);
 8003150:	4a1a      	ldr	r2, [pc, #104]	; (80031bc <_DMax_RawValueAtRateKCps+0x94>)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	fb92 f3f3 	sdiv	r3, r2, r3
 8003158:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800315c:	61fb      	str	r3, [r7, #28]
		/* K of (1/RtnAmb -1/330 )=> 30bit- (12-18)bit  => 12-18 bits*/
		if (DMaxSq <= 0) {
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	2b00      	cmp	r3, #0
 8003162:	dc02      	bgt.n	800316a <_DMax_RawValueAtRateKCps+0x42>
		    RawDMax = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]
 8003168:	e022      	b.n	80031b0 <_DMax_RawValueAtRateKCps+0x88>
		} else {
		    /* value can be more 32 bit so base on raneg apply
			 * retSignalAt400mm before or after division to presevr accuracy */
		    if (DMaxSq < (2 << 12)) {
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003170:	da0b      	bge.n	800318a <_DMax_RawValueAtRateKCps+0x62>
				DMaxSq = DMaxSq * retSignalAt400mm /
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	4619      	mov	r1, r3
							(snrLimit_K + ambTuningWindowFactor_K);
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	4413      	add	r3, r2
				DMaxSq = DMaxSq * retSignalAt400mm /
 8003182:	fbb1 f3f3 	udiv	r3, r1, r3
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	e009      	b.n	800319e <_DMax_RawValueAtRateKCps+0x76>
				/* max 12 + 12 to 18 -10 => 12-26 bit */
		    } else {
				DMaxSq = DMaxSq / (snrLimit_K + ambTuningWindowFactor_K) * retSignalAt400mm;
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	6939      	ldr	r1, [r7, #16]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	440b      	add	r3, r1
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	61fb      	str	r3, [r7, #28]
				/* 12 to 18 -10 + 12 to 18 *=> 12-26 bit */
		    }
		    RawDMax = VL6180x_SqrtUint32(DMaxSq);
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff80 	bl	80030a6 <VL6180x_SqrtUint32>
 80031a6:	61b8      	str	r0, [r7, #24]
 80031a8:	e002      	b.n	80031b0 <_DMax_RawValueAtRateKCps+0x88>
		}
	} else {
		RawDMax = 0x7FFFFFFF; /* bigest possibmle 32bit signed value */
 80031aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80031ae:	61bb      	str	r3, [r7, #24]
	}
	return RawDMax;
 80031b0:	69bb      	ldr	r3, [r7, #24]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	09896800 	.word	0x09896800

080031c0 <_DMax_InitData>:
 *  SYSRANGE_MAX_CONVERGENCE_TIME
 *  SYSRANGE_RANGE_CHECK_ENABLES    mask RANGE_CHECK_RANGE_ENABLE_MASK
 *  range 0xb8-0xbb (0xbb)
 */
static int _DMax_InitData(VL6180xDev_t dev)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08c      	sub	sp, #48	; 0x30
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	int32_t minSignalNeeded;
	uint8_t SysRangeCheckEn;
	uint8_t snrLimit;
	static const int ROMABLE_DATA MaxConvTimeAdjust = -4;

	warning = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");
	do {
		status = VL6180x_RdByte(dev, 0x02A, &u8);
 80031cc:	f107 0313 	add.w	r3, r7, #19
 80031d0:	461a      	mov	r2, r3
 80031d2:	212a      	movs	r1, #42	; 0x2a
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f9c0 	bl	800355a <VL6180x_RdByte>
 80031da:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 80031dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 8095 	bne.w	800330e <_DMax_InitData+0x14e>
		    VL6180x_ErrLog("Reg 0x02A rd fail");
		    break;
		}

		if (u8 == 0) {
 80031e4:	7cfb      	ldrb	r3, [r7, #19]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <_DMax_InitData+0x32>
		    warning = CALIBRATION_WARNING;
 80031ea:	2301      	movs	r3, #1
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
		    u8 = 40; /* use a default average value */
 80031ee:	2328      	movs	r3, #40	; 0x28
 80031f0:	74fb      	strb	r3, [r7, #19]
		}
		Reg2A_KCps = Fix7_2_KCPs(u8); /* convert to KCPs */
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	461a      	mov	r2, r3
 80031f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	09db      	lsrs	r3, r3, #7
 8003200:	61fb      	str	r3, [r7, #28]

		status = VL6180x_RdByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, &SysRangeCheckEn);
 8003202:	f107 030a 	add.w	r3, r7, #10
 8003206:	461a      	mov	r2, r3
 8003208:	212d      	movs	r1, #45	; 0x2d
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f9a5 	bl	800355a <VL6180x_RdByte>
 8003210:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d17c      	bne.n	8003312 <_DMax_InitData+0x152>
		    VL6180x_ErrLog("SYSRANGE_RANGE_CHECK_ENABLES rd fail ");
		    break;
		}

		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &MaxConvTime);
 8003218:	f107 030b 	add.w	r3, r7, #11
 800321c:	461a      	mov	r2, r3
 800321e:	211c      	movs	r1, #28
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f99a 	bl	800355a <VL6180x_RdByte>
 8003226:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d173      	bne.n	8003316 <_DMax_InitData+0x156>
		    VL6180x_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail ");
			break;
		}

		status = VL6180x_RdDWord(dev, 0x0B8, &RegB8);
 800322e:	f107 030c 	add.w	r3, r7, #12
 8003232:	461a      	mov	r2, r3
 8003234:	21b8      	movs	r1, #184	; 0xb8
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f9f8 	bl	800362c <VL6180x_RdDWord>
 800323c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d16a      	bne.n	800331a <_DMax_InitData+0x15a>
		    VL6180x_ErrLog("reg 0x0B8 rd fail ");
		    break;
		}

		status = VL6180x_RdByte(dev, SYSRANGE_MAX_AMBIENT_LEVEL_MULT, &snrLimit);
 8003244:	f107 0309 	add.w	r3, r7, #9
 8003248:	461a      	mov	r2, r3
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f984 	bl	800355a <VL6180x_RdByte>
 8003252:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8003254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d161      	bne.n	800331e <_DMax_InitData+0x15e>
		    VL6180x_ErrLog("SYSRANGE_MAX_AMBIENT_LEVEL_MULT rd fail ");
		    break;
		}
		_DMaxData(snrLimit_K) = (int32_t)16 * 1000 / snrLimit;
 800325a:	7a7b      	ldrb	r3, [r7, #9]
 800325c:	461a      	mov	r2, r3
 800325e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8003262:	fb93 f2f2 	sdiv	r2, r3, r2
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		XTalkCompRate_KCps =   VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	61bb      	str	r3, [r7, #24]

		if (Reg2A_KCps >= XTalkCompRate_KCps) {
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	429a      	cmp	r2, r3
 8003278:	d304      	bcc.n	8003284 <_DMax_InitData+0xc4>
		    _DMaxData(retSignalAt400mm) = Reg2A_KCps;
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8003282:	e003      	b.n	800328c <_DMax_InitData+0xcc>
		} else{
		    _DMaxData(retSignalAt400mm) = 0;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			/* Reg2A_K - XTalkCompRate_KCp <0 is invalid */
		}

		/* if xtalk range check is off omit it in snr clipping */
		if (SysRangeCheckEn&RANGE_CHECK_RANGE_ENABLE_MASK) {
 800328c:	7abb      	ldrb	r3, [r7, #10]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d013      	beq.n	80032be <_DMax_InitData+0xfe>
		    status = VL6180x_RdWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &u16);
 8003296:	f107 0310 	add.w	r3, r7, #16
 800329a:	461a      	mov	r2, r3
 800329c:	2126      	movs	r1, #38	; 0x26
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f98b 	bl	80035ba <VL6180x_RdWord>
 80032a4:	62f8      	str	r0, [r7, #44]	; 0x2c
		    if (status) {
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d13a      	bne.n	8003322 <_DMax_InitData+0x162>
				VL6180x_ErrLog("SYSRANGE_RANGE_IGNORE_THRESHOLD rd fail ");
				break;
		    }
		    RangeIgnoreThreshold = Fix7_2_KCPs(u16);
 80032ac:	8a3b      	ldrh	r3, [r7, #16]
 80032ae:	461a      	mov	r2, r3
 80032b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	09db      	lsrs	r3, r3, #7
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
 80032bc:	e001      	b.n	80032c2 <_DMax_InitData+0x102>
		} else{
		    RangeIgnoreThreshold  = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
		}

		minSignalNeeded = (RegB8 * 256) / ((int32_t)MaxConvTime + (int32_t)MaxConvTimeAdjust);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	7afa      	ldrb	r2, [r7, #11]
 80032c8:	4611      	mov	r1, r2
 80032ca:	4a1b      	ldr	r2, [pc, #108]	; (8003338 <_DMax_InitData+0x178>)
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	440a      	add	r2, r1
 80032d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80032d4:	623b      	str	r3, [r7, #32]
		/* KCps 8+8 bit -(1 to 6 bit) => 15-10 bit */
		/* minSignalNeeded = max ( minSignalNeeded,  RangeIgnoreThreshold - XTalkCompRate_KCps) */
		if (minSignalNeeded  <= (int32_t)RangeIgnoreThreshold - (int32_t)XTalkCompRate_KCps)
 80032d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	429a      	cmp	r2, r3
 80032e0:	dc03      	bgt.n	80032ea <_DMax_InitData+0x12a>
		    minSignalNeeded  =  RangeIgnoreThreshold - XTalkCompRate_KCps;
 80032e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	623b      	str	r3, [r7, #32]

		u32 = (minSignalNeeded*(uint32_t)snrLimit) / 16;
 80032ea:	7a7b      	ldrb	r3, [r7, #9]
 80032ec:	461a      	mov	r2, r3
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	fb02 f303 	mul.w	r3, r2, r3
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	617b      	str	r3, [r7, #20]
		_DMaxData(ClipSnrLimit) = _DMax_RawValueAtRateKCps(dev, u32);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4619      	mov	r1, r3
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ff13 	bl	8003128 <_DMax_RawValueAtRateKCps>
 8003302:	4603      	mov	r3, r0
 8003304:	b29a      	uxth	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 800330c:	e00a      	b.n	8003324 <_DMax_InitData+0x164>
		    break;
 800330e:	bf00      	nop
 8003310:	e008      	b.n	8003324 <_DMax_InitData+0x164>
		    break;
 8003312:	bf00      	nop
 8003314:	e006      	b.n	8003324 <_DMax_InitData+0x164>
			break;
 8003316:	bf00      	nop
 8003318:	e004      	b.n	8003324 <_DMax_InitData+0x164>
		    break;
 800331a:	bf00      	nop
 800331c:	e002      	b.n	8003324 <_DMax_InitData+0x164>
		    break;
 800331e:	bf00      	nop
 8003320:	e000      	b.n	8003324 <_DMax_InitData+0x164>
				break;
 8003322:	bf00      	nop
		/* clip to dmax to min signal snr limit rate*/
	} while (0);
	if (!status)
 8003324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <_DMax_InitData+0x16e>
		status = warning;
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOG_FUNCTION_END(status);
	return status;
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003330:	4618      	mov	r0, r3
 8003332:	3730      	adds	r7, #48	; 0x30
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	080076f0 	.word	0x080076f0

0800333c <_DMax_Compute>:

static int _DMax_Compute(VL6180xDev_t dev, VL6180x_RangeData_t *pRange)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
	int32_t DMax;
	int scaling;
	uint16_t HwLimitAtScale;
	static const int ROMABLE_DATA rtnAmbLowLimit_KCps = 330 * 1000;

	rtnAmbRate = pRange->rtnAmbRate;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	613b      	str	r3, [r7, #16]
	if (rtnAmbRate  < rtnAmbLowLimit_KCps) {
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <_DMax_Compute+0x78>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4293      	cmp	r3, r2
 8003356:	d224      	bcs.n	80033a2 <_DMax_Compute+0x66>
		DMax = _DMax_RawValueAtRateKCps(dev, rtnAmbRate);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fee3 	bl	8003128 <_DMax_RawValueAtRateKCps>
 8003362:	4603      	mov	r3, r0
 8003364:	617b      	str	r3, [r7, #20]
		scaling = _GetUpscale(dev);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7e1b      	ldrb	r3, [r3, #24]
 800336a:	60fb      	str	r3, [r7, #12]
		HwLimitAtScale = UpperLimitLookUP[scaling - 1];
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	3b01      	subs	r3, #1
 8003370:	4a11      	ldr	r2, [pc, #68]	; (80033b8 <_DMax_Compute+0x7c>)
 8003372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003376:	817b      	strh	r3, [r7, #10]

		if (DMax > _DMaxData(ClipSnrLimit)) {
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800337e:	461a      	mov	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	4293      	cmp	r3, r2
 8003384:	dd03      	ble.n	800338e <_DMax_Compute+0x52>
		    DMax = _DMaxData(ClipSnrLimit);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800338c:	617b      	str	r3, [r7, #20]
		}
		if (DMax > HwLimitAtScale) {
 800338e:	897b      	ldrh	r3, [r7, #10]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	429a      	cmp	r2, r3
 8003394:	dd01      	ble.n	800339a <_DMax_Compute+0x5e>
		    DMax = HwLimitAtScale;
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	617b      	str	r3, [r7, #20]
		}
		pRange->DMax = DMax;
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	61da      	str	r2, [r3, #28]
 80033a0:	e002      	b.n	80033a8 <_DMax_Compute+0x6c>
	} else {
		pRange->DMax = 0;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2200      	movs	r2, #0
 80033a6:	61da      	str	r2, [r3, #28]
	}
	return 0;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	080076f4 	.word	0x080076f4
 80033b8:	0800768c 	.word	0x0800768c

080033bc <VL6180x_WrByte>:
#else
#error "invalid I2C_BUFFER_CONFIG "
#endif


int VL6180x_WrByte(VL6180xDev_t dev, uint16_t index, uint8_t data){
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
 80033c8:	4613      	mov	r3, r2
 80033ca:	707b      	strb	r3, [r7, #1]
    DECL_I2C_BUFFER
    VL6180x_I2C_USER_VAR

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
 80033cc:	f107 0308 	add.w	r3, r7, #8
 80033d0:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 80033d2:	887b      	ldrh	r3, [r7, #2]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3301      	adds	r3, #1
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	701a      	strb	r2, [r3, #0]
    buffer[2]=data;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	3302      	adds	r3, #2
 80033ec:	787a      	ldrb	r2, [r7, #1]
 80033ee:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)3);
 80033f0:	2203      	movs	r2, #3
 80033f2:	6979      	ldr	r1, [r7, #20]
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f984 	bl	8003702 <VL6180x_I2CWrite>
 80033fa:	6138      	str	r0, [r7, #16]
    VL6180x_DoneI2CAcces(dev);
    return status;
 80033fc:	693b      	ldr	r3, [r7, #16]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <VL6180x_WrWord>:

int VL6180x_WrWord(VL6180xDev_t dev, uint16_t index, uint16_t data){
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	460b      	mov	r3, r1
 8003410:	807b      	strh	r3, [r7, #2]
 8003412:	4613      	mov	r3, r2
 8003414:	803b      	strh	r3, [r7, #0]
    uint8_t *buffer;
    VL6180x_I2C_USER_VAR

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,4);
 8003416:	f107 0308 	add.w	r3, r7, #8
 800341a:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 800341c:	887b      	ldrh	r3, [r7, #2]
 800341e:	0a1b      	lsrs	r3, r3, #8
 8003420:	b29b      	uxth	r3, r3
 8003422:	b2da      	uxtb	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	3301      	adds	r3, #1
 800342c:	887a      	ldrh	r2, [r7, #2]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>8;
 8003432:	883b      	ldrh	r3, [r7, #0]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	b29a      	uxth	r2, r3
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3302      	adds	r3, #2
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]
    buffer[3]=data&0xFF;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3303      	adds	r3, #3
 8003444:	883a      	ldrh	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)4);
 800344a:	2204      	movs	r2, #4
 800344c:	6979      	ldr	r1, [r7, #20]
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f957 	bl	8003702 <VL6180x_I2CWrite>
 8003454:	6138      	str	r0, [r7, #16]
    VL6180x_DoneI2CAcces(dev);
    return status;
 8003456:	693b      	ldr	r3, [r7, #16]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <VL6180x_WrDWord>:

int VL6180x_WrDWord(VL6180xDev_t dev, uint16_t index, uint32_t data){
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	460b      	mov	r3, r1
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	817b      	strh	r3, [r7, #10]
    int  status;
    uint8_t *buffer;


    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,6);
 800346e:	f107 0310 	add.w	r3, r7, #16
 8003472:	61fb      	str	r3, [r7, #28]
    buffer[0]=index>>8;
 8003474:	897b      	ldrh	r3, [r7, #10]
 8003476:	0a1b      	lsrs	r3, r3, #8
 8003478:	b29b      	uxth	r3, r3
 800347a:	b2da      	uxtb	r2, r3
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	3301      	adds	r3, #1
 8003484:	897a      	ldrh	r2, [r7, #10]
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>24;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	0e1a      	lsrs	r2, r3, #24
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3302      	adds	r3, #2
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]
    buffer[3]=(data>>16)&0xFF;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	0c1a      	lsrs	r2, r3, #16
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3303      	adds	r3, #3
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]
    buffer[4]=(data>>8)&0xFF;;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	0a1a      	lsrs	r2, r3, #8
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3304      	adds	r3, #4
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]
    buffer[5]=data&0xFF;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3305      	adds	r3, #5
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]
    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)6);
 80034b8:	2206      	movs	r2, #6
 80034ba:	69f9      	ldr	r1, [r7, #28]
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f920 	bl	8003702 <VL6180x_I2CWrite>
 80034c2:	61b8      	str	r0, [r7, #24]
    VL6180x_DoneI2CAcces(dev);

    return status;
 80034c4:	69bb      	ldr	r3, [r7, #24]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <VL6180x_UpdateByte>:

int VL6180x_UpdateByte(VL6180xDev_t dev, uint16_t index, uint8_t AndData, uint8_t OrData){
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b086      	sub	sp, #24
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	4608      	mov	r0, r1
 80034d8:	4611      	mov	r1, r2
 80034da:	461a      	mov	r2, r3
 80034dc:	4603      	mov	r3, r0
 80034de:	807b      	strh	r3, [r7, #2]
 80034e0:	460b      	mov	r3, r1
 80034e2:	707b      	strb	r3, [r7, #1]
 80034e4:	4613      	mov	r3, r2
 80034e6:	703b      	strb	r3, [r7, #0]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
 80034e8:	f107 0308 	add.w	r3, r7, #8
 80034ec:	613b      	str	r3, [r7, #16]
    buffer[0]=index>>8;
 80034ee:	887b      	ldrh	r3, [r7, #2]
 80034f0:	0a1b      	lsrs	r3, r3, #8
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	3301      	adds	r3, #1
 80034fe:	887a      	ldrh	r2, [r7, #2]
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *)buffer,(uint8_t)2);
 8003504:	2202      	movs	r2, #2
 8003506:	6939      	ldr	r1, [r7, #16]
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f8fa 	bl	8003702 <VL6180x_I2CWrite>
 800350e:	6178      	str	r0, [r7, #20]
    if( !status ){
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11c      	bne.n	8003550 <VL6180x_UpdateByte+0x82>
        /* read data direct onto buffer */
        status=VL6180x_I2CRead(dev, &buffer[2],1);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	3302      	adds	r3, #2
 800351a:	2201      	movs	r2, #1
 800351c:	4619      	mov	r1, r3
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f931 	bl	8003786 <VL6180x_I2CRead>
 8003524:	6178      	str	r0, [r7, #20]
        if( !status ){
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d111      	bne.n	8003550 <VL6180x_UpdateByte+0x82>
            buffer[2]=(buffer[2]&AndData)|OrData;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	3302      	adds	r3, #2
 8003530:	781a      	ldrb	r2, [r3, #0]
 8003532:	787b      	ldrb	r3, [r7, #1]
 8003534:	4013      	ands	r3, r2
 8003536:	b2d9      	uxtb	r1, r3
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	3302      	adds	r3, #2
 800353c:	783a      	ldrb	r2, [r7, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]
            status=VL6180x_I2CWrite(dev, buffer, (uint8_t)3);
 8003544:	2203      	movs	r2, #3
 8003546:	6939      	ldr	r1, [r7, #16]
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f8da 	bl	8003702 <VL6180x_I2CWrite>
 800354e:	6178      	str	r0, [r7, #20]
        }
    }

    VL6180x_DoneI2CAcces(dev);

    return status;
 8003550:	697b      	ldr	r3, [r7, #20]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <VL6180x_RdByte>:

int VL6180x_RdByte(VL6180xDev_t dev, uint16_t index, uint8_t *data){
 800355a:	b580      	push	{r7, lr}
 800355c:	b088      	sub	sp, #32
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	460b      	mov	r3, r1
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	817b      	strh	r3, [r7, #10]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);//为buffer分配地址
 8003568:	f107 0310 	add.w	r3, r7, #16
 800356c:	61bb      	str	r3, [r7, #24]
    buffer[0]=index>>8;//将寄存器地址高8位存入buffer[0]
 800356e:	897b      	ldrh	r3, [r7, #10]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	b29b      	uxth	r3, r3
 8003574:	b2da      	uxtb	r2, r3
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;//将寄存器地址低8位存入buffer[1]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	3301      	adds	r3, #1
 800357e:	897a      	ldrh	r2, [r7, #10]
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	701a      	strb	r2, [r3, #0]
    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);//向I2C总线发送设备地址及16位寄存器地址
 8003584:	2202      	movs	r2, #2
 8003586:	69b9      	ldr	r1, [r7, #24]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f8ba 	bl	8003702 <VL6180x_I2CWrite>
 800358e:	61f8      	str	r0, [r7, #28]
    if( !status ){
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <VL6180x_RdByte+0x56>
        status=VL6180x_I2CRead(dev, buffer,1);//读取该寄存器中的值，并将其返回到buffer中
 8003596:	2201      	movs	r2, #1
 8003598:	69b9      	ldr	r1, [r7, #24]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f8f3 	bl	8003786 <VL6180x_I2CRead>
 80035a0:	61f8      	str	r0, [r7, #28]
        if( !status ){
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <VL6180x_RdByte+0x56>
            *data = (uint8_t)buffer[0];//将buffer中的值传给data
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	781a      	ldrb	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	701a      	strb	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);

    return status;
 80035b0:	69fb      	ldr	r3, [r7, #28]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <VL6180x_RdWord>:

int VL6180x_RdWord(VL6180xDev_t dev, uint16_t index, uint16_t *data){
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b088      	sub	sp, #32
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	460b      	mov	r3, r1
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	817b      	strh	r3, [r7, #10]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);
 80035c8:	f107 0310 	add.w	r3, r7, #16
 80035cc:	61bb      	str	r3, [r7, #24]
    buffer[0]=index>>8;
 80035ce:	897b      	ldrh	r3, [r7, #10]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	3301      	adds	r3, #1
 80035de:	897a      	ldrh	r2, [r7, #10]
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);
 80035e4:	2202      	movs	r2, #2
 80035e6:	69b9      	ldr	r1, [r7, #24]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f88a 	bl	8003702 <VL6180x_I2CWrite>
 80035ee:	61f8      	str	r0, [r7, #28]
    if( !status){
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d115      	bne.n	8003622 <VL6180x_RdWord+0x68>
        status=VL6180x_I2CRead(dev, buffer,2);
 80035f6:	2202      	movs	r2, #2
 80035f8:	69b9      	ldr	r1, [r7, #24]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f8c3 	bl	8003786 <VL6180x_I2CRead>
 8003600:	61f8      	str	r0, [r7, #28]
        if( !status ){
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10c      	bne.n	8003622 <VL6180x_RdWord+0x68>
            /* VL6180x register are Big endian if cpu is be direct read direct into *data is possible */
            *data=((uint16_t)buffer[0]<<8)|(uint16_t)buffer[1];
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	b21a      	sxth	r2, r3
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	3301      	adds	r3, #1
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	b21b      	sxth	r3, r3
 8003618:	4313      	orrs	r3, r2
 800361a:	b21b      	sxth	r3, r3
 800361c:	b29a      	uxth	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	801a      	strh	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 8003622:	69fb      	ldr	r3, [r7, #28]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <VL6180x_RdDWord>:

int  VL6180x_RdDWord(VL6180xDev_t dev, uint16_t index, uint32_t *data){
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	460b      	mov	r3, r1
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	817b      	strh	r3, [r7, #10]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,4);
 800363a:	f107 0310 	add.w	r3, r7, #16
 800363e:	61bb      	str	r3, [r7, #24]

    buffer[0]=index>>8;
 8003640:	897b      	ldrh	r3, [r7, #10]
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	b29b      	uxth	r3, r3
 8003646:	b2da      	uxtb	r2, r3
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	3301      	adds	r3, #1
 8003650:	897a      	ldrh	r2, [r7, #10]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 8003656:	2202      	movs	r2, #2
 8003658:	69b9      	ldr	r1, [r7, #24]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f851 	bl	8003702 <VL6180x_I2CWrite>
 8003660:	61f8      	str	r0, [r7, #28]
    if( !status ){
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d11b      	bne.n	80036a0 <VL6180x_RdDWord+0x74>
        status=VL6180x_I2CRead(dev, buffer,4);
 8003668:	2204      	movs	r2, #4
 800366a:	69b9      	ldr	r1, [r7, #24]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f88a 	bl	8003786 <VL6180x_I2CRead>
 8003672:	61f8      	str	r0, [r7, #28]
        if( !status ){
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d112      	bne.n	80036a0 <VL6180x_RdDWord+0x74>
            /* VL6180x register are Big endian if cpu is be direct read direct into data is possible */
            *data=((uint32_t)buffer[0]<<24)|((uint32_t)buffer[1]<<16)|((uint32_t)buffer[2]<<8)|((uint32_t)buffer[3]);
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	061a      	lsls	r2, r3, #24
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	3301      	adds	r3, #1
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	041b      	lsls	r3, r3, #16
 8003688:	431a      	orrs	r2, r3
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	3302      	adds	r3, #2
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	4313      	orrs	r3, r2
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	3203      	adds	r2, #3
 8003698:	7812      	ldrb	r2, [r2, #0]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	601a      	str	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 80036a0:	69fb      	ldr	r3, [r7, #28]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <VL6180x_RdMulti>:


int  VL6180x_RdMulti(VL6180xDev_t dev, uint16_t index, uint8_t *data, int nData){
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b088      	sub	sp, #32
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	460b      	mov	r3, r1
 80036b8:	817b      	strh	r3, [r7, #10]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,2);
 80036ba:	f107 0310 	add.w	r3, r7, #16
 80036be:	61bb      	str	r3, [r7, #24]

    buffer[0]=index>>8;
 80036c0:	897b      	ldrh	r3, [r7, #10]
 80036c2:	0a1b      	lsrs	r3, r3, #8
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	3301      	adds	r3, #1
 80036d0:	897a      	ldrh	r2, [r7, #10]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 80036d6:	2202      	movs	r2, #2
 80036d8:	69b9      	ldr	r1, [r7, #24]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f811 	bl	8003702 <VL6180x_I2CWrite>
 80036e0:	61f8      	str	r0, [r7, #28]
    if( !status ){
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d107      	bne.n	80036f8 <VL6180x_RdMulti+0x4e>
        status=VL6180x_I2CRead(dev, data, nData);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f848 	bl	8003786 <VL6180x_I2CRead>
 80036f6:	61f8      	str	r0, [r7, #28]
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 80036f8:	69fb      	ldr	r3, [r7, #28]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <VL6180x_I2CWrite>:
  I2C_Stop();//关闭I2C总线
  return status = 0;
}
#else
int VL6180x_I2CWrite(VL6180xDev_t dev, uint8_t *buff, uint8_t len)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	4613      	mov	r3, r2
 800370e:	71fb      	strb	r3, [r7, #7]
  int status, i;
  I2C_Start();//开启I2C总线
 8003710:	f7fd f9cc 	bl	8000aac <I2C_Start>
  I2C_SendByte(dev->i2c_dev_addr | 0);//发送8位设备地址及LSB的写方向位，实现写功能
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd f9fe 	bl	8000b1c <I2C_SendByte>
  if (I2C_WaitAck())//如果从机没有应答
 8003720:	f7fd fa76 	bl	8000c10 <I2C_WaitAck>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <VL6180x_I2CWrite+0x30>
  {
    I2C_Stop();//关闭I2C总线
 800372a:	f7fd f9df 	bl	8000aec <I2C_Stop>
    return 1;//返回报错标志
 800372e:	2301      	movs	r3, #1
 8003730:	e025      	b.n	800377e <VL6180x_I2CWrite+0x7c>
  }
  for (i = 0; i < len; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	e01b      	b.n	8003770 <VL6180x_I2CWrite+0x6e>
  {
    I2C_SendByte(buff[i]);//发送buff中的各字节
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	4413      	add	r3, r2
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7fd f9eb 	bl	8000b1c <I2C_SendByte>
    if (i == len - 1)//在发送最后一个字节的数据时
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	3b01      	subs	r3, #1
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	429a      	cmp	r2, r3
 800374e:	d109      	bne.n	8003764 <VL6180x_I2CWrite+0x62>
    {
      if (I2C_WaitAck())//等待从机应答
 8003750:	f7fd fa5e 	bl	8000c10 <I2C_WaitAck>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <VL6180x_I2CWrite+0x68>
      {
        I2C_Stop();//关闭I2C总线
 800375a:	f7fd f9c7 	bl	8000aec <I2C_Stop>
        status = 1;//返回报错标志
 800375e:	2301      	movs	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e002      	b.n	800376a <VL6180x_I2CWrite+0x68>
      }
    }
    else
    {
      status = I2C_WaitAck();//返回报错标志
 8003764:	f7fd fa54 	bl	8000c10 <I2C_WaitAck>
 8003768:	6178      	str	r0, [r7, #20]
  for (i = 0; i < len; i++)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	3301      	adds	r3, #1
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	429a      	cmp	r2, r3
 8003776:	dbdf      	blt.n	8003738 <VL6180x_I2CWrite+0x36>
    }
  }
  I2C_Stop();//关闭I2C总线
 8003778:	f7fd f9b8 	bl	8000aec <I2C_Stop>
  return status;
 800377c:	697b      	ldr	r3, [r7, #20]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <VL6180x_I2CRead>:

/* VL6180X底层驱动函数：读 */
int VL6180x_I2CRead(VL6180xDev_t dev, uint8_t *buff, uint8_t len)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	4613      	mov	r3, r2
 8003792:	71fb      	strb	r3, [r7, #7]
  int status, i;
  I2C_Start();//开启I2C总线
 8003794:	f7fd f98a 	bl	8000aac <I2C_Start>
  I2C_SendByte(dev->i2c_dev_addr | 1);//发送8位设备地址及LSB的读方向位，实现读功能
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fd f9ba 	bl	8000b1c <I2C_SendByte>
  I2C_WaitAck();//等待从机应答
 80037a8:	f7fd fa32 	bl	8000c10 <I2C_WaitAck>
  for (i = 0; i < len; i++)
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	e01a      	b.n	80037e8 <VL6180x_I2CRead+0x62>
  {
    if (i == len - 1)//在读取最后一个字节的数据时
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d109      	bne.n	80037d0 <VL6180x_I2CRead+0x4a>
    {
      buff[i] = I2C_ReadByte(0);//读取数据，将其保存于buff[i]，并向从机发送非应答信号，终止数据读取
 80037bc:	2000      	movs	r0, #0
 80037be:	f7fd f9ed 	bl	8000b9c <I2C_ReadByte>
 80037c2:	4601      	mov	r1, r0
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4413      	add	r3, r2
 80037ca:	b2ca      	uxtb	r2, r1
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e008      	b.n	80037e2 <VL6180x_I2CRead+0x5c>
    }
    else
    {
      buff[i] = I2C_ReadByte(1);//读取数据，将其保存于buff[i]，并向从机发送应答信号，继续读取数据
 80037d0:	2001      	movs	r0, #1
 80037d2:	f7fd f9e3 	bl	8000b9c <I2C_ReadByte>
 80037d6:	4601      	mov	r1, r0
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	4413      	add	r3, r2
 80037de:	b2ca      	uxtb	r2, r1
 80037e0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	3301      	adds	r3, #1
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	dbe0      	blt.n	80037b2 <VL6180x_I2CRead+0x2c>
    }
  }
  I2C_Stop();//关闭I2C总线
 80037f0:	f7fd f97c 	bl	8000aec <I2C_Stop>
  return status = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	693b      	ldr	r3, [r7, #16]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003804:	480c      	ldr	r0, [pc, #48]	; (8003838 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003806:	490d      	ldr	r1, [pc, #52]	; (800383c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003808:	4a0d      	ldr	r2, [pc, #52]	; (8003840 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800380a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800380c:	e002      	b.n	8003814 <LoopCopyDataInit>

0800380e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800380e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003812:	3304      	adds	r3, #4

08003814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003818:	d3f9      	bcc.n	800380e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800381a:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800381c:	4c0a      	ldr	r4, [pc, #40]	; (8003848 <LoopFillZerobss+0x22>)
  movs r3, #0
 800381e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003820:	e001      	b.n	8003826 <LoopFillZerobss>

08003822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003824:	3204      	adds	r2, #4

08003826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003828:	d3fb      	bcc.n	8003822 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800382a:	f7fd fea7 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800382e:	f001 f9a7 	bl	8004b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003832:	f7fd fb3d 	bl	8000eb0 <main>
  bx lr
 8003836:	4770      	bx	lr
  ldr r0, =_sdata
 8003838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800383c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003840:	08007adc 	.word	0x08007adc
  ldr r2, =_sbss
 8003844:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003848:	20000f94 	.word	0x20000f94

0800384c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800384c:	e7fe      	b.n	800384c <ADC1_2_IRQHandler>
	...

08003850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003854:	4b08      	ldr	r3, [pc, #32]	; (8003878 <HAL_Init+0x28>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a07      	ldr	r2, [pc, #28]	; (8003878 <HAL_Init+0x28>)
 800385a:	f043 0310 	orr.w	r3, r3, #16
 800385e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003860:	2003      	movs	r0, #3
 8003862:	f000 f92b 	bl	8003abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003866:	200f      	movs	r0, #15
 8003868:	f000 f808 	bl	800387c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800386c:	f7fd fd20 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40022000 	.word	0x40022000

0800387c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003884:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <HAL_InitTick+0x54>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <HAL_InitTick+0x58>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	4619      	mov	r1, r3
 800388e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003892:	fbb3 f3f1 	udiv	r3, r3, r1
 8003896:	fbb2 f3f3 	udiv	r3, r2, r3
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f935 	bl	8003b0a <HAL_SYSTICK_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e00e      	b.n	80038c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b0f      	cmp	r3, #15
 80038ae:	d80a      	bhi.n	80038c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038b0:	2200      	movs	r2, #0
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	f000 f90b 	bl	8003ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038bc:	4a06      	ldr	r2, [pc, #24]	; (80038d8 <HAL_InitTick+0x5c>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e000      	b.n	80038c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000000 	.word	0x20000000
 80038d4:	20000008 	.word	0x20000008
 80038d8:	20000004 	.word	0x20000004

080038dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_IncTick+0x1c>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_IncTick+0x20>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4413      	add	r3, r2
 80038ec:	4a03      	ldr	r2, [pc, #12]	; (80038fc <HAL_IncTick+0x20>)
 80038ee:	6013      	str	r3, [r2, #0]
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	20000008 	.word	0x20000008
 80038fc:	20000f80 	.word	0x20000f80

08003900 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return uwTick;
 8003904:	4b02      	ldr	r3, [pc, #8]	; (8003910 <HAL_GetTick+0x10>)
 8003906:	681b      	ldr	r3, [r3, #0]
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr
 8003910:	20000f80 	.word	0x20000f80

08003914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800391c:	f7ff fff0 	bl	8003900 <HAL_GetTick>
 8003920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d005      	beq.n	800393a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <HAL_Delay+0x44>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800393a:	bf00      	nop
 800393c:	f7ff ffe0 	bl	8003900 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	429a      	cmp	r2, r3
 800394a:	d8f7      	bhi.n	800393c <HAL_Delay+0x28>
  {
  }
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000008 	.word	0x20000008

0800395c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800396c:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <__NVIC_SetPriorityGrouping+0x44>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003978:	4013      	ands	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800398e:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	60d3      	str	r3, [r2, #12]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a8:	4b04      	ldr	r3, [pc, #16]	; (80039bc <__NVIC_GetPriorityGrouping+0x18>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	0a1b      	lsrs	r3, r3, #8
 80039ae:	f003 0307 	and.w	r3, r3, #7
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	6039      	str	r1, [r7, #0]
 80039ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	db0a      	blt.n	80039ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	490c      	ldr	r1, [pc, #48]	; (8003a0c <__NVIC_SetPriority+0x4c>)
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	0112      	lsls	r2, r2, #4
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	440b      	add	r3, r1
 80039e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039e8:	e00a      	b.n	8003a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	4908      	ldr	r1, [pc, #32]	; (8003a10 <__NVIC_SetPriority+0x50>)
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	3b04      	subs	r3, #4
 80039f8:	0112      	lsls	r2, r2, #4
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	440b      	add	r3, r1
 80039fe:	761a      	strb	r2, [r3, #24]
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	e000e100 	.word	0xe000e100
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b089      	sub	sp, #36	; 0x24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f1c3 0307 	rsb	r3, r3, #7
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	bf28      	it	cs
 8003a32:	2304      	movcs	r3, #4
 8003a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d902      	bls.n	8003a44 <NVIC_EncodePriority+0x30>
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	3b03      	subs	r3, #3
 8003a42:	e000      	b.n	8003a46 <NVIC_EncodePriority+0x32>
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a48:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43da      	mvns	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	401a      	ands	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	fa01 f303 	lsl.w	r3, r1, r3
 8003a66:	43d9      	mvns	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a6c:	4313      	orrs	r3, r2
         );
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3724      	adds	r7, #36	; 0x24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a88:	d301      	bcc.n	8003a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e00f      	b.n	8003aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <SysTick_Config+0x40>)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a96:	210f      	movs	r1, #15
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	f7ff ff90 	bl	80039c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <SysTick_Config+0x40>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aa6:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <SysTick_Config+0x40>)
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	e000e010 	.word	0xe000e010

08003abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff49 	bl	800395c <__NVIC_SetPriorityGrouping>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	4603      	mov	r3, r0
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae4:	f7ff ff5e 	bl	80039a4 <__NVIC_GetPriorityGrouping>
 8003ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	6978      	ldr	r0, [r7, #20]
 8003af0:	f7ff ff90 	bl	8003a14 <NVIC_EncodePriority>
 8003af4:	4602      	mov	r2, r0
 8003af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff ff5f 	bl	80039c0 <__NVIC_SetPriority>
}
 8003b02:	bf00      	nop
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff ffb0 	bl	8003a78 <SysTick_Config>
 8003b18:	4603      	mov	r3, r0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b08b      	sub	sp, #44	; 0x2c
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b32:	2300      	movs	r3, #0
 8003b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b36:	e169      	b.n	8003e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b38:	2201      	movs	r2, #1
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	f040 8158 	bne.w	8003e06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4a9a      	ldr	r2, [pc, #616]	; (8003dc4 <HAL_GPIO_Init+0x2a0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d05e      	beq.n	8003c1e <HAL_GPIO_Init+0xfa>
 8003b60:	4a98      	ldr	r2, [pc, #608]	; (8003dc4 <HAL_GPIO_Init+0x2a0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d875      	bhi.n	8003c52 <HAL_GPIO_Init+0x12e>
 8003b66:	4a98      	ldr	r2, [pc, #608]	; (8003dc8 <HAL_GPIO_Init+0x2a4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d058      	beq.n	8003c1e <HAL_GPIO_Init+0xfa>
 8003b6c:	4a96      	ldr	r2, [pc, #600]	; (8003dc8 <HAL_GPIO_Init+0x2a4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d86f      	bhi.n	8003c52 <HAL_GPIO_Init+0x12e>
 8003b72:	4a96      	ldr	r2, [pc, #600]	; (8003dcc <HAL_GPIO_Init+0x2a8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d052      	beq.n	8003c1e <HAL_GPIO_Init+0xfa>
 8003b78:	4a94      	ldr	r2, [pc, #592]	; (8003dcc <HAL_GPIO_Init+0x2a8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d869      	bhi.n	8003c52 <HAL_GPIO_Init+0x12e>
 8003b7e:	4a94      	ldr	r2, [pc, #592]	; (8003dd0 <HAL_GPIO_Init+0x2ac>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d04c      	beq.n	8003c1e <HAL_GPIO_Init+0xfa>
 8003b84:	4a92      	ldr	r2, [pc, #584]	; (8003dd0 <HAL_GPIO_Init+0x2ac>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d863      	bhi.n	8003c52 <HAL_GPIO_Init+0x12e>
 8003b8a:	4a92      	ldr	r2, [pc, #584]	; (8003dd4 <HAL_GPIO_Init+0x2b0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d046      	beq.n	8003c1e <HAL_GPIO_Init+0xfa>
 8003b90:	4a90      	ldr	r2, [pc, #576]	; (8003dd4 <HAL_GPIO_Init+0x2b0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d85d      	bhi.n	8003c52 <HAL_GPIO_Init+0x12e>
 8003b96:	2b12      	cmp	r3, #18
 8003b98:	d82a      	bhi.n	8003bf0 <HAL_GPIO_Init+0xcc>
 8003b9a:	2b12      	cmp	r3, #18
 8003b9c:	d859      	bhi.n	8003c52 <HAL_GPIO_Init+0x12e>
 8003b9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <HAL_GPIO_Init+0x80>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003c1f 	.word	0x08003c1f
 8003ba8:	08003bf9 	.word	0x08003bf9
 8003bac:	08003c0b 	.word	0x08003c0b
 8003bb0:	08003c4d 	.word	0x08003c4d
 8003bb4:	08003c53 	.word	0x08003c53
 8003bb8:	08003c53 	.word	0x08003c53
 8003bbc:	08003c53 	.word	0x08003c53
 8003bc0:	08003c53 	.word	0x08003c53
 8003bc4:	08003c53 	.word	0x08003c53
 8003bc8:	08003c53 	.word	0x08003c53
 8003bcc:	08003c53 	.word	0x08003c53
 8003bd0:	08003c53 	.word	0x08003c53
 8003bd4:	08003c53 	.word	0x08003c53
 8003bd8:	08003c53 	.word	0x08003c53
 8003bdc:	08003c53 	.word	0x08003c53
 8003be0:	08003c53 	.word	0x08003c53
 8003be4:	08003c53 	.word	0x08003c53
 8003be8:	08003c01 	.word	0x08003c01
 8003bec:	08003c15 	.word	0x08003c15
 8003bf0:	4a79      	ldr	r2, [pc, #484]	; (8003dd8 <HAL_GPIO_Init+0x2b4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003bf6:	e02c      	b.n	8003c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	623b      	str	r3, [r7, #32]
          break;
 8003bfe:	e029      	b.n	8003c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	3304      	adds	r3, #4
 8003c06:	623b      	str	r3, [r7, #32]
          break;
 8003c08:	e024      	b.n	8003c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	623b      	str	r3, [r7, #32]
          break;
 8003c12:	e01f      	b.n	8003c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	623b      	str	r3, [r7, #32]
          break;
 8003c1c:	e01a      	b.n	8003c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d102      	bne.n	8003c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c26:	2304      	movs	r3, #4
 8003c28:	623b      	str	r3, [r7, #32]
          break;
 8003c2a:	e013      	b.n	8003c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d105      	bne.n	8003c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c34:	2308      	movs	r3, #8
 8003c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	611a      	str	r2, [r3, #16]
          break;
 8003c3e:	e009      	b.n	8003c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c40:	2308      	movs	r3, #8
 8003c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	615a      	str	r2, [r3, #20]
          break;
 8003c4a:	e003      	b.n	8003c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	623b      	str	r3, [r7, #32]
          break;
 8003c50:	e000      	b.n	8003c54 <HAL_GPIO_Init+0x130>
          break;
 8003c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2bff      	cmp	r3, #255	; 0xff
 8003c58:	d801      	bhi.n	8003c5e <HAL_GPIO_Init+0x13a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	e001      	b.n	8003c62 <HAL_GPIO_Init+0x13e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2bff      	cmp	r3, #255	; 0xff
 8003c68:	d802      	bhi.n	8003c70 <HAL_GPIO_Init+0x14c>
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	e002      	b.n	8003c76 <HAL_GPIO_Init+0x152>
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	3b08      	subs	r3, #8
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	210f      	movs	r1, #15
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	fa01 f303 	lsl.w	r3, r1, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	401a      	ands	r2, r3
 8003c88:	6a39      	ldr	r1, [r7, #32]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	431a      	orrs	r2, r3
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80b1 	beq.w	8003e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ca4:	4b4d      	ldr	r3, [pc, #308]	; (8003ddc <HAL_GPIO_Init+0x2b8>)
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	4a4c      	ldr	r2, [pc, #304]	; (8003ddc <HAL_GPIO_Init+0x2b8>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	6193      	str	r3, [r2, #24]
 8003cb0:	4b4a      	ldr	r3, [pc, #296]	; (8003ddc <HAL_GPIO_Init+0x2b8>)
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003cbc:	4a48      	ldr	r2, [pc, #288]	; (8003de0 <HAL_GPIO_Init+0x2bc>)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	089b      	lsrs	r3, r3, #2
 8003cc2:	3302      	adds	r3, #2
 8003cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	220f      	movs	r2, #15
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a40      	ldr	r2, [pc, #256]	; (8003de4 <HAL_GPIO_Init+0x2c0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d013      	beq.n	8003d10 <HAL_GPIO_Init+0x1ec>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3f      	ldr	r2, [pc, #252]	; (8003de8 <HAL_GPIO_Init+0x2c4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00d      	beq.n	8003d0c <HAL_GPIO_Init+0x1e8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a3e      	ldr	r2, [pc, #248]	; (8003dec <HAL_GPIO_Init+0x2c8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d007      	beq.n	8003d08 <HAL_GPIO_Init+0x1e4>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a3d      	ldr	r2, [pc, #244]	; (8003df0 <HAL_GPIO_Init+0x2cc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d101      	bne.n	8003d04 <HAL_GPIO_Init+0x1e0>
 8003d00:	2303      	movs	r3, #3
 8003d02:	e006      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d04:	2304      	movs	r3, #4
 8003d06:	e004      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e002      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d10:	2300      	movs	r3, #0
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	f002 0203 	and.w	r2, r2, #3
 8003d18:	0092      	lsls	r2, r2, #2
 8003d1a:	4093      	lsls	r3, r2
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d22:	492f      	ldr	r1, [pc, #188]	; (8003de0 <HAL_GPIO_Init+0x2bc>)
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	3302      	adds	r3, #2
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d006      	beq.n	8003d4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d3c:	4b2d      	ldr	r3, [pc, #180]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	492c      	ldr	r1, [pc, #176]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]
 8003d48:	e006      	b.n	8003d58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d4a:	4b2a      	ldr	r3, [pc, #168]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	4928      	ldr	r1, [pc, #160]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d006      	beq.n	8003d72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d64:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	4922      	ldr	r1, [pc, #136]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
 8003d70:	e006      	b.n	8003d80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	491e      	ldr	r1, [pc, #120]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d006      	beq.n	8003d9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	4918      	ldr	r1, [pc, #96]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]
 8003d98:	e006      	b.n	8003da8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d9a:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	4914      	ldr	r1, [pc, #80]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d021      	beq.n	8003df8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003db4:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	490e      	ldr	r1, [pc, #56]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60cb      	str	r3, [r1, #12]
 8003dc0:	e021      	b.n	8003e06 <HAL_GPIO_Init+0x2e2>
 8003dc2:	bf00      	nop
 8003dc4:	10320000 	.word	0x10320000
 8003dc8:	10310000 	.word	0x10310000
 8003dcc:	10220000 	.word	0x10220000
 8003dd0:	10210000 	.word	0x10210000
 8003dd4:	10120000 	.word	0x10120000
 8003dd8:	10110000 	.word	0x10110000
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40010800 	.word	0x40010800
 8003de8:	40010c00 	.word	0x40010c00
 8003dec:	40011000 	.word	0x40011000
 8003df0:	40011400 	.word	0x40011400
 8003df4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_GPIO_Init+0x304>)
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	4909      	ldr	r1, [pc, #36]	; (8003e28 <HAL_GPIO_Init+0x304>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	3301      	adds	r3, #1
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	fa22 f303 	lsr.w	r3, r2, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f47f ae8e 	bne.w	8003b38 <HAL_GPIO_Init+0x14>
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	372c      	adds	r7, #44	; 0x2c
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	40010400 	.word	0x40010400

08003e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	887b      	ldrh	r3, [r7, #2]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
 8003e48:	e001      	b.n	8003e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	460b      	mov	r3, r1
 8003e64:	807b      	strh	r3, [r7, #2]
 8003e66:	4613      	mov	r3, r2
 8003e68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e6a:	787b      	ldrb	r3, [r7, #1]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e70:	887a      	ldrh	r2, [r7, #2]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e76:	e003      	b.n	8003e80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e78:	887b      	ldrh	r3, [r7, #2]
 8003e7a:	041a      	lsls	r2, r3, #16
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	611a      	str	r2, [r3, #16]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e272      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 8087 	beq.w	8003fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003eac:	4b92      	ldr	r3, [pc, #584]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 030c 	and.w	r3, r3, #12
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d00c      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003eb8:	4b8f      	ldr	r3, [pc, #572]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d112      	bne.n	8003eea <HAL_RCC_OscConfig+0x5e>
 8003ec4:	4b8c      	ldr	r3, [pc, #560]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed0:	d10b      	bne.n	8003eea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed2:	4b89      	ldr	r3, [pc, #548]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d06c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x12c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d168      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e24c      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCC_OscConfig+0x76>
 8003ef4:	4b80      	ldr	r3, [pc, #512]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a7f      	ldr	r2, [pc, #508]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e02e      	b.n	8003f60 <HAL_RCC_OscConfig+0xd4>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x98>
 8003f0a:	4b7b      	ldr	r3, [pc, #492]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a7a      	ldr	r2, [pc, #488]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b78      	ldr	r3, [pc, #480]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a77      	ldr	r2, [pc, #476]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e01d      	b.n	8003f60 <HAL_RCC_OscConfig+0xd4>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCC_OscConfig+0xbc>
 8003f2e:	4b72      	ldr	r3, [pc, #456]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a71      	ldr	r2, [pc, #452]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b6f      	ldr	r3, [pc, #444]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a6e      	ldr	r2, [pc, #440]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e00b      	b.n	8003f60 <HAL_RCC_OscConfig+0xd4>
 8003f48:	4b6b      	ldr	r3, [pc, #428]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a6a      	ldr	r2, [pc, #424]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	4b68      	ldr	r3, [pc, #416]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a67      	ldr	r2, [pc, #412]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d013      	beq.n	8003f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7ff fcca 	bl	8003900 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f70:	f7ff fcc6 	bl	8003900 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e200      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0xe4>
 8003f8e:	e014      	b.n	8003fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7ff fcb6 	bl	8003900 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f98:	f7ff fcb2 	bl	8003900 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	; 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e1ec      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003faa:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x10c>
 8003fb6:	e000      	b.n	8003fba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d063      	beq.n	800408e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fc6:	4b4c      	ldr	r3, [pc, #304]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00b      	beq.n	8003fea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fd2:	4b49      	ldr	r3, [pc, #292]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d11c      	bne.n	8004018 <HAL_RCC_OscConfig+0x18c>
 8003fde:	4b46      	ldr	r3, [pc, #280]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d116      	bne.n	8004018 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <HAL_RCC_OscConfig+0x176>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d001      	beq.n	8004002 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e1c0      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004002:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4939      	ldr	r1, [pc, #228]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8004012:	4313      	orrs	r3, r2
 8004014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004016:	e03a      	b.n	800408e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d020      	beq.n	8004062 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004020:	4b36      	ldr	r3, [pc, #216]	; (80040fc <HAL_RCC_OscConfig+0x270>)
 8004022:	2201      	movs	r2, #1
 8004024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004026:	f7ff fc6b 	bl	8003900 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800402e:	f7ff fc67 	bl	8003900 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e1a1      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004040:	4b2d      	ldr	r3, [pc, #180]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f0      	beq.n	800402e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404c:	4b2a      	ldr	r3, [pc, #168]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4927      	ldr	r1, [pc, #156]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 800405c:	4313      	orrs	r3, r2
 800405e:	600b      	str	r3, [r1, #0]
 8004060:	e015      	b.n	800408e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004062:	4b26      	ldr	r3, [pc, #152]	; (80040fc <HAL_RCC_OscConfig+0x270>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7ff fc4a 	bl	8003900 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004070:	f7ff fc46 	bl	8003900 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e180      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004082:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d03a      	beq.n	8004110 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d019      	beq.n	80040d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040a2:	4b17      	ldr	r3, [pc, #92]	; (8004100 <HAL_RCC_OscConfig+0x274>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a8:	f7ff fc2a 	bl	8003900 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b0:	f7ff fc26 	bl	8003900 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e160      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040ce:	2001      	movs	r0, #1
 80040d0:	f000 fad8 	bl	8004684 <RCC_Delay>
 80040d4:	e01c      	b.n	8004110 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <HAL_RCC_OscConfig+0x274>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040dc:	f7ff fc10 	bl	8003900 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e2:	e00f      	b.n	8004104 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e4:	f7ff fc0c 	bl	8003900 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d908      	bls.n	8004104 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e146      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	42420000 	.word	0x42420000
 8004100:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004104:	4b92      	ldr	r3, [pc, #584]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e9      	bne.n	80040e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80a6 	beq.w	800426a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411e:	2300      	movs	r3, #0
 8004120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004122:	4b8b      	ldr	r3, [pc, #556]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10d      	bne.n	800414a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412e:	4b88      	ldr	r3, [pc, #544]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	4a87      	ldr	r2, [pc, #540]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 8004134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004138:	61d3      	str	r3, [r2, #28]
 800413a:	4b85      	ldr	r3, [pc, #532]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004146:	2301      	movs	r3, #1
 8004148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414a:	4b82      	ldr	r3, [pc, #520]	; (8004354 <HAL_RCC_OscConfig+0x4c8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d118      	bne.n	8004188 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004156:	4b7f      	ldr	r3, [pc, #508]	; (8004354 <HAL_RCC_OscConfig+0x4c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a7e      	ldr	r2, [pc, #504]	; (8004354 <HAL_RCC_OscConfig+0x4c8>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004162:	f7ff fbcd 	bl	8003900 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800416a:	f7ff fbc9 	bl	8003900 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b64      	cmp	r3, #100	; 0x64
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e103      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417c:	4b75      	ldr	r3, [pc, #468]	; (8004354 <HAL_RCC_OscConfig+0x4c8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d106      	bne.n	800419e <HAL_RCC_OscConfig+0x312>
 8004190:	4b6f      	ldr	r3, [pc, #444]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	4a6e      	ldr	r2, [pc, #440]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	6213      	str	r3, [r2, #32]
 800419c:	e02d      	b.n	80041fa <HAL_RCC_OscConfig+0x36e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCC_OscConfig+0x334>
 80041a6:	4b6a      	ldr	r3, [pc, #424]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	4a69      	ldr	r2, [pc, #420]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	6213      	str	r3, [r2, #32]
 80041b2:	4b67      	ldr	r3, [pc, #412]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	4a66      	ldr	r2, [pc, #408]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	f023 0304 	bic.w	r3, r3, #4
 80041bc:	6213      	str	r3, [r2, #32]
 80041be:	e01c      	b.n	80041fa <HAL_RCC_OscConfig+0x36e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	2b05      	cmp	r3, #5
 80041c6:	d10c      	bne.n	80041e2 <HAL_RCC_OscConfig+0x356>
 80041c8:	4b61      	ldr	r3, [pc, #388]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	4a60      	ldr	r2, [pc, #384]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80041ce:	f043 0304 	orr.w	r3, r3, #4
 80041d2:	6213      	str	r3, [r2, #32]
 80041d4:	4b5e      	ldr	r3, [pc, #376]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	4a5d      	ldr	r2, [pc, #372]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6213      	str	r3, [r2, #32]
 80041e0:	e00b      	b.n	80041fa <HAL_RCC_OscConfig+0x36e>
 80041e2:	4b5b      	ldr	r3, [pc, #364]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	4a5a      	ldr	r2, [pc, #360]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	6213      	str	r3, [r2, #32]
 80041ee:	4b58      	ldr	r3, [pc, #352]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	4a57      	ldr	r2, [pc, #348]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80041f4:	f023 0304 	bic.w	r3, r3, #4
 80041f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d015      	beq.n	800422e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004202:	f7ff fb7d 	bl	8003900 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004208:	e00a      	b.n	8004220 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7ff fb79 	bl	8003900 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	; 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e0b1      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004220:	4b4b      	ldr	r3, [pc, #300]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0ee      	beq.n	800420a <HAL_RCC_OscConfig+0x37e>
 800422c:	e014      	b.n	8004258 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422e:	f7ff fb67 	bl	8003900 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004234:	e00a      	b.n	800424c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7ff fb63 	bl	8003900 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	; 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e09b      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800424c:	4b40      	ldr	r3, [pc, #256]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1ee      	bne.n	8004236 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d105      	bne.n	800426a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800425e:	4b3c      	ldr	r3, [pc, #240]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	4a3b      	ldr	r2, [pc, #236]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 8004264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004268:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 8087 	beq.w	8004382 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004274:	4b36      	ldr	r3, [pc, #216]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 030c 	and.w	r3, r3, #12
 800427c:	2b08      	cmp	r3, #8
 800427e:	d061      	beq.n	8004344 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d146      	bne.n	8004316 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004288:	4b33      	ldr	r3, [pc, #204]	; (8004358 <HAL_RCC_OscConfig+0x4cc>)
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428e:	f7ff fb37 	bl	8003900 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004296:	f7ff fb33 	bl	8003900 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e06d      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042a8:	4b29      	ldr	r3, [pc, #164]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f0      	bne.n	8004296 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042bc:	d108      	bne.n	80042d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	4921      	ldr	r1, [pc, #132]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d0:	4b1f      	ldr	r3, [pc, #124]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a19      	ldr	r1, [r3, #32]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	430b      	orrs	r3, r1
 80042e2:	491b      	ldr	r1, [pc, #108]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCC_OscConfig+0x4cc>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ee:	f7ff fb07 	bl	8003900 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f6:	f7ff fb03 	bl	8003900 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e03d      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004308:	4b11      	ldr	r3, [pc, #68]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x46a>
 8004314:	e035      	b.n	8004382 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004316:	4b10      	ldr	r3, [pc, #64]	; (8004358 <HAL_RCC_OscConfig+0x4cc>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7ff faf0 	bl	8003900 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004324:	f7ff faec 	bl	8003900 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e026      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_RCC_OscConfig+0x4c4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x498>
 8004342:	e01e      	b.n	8004382 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e019      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
 8004350:	40021000 	.word	0x40021000
 8004354:	40007000 	.word	0x40007000
 8004358:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800435c:	4b0b      	ldr	r3, [pc, #44]	; (800438c <HAL_RCC_OscConfig+0x500>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	429a      	cmp	r2, r3
 800436e:	d106      	bne.n	800437e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d001      	beq.n	8004382 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40021000 	.word	0x40021000

08004390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0d0      	b.n	8004546 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a4:	4b6a      	ldr	r3, [pc, #424]	; (8004550 <HAL_RCC_ClockConfig+0x1c0>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d910      	bls.n	80043d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b67      	ldr	r3, [pc, #412]	; (8004550 <HAL_RCC_ClockConfig+0x1c0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 0207 	bic.w	r2, r3, #7
 80043ba:	4965      	ldr	r1, [pc, #404]	; (8004550 <HAL_RCC_ClockConfig+0x1c0>)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b63      	ldr	r3, [pc, #396]	; (8004550 <HAL_RCC_ClockConfig+0x1c0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0b8      	b.n	8004546 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d020      	beq.n	8004422 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043ec:	4b59      	ldr	r3, [pc, #356]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4a58      	ldr	r2, [pc, #352]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004404:	4b53      	ldr	r3, [pc, #332]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4a52      	ldr	r2, [pc, #328]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 800440a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800440e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004410:	4b50      	ldr	r3, [pc, #320]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	494d      	ldr	r1, [pc, #308]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	4313      	orrs	r3, r2
 8004420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d040      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d107      	bne.n	8004446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004436:	4b47      	ldr	r3, [pc, #284]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d115      	bne.n	800446e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e07f      	b.n	8004546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d107      	bne.n	800445e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444e:	4b41      	ldr	r3, [pc, #260]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e073      	b.n	8004546 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445e:	4b3d      	ldr	r3, [pc, #244]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e06b      	b.n	8004546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800446e:	4b39      	ldr	r3, [pc, #228]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f023 0203 	bic.w	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4936      	ldr	r1, [pc, #216]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004480:	f7ff fa3e 	bl	8003900 <HAL_GetTick>
 8004484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004486:	e00a      	b.n	800449e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004488:	f7ff fa3a 	bl	8003900 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	; 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e053      	b.n	8004546 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	4b2d      	ldr	r3, [pc, #180]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 020c 	and.w	r2, r3, #12
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d1eb      	bne.n	8004488 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044b0:	4b27      	ldr	r3, [pc, #156]	; (8004550 <HAL_RCC_ClockConfig+0x1c0>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d210      	bcs.n	80044e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b24      	ldr	r3, [pc, #144]	; (8004550 <HAL_RCC_ClockConfig+0x1c0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 0207 	bic.w	r2, r3, #7
 80044c6:	4922      	ldr	r1, [pc, #136]	; (8004550 <HAL_RCC_ClockConfig+0x1c0>)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ce:	4b20      	ldr	r3, [pc, #128]	; (8004550 <HAL_RCC_ClockConfig+0x1c0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e032      	b.n	8004546 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ec:	4b19      	ldr	r3, [pc, #100]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4916      	ldr	r1, [pc, #88]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800450a:	4b12      	ldr	r3, [pc, #72]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	490e      	ldr	r1, [pc, #56]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 800451a:	4313      	orrs	r3, r2
 800451c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800451e:	f000 f821 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 8004522:	4602      	mov	r2, r0
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	490a      	ldr	r1, [pc, #40]	; (8004558 <HAL_RCC_ClockConfig+0x1c8>)
 8004530:	5ccb      	ldrb	r3, [r1, r3]
 8004532:	fa22 f303 	lsr.w	r3, r2, r3
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <HAL_RCC_ClockConfig+0x1cc>)
 8004538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800453a:	4b09      	ldr	r3, [pc, #36]	; (8004560 <HAL_RCC_ClockConfig+0x1d0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff f99c 	bl	800387c <HAL_InitTick>

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40022000 	.word	0x40022000
 8004554:	40021000 	.word	0x40021000
 8004558:	0800766c 	.word	0x0800766c
 800455c:	20000000 	.word	0x20000000
 8004560:	20000004 	.word	0x20000004

08004564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004564:	b490      	push	{r4, r7}
 8004566:	b08a      	sub	sp, #40	; 0x28
 8004568:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800456a:	4b29      	ldr	r3, [pc, #164]	; (8004610 <HAL_RCC_GetSysClockFreq+0xac>)
 800456c:	1d3c      	adds	r4, r7, #4
 800456e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004574:	f240 2301 	movw	r3, #513	; 0x201
 8004578:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	2300      	movs	r3, #0
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800458e:	4b21      	ldr	r3, [pc, #132]	; (8004614 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b04      	cmp	r3, #4
 800459c:	d002      	beq.n	80045a4 <HAL_RCC_GetSysClockFreq+0x40>
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d003      	beq.n	80045aa <HAL_RCC_GetSysClockFreq+0x46>
 80045a2:	e02b      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045a4:	4b1c      	ldr	r3, [pc, #112]	; (8004618 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045a6:	623b      	str	r3, [r7, #32]
      break;
 80045a8:	e02b      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	0c9b      	lsrs	r3, r3, #18
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	3328      	adds	r3, #40	; 0x28
 80045b4:	443b      	add	r3, r7
 80045b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d012      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045c6:	4b13      	ldr	r3, [pc, #76]	; (8004614 <HAL_RCC_GetSysClockFreq+0xb0>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	0c5b      	lsrs	r3, r3, #17
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	3328      	adds	r3, #40	; 0x28
 80045d2:	443b      	add	r3, r7
 80045d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	4a0e      	ldr	r2, [pc, #56]	; (8004618 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045de:	fb03 f202 	mul.w	r2, r3, r2
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	e004      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	4a0b      	ldr	r2, [pc, #44]	; (800461c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f0:	fb02 f303 	mul.w	r3, r2, r3
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	623b      	str	r3, [r7, #32]
      break;
 80045fa:	e002      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045fe:	623b      	str	r3, [r7, #32]
      break;
 8004600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004602:	6a3b      	ldr	r3, [r7, #32]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3728      	adds	r7, #40	; 0x28
 8004608:	46bd      	mov	sp, r7
 800460a:	bc90      	pop	{r4, r7}
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	0800765c 	.word	0x0800765c
 8004614:	40021000 	.word	0x40021000
 8004618:	007a1200 	.word	0x007a1200
 800461c:	003d0900 	.word	0x003d0900

08004620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004624:	4b02      	ldr	r3, [pc, #8]	; (8004630 <HAL_RCC_GetHCLKFreq+0x10>)
 8004626:	681b      	ldr	r3, [r3, #0]
}
 8004628:	4618      	mov	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr
 8004630:	20000000 	.word	0x20000000

08004634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004638:	f7ff fff2 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	4b05      	ldr	r3, [pc, #20]	; (8004654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4903      	ldr	r1, [pc, #12]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	0800767c 	.word	0x0800767c

0800465c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004660:	f7ff ffde 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	0adb      	lsrs	r3, r3, #11
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4903      	ldr	r1, [pc, #12]	; (8004680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40021000 	.word	0x40021000
 8004680:	0800767c 	.word	0x0800767c

08004684 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <RCC_Delay+0x34>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <RCC_Delay+0x38>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	0a5b      	lsrs	r3, r3, #9
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046a0:	bf00      	nop
  }
  while (Delay --);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1e5a      	subs	r2, r3, #1
 80046a6:	60fa      	str	r2, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f9      	bne.n	80046a0 <RCC_Delay+0x1c>
}
 80046ac:	bf00      	nop
 80046ae:	bf00      	nop
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	20000000 	.word	0x20000000
 80046bc:	10624dd3 	.word	0x10624dd3

080046c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e03f      	b.n	8004752 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fc fe14 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2224      	movs	r2, #36	; 0x24
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f9a7 	bl	8004a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b08a      	sub	sp, #40	; 0x28
 800475e:	af02      	add	r7, sp, #8
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b20      	cmp	r3, #32
 8004778:	d17c      	bne.n	8004874 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_UART_Transmit+0x2c>
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e075      	b.n	8004876 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_UART_Transmit+0x3e>
 8004794:	2302      	movs	r3, #2
 8004796:	e06e      	b.n	8004876 <HAL_UART_Transmit+0x11c>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2221      	movs	r2, #33	; 0x21
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ae:	f7ff f8a7 	bl	8003900 <HAL_GetTick>
 80047b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	88fa      	ldrh	r2, [r7, #6]
 80047b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c8:	d108      	bne.n	80047dc <HAL_UART_Transmit+0x82>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	e003      	b.n	80047e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047ec:	e02a      	b.n	8004844 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2200      	movs	r2, #0
 80047f6:	2180      	movs	r1, #128	; 0x80
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f8e2 	bl	80049c2 <UART_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e036      	b.n	8004876 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800481c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	3302      	adds	r3, #2
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	e007      	b.n	8004836 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	3301      	adds	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1cf      	bne.n	80047ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2200      	movs	r2, #0
 8004856:	2140      	movs	r1, #64	; 0x40
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f8b2 	bl	80049c2 <UART_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e006      	b.n	8004876 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004874:	2302      	movs	r3, #2
  }
}
 8004876:	4618      	mov	r0, r3
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b08a      	sub	sp, #40	; 0x28
 8004882:	af02      	add	r7, sp, #8
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b20      	cmp	r3, #32
 800489c:	f040 808c 	bne.w	80049b8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_UART_Receive+0x2e>
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e084      	b.n	80049ba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d101      	bne.n	80048be <HAL_UART_Receive+0x40>
 80048ba:	2302      	movs	r3, #2
 80048bc:	e07d      	b.n	80049ba <HAL_UART_Receive+0x13c>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2222      	movs	r2, #34	; 0x22
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048da:	f7ff f811 	bl	8003900 <HAL_GetTick>
 80048de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	88fa      	ldrh	r2, [r7, #6]
 80048e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	88fa      	ldrh	r2, [r7, #6]
 80048ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f4:	d108      	bne.n	8004908 <HAL_UART_Receive+0x8a>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d104      	bne.n	8004908 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	e003      	b.n	8004910 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800490c:	2300      	movs	r3, #0
 800490e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004918:	e043      	b.n	80049a2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2200      	movs	r2, #0
 8004922:	2120      	movs	r1, #32
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f84c 	bl	80049c2 <UART_WaitOnFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e042      	b.n	80049ba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10c      	bne.n	8004954 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	b29b      	uxth	r3, r3
 8004942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004946:	b29a      	uxth	r2, r3
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	3302      	adds	r3, #2
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	e01f      	b.n	8004994 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495c:	d007      	beq.n	800496e <HAL_UART_Receive+0xf0>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10a      	bne.n	800497c <HAL_UART_Receive+0xfe>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	b2da      	uxtb	r2, r3
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	e008      	b.n	800498e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004988:	b2da      	uxtb	r2, r3
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3301      	adds	r3, #1
 8004992:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1b6      	bne.n	800491a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	603b      	str	r3, [r7, #0]
 80049ce:	4613      	mov	r3, r2
 80049d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d2:	e02c      	b.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049da:	d028      	beq.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d007      	beq.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80049e2:	f7fe ff8d 	bl	8003900 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d21d      	bcs.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a00:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695a      	ldr	r2, [r3, #20]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0201 	bic.w	r2, r2, #1
 8004a10:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e00f      	b.n	8004a4e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4013      	ands	r3, r2
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	bf0c      	ite	eq
 8004a3e:	2301      	moveq	r3, #1
 8004a40:	2300      	movne	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d0c3      	beq.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a92:	f023 030c 	bic.w	r3, r3, #12
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2c      	ldr	r2, [pc, #176]	; (8004b6c <UART_SetConfig+0x114>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d103      	bne.n	8004ac8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ac0:	f7ff fdcc 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	e002      	b.n	8004ace <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ac8:	f7ff fdb4 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8004acc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009a      	lsls	r2, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	4a22      	ldr	r2, [pc, #136]	; (8004b70 <UART_SetConfig+0x118>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	0119      	lsls	r1, r3, #4
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	009a      	lsls	r2, r3, #2
 8004af8:	441a      	add	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b04:	4b1a      	ldr	r3, [pc, #104]	; (8004b70 <UART_SetConfig+0x118>)
 8004b06:	fba3 0302 	umull	r0, r3, r3, r2
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	2064      	movs	r0, #100	; 0x64
 8004b0e:	fb00 f303 	mul.w	r3, r0, r3
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	3332      	adds	r3, #50	; 0x32
 8004b18:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <UART_SetConfig+0x118>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b24:	4419      	add	r1, r3
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009a      	lsls	r2, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <UART_SetConfig+0x118>)
 8004b3e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	2064      	movs	r0, #100	; 0x64
 8004b46:	fb00 f303 	mul.w	r3, r0, r3
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	3332      	adds	r3, #50	; 0x32
 8004b50:	4a07      	ldr	r2, [pc, #28]	; (8004b70 <UART_SetConfig+0x118>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	f003 020f 	and.w	r2, r3, #15
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	440a      	add	r2, r1
 8004b62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40013800 	.word	0x40013800
 8004b70:	51eb851f 	.word	0x51eb851f

08004b74 <__errno>:
 8004b74:	4b01      	ldr	r3, [pc, #4]	; (8004b7c <__errno+0x8>)
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	2000000c 	.word	0x2000000c

08004b80 <__libc_init_array>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	2600      	movs	r6, #0
 8004b84:	4d0c      	ldr	r5, [pc, #48]	; (8004bb8 <__libc_init_array+0x38>)
 8004b86:	4c0d      	ldr	r4, [pc, #52]	; (8004bbc <__libc_init_array+0x3c>)
 8004b88:	1b64      	subs	r4, r4, r5
 8004b8a:	10a4      	asrs	r4, r4, #2
 8004b8c:	42a6      	cmp	r6, r4
 8004b8e:	d109      	bne.n	8004ba4 <__libc_init_array+0x24>
 8004b90:	f002 fd46 	bl	8007620 <_init>
 8004b94:	2600      	movs	r6, #0
 8004b96:	4d0a      	ldr	r5, [pc, #40]	; (8004bc0 <__libc_init_array+0x40>)
 8004b98:	4c0a      	ldr	r4, [pc, #40]	; (8004bc4 <__libc_init_array+0x44>)
 8004b9a:	1b64      	subs	r4, r4, r5
 8004b9c:	10a4      	asrs	r4, r4, #2
 8004b9e:	42a6      	cmp	r6, r4
 8004ba0:	d105      	bne.n	8004bae <__libc_init_array+0x2e>
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba8:	4798      	blx	r3
 8004baa:	3601      	adds	r6, #1
 8004bac:	e7ee      	b.n	8004b8c <__libc_init_array+0xc>
 8004bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb2:	4798      	blx	r3
 8004bb4:	3601      	adds	r6, #1
 8004bb6:	e7f2      	b.n	8004b9e <__libc_init_array+0x1e>
 8004bb8:	08007ad4 	.word	0x08007ad4
 8004bbc:	08007ad4 	.word	0x08007ad4
 8004bc0:	08007ad4 	.word	0x08007ad4
 8004bc4:	08007ad8 	.word	0x08007ad8

08004bc8 <memset>:
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4402      	add	r2, r0
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d100      	bne.n	8004bd2 <memset+0xa>
 8004bd0:	4770      	bx	lr
 8004bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd6:	e7f9      	b.n	8004bcc <memset+0x4>

08004bd8 <__cvt>:
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bde:	461f      	mov	r7, r3
 8004be0:	bfbb      	ittet	lt
 8004be2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004be6:	461f      	movlt	r7, r3
 8004be8:	2300      	movge	r3, #0
 8004bea:	232d      	movlt	r3, #45	; 0x2d
 8004bec:	b088      	sub	sp, #32
 8004bee:	4614      	mov	r4, r2
 8004bf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004bf2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004bf4:	7013      	strb	r3, [r2, #0]
 8004bf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004bf8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004bfc:	f023 0820 	bic.w	r8, r3, #32
 8004c00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c04:	d005      	beq.n	8004c12 <__cvt+0x3a>
 8004c06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c0a:	d100      	bne.n	8004c0e <__cvt+0x36>
 8004c0c:	3501      	adds	r5, #1
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e000      	b.n	8004c14 <__cvt+0x3c>
 8004c12:	2303      	movs	r3, #3
 8004c14:	aa07      	add	r2, sp, #28
 8004c16:	9204      	str	r2, [sp, #16]
 8004c18:	aa06      	add	r2, sp, #24
 8004c1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004c1e:	e9cd 3500 	strd	r3, r5, [sp]
 8004c22:	4622      	mov	r2, r4
 8004c24:	463b      	mov	r3, r7
 8004c26:	f000 fcdb 	bl	80055e0 <_dtoa_r>
 8004c2a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c2e:	4606      	mov	r6, r0
 8004c30:	d102      	bne.n	8004c38 <__cvt+0x60>
 8004c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c34:	07db      	lsls	r3, r3, #31
 8004c36:	d522      	bpl.n	8004c7e <__cvt+0xa6>
 8004c38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c3c:	eb06 0905 	add.w	r9, r6, r5
 8004c40:	d110      	bne.n	8004c64 <__cvt+0x8c>
 8004c42:	7833      	ldrb	r3, [r6, #0]
 8004c44:	2b30      	cmp	r3, #48	; 0x30
 8004c46:	d10a      	bne.n	8004c5e <__cvt+0x86>
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	4639      	mov	r1, r7
 8004c50:	f7fb feaa 	bl	80009a8 <__aeabi_dcmpeq>
 8004c54:	b918      	cbnz	r0, 8004c5e <__cvt+0x86>
 8004c56:	f1c5 0501 	rsb	r5, r5, #1
 8004c5a:	f8ca 5000 	str.w	r5, [sl]
 8004c5e:	f8da 3000 	ldr.w	r3, [sl]
 8004c62:	4499      	add	r9, r3
 8004c64:	2200      	movs	r2, #0
 8004c66:	2300      	movs	r3, #0
 8004c68:	4620      	mov	r0, r4
 8004c6a:	4639      	mov	r1, r7
 8004c6c:	f7fb fe9c 	bl	80009a8 <__aeabi_dcmpeq>
 8004c70:	b108      	cbz	r0, 8004c76 <__cvt+0x9e>
 8004c72:	f8cd 901c 	str.w	r9, [sp, #28]
 8004c76:	2230      	movs	r2, #48	; 0x30
 8004c78:	9b07      	ldr	r3, [sp, #28]
 8004c7a:	454b      	cmp	r3, r9
 8004c7c:	d307      	bcc.n	8004c8e <__cvt+0xb6>
 8004c7e:	4630      	mov	r0, r6
 8004c80:	9b07      	ldr	r3, [sp, #28]
 8004c82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c84:	1b9b      	subs	r3, r3, r6
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	b008      	add	sp, #32
 8004c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8e:	1c59      	adds	r1, r3, #1
 8004c90:	9107      	str	r1, [sp, #28]
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e7f0      	b.n	8004c78 <__cvt+0xa0>

08004c96 <__exponent>:
 8004c96:	4603      	mov	r3, r0
 8004c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c9a:	2900      	cmp	r1, #0
 8004c9c:	f803 2b02 	strb.w	r2, [r3], #2
 8004ca0:	bfb6      	itet	lt
 8004ca2:	222d      	movlt	r2, #45	; 0x2d
 8004ca4:	222b      	movge	r2, #43	; 0x2b
 8004ca6:	4249      	neglt	r1, r1
 8004ca8:	2909      	cmp	r1, #9
 8004caa:	7042      	strb	r2, [r0, #1]
 8004cac:	dd2b      	ble.n	8004d06 <__exponent+0x70>
 8004cae:	f10d 0407 	add.w	r4, sp, #7
 8004cb2:	46a4      	mov	ip, r4
 8004cb4:	270a      	movs	r7, #10
 8004cb6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004cba:	460a      	mov	r2, r1
 8004cbc:	46a6      	mov	lr, r4
 8004cbe:	fb07 1516 	mls	r5, r7, r6, r1
 8004cc2:	2a63      	cmp	r2, #99	; 0x63
 8004cc4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004cc8:	4631      	mov	r1, r6
 8004cca:	f104 34ff 	add.w	r4, r4, #4294967295
 8004cce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004cd2:	dcf0      	bgt.n	8004cb6 <__exponent+0x20>
 8004cd4:	3130      	adds	r1, #48	; 0x30
 8004cd6:	f1ae 0502 	sub.w	r5, lr, #2
 8004cda:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004cde:	4629      	mov	r1, r5
 8004ce0:	1c44      	adds	r4, r0, #1
 8004ce2:	4561      	cmp	r1, ip
 8004ce4:	d30a      	bcc.n	8004cfc <__exponent+0x66>
 8004ce6:	f10d 0209 	add.w	r2, sp, #9
 8004cea:	eba2 020e 	sub.w	r2, r2, lr
 8004cee:	4565      	cmp	r5, ip
 8004cf0:	bf88      	it	hi
 8004cf2:	2200      	movhi	r2, #0
 8004cf4:	4413      	add	r3, r2
 8004cf6:	1a18      	subs	r0, r3, r0
 8004cf8:	b003      	add	sp, #12
 8004cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d00:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d04:	e7ed      	b.n	8004ce2 <__exponent+0x4c>
 8004d06:	2330      	movs	r3, #48	; 0x30
 8004d08:	3130      	adds	r1, #48	; 0x30
 8004d0a:	7083      	strb	r3, [r0, #2]
 8004d0c:	70c1      	strb	r1, [r0, #3]
 8004d0e:	1d03      	adds	r3, r0, #4
 8004d10:	e7f1      	b.n	8004cf6 <__exponent+0x60>
	...

08004d14 <_printf_float>:
 8004d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d18:	b091      	sub	sp, #68	; 0x44
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004d20:	4616      	mov	r6, r2
 8004d22:	461f      	mov	r7, r3
 8004d24:	4605      	mov	r5, r0
 8004d26:	f001 fb3f 	bl	80063a8 <_localeconv_r>
 8004d2a:	6803      	ldr	r3, [r0, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d30:	f7fb fa0e 	bl	8000150 <strlen>
 8004d34:	2300      	movs	r3, #0
 8004d36:	930e      	str	r3, [sp, #56]	; 0x38
 8004d38:	f8d8 3000 	ldr.w	r3, [r8]
 8004d3c:	900a      	str	r0, [sp, #40]	; 0x28
 8004d3e:	3307      	adds	r3, #7
 8004d40:	f023 0307 	bic.w	r3, r3, #7
 8004d44:	f103 0208 	add.w	r2, r3, #8
 8004d48:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004d4c:	f8d4 b000 	ldr.w	fp, [r4]
 8004d50:	f8c8 2000 	str.w	r2, [r8]
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d5c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004d60:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004d64:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d66:	f04f 32ff 	mov.w	r2, #4294967295
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	4b9c      	ldr	r3, [pc, #624]	; (8004fe0 <_printf_float+0x2cc>)
 8004d6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d70:	f7fb fe4c 	bl	8000a0c <__aeabi_dcmpun>
 8004d74:	bb70      	cbnz	r0, 8004dd4 <_printf_float+0xc0>
 8004d76:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	4b98      	ldr	r3, [pc, #608]	; (8004fe0 <_printf_float+0x2cc>)
 8004d7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d80:	f7fb fe26 	bl	80009d0 <__aeabi_dcmple>
 8004d84:	bb30      	cbnz	r0, 8004dd4 <_printf_float+0xc0>
 8004d86:	2200      	movs	r2, #0
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4640      	mov	r0, r8
 8004d8c:	4651      	mov	r1, sl
 8004d8e:	f7fb fe15 	bl	80009bc <__aeabi_dcmplt>
 8004d92:	b110      	cbz	r0, 8004d9a <_printf_float+0x86>
 8004d94:	232d      	movs	r3, #45	; 0x2d
 8004d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9a:	4b92      	ldr	r3, [pc, #584]	; (8004fe4 <_printf_float+0x2d0>)
 8004d9c:	4892      	ldr	r0, [pc, #584]	; (8004fe8 <_printf_float+0x2d4>)
 8004d9e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004da2:	bf94      	ite	ls
 8004da4:	4698      	movls	r8, r3
 8004da6:	4680      	movhi	r8, r0
 8004da8:	2303      	movs	r3, #3
 8004daa:	f04f 0a00 	mov.w	sl, #0
 8004dae:	6123      	str	r3, [r4, #16]
 8004db0:	f02b 0304 	bic.w	r3, fp, #4
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	4633      	mov	r3, r6
 8004db8:	4621      	mov	r1, r4
 8004dba:	4628      	mov	r0, r5
 8004dbc:	9700      	str	r7, [sp, #0]
 8004dbe:	aa0f      	add	r2, sp, #60	; 0x3c
 8004dc0:	f000 f9d4 	bl	800516c <_printf_common>
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	f040 8090 	bne.w	8004eea <_printf_float+0x1d6>
 8004dca:	f04f 30ff 	mov.w	r0, #4294967295
 8004dce:	b011      	add	sp, #68	; 0x44
 8004dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	4653      	mov	r3, sl
 8004dd8:	4640      	mov	r0, r8
 8004dda:	4651      	mov	r1, sl
 8004ddc:	f7fb fe16 	bl	8000a0c <__aeabi_dcmpun>
 8004de0:	b148      	cbz	r0, 8004df6 <_printf_float+0xe2>
 8004de2:	f1ba 0f00 	cmp.w	sl, #0
 8004de6:	bfb8      	it	lt
 8004de8:	232d      	movlt	r3, #45	; 0x2d
 8004dea:	4880      	ldr	r0, [pc, #512]	; (8004fec <_printf_float+0x2d8>)
 8004dec:	bfb8      	it	lt
 8004dee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004df2:	4b7f      	ldr	r3, [pc, #508]	; (8004ff0 <_printf_float+0x2dc>)
 8004df4:	e7d3      	b.n	8004d9e <_printf_float+0x8a>
 8004df6:	6863      	ldr	r3, [r4, #4]
 8004df8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	d142      	bne.n	8004e86 <_printf_float+0x172>
 8004e00:	2306      	movs	r3, #6
 8004e02:	6063      	str	r3, [r4, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	9206      	str	r2, [sp, #24]
 8004e08:	aa0e      	add	r2, sp, #56	; 0x38
 8004e0a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004e0e:	aa0d      	add	r2, sp, #52	; 0x34
 8004e10:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004e14:	9203      	str	r2, [sp, #12]
 8004e16:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004e1a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004e1e:	6023      	str	r3, [r4, #0]
 8004e20:	6863      	ldr	r3, [r4, #4]
 8004e22:	4642      	mov	r2, r8
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	4628      	mov	r0, r5
 8004e28:	4653      	mov	r3, sl
 8004e2a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004e2c:	f7ff fed4 	bl	8004bd8 <__cvt>
 8004e30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e32:	4680      	mov	r8, r0
 8004e34:	2947      	cmp	r1, #71	; 0x47
 8004e36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e38:	d108      	bne.n	8004e4c <_printf_float+0x138>
 8004e3a:	1cc8      	adds	r0, r1, #3
 8004e3c:	db02      	blt.n	8004e44 <_printf_float+0x130>
 8004e3e:	6863      	ldr	r3, [r4, #4]
 8004e40:	4299      	cmp	r1, r3
 8004e42:	dd40      	ble.n	8004ec6 <_printf_float+0x1b2>
 8004e44:	f1a9 0902 	sub.w	r9, r9, #2
 8004e48:	fa5f f989 	uxtb.w	r9, r9
 8004e4c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e50:	d81f      	bhi.n	8004e92 <_printf_float+0x17e>
 8004e52:	464a      	mov	r2, r9
 8004e54:	3901      	subs	r1, #1
 8004e56:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e5a:	910d      	str	r1, [sp, #52]	; 0x34
 8004e5c:	f7ff ff1b 	bl	8004c96 <__exponent>
 8004e60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e62:	4682      	mov	sl, r0
 8004e64:	1813      	adds	r3, r2, r0
 8004e66:	2a01      	cmp	r2, #1
 8004e68:	6123      	str	r3, [r4, #16]
 8004e6a:	dc02      	bgt.n	8004e72 <_printf_float+0x15e>
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	07d2      	lsls	r2, r2, #31
 8004e70:	d501      	bpl.n	8004e76 <_printf_float+0x162>
 8004e72:	3301      	adds	r3, #1
 8004e74:	6123      	str	r3, [r4, #16]
 8004e76:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d09b      	beq.n	8004db6 <_printf_float+0xa2>
 8004e7e:	232d      	movs	r3, #45	; 0x2d
 8004e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e84:	e797      	b.n	8004db6 <_printf_float+0xa2>
 8004e86:	2947      	cmp	r1, #71	; 0x47
 8004e88:	d1bc      	bne.n	8004e04 <_printf_float+0xf0>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ba      	bne.n	8004e04 <_printf_float+0xf0>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e7b7      	b.n	8004e02 <_printf_float+0xee>
 8004e92:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004e96:	d118      	bne.n	8004eca <_printf_float+0x1b6>
 8004e98:	2900      	cmp	r1, #0
 8004e9a:	6863      	ldr	r3, [r4, #4]
 8004e9c:	dd0b      	ble.n	8004eb6 <_printf_float+0x1a2>
 8004e9e:	6121      	str	r1, [r4, #16]
 8004ea0:	b913      	cbnz	r3, 8004ea8 <_printf_float+0x194>
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	07d0      	lsls	r0, r2, #31
 8004ea6:	d502      	bpl.n	8004eae <_printf_float+0x19a>
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	440b      	add	r3, r1
 8004eac:	6123      	str	r3, [r4, #16]
 8004eae:	f04f 0a00 	mov.w	sl, #0
 8004eb2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004eb4:	e7df      	b.n	8004e76 <_printf_float+0x162>
 8004eb6:	b913      	cbnz	r3, 8004ebe <_printf_float+0x1aa>
 8004eb8:	6822      	ldr	r2, [r4, #0]
 8004eba:	07d2      	lsls	r2, r2, #31
 8004ebc:	d501      	bpl.n	8004ec2 <_printf_float+0x1ae>
 8004ebe:	3302      	adds	r3, #2
 8004ec0:	e7f4      	b.n	8004eac <_printf_float+0x198>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e7f2      	b.n	8004eac <_printf_float+0x198>
 8004ec6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ecc:	4299      	cmp	r1, r3
 8004ece:	db05      	blt.n	8004edc <_printf_float+0x1c8>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	6121      	str	r1, [r4, #16]
 8004ed4:	07d8      	lsls	r0, r3, #31
 8004ed6:	d5ea      	bpl.n	8004eae <_printf_float+0x19a>
 8004ed8:	1c4b      	adds	r3, r1, #1
 8004eda:	e7e7      	b.n	8004eac <_printf_float+0x198>
 8004edc:	2900      	cmp	r1, #0
 8004ede:	bfcc      	ite	gt
 8004ee0:	2201      	movgt	r2, #1
 8004ee2:	f1c1 0202 	rsble	r2, r1, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	e7e0      	b.n	8004eac <_printf_float+0x198>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	055a      	lsls	r2, r3, #21
 8004eee:	d407      	bmi.n	8004f00 <_printf_float+0x1ec>
 8004ef0:	6923      	ldr	r3, [r4, #16]
 8004ef2:	4642      	mov	r2, r8
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	47b8      	blx	r7
 8004efa:	3001      	adds	r0, #1
 8004efc:	d12b      	bne.n	8004f56 <_printf_float+0x242>
 8004efe:	e764      	b.n	8004dca <_printf_float+0xb6>
 8004f00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f04:	f240 80dd 	bls.w	80050c2 <_printf_float+0x3ae>
 8004f08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f7fb fd4a 	bl	80009a8 <__aeabi_dcmpeq>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d033      	beq.n	8004f80 <_printf_float+0x26c>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	4631      	mov	r1, r6
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	4a35      	ldr	r2, [pc, #212]	; (8004ff4 <_printf_float+0x2e0>)
 8004f20:	47b8      	blx	r7
 8004f22:	3001      	adds	r0, #1
 8004f24:	f43f af51 	beq.w	8004dca <_printf_float+0xb6>
 8004f28:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	db02      	blt.n	8004f36 <_printf_float+0x222>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	07d8      	lsls	r0, r3, #31
 8004f34:	d50f      	bpl.n	8004f56 <_printf_float+0x242>
 8004f36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	47b8      	blx	r7
 8004f40:	3001      	adds	r0, #1
 8004f42:	f43f af42 	beq.w	8004dca <_printf_float+0xb6>
 8004f46:	f04f 0800 	mov.w	r8, #0
 8004f4a:	f104 091a 	add.w	r9, r4, #26
 8004f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f50:	3b01      	subs	r3, #1
 8004f52:	4543      	cmp	r3, r8
 8004f54:	dc09      	bgt.n	8004f6a <_printf_float+0x256>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	079b      	lsls	r3, r3, #30
 8004f5a:	f100 8102 	bmi.w	8005162 <_printf_float+0x44e>
 8004f5e:	68e0      	ldr	r0, [r4, #12]
 8004f60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f62:	4298      	cmp	r0, r3
 8004f64:	bfb8      	it	lt
 8004f66:	4618      	movlt	r0, r3
 8004f68:	e731      	b.n	8004dce <_printf_float+0xba>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	464a      	mov	r2, r9
 8004f6e:	4631      	mov	r1, r6
 8004f70:	4628      	mov	r0, r5
 8004f72:	47b8      	blx	r7
 8004f74:	3001      	adds	r0, #1
 8004f76:	f43f af28 	beq.w	8004dca <_printf_float+0xb6>
 8004f7a:	f108 0801 	add.w	r8, r8, #1
 8004f7e:	e7e6      	b.n	8004f4e <_printf_float+0x23a>
 8004f80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	dc38      	bgt.n	8004ff8 <_printf_float+0x2e4>
 8004f86:	2301      	movs	r3, #1
 8004f88:	4631      	mov	r1, r6
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <_printf_float+0x2e0>)
 8004f8e:	47b8      	blx	r7
 8004f90:	3001      	adds	r0, #1
 8004f92:	f43f af1a 	beq.w	8004dca <_printf_float+0xb6>
 8004f96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	d102      	bne.n	8004fa4 <_printf_float+0x290>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	07d9      	lsls	r1, r3, #31
 8004fa2:	d5d8      	bpl.n	8004f56 <_printf_float+0x242>
 8004fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fa8:	4631      	mov	r1, r6
 8004faa:	4628      	mov	r0, r5
 8004fac:	47b8      	blx	r7
 8004fae:	3001      	adds	r0, #1
 8004fb0:	f43f af0b 	beq.w	8004dca <_printf_float+0xb6>
 8004fb4:	f04f 0900 	mov.w	r9, #0
 8004fb8:	f104 0a1a 	add.w	sl, r4, #26
 8004fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fbe:	425b      	negs	r3, r3
 8004fc0:	454b      	cmp	r3, r9
 8004fc2:	dc01      	bgt.n	8004fc8 <_printf_float+0x2b4>
 8004fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fc6:	e794      	b.n	8004ef2 <_printf_float+0x1de>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	4652      	mov	r2, sl
 8004fcc:	4631      	mov	r1, r6
 8004fce:	4628      	mov	r0, r5
 8004fd0:	47b8      	blx	r7
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	f43f aef9 	beq.w	8004dca <_printf_float+0xb6>
 8004fd8:	f109 0901 	add.w	r9, r9, #1
 8004fdc:	e7ee      	b.n	8004fbc <_printf_float+0x2a8>
 8004fde:	bf00      	nop
 8004fe0:	7fefffff 	.word	0x7fefffff
 8004fe4:	080076fc 	.word	0x080076fc
 8004fe8:	08007700 	.word	0x08007700
 8004fec:	08007708 	.word	0x08007708
 8004ff0:	08007704 	.word	0x08007704
 8004ff4:	0800770c 	.word	0x0800770c
 8004ff8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ffa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	bfa8      	it	ge
 8005000:	461a      	movge	r2, r3
 8005002:	2a00      	cmp	r2, #0
 8005004:	4691      	mov	r9, r2
 8005006:	dc37      	bgt.n	8005078 <_printf_float+0x364>
 8005008:	f04f 0b00 	mov.w	fp, #0
 800500c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005010:	f104 021a 	add.w	r2, r4, #26
 8005014:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005018:	ebaa 0309 	sub.w	r3, sl, r9
 800501c:	455b      	cmp	r3, fp
 800501e:	dc33      	bgt.n	8005088 <_printf_float+0x374>
 8005020:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005024:	429a      	cmp	r2, r3
 8005026:	db3b      	blt.n	80050a0 <_printf_float+0x38c>
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	07da      	lsls	r2, r3, #31
 800502c:	d438      	bmi.n	80050a0 <_printf_float+0x38c>
 800502e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005030:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005032:	eba3 020a 	sub.w	r2, r3, sl
 8005036:	eba3 0901 	sub.w	r9, r3, r1
 800503a:	4591      	cmp	r9, r2
 800503c:	bfa8      	it	ge
 800503e:	4691      	movge	r9, r2
 8005040:	f1b9 0f00 	cmp.w	r9, #0
 8005044:	dc34      	bgt.n	80050b0 <_printf_float+0x39c>
 8005046:	f04f 0800 	mov.w	r8, #0
 800504a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800504e:	f104 0a1a 	add.w	sl, r4, #26
 8005052:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	eba3 0309 	sub.w	r3, r3, r9
 800505c:	4543      	cmp	r3, r8
 800505e:	f77f af7a 	ble.w	8004f56 <_printf_float+0x242>
 8005062:	2301      	movs	r3, #1
 8005064:	4652      	mov	r2, sl
 8005066:	4631      	mov	r1, r6
 8005068:	4628      	mov	r0, r5
 800506a:	47b8      	blx	r7
 800506c:	3001      	adds	r0, #1
 800506e:	f43f aeac 	beq.w	8004dca <_printf_float+0xb6>
 8005072:	f108 0801 	add.w	r8, r8, #1
 8005076:	e7ec      	b.n	8005052 <_printf_float+0x33e>
 8005078:	4613      	mov	r3, r2
 800507a:	4631      	mov	r1, r6
 800507c:	4642      	mov	r2, r8
 800507e:	4628      	mov	r0, r5
 8005080:	47b8      	blx	r7
 8005082:	3001      	adds	r0, #1
 8005084:	d1c0      	bne.n	8005008 <_printf_float+0x2f4>
 8005086:	e6a0      	b.n	8004dca <_printf_float+0xb6>
 8005088:	2301      	movs	r3, #1
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005090:	47b8      	blx	r7
 8005092:	3001      	adds	r0, #1
 8005094:	f43f ae99 	beq.w	8004dca <_printf_float+0xb6>
 8005098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800509a:	f10b 0b01 	add.w	fp, fp, #1
 800509e:	e7b9      	b.n	8005014 <_printf_float+0x300>
 80050a0:	4631      	mov	r1, r6
 80050a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050a6:	4628      	mov	r0, r5
 80050a8:	47b8      	blx	r7
 80050aa:	3001      	adds	r0, #1
 80050ac:	d1bf      	bne.n	800502e <_printf_float+0x31a>
 80050ae:	e68c      	b.n	8004dca <_printf_float+0xb6>
 80050b0:	464b      	mov	r3, r9
 80050b2:	4631      	mov	r1, r6
 80050b4:	4628      	mov	r0, r5
 80050b6:	eb08 020a 	add.w	r2, r8, sl
 80050ba:	47b8      	blx	r7
 80050bc:	3001      	adds	r0, #1
 80050be:	d1c2      	bne.n	8005046 <_printf_float+0x332>
 80050c0:	e683      	b.n	8004dca <_printf_float+0xb6>
 80050c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050c4:	2a01      	cmp	r2, #1
 80050c6:	dc01      	bgt.n	80050cc <_printf_float+0x3b8>
 80050c8:	07db      	lsls	r3, r3, #31
 80050ca:	d537      	bpl.n	800513c <_printf_float+0x428>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4642      	mov	r2, r8
 80050d0:	4631      	mov	r1, r6
 80050d2:	4628      	mov	r0, r5
 80050d4:	47b8      	blx	r7
 80050d6:	3001      	adds	r0, #1
 80050d8:	f43f ae77 	beq.w	8004dca <_printf_float+0xb6>
 80050dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050e0:	4631      	mov	r1, r6
 80050e2:	4628      	mov	r0, r5
 80050e4:	47b8      	blx	r7
 80050e6:	3001      	adds	r0, #1
 80050e8:	f43f ae6f 	beq.w	8004dca <_printf_float+0xb6>
 80050ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050f0:	2200      	movs	r2, #0
 80050f2:	2300      	movs	r3, #0
 80050f4:	f7fb fc58 	bl	80009a8 <__aeabi_dcmpeq>
 80050f8:	b9d8      	cbnz	r0, 8005132 <_printf_float+0x41e>
 80050fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050fc:	f108 0201 	add.w	r2, r8, #1
 8005100:	3b01      	subs	r3, #1
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	47b8      	blx	r7
 8005108:	3001      	adds	r0, #1
 800510a:	d10e      	bne.n	800512a <_printf_float+0x416>
 800510c:	e65d      	b.n	8004dca <_printf_float+0xb6>
 800510e:	2301      	movs	r3, #1
 8005110:	464a      	mov	r2, r9
 8005112:	4631      	mov	r1, r6
 8005114:	4628      	mov	r0, r5
 8005116:	47b8      	blx	r7
 8005118:	3001      	adds	r0, #1
 800511a:	f43f ae56 	beq.w	8004dca <_printf_float+0xb6>
 800511e:	f108 0801 	add.w	r8, r8, #1
 8005122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005124:	3b01      	subs	r3, #1
 8005126:	4543      	cmp	r3, r8
 8005128:	dcf1      	bgt.n	800510e <_printf_float+0x3fa>
 800512a:	4653      	mov	r3, sl
 800512c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005130:	e6e0      	b.n	8004ef4 <_printf_float+0x1e0>
 8005132:	f04f 0800 	mov.w	r8, #0
 8005136:	f104 091a 	add.w	r9, r4, #26
 800513a:	e7f2      	b.n	8005122 <_printf_float+0x40e>
 800513c:	2301      	movs	r3, #1
 800513e:	4642      	mov	r2, r8
 8005140:	e7df      	b.n	8005102 <_printf_float+0x3ee>
 8005142:	2301      	movs	r3, #1
 8005144:	464a      	mov	r2, r9
 8005146:	4631      	mov	r1, r6
 8005148:	4628      	mov	r0, r5
 800514a:	47b8      	blx	r7
 800514c:	3001      	adds	r0, #1
 800514e:	f43f ae3c 	beq.w	8004dca <_printf_float+0xb6>
 8005152:	f108 0801 	add.w	r8, r8, #1
 8005156:	68e3      	ldr	r3, [r4, #12]
 8005158:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800515a:	1a5b      	subs	r3, r3, r1
 800515c:	4543      	cmp	r3, r8
 800515e:	dcf0      	bgt.n	8005142 <_printf_float+0x42e>
 8005160:	e6fd      	b.n	8004f5e <_printf_float+0x24a>
 8005162:	f04f 0800 	mov.w	r8, #0
 8005166:	f104 0919 	add.w	r9, r4, #25
 800516a:	e7f4      	b.n	8005156 <_printf_float+0x442>

0800516c <_printf_common>:
 800516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	4616      	mov	r6, r2
 8005172:	4699      	mov	r9, r3
 8005174:	688a      	ldr	r2, [r1, #8]
 8005176:	690b      	ldr	r3, [r1, #16]
 8005178:	4607      	mov	r7, r0
 800517a:	4293      	cmp	r3, r2
 800517c:	bfb8      	it	lt
 800517e:	4613      	movlt	r3, r2
 8005180:	6033      	str	r3, [r6, #0]
 8005182:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005186:	460c      	mov	r4, r1
 8005188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800518c:	b10a      	cbz	r2, 8005192 <_printf_common+0x26>
 800518e:	3301      	adds	r3, #1
 8005190:	6033      	str	r3, [r6, #0]
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	0699      	lsls	r1, r3, #26
 8005196:	bf42      	ittt	mi
 8005198:	6833      	ldrmi	r3, [r6, #0]
 800519a:	3302      	addmi	r3, #2
 800519c:	6033      	strmi	r3, [r6, #0]
 800519e:	6825      	ldr	r5, [r4, #0]
 80051a0:	f015 0506 	ands.w	r5, r5, #6
 80051a4:	d106      	bne.n	80051b4 <_printf_common+0x48>
 80051a6:	f104 0a19 	add.w	sl, r4, #25
 80051aa:	68e3      	ldr	r3, [r4, #12]
 80051ac:	6832      	ldr	r2, [r6, #0]
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	42ab      	cmp	r3, r5
 80051b2:	dc28      	bgt.n	8005206 <_printf_common+0x9a>
 80051b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051b8:	1e13      	subs	r3, r2, #0
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	bf18      	it	ne
 80051be:	2301      	movne	r3, #1
 80051c0:	0692      	lsls	r2, r2, #26
 80051c2:	d42d      	bmi.n	8005220 <_printf_common+0xb4>
 80051c4:	4649      	mov	r1, r9
 80051c6:	4638      	mov	r0, r7
 80051c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051cc:	47c0      	blx	r8
 80051ce:	3001      	adds	r0, #1
 80051d0:	d020      	beq.n	8005214 <_printf_common+0xa8>
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	68e5      	ldr	r5, [r4, #12]
 80051d6:	f003 0306 	and.w	r3, r3, #6
 80051da:	2b04      	cmp	r3, #4
 80051dc:	bf18      	it	ne
 80051de:	2500      	movne	r5, #0
 80051e0:	6832      	ldr	r2, [r6, #0]
 80051e2:	f04f 0600 	mov.w	r6, #0
 80051e6:	68a3      	ldr	r3, [r4, #8]
 80051e8:	bf08      	it	eq
 80051ea:	1aad      	subeq	r5, r5, r2
 80051ec:	6922      	ldr	r2, [r4, #16]
 80051ee:	bf08      	it	eq
 80051f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051f4:	4293      	cmp	r3, r2
 80051f6:	bfc4      	itt	gt
 80051f8:	1a9b      	subgt	r3, r3, r2
 80051fa:	18ed      	addgt	r5, r5, r3
 80051fc:	341a      	adds	r4, #26
 80051fe:	42b5      	cmp	r5, r6
 8005200:	d11a      	bne.n	8005238 <_printf_common+0xcc>
 8005202:	2000      	movs	r0, #0
 8005204:	e008      	b.n	8005218 <_printf_common+0xac>
 8005206:	2301      	movs	r3, #1
 8005208:	4652      	mov	r2, sl
 800520a:	4649      	mov	r1, r9
 800520c:	4638      	mov	r0, r7
 800520e:	47c0      	blx	r8
 8005210:	3001      	adds	r0, #1
 8005212:	d103      	bne.n	800521c <_printf_common+0xb0>
 8005214:	f04f 30ff 	mov.w	r0, #4294967295
 8005218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521c:	3501      	adds	r5, #1
 800521e:	e7c4      	b.n	80051aa <_printf_common+0x3e>
 8005220:	2030      	movs	r0, #48	; 0x30
 8005222:	18e1      	adds	r1, r4, r3
 8005224:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800522e:	4422      	add	r2, r4
 8005230:	3302      	adds	r3, #2
 8005232:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005236:	e7c5      	b.n	80051c4 <_printf_common+0x58>
 8005238:	2301      	movs	r3, #1
 800523a:	4622      	mov	r2, r4
 800523c:	4649      	mov	r1, r9
 800523e:	4638      	mov	r0, r7
 8005240:	47c0      	blx	r8
 8005242:	3001      	adds	r0, #1
 8005244:	d0e6      	beq.n	8005214 <_printf_common+0xa8>
 8005246:	3601      	adds	r6, #1
 8005248:	e7d9      	b.n	80051fe <_printf_common+0x92>
	...

0800524c <_printf_i>:
 800524c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005250:	7e0f      	ldrb	r7, [r1, #24]
 8005252:	4691      	mov	r9, r2
 8005254:	2f78      	cmp	r7, #120	; 0x78
 8005256:	4680      	mov	r8, r0
 8005258:	460c      	mov	r4, r1
 800525a:	469a      	mov	sl, r3
 800525c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800525e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005262:	d807      	bhi.n	8005274 <_printf_i+0x28>
 8005264:	2f62      	cmp	r7, #98	; 0x62
 8005266:	d80a      	bhi.n	800527e <_printf_i+0x32>
 8005268:	2f00      	cmp	r7, #0
 800526a:	f000 80d9 	beq.w	8005420 <_printf_i+0x1d4>
 800526e:	2f58      	cmp	r7, #88	; 0x58
 8005270:	f000 80a4 	beq.w	80053bc <_printf_i+0x170>
 8005274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800527c:	e03a      	b.n	80052f4 <_printf_i+0xa8>
 800527e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005282:	2b15      	cmp	r3, #21
 8005284:	d8f6      	bhi.n	8005274 <_printf_i+0x28>
 8005286:	a101      	add	r1, pc, #4	; (adr r1, 800528c <_printf_i+0x40>)
 8005288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800528c:	080052e5 	.word	0x080052e5
 8005290:	080052f9 	.word	0x080052f9
 8005294:	08005275 	.word	0x08005275
 8005298:	08005275 	.word	0x08005275
 800529c:	08005275 	.word	0x08005275
 80052a0:	08005275 	.word	0x08005275
 80052a4:	080052f9 	.word	0x080052f9
 80052a8:	08005275 	.word	0x08005275
 80052ac:	08005275 	.word	0x08005275
 80052b0:	08005275 	.word	0x08005275
 80052b4:	08005275 	.word	0x08005275
 80052b8:	08005407 	.word	0x08005407
 80052bc:	08005329 	.word	0x08005329
 80052c0:	080053e9 	.word	0x080053e9
 80052c4:	08005275 	.word	0x08005275
 80052c8:	08005275 	.word	0x08005275
 80052cc:	08005429 	.word	0x08005429
 80052d0:	08005275 	.word	0x08005275
 80052d4:	08005329 	.word	0x08005329
 80052d8:	08005275 	.word	0x08005275
 80052dc:	08005275 	.word	0x08005275
 80052e0:	080053f1 	.word	0x080053f1
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	1d1a      	adds	r2, r3, #4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	602a      	str	r2, [r5, #0]
 80052ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0a4      	b.n	8005442 <_printf_i+0x1f6>
 80052f8:	6820      	ldr	r0, [r4, #0]
 80052fa:	6829      	ldr	r1, [r5, #0]
 80052fc:	0606      	lsls	r6, r0, #24
 80052fe:	f101 0304 	add.w	r3, r1, #4
 8005302:	d50a      	bpl.n	800531a <_printf_i+0xce>
 8005304:	680e      	ldr	r6, [r1, #0]
 8005306:	602b      	str	r3, [r5, #0]
 8005308:	2e00      	cmp	r6, #0
 800530a:	da03      	bge.n	8005314 <_printf_i+0xc8>
 800530c:	232d      	movs	r3, #45	; 0x2d
 800530e:	4276      	negs	r6, r6
 8005310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005314:	230a      	movs	r3, #10
 8005316:	485e      	ldr	r0, [pc, #376]	; (8005490 <_printf_i+0x244>)
 8005318:	e019      	b.n	800534e <_printf_i+0x102>
 800531a:	680e      	ldr	r6, [r1, #0]
 800531c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	bf18      	it	ne
 8005324:	b236      	sxthne	r6, r6
 8005326:	e7ef      	b.n	8005308 <_printf_i+0xbc>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	6820      	ldr	r0, [r4, #0]
 800532c:	1d19      	adds	r1, r3, #4
 800532e:	6029      	str	r1, [r5, #0]
 8005330:	0601      	lsls	r1, r0, #24
 8005332:	d501      	bpl.n	8005338 <_printf_i+0xec>
 8005334:	681e      	ldr	r6, [r3, #0]
 8005336:	e002      	b.n	800533e <_printf_i+0xf2>
 8005338:	0646      	lsls	r6, r0, #25
 800533a:	d5fb      	bpl.n	8005334 <_printf_i+0xe8>
 800533c:	881e      	ldrh	r6, [r3, #0]
 800533e:	2f6f      	cmp	r7, #111	; 0x6f
 8005340:	bf0c      	ite	eq
 8005342:	2308      	moveq	r3, #8
 8005344:	230a      	movne	r3, #10
 8005346:	4852      	ldr	r0, [pc, #328]	; (8005490 <_printf_i+0x244>)
 8005348:	2100      	movs	r1, #0
 800534a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800534e:	6865      	ldr	r5, [r4, #4]
 8005350:	2d00      	cmp	r5, #0
 8005352:	bfa8      	it	ge
 8005354:	6821      	ldrge	r1, [r4, #0]
 8005356:	60a5      	str	r5, [r4, #8]
 8005358:	bfa4      	itt	ge
 800535a:	f021 0104 	bicge.w	r1, r1, #4
 800535e:	6021      	strge	r1, [r4, #0]
 8005360:	b90e      	cbnz	r6, 8005366 <_printf_i+0x11a>
 8005362:	2d00      	cmp	r5, #0
 8005364:	d04d      	beq.n	8005402 <_printf_i+0x1b6>
 8005366:	4615      	mov	r5, r2
 8005368:	fbb6 f1f3 	udiv	r1, r6, r3
 800536c:	fb03 6711 	mls	r7, r3, r1, r6
 8005370:	5dc7      	ldrb	r7, [r0, r7]
 8005372:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005376:	4637      	mov	r7, r6
 8005378:	42bb      	cmp	r3, r7
 800537a:	460e      	mov	r6, r1
 800537c:	d9f4      	bls.n	8005368 <_printf_i+0x11c>
 800537e:	2b08      	cmp	r3, #8
 8005380:	d10b      	bne.n	800539a <_printf_i+0x14e>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	07de      	lsls	r6, r3, #31
 8005386:	d508      	bpl.n	800539a <_printf_i+0x14e>
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	6861      	ldr	r1, [r4, #4]
 800538c:	4299      	cmp	r1, r3
 800538e:	bfde      	ittt	le
 8005390:	2330      	movle	r3, #48	; 0x30
 8005392:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005396:	f105 35ff 	addle.w	r5, r5, #4294967295
 800539a:	1b52      	subs	r2, r2, r5
 800539c:	6122      	str	r2, [r4, #16]
 800539e:	464b      	mov	r3, r9
 80053a0:	4621      	mov	r1, r4
 80053a2:	4640      	mov	r0, r8
 80053a4:	f8cd a000 	str.w	sl, [sp]
 80053a8:	aa03      	add	r2, sp, #12
 80053aa:	f7ff fedf 	bl	800516c <_printf_common>
 80053ae:	3001      	adds	r0, #1
 80053b0:	d14c      	bne.n	800544c <_printf_i+0x200>
 80053b2:	f04f 30ff 	mov.w	r0, #4294967295
 80053b6:	b004      	add	sp, #16
 80053b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053bc:	4834      	ldr	r0, [pc, #208]	; (8005490 <_printf_i+0x244>)
 80053be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053c2:	6829      	ldr	r1, [r5, #0]
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80053ca:	6029      	str	r1, [r5, #0]
 80053cc:	061d      	lsls	r5, r3, #24
 80053ce:	d514      	bpl.n	80053fa <_printf_i+0x1ae>
 80053d0:	07df      	lsls	r7, r3, #31
 80053d2:	bf44      	itt	mi
 80053d4:	f043 0320 	orrmi.w	r3, r3, #32
 80053d8:	6023      	strmi	r3, [r4, #0]
 80053da:	b91e      	cbnz	r6, 80053e4 <_printf_i+0x198>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	f023 0320 	bic.w	r3, r3, #32
 80053e2:	6023      	str	r3, [r4, #0]
 80053e4:	2310      	movs	r3, #16
 80053e6:	e7af      	b.n	8005348 <_printf_i+0xfc>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	f043 0320 	orr.w	r3, r3, #32
 80053ee:	6023      	str	r3, [r4, #0]
 80053f0:	2378      	movs	r3, #120	; 0x78
 80053f2:	4828      	ldr	r0, [pc, #160]	; (8005494 <_printf_i+0x248>)
 80053f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053f8:	e7e3      	b.n	80053c2 <_printf_i+0x176>
 80053fa:	0659      	lsls	r1, r3, #25
 80053fc:	bf48      	it	mi
 80053fe:	b2b6      	uxthmi	r6, r6
 8005400:	e7e6      	b.n	80053d0 <_printf_i+0x184>
 8005402:	4615      	mov	r5, r2
 8005404:	e7bb      	b.n	800537e <_printf_i+0x132>
 8005406:	682b      	ldr	r3, [r5, #0]
 8005408:	6826      	ldr	r6, [r4, #0]
 800540a:	1d18      	adds	r0, r3, #4
 800540c:	6961      	ldr	r1, [r4, #20]
 800540e:	6028      	str	r0, [r5, #0]
 8005410:	0635      	lsls	r5, r6, #24
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	d501      	bpl.n	800541a <_printf_i+0x1ce>
 8005416:	6019      	str	r1, [r3, #0]
 8005418:	e002      	b.n	8005420 <_printf_i+0x1d4>
 800541a:	0670      	lsls	r0, r6, #25
 800541c:	d5fb      	bpl.n	8005416 <_printf_i+0x1ca>
 800541e:	8019      	strh	r1, [r3, #0]
 8005420:	2300      	movs	r3, #0
 8005422:	4615      	mov	r5, r2
 8005424:	6123      	str	r3, [r4, #16]
 8005426:	e7ba      	b.n	800539e <_printf_i+0x152>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	2100      	movs	r1, #0
 800542c:	1d1a      	adds	r2, r3, #4
 800542e:	602a      	str	r2, [r5, #0]
 8005430:	681d      	ldr	r5, [r3, #0]
 8005432:	6862      	ldr	r2, [r4, #4]
 8005434:	4628      	mov	r0, r5
 8005436:	f000 ffc7 	bl	80063c8 <memchr>
 800543a:	b108      	cbz	r0, 8005440 <_printf_i+0x1f4>
 800543c:	1b40      	subs	r0, r0, r5
 800543e:	6060      	str	r0, [r4, #4]
 8005440:	6863      	ldr	r3, [r4, #4]
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	2300      	movs	r3, #0
 8005446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800544a:	e7a8      	b.n	800539e <_printf_i+0x152>
 800544c:	462a      	mov	r2, r5
 800544e:	4649      	mov	r1, r9
 8005450:	4640      	mov	r0, r8
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	47d0      	blx	sl
 8005456:	3001      	adds	r0, #1
 8005458:	d0ab      	beq.n	80053b2 <_printf_i+0x166>
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	079b      	lsls	r3, r3, #30
 800545e:	d413      	bmi.n	8005488 <_printf_i+0x23c>
 8005460:	68e0      	ldr	r0, [r4, #12]
 8005462:	9b03      	ldr	r3, [sp, #12]
 8005464:	4298      	cmp	r0, r3
 8005466:	bfb8      	it	lt
 8005468:	4618      	movlt	r0, r3
 800546a:	e7a4      	b.n	80053b6 <_printf_i+0x16a>
 800546c:	2301      	movs	r3, #1
 800546e:	4632      	mov	r2, r6
 8005470:	4649      	mov	r1, r9
 8005472:	4640      	mov	r0, r8
 8005474:	47d0      	blx	sl
 8005476:	3001      	adds	r0, #1
 8005478:	d09b      	beq.n	80053b2 <_printf_i+0x166>
 800547a:	3501      	adds	r5, #1
 800547c:	68e3      	ldr	r3, [r4, #12]
 800547e:	9903      	ldr	r1, [sp, #12]
 8005480:	1a5b      	subs	r3, r3, r1
 8005482:	42ab      	cmp	r3, r5
 8005484:	dcf2      	bgt.n	800546c <_printf_i+0x220>
 8005486:	e7eb      	b.n	8005460 <_printf_i+0x214>
 8005488:	2500      	movs	r5, #0
 800548a:	f104 0619 	add.w	r6, r4, #25
 800548e:	e7f5      	b.n	800547c <_printf_i+0x230>
 8005490:	0800770e 	.word	0x0800770e
 8005494:	0800771f 	.word	0x0800771f

08005498 <iprintf>:
 8005498:	b40f      	push	{r0, r1, r2, r3}
 800549a:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <iprintf+0x2c>)
 800549c:	b513      	push	{r0, r1, r4, lr}
 800549e:	681c      	ldr	r4, [r3, #0]
 80054a0:	b124      	cbz	r4, 80054ac <iprintf+0x14>
 80054a2:	69a3      	ldr	r3, [r4, #24]
 80054a4:	b913      	cbnz	r3, 80054ac <iprintf+0x14>
 80054a6:	4620      	mov	r0, r4
 80054a8:	f000 fee0 	bl	800626c <__sinit>
 80054ac:	ab05      	add	r3, sp, #20
 80054ae:	4620      	mov	r0, r4
 80054b0:	9a04      	ldr	r2, [sp, #16]
 80054b2:	68a1      	ldr	r1, [r4, #8]
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	f001 fc3d 	bl	8006d34 <_vfiprintf_r>
 80054ba:	b002      	add	sp, #8
 80054bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054c0:	b004      	add	sp, #16
 80054c2:	4770      	bx	lr
 80054c4:	2000000c 	.word	0x2000000c

080054c8 <quorem>:
 80054c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	6903      	ldr	r3, [r0, #16]
 80054ce:	690c      	ldr	r4, [r1, #16]
 80054d0:	4607      	mov	r7, r0
 80054d2:	42a3      	cmp	r3, r4
 80054d4:	f2c0 8082 	blt.w	80055dc <quorem+0x114>
 80054d8:	3c01      	subs	r4, #1
 80054da:	f100 0514 	add.w	r5, r0, #20
 80054de:	f101 0814 	add.w	r8, r1, #20
 80054e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054f0:	3301      	adds	r3, #1
 80054f2:	429a      	cmp	r2, r3
 80054f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80054f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80054fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005500:	d331      	bcc.n	8005566 <quorem+0x9e>
 8005502:	f04f 0e00 	mov.w	lr, #0
 8005506:	4640      	mov	r0, r8
 8005508:	46ac      	mov	ip, r5
 800550a:	46f2      	mov	sl, lr
 800550c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005510:	b293      	uxth	r3, r2
 8005512:	fb06 e303 	mla	r3, r6, r3, lr
 8005516:	0c12      	lsrs	r2, r2, #16
 8005518:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800551c:	b29b      	uxth	r3, r3
 800551e:	fb06 e202 	mla	r2, r6, r2, lr
 8005522:	ebaa 0303 	sub.w	r3, sl, r3
 8005526:	f8dc a000 	ldr.w	sl, [ip]
 800552a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800552e:	fa1f fa8a 	uxth.w	sl, sl
 8005532:	4453      	add	r3, sl
 8005534:	f8dc a000 	ldr.w	sl, [ip]
 8005538:	b292      	uxth	r2, r2
 800553a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800553e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005542:	b29b      	uxth	r3, r3
 8005544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005548:	4581      	cmp	r9, r0
 800554a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800554e:	f84c 3b04 	str.w	r3, [ip], #4
 8005552:	d2db      	bcs.n	800550c <quorem+0x44>
 8005554:	f855 300b 	ldr.w	r3, [r5, fp]
 8005558:	b92b      	cbnz	r3, 8005566 <quorem+0x9e>
 800555a:	9b01      	ldr	r3, [sp, #4]
 800555c:	3b04      	subs	r3, #4
 800555e:	429d      	cmp	r5, r3
 8005560:	461a      	mov	r2, r3
 8005562:	d32f      	bcc.n	80055c4 <quorem+0xfc>
 8005564:	613c      	str	r4, [r7, #16]
 8005566:	4638      	mov	r0, r7
 8005568:	f001 f9c8 	bl	80068fc <__mcmp>
 800556c:	2800      	cmp	r0, #0
 800556e:	db25      	blt.n	80055bc <quorem+0xf4>
 8005570:	4628      	mov	r0, r5
 8005572:	f04f 0c00 	mov.w	ip, #0
 8005576:	3601      	adds	r6, #1
 8005578:	f858 1b04 	ldr.w	r1, [r8], #4
 800557c:	f8d0 e000 	ldr.w	lr, [r0]
 8005580:	b28b      	uxth	r3, r1
 8005582:	ebac 0303 	sub.w	r3, ip, r3
 8005586:	fa1f f28e 	uxth.w	r2, lr
 800558a:	4413      	add	r3, r2
 800558c:	0c0a      	lsrs	r2, r1, #16
 800558e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005592:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005596:	b29b      	uxth	r3, r3
 8005598:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800559c:	45c1      	cmp	r9, r8
 800559e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055a2:	f840 3b04 	str.w	r3, [r0], #4
 80055a6:	d2e7      	bcs.n	8005578 <quorem+0xb0>
 80055a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055b0:	b922      	cbnz	r2, 80055bc <quorem+0xf4>
 80055b2:	3b04      	subs	r3, #4
 80055b4:	429d      	cmp	r5, r3
 80055b6:	461a      	mov	r2, r3
 80055b8:	d30a      	bcc.n	80055d0 <quorem+0x108>
 80055ba:	613c      	str	r4, [r7, #16]
 80055bc:	4630      	mov	r0, r6
 80055be:	b003      	add	sp, #12
 80055c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	3b04      	subs	r3, #4
 80055c8:	2a00      	cmp	r2, #0
 80055ca:	d1cb      	bne.n	8005564 <quorem+0x9c>
 80055cc:	3c01      	subs	r4, #1
 80055ce:	e7c6      	b.n	800555e <quorem+0x96>
 80055d0:	6812      	ldr	r2, [r2, #0]
 80055d2:	3b04      	subs	r3, #4
 80055d4:	2a00      	cmp	r2, #0
 80055d6:	d1f0      	bne.n	80055ba <quorem+0xf2>
 80055d8:	3c01      	subs	r4, #1
 80055da:	e7eb      	b.n	80055b4 <quorem+0xec>
 80055dc:	2000      	movs	r0, #0
 80055de:	e7ee      	b.n	80055be <quorem+0xf6>

080055e0 <_dtoa_r>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	4616      	mov	r6, r2
 80055e6:	461f      	mov	r7, r3
 80055e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80055ea:	b099      	sub	sp, #100	; 0x64
 80055ec:	4605      	mov	r5, r0
 80055ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80055f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80055f6:	b974      	cbnz	r4, 8005616 <_dtoa_r+0x36>
 80055f8:	2010      	movs	r0, #16
 80055fa:	f000 fedd 	bl	80063b8 <malloc>
 80055fe:	4602      	mov	r2, r0
 8005600:	6268      	str	r0, [r5, #36]	; 0x24
 8005602:	b920      	cbnz	r0, 800560e <_dtoa_r+0x2e>
 8005604:	21ea      	movs	r1, #234	; 0xea
 8005606:	4ba8      	ldr	r3, [pc, #672]	; (80058a8 <_dtoa_r+0x2c8>)
 8005608:	48a8      	ldr	r0, [pc, #672]	; (80058ac <_dtoa_r+0x2cc>)
 800560a:	f001 fde9 	bl	80071e0 <__assert_func>
 800560e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005612:	6004      	str	r4, [r0, #0]
 8005614:	60c4      	str	r4, [r0, #12]
 8005616:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005618:	6819      	ldr	r1, [r3, #0]
 800561a:	b151      	cbz	r1, 8005632 <_dtoa_r+0x52>
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	2301      	movs	r3, #1
 8005620:	4093      	lsls	r3, r2
 8005622:	604a      	str	r2, [r1, #4]
 8005624:	608b      	str	r3, [r1, #8]
 8005626:	4628      	mov	r0, r5
 8005628:	f000 ff2a 	bl	8006480 <_Bfree>
 800562c:	2200      	movs	r2, #0
 800562e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	1e3b      	subs	r3, r7, #0
 8005634:	bfaf      	iteee	ge
 8005636:	2300      	movge	r3, #0
 8005638:	2201      	movlt	r2, #1
 800563a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800563e:	9305      	strlt	r3, [sp, #20]
 8005640:	bfa8      	it	ge
 8005642:	f8c8 3000 	strge.w	r3, [r8]
 8005646:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800564a:	4b99      	ldr	r3, [pc, #612]	; (80058b0 <_dtoa_r+0x2d0>)
 800564c:	bfb8      	it	lt
 800564e:	f8c8 2000 	strlt.w	r2, [r8]
 8005652:	ea33 0309 	bics.w	r3, r3, r9
 8005656:	d119      	bne.n	800568c <_dtoa_r+0xac>
 8005658:	f242 730f 	movw	r3, #9999	; 0x270f
 800565c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005664:	4333      	orrs	r3, r6
 8005666:	f000 857f 	beq.w	8006168 <_dtoa_r+0xb88>
 800566a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800566c:	b953      	cbnz	r3, 8005684 <_dtoa_r+0xa4>
 800566e:	4b91      	ldr	r3, [pc, #580]	; (80058b4 <_dtoa_r+0x2d4>)
 8005670:	e022      	b.n	80056b8 <_dtoa_r+0xd8>
 8005672:	4b91      	ldr	r3, [pc, #580]	; (80058b8 <_dtoa_r+0x2d8>)
 8005674:	9303      	str	r3, [sp, #12]
 8005676:	3308      	adds	r3, #8
 8005678:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	9803      	ldr	r0, [sp, #12]
 800567e:	b019      	add	sp, #100	; 0x64
 8005680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005684:	4b8b      	ldr	r3, [pc, #556]	; (80058b4 <_dtoa_r+0x2d4>)
 8005686:	9303      	str	r3, [sp, #12]
 8005688:	3303      	adds	r3, #3
 800568a:	e7f5      	b.n	8005678 <_dtoa_r+0x98>
 800568c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005690:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005698:	2200      	movs	r2, #0
 800569a:	2300      	movs	r3, #0
 800569c:	f7fb f984 	bl	80009a8 <__aeabi_dcmpeq>
 80056a0:	4680      	mov	r8, r0
 80056a2:	b158      	cbz	r0, 80056bc <_dtoa_r+0xdc>
 80056a4:	2301      	movs	r3, #1
 80056a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8558 	beq.w	8006162 <_dtoa_r+0xb82>
 80056b2:	4882      	ldr	r0, [pc, #520]	; (80058bc <_dtoa_r+0x2dc>)
 80056b4:	6018      	str	r0, [r3, #0]
 80056b6:	1e43      	subs	r3, r0, #1
 80056b8:	9303      	str	r3, [sp, #12]
 80056ba:	e7df      	b.n	800567c <_dtoa_r+0x9c>
 80056bc:	ab16      	add	r3, sp, #88	; 0x58
 80056be:	9301      	str	r3, [sp, #4]
 80056c0:	ab17      	add	r3, sp, #92	; 0x5c
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	4628      	mov	r0, r5
 80056c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056ca:	f001 f9bf 	bl	8006a4c <__d2b>
 80056ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80056d2:	4683      	mov	fp, r0
 80056d4:	2c00      	cmp	r4, #0
 80056d6:	d07f      	beq.n	80057d8 <_dtoa_r+0x1f8>
 80056d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056de:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80056e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80056ea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80056ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80056f2:	2200      	movs	r2, #0
 80056f4:	4b72      	ldr	r3, [pc, #456]	; (80058c0 <_dtoa_r+0x2e0>)
 80056f6:	f7fa fd37 	bl	8000168 <__aeabi_dsub>
 80056fa:	a365      	add	r3, pc, #404	; (adr r3, 8005890 <_dtoa_r+0x2b0>)
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	f7fa feea 	bl	80004d8 <__aeabi_dmul>
 8005704:	a364      	add	r3, pc, #400	; (adr r3, 8005898 <_dtoa_r+0x2b8>)
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	f7fa fd2f 	bl	800016c <__adddf3>
 800570e:	4606      	mov	r6, r0
 8005710:	4620      	mov	r0, r4
 8005712:	460f      	mov	r7, r1
 8005714:	f7fa fe76 	bl	8000404 <__aeabi_i2d>
 8005718:	a361      	add	r3, pc, #388	; (adr r3, 80058a0 <_dtoa_r+0x2c0>)
 800571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571e:	f7fa fedb 	bl	80004d8 <__aeabi_dmul>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4630      	mov	r0, r6
 8005728:	4639      	mov	r1, r7
 800572a:	f7fa fd1f 	bl	800016c <__adddf3>
 800572e:	4606      	mov	r6, r0
 8005730:	460f      	mov	r7, r1
 8005732:	f7fb f981 	bl	8000a38 <__aeabi_d2iz>
 8005736:	2200      	movs	r2, #0
 8005738:	4682      	mov	sl, r0
 800573a:	2300      	movs	r3, #0
 800573c:	4630      	mov	r0, r6
 800573e:	4639      	mov	r1, r7
 8005740:	f7fb f93c 	bl	80009bc <__aeabi_dcmplt>
 8005744:	b148      	cbz	r0, 800575a <_dtoa_r+0x17a>
 8005746:	4650      	mov	r0, sl
 8005748:	f7fa fe5c 	bl	8000404 <__aeabi_i2d>
 800574c:	4632      	mov	r2, r6
 800574e:	463b      	mov	r3, r7
 8005750:	f7fb f92a 	bl	80009a8 <__aeabi_dcmpeq>
 8005754:	b908      	cbnz	r0, 800575a <_dtoa_r+0x17a>
 8005756:	f10a 3aff 	add.w	sl, sl, #4294967295
 800575a:	f1ba 0f16 	cmp.w	sl, #22
 800575e:	d858      	bhi.n	8005812 <_dtoa_r+0x232>
 8005760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005764:	4b57      	ldr	r3, [pc, #348]	; (80058c4 <_dtoa_r+0x2e4>)
 8005766:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f7fb f925 	bl	80009bc <__aeabi_dcmplt>
 8005772:	2800      	cmp	r0, #0
 8005774:	d04f      	beq.n	8005816 <_dtoa_r+0x236>
 8005776:	2300      	movs	r3, #0
 8005778:	f10a 3aff 	add.w	sl, sl, #4294967295
 800577c:	930f      	str	r3, [sp, #60]	; 0x3c
 800577e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005780:	1b1c      	subs	r4, r3, r4
 8005782:	1e63      	subs	r3, r4, #1
 8005784:	9309      	str	r3, [sp, #36]	; 0x24
 8005786:	bf49      	itett	mi
 8005788:	f1c4 0301 	rsbmi	r3, r4, #1
 800578c:	2300      	movpl	r3, #0
 800578e:	9306      	strmi	r3, [sp, #24]
 8005790:	2300      	movmi	r3, #0
 8005792:	bf54      	ite	pl
 8005794:	9306      	strpl	r3, [sp, #24]
 8005796:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005798:	f1ba 0f00 	cmp.w	sl, #0
 800579c:	db3d      	blt.n	800581a <_dtoa_r+0x23a>
 800579e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80057a4:	4453      	add	r3, sl
 80057a6:	9309      	str	r3, [sp, #36]	; 0x24
 80057a8:	2300      	movs	r3, #0
 80057aa:	930a      	str	r3, [sp, #40]	; 0x28
 80057ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057ae:	2b09      	cmp	r3, #9
 80057b0:	f200 808c 	bhi.w	80058cc <_dtoa_r+0x2ec>
 80057b4:	2b05      	cmp	r3, #5
 80057b6:	bfc4      	itt	gt
 80057b8:	3b04      	subgt	r3, #4
 80057ba:	9322      	strgt	r3, [sp, #136]	; 0x88
 80057bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057be:	bfc8      	it	gt
 80057c0:	2400      	movgt	r4, #0
 80057c2:	f1a3 0302 	sub.w	r3, r3, #2
 80057c6:	bfd8      	it	le
 80057c8:	2401      	movle	r4, #1
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	f200 808a 	bhi.w	80058e4 <_dtoa_r+0x304>
 80057d0:	e8df f003 	tbb	[pc, r3]
 80057d4:	5b4d4f2d 	.word	0x5b4d4f2d
 80057d8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80057dc:	441c      	add	r4, r3
 80057de:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	bfc3      	ittte	gt
 80057e6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80057ea:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80057ee:	fa09 f303 	lslgt.w	r3, r9, r3
 80057f2:	f1c3 0320 	rsble	r3, r3, #32
 80057f6:	bfc6      	itte	gt
 80057f8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80057fc:	4318      	orrgt	r0, r3
 80057fe:	fa06 f003 	lslle.w	r0, r6, r3
 8005802:	f7fa fdef 	bl	80003e4 <__aeabi_ui2d>
 8005806:	2301      	movs	r3, #1
 8005808:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800580c:	3c01      	subs	r4, #1
 800580e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005810:	e76f      	b.n	80056f2 <_dtoa_r+0x112>
 8005812:	2301      	movs	r3, #1
 8005814:	e7b2      	b.n	800577c <_dtoa_r+0x19c>
 8005816:	900f      	str	r0, [sp, #60]	; 0x3c
 8005818:	e7b1      	b.n	800577e <_dtoa_r+0x19e>
 800581a:	9b06      	ldr	r3, [sp, #24]
 800581c:	eba3 030a 	sub.w	r3, r3, sl
 8005820:	9306      	str	r3, [sp, #24]
 8005822:	f1ca 0300 	rsb	r3, sl, #0
 8005826:	930a      	str	r3, [sp, #40]	; 0x28
 8005828:	2300      	movs	r3, #0
 800582a:	930e      	str	r3, [sp, #56]	; 0x38
 800582c:	e7be      	b.n	80057ac <_dtoa_r+0x1cc>
 800582e:	2300      	movs	r3, #0
 8005830:	930b      	str	r3, [sp, #44]	; 0x2c
 8005832:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005834:	2b00      	cmp	r3, #0
 8005836:	dc58      	bgt.n	80058ea <_dtoa_r+0x30a>
 8005838:	f04f 0901 	mov.w	r9, #1
 800583c:	464b      	mov	r3, r9
 800583e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005842:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005846:	2200      	movs	r2, #0
 8005848:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800584a:	6042      	str	r2, [r0, #4]
 800584c:	2204      	movs	r2, #4
 800584e:	f102 0614 	add.w	r6, r2, #20
 8005852:	429e      	cmp	r6, r3
 8005854:	6841      	ldr	r1, [r0, #4]
 8005856:	d94e      	bls.n	80058f6 <_dtoa_r+0x316>
 8005858:	4628      	mov	r0, r5
 800585a:	f000 fdd1 	bl	8006400 <_Balloc>
 800585e:	9003      	str	r0, [sp, #12]
 8005860:	2800      	cmp	r0, #0
 8005862:	d14c      	bne.n	80058fe <_dtoa_r+0x31e>
 8005864:	4602      	mov	r2, r0
 8005866:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800586a:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <_dtoa_r+0x2e8>)
 800586c:	e6cc      	b.n	8005608 <_dtoa_r+0x28>
 800586e:	2301      	movs	r3, #1
 8005870:	e7de      	b.n	8005830 <_dtoa_r+0x250>
 8005872:	2300      	movs	r3, #0
 8005874:	930b      	str	r3, [sp, #44]	; 0x2c
 8005876:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005878:	eb0a 0903 	add.w	r9, sl, r3
 800587c:	f109 0301 	add.w	r3, r9, #1
 8005880:	2b01      	cmp	r3, #1
 8005882:	9308      	str	r3, [sp, #32]
 8005884:	bfb8      	it	lt
 8005886:	2301      	movlt	r3, #1
 8005888:	e7dd      	b.n	8005846 <_dtoa_r+0x266>
 800588a:	2301      	movs	r3, #1
 800588c:	e7f2      	b.n	8005874 <_dtoa_r+0x294>
 800588e:	bf00      	nop
 8005890:	636f4361 	.word	0x636f4361
 8005894:	3fd287a7 	.word	0x3fd287a7
 8005898:	8b60c8b3 	.word	0x8b60c8b3
 800589c:	3fc68a28 	.word	0x3fc68a28
 80058a0:	509f79fb 	.word	0x509f79fb
 80058a4:	3fd34413 	.word	0x3fd34413
 80058a8:	0800773d 	.word	0x0800773d
 80058ac:	08007754 	.word	0x08007754
 80058b0:	7ff00000 	.word	0x7ff00000
 80058b4:	08007739 	.word	0x08007739
 80058b8:	08007730 	.word	0x08007730
 80058bc:	0800770d 	.word	0x0800770d
 80058c0:	3ff80000 	.word	0x3ff80000
 80058c4:	080078a8 	.word	0x080078a8
 80058c8:	080077af 	.word	0x080077af
 80058cc:	2401      	movs	r4, #1
 80058ce:	2300      	movs	r3, #0
 80058d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80058d2:	9322      	str	r3, [sp, #136]	; 0x88
 80058d4:	f04f 39ff 	mov.w	r9, #4294967295
 80058d8:	2200      	movs	r2, #0
 80058da:	2312      	movs	r3, #18
 80058dc:	f8cd 9020 	str.w	r9, [sp, #32]
 80058e0:	9223      	str	r2, [sp, #140]	; 0x8c
 80058e2:	e7b0      	b.n	8005846 <_dtoa_r+0x266>
 80058e4:	2301      	movs	r3, #1
 80058e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058e8:	e7f4      	b.n	80058d4 <_dtoa_r+0x2f4>
 80058ea:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80058ee:	464b      	mov	r3, r9
 80058f0:	f8cd 9020 	str.w	r9, [sp, #32]
 80058f4:	e7a7      	b.n	8005846 <_dtoa_r+0x266>
 80058f6:	3101      	adds	r1, #1
 80058f8:	6041      	str	r1, [r0, #4]
 80058fa:	0052      	lsls	r2, r2, #1
 80058fc:	e7a7      	b.n	800584e <_dtoa_r+0x26e>
 80058fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005900:	9a03      	ldr	r2, [sp, #12]
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	9b08      	ldr	r3, [sp, #32]
 8005906:	2b0e      	cmp	r3, #14
 8005908:	f200 80a8 	bhi.w	8005a5c <_dtoa_r+0x47c>
 800590c:	2c00      	cmp	r4, #0
 800590e:	f000 80a5 	beq.w	8005a5c <_dtoa_r+0x47c>
 8005912:	f1ba 0f00 	cmp.w	sl, #0
 8005916:	dd34      	ble.n	8005982 <_dtoa_r+0x3a2>
 8005918:	4a9a      	ldr	r2, [pc, #616]	; (8005b84 <_dtoa_r+0x5a4>)
 800591a:	f00a 030f 	and.w	r3, sl, #15
 800591e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005922:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005926:	e9d3 3400 	ldrd	r3, r4, [r3]
 800592a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800592e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005932:	d016      	beq.n	8005962 <_dtoa_r+0x382>
 8005934:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005938:	4b93      	ldr	r3, [pc, #588]	; (8005b88 <_dtoa_r+0x5a8>)
 800593a:	2703      	movs	r7, #3
 800593c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005940:	f7fa fef4 	bl	800072c <__aeabi_ddiv>
 8005944:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005948:	f004 040f 	and.w	r4, r4, #15
 800594c:	4e8e      	ldr	r6, [pc, #568]	; (8005b88 <_dtoa_r+0x5a8>)
 800594e:	b954      	cbnz	r4, 8005966 <_dtoa_r+0x386>
 8005950:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005954:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005958:	f7fa fee8 	bl	800072c <__aeabi_ddiv>
 800595c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005960:	e029      	b.n	80059b6 <_dtoa_r+0x3d6>
 8005962:	2702      	movs	r7, #2
 8005964:	e7f2      	b.n	800594c <_dtoa_r+0x36c>
 8005966:	07e1      	lsls	r1, r4, #31
 8005968:	d508      	bpl.n	800597c <_dtoa_r+0x39c>
 800596a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800596e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005972:	f7fa fdb1 	bl	80004d8 <__aeabi_dmul>
 8005976:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800597a:	3701      	adds	r7, #1
 800597c:	1064      	asrs	r4, r4, #1
 800597e:	3608      	adds	r6, #8
 8005980:	e7e5      	b.n	800594e <_dtoa_r+0x36e>
 8005982:	f000 80a5 	beq.w	8005ad0 <_dtoa_r+0x4f0>
 8005986:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800598a:	f1ca 0400 	rsb	r4, sl, #0
 800598e:	4b7d      	ldr	r3, [pc, #500]	; (8005b84 <_dtoa_r+0x5a4>)
 8005990:	f004 020f 	and.w	r2, r4, #15
 8005994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	f7fa fd9c 	bl	80004d8 <__aeabi_dmul>
 80059a0:	2702      	movs	r7, #2
 80059a2:	2300      	movs	r3, #0
 80059a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059a8:	4e77      	ldr	r6, [pc, #476]	; (8005b88 <_dtoa_r+0x5a8>)
 80059aa:	1124      	asrs	r4, r4, #4
 80059ac:	2c00      	cmp	r4, #0
 80059ae:	f040 8084 	bne.w	8005aba <_dtoa_r+0x4da>
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1d2      	bne.n	800595c <_dtoa_r+0x37c>
 80059b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 808b 	beq.w	8005ad4 <_dtoa_r+0x4f4>
 80059be:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80059c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80059c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059ca:	2200      	movs	r2, #0
 80059cc:	4b6f      	ldr	r3, [pc, #444]	; (8005b8c <_dtoa_r+0x5ac>)
 80059ce:	f7fa fff5 	bl	80009bc <__aeabi_dcmplt>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	d07e      	beq.n	8005ad4 <_dtoa_r+0x4f4>
 80059d6:	9b08      	ldr	r3, [sp, #32]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d07b      	beq.n	8005ad4 <_dtoa_r+0x4f4>
 80059dc:	f1b9 0f00 	cmp.w	r9, #0
 80059e0:	dd38      	ble.n	8005a54 <_dtoa_r+0x474>
 80059e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059e6:	2200      	movs	r2, #0
 80059e8:	4b69      	ldr	r3, [pc, #420]	; (8005b90 <_dtoa_r+0x5b0>)
 80059ea:	f7fa fd75 	bl	80004d8 <__aeabi_dmul>
 80059ee:	464c      	mov	r4, r9
 80059f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059f4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80059f8:	3701      	adds	r7, #1
 80059fa:	4638      	mov	r0, r7
 80059fc:	f7fa fd02 	bl	8000404 <__aeabi_i2d>
 8005a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a04:	f7fa fd68 	bl	80004d8 <__aeabi_dmul>
 8005a08:	2200      	movs	r2, #0
 8005a0a:	4b62      	ldr	r3, [pc, #392]	; (8005b94 <_dtoa_r+0x5b4>)
 8005a0c:	f7fa fbae 	bl	800016c <__adddf3>
 8005a10:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005a14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a18:	9611      	str	r6, [sp, #68]	; 0x44
 8005a1a:	2c00      	cmp	r4, #0
 8005a1c:	d15d      	bne.n	8005ada <_dtoa_r+0x4fa>
 8005a1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a22:	2200      	movs	r2, #0
 8005a24:	4b5c      	ldr	r3, [pc, #368]	; (8005b98 <_dtoa_r+0x5b8>)
 8005a26:	f7fa fb9f 	bl	8000168 <__aeabi_dsub>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a32:	4633      	mov	r3, r6
 8005a34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a36:	f7fa ffdf 	bl	80009f8 <__aeabi_dcmpgt>
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	f040 829c 	bne.w	8005f78 <_dtoa_r+0x998>
 8005a40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a46:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005a4a:	f7fa ffb7 	bl	80009bc <__aeabi_dcmplt>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	f040 8290 	bne.w	8005f74 <_dtoa_r+0x994>
 8005a54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005a58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f2c0 8152 	blt.w	8005d08 <_dtoa_r+0x728>
 8005a64:	f1ba 0f0e 	cmp.w	sl, #14
 8005a68:	f300 814e 	bgt.w	8005d08 <_dtoa_r+0x728>
 8005a6c:	4b45      	ldr	r3, [pc, #276]	; (8005b84 <_dtoa_r+0x5a4>)
 8005a6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a76:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005a7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f280 80db 	bge.w	8005c38 <_dtoa_r+0x658>
 8005a82:	9b08      	ldr	r3, [sp, #32]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f300 80d7 	bgt.w	8005c38 <_dtoa_r+0x658>
 8005a8a:	f040 8272 	bne.w	8005f72 <_dtoa_r+0x992>
 8005a8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a92:	2200      	movs	r2, #0
 8005a94:	4b40      	ldr	r3, [pc, #256]	; (8005b98 <_dtoa_r+0x5b8>)
 8005a96:	f7fa fd1f 	bl	80004d8 <__aeabi_dmul>
 8005a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a9e:	f7fa ffa1 	bl	80009e4 <__aeabi_dcmpge>
 8005aa2:	9c08      	ldr	r4, [sp, #32]
 8005aa4:	4626      	mov	r6, r4
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	f040 8248 	bne.w	8005f3c <_dtoa_r+0x95c>
 8005aac:	2331      	movs	r3, #49	; 0x31
 8005aae:	9f03      	ldr	r7, [sp, #12]
 8005ab0:	f10a 0a01 	add.w	sl, sl, #1
 8005ab4:	f807 3b01 	strb.w	r3, [r7], #1
 8005ab8:	e244      	b.n	8005f44 <_dtoa_r+0x964>
 8005aba:	07e2      	lsls	r2, r4, #31
 8005abc:	d505      	bpl.n	8005aca <_dtoa_r+0x4ea>
 8005abe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ac2:	f7fa fd09 	bl	80004d8 <__aeabi_dmul>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	3701      	adds	r7, #1
 8005aca:	1064      	asrs	r4, r4, #1
 8005acc:	3608      	adds	r6, #8
 8005ace:	e76d      	b.n	80059ac <_dtoa_r+0x3cc>
 8005ad0:	2702      	movs	r7, #2
 8005ad2:	e770      	b.n	80059b6 <_dtoa_r+0x3d6>
 8005ad4:	46d0      	mov	r8, sl
 8005ad6:	9c08      	ldr	r4, [sp, #32]
 8005ad8:	e78f      	b.n	80059fa <_dtoa_r+0x41a>
 8005ada:	9903      	ldr	r1, [sp, #12]
 8005adc:	4b29      	ldr	r3, [pc, #164]	; (8005b84 <_dtoa_r+0x5a4>)
 8005ade:	4421      	add	r1, r4
 8005ae0:	9112      	str	r1, [sp, #72]	; 0x48
 8005ae2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ae4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ae8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005aec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005af0:	2900      	cmp	r1, #0
 8005af2:	d055      	beq.n	8005ba0 <_dtoa_r+0x5c0>
 8005af4:	2000      	movs	r0, #0
 8005af6:	4929      	ldr	r1, [pc, #164]	; (8005b9c <_dtoa_r+0x5bc>)
 8005af8:	f7fa fe18 	bl	800072c <__aeabi_ddiv>
 8005afc:	463b      	mov	r3, r7
 8005afe:	4632      	mov	r2, r6
 8005b00:	f7fa fb32 	bl	8000168 <__aeabi_dsub>
 8005b04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b08:	9f03      	ldr	r7, [sp, #12]
 8005b0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b0e:	f7fa ff93 	bl	8000a38 <__aeabi_d2iz>
 8005b12:	4604      	mov	r4, r0
 8005b14:	f7fa fc76 	bl	8000404 <__aeabi_i2d>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b20:	f7fa fb22 	bl	8000168 <__aeabi_dsub>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	3430      	adds	r4, #48	; 0x30
 8005b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b32:	f807 4b01 	strb.w	r4, [r7], #1
 8005b36:	f7fa ff41 	bl	80009bc <__aeabi_dcmplt>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d174      	bne.n	8005c28 <_dtoa_r+0x648>
 8005b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b42:	2000      	movs	r0, #0
 8005b44:	4911      	ldr	r1, [pc, #68]	; (8005b8c <_dtoa_r+0x5ac>)
 8005b46:	f7fa fb0f 	bl	8000168 <__aeabi_dsub>
 8005b4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b4e:	f7fa ff35 	bl	80009bc <__aeabi_dcmplt>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	f040 80b7 	bne.w	8005cc6 <_dtoa_r+0x6e6>
 8005b58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b5a:	429f      	cmp	r7, r3
 8005b5c:	f43f af7a 	beq.w	8005a54 <_dtoa_r+0x474>
 8005b60:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b64:	2200      	movs	r2, #0
 8005b66:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <_dtoa_r+0x5b0>)
 8005b68:	f7fa fcb6 	bl	80004d8 <__aeabi_dmul>
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b76:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <_dtoa_r+0x5b0>)
 8005b78:	f7fa fcae 	bl	80004d8 <__aeabi_dmul>
 8005b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b80:	e7c3      	b.n	8005b0a <_dtoa_r+0x52a>
 8005b82:	bf00      	nop
 8005b84:	080078a8 	.word	0x080078a8
 8005b88:	08007880 	.word	0x08007880
 8005b8c:	3ff00000 	.word	0x3ff00000
 8005b90:	40240000 	.word	0x40240000
 8005b94:	401c0000 	.word	0x401c0000
 8005b98:	40140000 	.word	0x40140000
 8005b9c:	3fe00000 	.word	0x3fe00000
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	4639      	mov	r1, r7
 8005ba4:	f7fa fc98 	bl	80004d8 <__aeabi_dmul>
 8005ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005baa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bae:	9c03      	ldr	r4, [sp, #12]
 8005bb0:	9314      	str	r3, [sp, #80]	; 0x50
 8005bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bb6:	f7fa ff3f 	bl	8000a38 <__aeabi_d2iz>
 8005bba:	9015      	str	r0, [sp, #84]	; 0x54
 8005bbc:	f7fa fc22 	bl	8000404 <__aeabi_i2d>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bc8:	f7fa face 	bl	8000168 <__aeabi_dsub>
 8005bcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bce:	4606      	mov	r6, r0
 8005bd0:	3330      	adds	r3, #48	; 0x30
 8005bd2:	f804 3b01 	strb.w	r3, [r4], #1
 8005bd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bd8:	460f      	mov	r7, r1
 8005bda:	429c      	cmp	r4, r3
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	d124      	bne.n	8005c2c <_dtoa_r+0x64c>
 8005be2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005be6:	4bb0      	ldr	r3, [pc, #704]	; (8005ea8 <_dtoa_r+0x8c8>)
 8005be8:	f7fa fac0 	bl	800016c <__adddf3>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	f7fa ff00 	bl	80009f8 <__aeabi_dcmpgt>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d163      	bne.n	8005cc4 <_dtoa_r+0x6e4>
 8005bfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c00:	2000      	movs	r0, #0
 8005c02:	49a9      	ldr	r1, [pc, #676]	; (8005ea8 <_dtoa_r+0x8c8>)
 8005c04:	f7fa fab0 	bl	8000168 <__aeabi_dsub>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	4639      	mov	r1, r7
 8005c10:	f7fa fed4 	bl	80009bc <__aeabi_dcmplt>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	f43f af1d 	beq.w	8005a54 <_dtoa_r+0x474>
 8005c1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005c1c:	1e7b      	subs	r3, r7, #1
 8005c1e:	9314      	str	r3, [sp, #80]	; 0x50
 8005c20:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005c24:	2b30      	cmp	r3, #48	; 0x30
 8005c26:	d0f8      	beq.n	8005c1a <_dtoa_r+0x63a>
 8005c28:	46c2      	mov	sl, r8
 8005c2a:	e03b      	b.n	8005ca4 <_dtoa_r+0x6c4>
 8005c2c:	4b9f      	ldr	r3, [pc, #636]	; (8005eac <_dtoa_r+0x8cc>)
 8005c2e:	f7fa fc53 	bl	80004d8 <__aeabi_dmul>
 8005c32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c36:	e7bc      	b.n	8005bb2 <_dtoa_r+0x5d2>
 8005c38:	9f03      	ldr	r7, [sp, #12]
 8005c3a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005c3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c42:	4640      	mov	r0, r8
 8005c44:	4649      	mov	r1, r9
 8005c46:	f7fa fd71 	bl	800072c <__aeabi_ddiv>
 8005c4a:	f7fa fef5 	bl	8000a38 <__aeabi_d2iz>
 8005c4e:	4604      	mov	r4, r0
 8005c50:	f7fa fbd8 	bl	8000404 <__aeabi_i2d>
 8005c54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c58:	f7fa fc3e 	bl	80004d8 <__aeabi_dmul>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4640      	mov	r0, r8
 8005c62:	4649      	mov	r1, r9
 8005c64:	f7fa fa80 	bl	8000168 <__aeabi_dsub>
 8005c68:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005c6c:	f807 6b01 	strb.w	r6, [r7], #1
 8005c70:	9e03      	ldr	r6, [sp, #12]
 8005c72:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005c76:	1bbe      	subs	r6, r7, r6
 8005c78:	45b4      	cmp	ip, r6
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	d136      	bne.n	8005cee <_dtoa_r+0x70e>
 8005c80:	f7fa fa74 	bl	800016c <__adddf3>
 8005c84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c88:	4680      	mov	r8, r0
 8005c8a:	4689      	mov	r9, r1
 8005c8c:	f7fa feb4 	bl	80009f8 <__aeabi_dcmpgt>
 8005c90:	bb58      	cbnz	r0, 8005cea <_dtoa_r+0x70a>
 8005c92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c96:	4640      	mov	r0, r8
 8005c98:	4649      	mov	r1, r9
 8005c9a:	f7fa fe85 	bl	80009a8 <__aeabi_dcmpeq>
 8005c9e:	b108      	cbz	r0, 8005ca4 <_dtoa_r+0x6c4>
 8005ca0:	07e1      	lsls	r1, r4, #31
 8005ca2:	d422      	bmi.n	8005cea <_dtoa_r+0x70a>
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	4659      	mov	r1, fp
 8005ca8:	f000 fbea 	bl	8006480 <_Bfree>
 8005cac:	2300      	movs	r3, #0
 8005cae:	703b      	strb	r3, [r7, #0]
 8005cb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005cb2:	f10a 0001 	add.w	r0, sl, #1
 8005cb6:	6018      	str	r0, [r3, #0]
 8005cb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f43f acde 	beq.w	800567c <_dtoa_r+0x9c>
 8005cc0:	601f      	str	r7, [r3, #0]
 8005cc2:	e4db      	b.n	800567c <_dtoa_r+0x9c>
 8005cc4:	4627      	mov	r7, r4
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	461f      	mov	r7, r3
 8005cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cce:	2a39      	cmp	r2, #57	; 0x39
 8005cd0:	d107      	bne.n	8005ce2 <_dtoa_r+0x702>
 8005cd2:	9a03      	ldr	r2, [sp, #12]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d1f7      	bne.n	8005cc8 <_dtoa_r+0x6e8>
 8005cd8:	2230      	movs	r2, #48	; 0x30
 8005cda:	9903      	ldr	r1, [sp, #12]
 8005cdc:	f108 0801 	add.w	r8, r8, #1
 8005ce0:	700a      	strb	r2, [r1, #0]
 8005ce2:	781a      	ldrb	r2, [r3, #0]
 8005ce4:	3201      	adds	r2, #1
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	e79e      	b.n	8005c28 <_dtoa_r+0x648>
 8005cea:	46d0      	mov	r8, sl
 8005cec:	e7eb      	b.n	8005cc6 <_dtoa_r+0x6e6>
 8005cee:	2200      	movs	r2, #0
 8005cf0:	4b6e      	ldr	r3, [pc, #440]	; (8005eac <_dtoa_r+0x8cc>)
 8005cf2:	f7fa fbf1 	bl	80004d8 <__aeabi_dmul>
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4680      	mov	r8, r0
 8005cfc:	4689      	mov	r9, r1
 8005cfe:	f7fa fe53 	bl	80009a8 <__aeabi_dcmpeq>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d09b      	beq.n	8005c3e <_dtoa_r+0x65e>
 8005d06:	e7cd      	b.n	8005ca4 <_dtoa_r+0x6c4>
 8005d08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	f000 80d0 	beq.w	8005eb0 <_dtoa_r+0x8d0>
 8005d10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d12:	2a01      	cmp	r2, #1
 8005d14:	f300 80ae 	bgt.w	8005e74 <_dtoa_r+0x894>
 8005d18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d1a:	2a00      	cmp	r2, #0
 8005d1c:	f000 80a6 	beq.w	8005e6c <_dtoa_r+0x88c>
 8005d20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d26:	9f06      	ldr	r7, [sp, #24]
 8005d28:	9a06      	ldr	r2, [sp, #24]
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	441a      	add	r2, r3
 8005d2e:	9206      	str	r2, [sp, #24]
 8005d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d32:	4628      	mov	r0, r5
 8005d34:	441a      	add	r2, r3
 8005d36:	9209      	str	r2, [sp, #36]	; 0x24
 8005d38:	f000 fc58 	bl	80065ec <__i2b>
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	2f00      	cmp	r7, #0
 8005d40:	dd0c      	ble.n	8005d5c <_dtoa_r+0x77c>
 8005d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	dd09      	ble.n	8005d5c <_dtoa_r+0x77c>
 8005d48:	42bb      	cmp	r3, r7
 8005d4a:	bfa8      	it	ge
 8005d4c:	463b      	movge	r3, r7
 8005d4e:	9a06      	ldr	r2, [sp, #24]
 8005d50:	1aff      	subs	r7, r7, r3
 8005d52:	1ad2      	subs	r2, r2, r3
 8005d54:	9206      	str	r2, [sp, #24]
 8005d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d5e:	b1f3      	cbz	r3, 8005d9e <_dtoa_r+0x7be>
 8005d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 80a8 	beq.w	8005eb8 <_dtoa_r+0x8d8>
 8005d68:	2c00      	cmp	r4, #0
 8005d6a:	dd10      	ble.n	8005d8e <_dtoa_r+0x7ae>
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	4622      	mov	r2, r4
 8005d70:	4628      	mov	r0, r5
 8005d72:	f000 fcf9 	bl	8006768 <__pow5mult>
 8005d76:	465a      	mov	r2, fp
 8005d78:	4601      	mov	r1, r0
 8005d7a:	4606      	mov	r6, r0
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f000 fc4b 	bl	8006618 <__multiply>
 8005d82:	4680      	mov	r8, r0
 8005d84:	4659      	mov	r1, fp
 8005d86:	4628      	mov	r0, r5
 8005d88:	f000 fb7a 	bl	8006480 <_Bfree>
 8005d8c:	46c3      	mov	fp, r8
 8005d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d90:	1b1a      	subs	r2, r3, r4
 8005d92:	d004      	beq.n	8005d9e <_dtoa_r+0x7be>
 8005d94:	4659      	mov	r1, fp
 8005d96:	4628      	mov	r0, r5
 8005d98:	f000 fce6 	bl	8006768 <__pow5mult>
 8005d9c:	4683      	mov	fp, r0
 8005d9e:	2101      	movs	r1, #1
 8005da0:	4628      	mov	r0, r5
 8005da2:	f000 fc23 	bl	80065ec <__i2b>
 8005da6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005da8:	4604      	mov	r4, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f340 8086 	ble.w	8005ebc <_dtoa_r+0x8dc>
 8005db0:	461a      	mov	r2, r3
 8005db2:	4601      	mov	r1, r0
 8005db4:	4628      	mov	r0, r5
 8005db6:	f000 fcd7 	bl	8006768 <__pow5mult>
 8005dba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	dd7f      	ble.n	8005ec2 <_dtoa_r+0x8e2>
 8005dc2:	f04f 0800 	mov.w	r8, #0
 8005dc6:	6923      	ldr	r3, [r4, #16]
 8005dc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005dcc:	6918      	ldr	r0, [r3, #16]
 8005dce:	f000 fbbf 	bl	8006550 <__hi0bits>
 8005dd2:	f1c0 0020 	rsb	r0, r0, #32
 8005dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd8:	4418      	add	r0, r3
 8005dda:	f010 001f 	ands.w	r0, r0, #31
 8005dde:	f000 8092 	beq.w	8005f06 <_dtoa_r+0x926>
 8005de2:	f1c0 0320 	rsb	r3, r0, #32
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	f340 808a 	ble.w	8005f00 <_dtoa_r+0x920>
 8005dec:	f1c0 001c 	rsb	r0, r0, #28
 8005df0:	9b06      	ldr	r3, [sp, #24]
 8005df2:	4407      	add	r7, r0
 8005df4:	4403      	add	r3, r0
 8005df6:	9306      	str	r3, [sp, #24]
 8005df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dfa:	4403      	add	r3, r0
 8005dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8005dfe:	9b06      	ldr	r3, [sp, #24]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	dd05      	ble.n	8005e10 <_dtoa_r+0x830>
 8005e04:	4659      	mov	r1, fp
 8005e06:	461a      	mov	r2, r3
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f000 fd07 	bl	800681c <__lshift>
 8005e0e:	4683      	mov	fp, r0
 8005e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	dd05      	ble.n	8005e22 <_dtoa_r+0x842>
 8005e16:	4621      	mov	r1, r4
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f000 fcfe 	bl	800681c <__lshift>
 8005e20:	4604      	mov	r4, r0
 8005e22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d070      	beq.n	8005f0a <_dtoa_r+0x92a>
 8005e28:	4621      	mov	r1, r4
 8005e2a:	4658      	mov	r0, fp
 8005e2c:	f000 fd66 	bl	80068fc <__mcmp>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	da6a      	bge.n	8005f0a <_dtoa_r+0x92a>
 8005e34:	2300      	movs	r3, #0
 8005e36:	4659      	mov	r1, fp
 8005e38:	220a      	movs	r2, #10
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f000 fb42 	bl	80064c4 <__multadd>
 8005e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e42:	4683      	mov	fp, r0
 8005e44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 8194 	beq.w	8006176 <_dtoa_r+0xb96>
 8005e4e:	4631      	mov	r1, r6
 8005e50:	2300      	movs	r3, #0
 8005e52:	220a      	movs	r2, #10
 8005e54:	4628      	mov	r0, r5
 8005e56:	f000 fb35 	bl	80064c4 <__multadd>
 8005e5a:	f1b9 0f00 	cmp.w	r9, #0
 8005e5e:	4606      	mov	r6, r0
 8005e60:	f300 8093 	bgt.w	8005f8a <_dtoa_r+0x9aa>
 8005e64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	dc57      	bgt.n	8005f1a <_dtoa_r+0x93a>
 8005e6a:	e08e      	b.n	8005f8a <_dtoa_r+0x9aa>
 8005e6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e72:	e757      	b.n	8005d24 <_dtoa_r+0x744>
 8005e74:	9b08      	ldr	r3, [sp, #32]
 8005e76:	1e5c      	subs	r4, r3, #1
 8005e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e7a:	42a3      	cmp	r3, r4
 8005e7c:	bfb7      	itett	lt
 8005e7e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005e80:	1b1c      	subge	r4, r3, r4
 8005e82:	1ae2      	sublt	r2, r4, r3
 8005e84:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005e86:	bfbe      	ittt	lt
 8005e88:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005e8a:	189b      	addlt	r3, r3, r2
 8005e8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005e8e:	9b08      	ldr	r3, [sp, #32]
 8005e90:	bfb8      	it	lt
 8005e92:	2400      	movlt	r4, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bfbb      	ittet	lt
 8005e98:	9b06      	ldrlt	r3, [sp, #24]
 8005e9a:	9a08      	ldrlt	r2, [sp, #32]
 8005e9c:	9f06      	ldrge	r7, [sp, #24]
 8005e9e:	1a9f      	sublt	r7, r3, r2
 8005ea0:	bfac      	ite	ge
 8005ea2:	9b08      	ldrge	r3, [sp, #32]
 8005ea4:	2300      	movlt	r3, #0
 8005ea6:	e73f      	b.n	8005d28 <_dtoa_r+0x748>
 8005ea8:	3fe00000 	.word	0x3fe00000
 8005eac:	40240000 	.word	0x40240000
 8005eb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005eb2:	9f06      	ldr	r7, [sp, #24]
 8005eb4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005eb6:	e742      	b.n	8005d3e <_dtoa_r+0x75e>
 8005eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eba:	e76b      	b.n	8005d94 <_dtoa_r+0x7b4>
 8005ebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	dc19      	bgt.n	8005ef6 <_dtoa_r+0x916>
 8005ec2:	9b04      	ldr	r3, [sp, #16]
 8005ec4:	b9bb      	cbnz	r3, 8005ef6 <_dtoa_r+0x916>
 8005ec6:	9b05      	ldr	r3, [sp, #20]
 8005ec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ecc:	b99b      	cbnz	r3, 8005ef6 <_dtoa_r+0x916>
 8005ece:	9b05      	ldr	r3, [sp, #20]
 8005ed0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ed4:	0d1b      	lsrs	r3, r3, #20
 8005ed6:	051b      	lsls	r3, r3, #20
 8005ed8:	b183      	cbz	r3, 8005efc <_dtoa_r+0x91c>
 8005eda:	f04f 0801 	mov.w	r8, #1
 8005ede:	9b06      	ldr	r3, [sp, #24]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	9306      	str	r3, [sp, #24]
 8005ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f47f af6a 	bne.w	8005dc6 <_dtoa_r+0x7e6>
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	e76f      	b.n	8005dd6 <_dtoa_r+0x7f6>
 8005ef6:	f04f 0800 	mov.w	r8, #0
 8005efa:	e7f6      	b.n	8005eea <_dtoa_r+0x90a>
 8005efc:	4698      	mov	r8, r3
 8005efe:	e7f4      	b.n	8005eea <_dtoa_r+0x90a>
 8005f00:	f43f af7d 	beq.w	8005dfe <_dtoa_r+0x81e>
 8005f04:	4618      	mov	r0, r3
 8005f06:	301c      	adds	r0, #28
 8005f08:	e772      	b.n	8005df0 <_dtoa_r+0x810>
 8005f0a:	9b08      	ldr	r3, [sp, #32]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dc36      	bgt.n	8005f7e <_dtoa_r+0x99e>
 8005f10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	dd33      	ble.n	8005f7e <_dtoa_r+0x99e>
 8005f16:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f1a:	f1b9 0f00 	cmp.w	r9, #0
 8005f1e:	d10d      	bne.n	8005f3c <_dtoa_r+0x95c>
 8005f20:	4621      	mov	r1, r4
 8005f22:	464b      	mov	r3, r9
 8005f24:	2205      	movs	r2, #5
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 facc 	bl	80064c4 <__multadd>
 8005f2c:	4601      	mov	r1, r0
 8005f2e:	4604      	mov	r4, r0
 8005f30:	4658      	mov	r0, fp
 8005f32:	f000 fce3 	bl	80068fc <__mcmp>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	f73f adb8 	bgt.w	8005aac <_dtoa_r+0x4cc>
 8005f3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f3e:	9f03      	ldr	r7, [sp, #12]
 8005f40:	ea6f 0a03 	mvn.w	sl, r3
 8005f44:	f04f 0800 	mov.w	r8, #0
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f000 fa98 	bl	8006480 <_Bfree>
 8005f50:	2e00      	cmp	r6, #0
 8005f52:	f43f aea7 	beq.w	8005ca4 <_dtoa_r+0x6c4>
 8005f56:	f1b8 0f00 	cmp.w	r8, #0
 8005f5a:	d005      	beq.n	8005f68 <_dtoa_r+0x988>
 8005f5c:	45b0      	cmp	r8, r6
 8005f5e:	d003      	beq.n	8005f68 <_dtoa_r+0x988>
 8005f60:	4641      	mov	r1, r8
 8005f62:	4628      	mov	r0, r5
 8005f64:	f000 fa8c 	bl	8006480 <_Bfree>
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	f000 fa88 	bl	8006480 <_Bfree>
 8005f70:	e698      	b.n	8005ca4 <_dtoa_r+0x6c4>
 8005f72:	2400      	movs	r4, #0
 8005f74:	4626      	mov	r6, r4
 8005f76:	e7e1      	b.n	8005f3c <_dtoa_r+0x95c>
 8005f78:	46c2      	mov	sl, r8
 8005f7a:	4626      	mov	r6, r4
 8005f7c:	e596      	b.n	8005aac <_dtoa_r+0x4cc>
 8005f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 80fd 	beq.w	8006184 <_dtoa_r+0xba4>
 8005f8a:	2f00      	cmp	r7, #0
 8005f8c:	dd05      	ble.n	8005f9a <_dtoa_r+0x9ba>
 8005f8e:	4631      	mov	r1, r6
 8005f90:	463a      	mov	r2, r7
 8005f92:	4628      	mov	r0, r5
 8005f94:	f000 fc42 	bl	800681c <__lshift>
 8005f98:	4606      	mov	r6, r0
 8005f9a:	f1b8 0f00 	cmp.w	r8, #0
 8005f9e:	d05c      	beq.n	800605a <_dtoa_r+0xa7a>
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	6871      	ldr	r1, [r6, #4]
 8005fa4:	f000 fa2c 	bl	8006400 <_Balloc>
 8005fa8:	4607      	mov	r7, r0
 8005faa:	b928      	cbnz	r0, 8005fb8 <_dtoa_r+0x9d8>
 8005fac:	4602      	mov	r2, r0
 8005fae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005fb2:	4b7f      	ldr	r3, [pc, #508]	; (80061b0 <_dtoa_r+0xbd0>)
 8005fb4:	f7ff bb28 	b.w	8005608 <_dtoa_r+0x28>
 8005fb8:	6932      	ldr	r2, [r6, #16]
 8005fba:	f106 010c 	add.w	r1, r6, #12
 8005fbe:	3202      	adds	r2, #2
 8005fc0:	0092      	lsls	r2, r2, #2
 8005fc2:	300c      	adds	r0, #12
 8005fc4:	f000 fa0e 	bl	80063e4 <memcpy>
 8005fc8:	2201      	movs	r2, #1
 8005fca:	4639      	mov	r1, r7
 8005fcc:	4628      	mov	r0, r5
 8005fce:	f000 fc25 	bl	800681c <__lshift>
 8005fd2:	46b0      	mov	r8, r6
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	9b03      	ldr	r3, [sp, #12]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	9308      	str	r3, [sp, #32]
 8005fdc:	9b03      	ldr	r3, [sp, #12]
 8005fde:	444b      	add	r3, r9
 8005fe0:	930a      	str	r3, [sp, #40]	; 0x28
 8005fe2:	9b04      	ldr	r3, [sp, #16]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fea:	9b08      	ldr	r3, [sp, #32]
 8005fec:	4621      	mov	r1, r4
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	4658      	mov	r0, fp
 8005ff2:	9304      	str	r3, [sp, #16]
 8005ff4:	f7ff fa68 	bl	80054c8 <quorem>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	4641      	mov	r1, r8
 8005ffc:	3330      	adds	r3, #48	; 0x30
 8005ffe:	9006      	str	r0, [sp, #24]
 8006000:	4658      	mov	r0, fp
 8006002:	930b      	str	r3, [sp, #44]	; 0x2c
 8006004:	f000 fc7a 	bl	80068fc <__mcmp>
 8006008:	4632      	mov	r2, r6
 800600a:	4681      	mov	r9, r0
 800600c:	4621      	mov	r1, r4
 800600e:	4628      	mov	r0, r5
 8006010:	f000 fc90 	bl	8006934 <__mdiff>
 8006014:	68c2      	ldr	r2, [r0, #12]
 8006016:	4607      	mov	r7, r0
 8006018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800601a:	bb02      	cbnz	r2, 800605e <_dtoa_r+0xa7e>
 800601c:	4601      	mov	r1, r0
 800601e:	4658      	mov	r0, fp
 8006020:	f000 fc6c 	bl	80068fc <__mcmp>
 8006024:	4602      	mov	r2, r0
 8006026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006028:	4639      	mov	r1, r7
 800602a:	4628      	mov	r0, r5
 800602c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006030:	f000 fa26 	bl	8006480 <_Bfree>
 8006034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006038:	9f08      	ldr	r7, [sp, #32]
 800603a:	ea43 0102 	orr.w	r1, r3, r2
 800603e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006040:	430b      	orrs	r3, r1
 8006042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006044:	d10d      	bne.n	8006062 <_dtoa_r+0xa82>
 8006046:	2b39      	cmp	r3, #57	; 0x39
 8006048:	d029      	beq.n	800609e <_dtoa_r+0xabe>
 800604a:	f1b9 0f00 	cmp.w	r9, #0
 800604e:	dd01      	ble.n	8006054 <_dtoa_r+0xa74>
 8006050:	9b06      	ldr	r3, [sp, #24]
 8006052:	3331      	adds	r3, #49	; 0x31
 8006054:	9a04      	ldr	r2, [sp, #16]
 8006056:	7013      	strb	r3, [r2, #0]
 8006058:	e776      	b.n	8005f48 <_dtoa_r+0x968>
 800605a:	4630      	mov	r0, r6
 800605c:	e7b9      	b.n	8005fd2 <_dtoa_r+0x9f2>
 800605e:	2201      	movs	r2, #1
 8006060:	e7e2      	b.n	8006028 <_dtoa_r+0xa48>
 8006062:	f1b9 0f00 	cmp.w	r9, #0
 8006066:	db06      	blt.n	8006076 <_dtoa_r+0xa96>
 8006068:	9922      	ldr	r1, [sp, #136]	; 0x88
 800606a:	ea41 0909 	orr.w	r9, r1, r9
 800606e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006070:	ea59 0101 	orrs.w	r1, r9, r1
 8006074:	d120      	bne.n	80060b8 <_dtoa_r+0xad8>
 8006076:	2a00      	cmp	r2, #0
 8006078:	ddec      	ble.n	8006054 <_dtoa_r+0xa74>
 800607a:	4659      	mov	r1, fp
 800607c:	2201      	movs	r2, #1
 800607e:	4628      	mov	r0, r5
 8006080:	9308      	str	r3, [sp, #32]
 8006082:	f000 fbcb 	bl	800681c <__lshift>
 8006086:	4621      	mov	r1, r4
 8006088:	4683      	mov	fp, r0
 800608a:	f000 fc37 	bl	80068fc <__mcmp>
 800608e:	2800      	cmp	r0, #0
 8006090:	9b08      	ldr	r3, [sp, #32]
 8006092:	dc02      	bgt.n	800609a <_dtoa_r+0xaba>
 8006094:	d1de      	bne.n	8006054 <_dtoa_r+0xa74>
 8006096:	07da      	lsls	r2, r3, #31
 8006098:	d5dc      	bpl.n	8006054 <_dtoa_r+0xa74>
 800609a:	2b39      	cmp	r3, #57	; 0x39
 800609c:	d1d8      	bne.n	8006050 <_dtoa_r+0xa70>
 800609e:	2339      	movs	r3, #57	; 0x39
 80060a0:	9a04      	ldr	r2, [sp, #16]
 80060a2:	7013      	strb	r3, [r2, #0]
 80060a4:	463b      	mov	r3, r7
 80060a6:	461f      	mov	r7, r3
 80060a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	2a39      	cmp	r2, #57	; 0x39
 80060b0:	d050      	beq.n	8006154 <_dtoa_r+0xb74>
 80060b2:	3201      	adds	r2, #1
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	e747      	b.n	8005f48 <_dtoa_r+0x968>
 80060b8:	2a00      	cmp	r2, #0
 80060ba:	dd03      	ble.n	80060c4 <_dtoa_r+0xae4>
 80060bc:	2b39      	cmp	r3, #57	; 0x39
 80060be:	d0ee      	beq.n	800609e <_dtoa_r+0xabe>
 80060c0:	3301      	adds	r3, #1
 80060c2:	e7c7      	b.n	8006054 <_dtoa_r+0xa74>
 80060c4:	9a08      	ldr	r2, [sp, #32]
 80060c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060cc:	428a      	cmp	r2, r1
 80060ce:	d02a      	beq.n	8006126 <_dtoa_r+0xb46>
 80060d0:	4659      	mov	r1, fp
 80060d2:	2300      	movs	r3, #0
 80060d4:	220a      	movs	r2, #10
 80060d6:	4628      	mov	r0, r5
 80060d8:	f000 f9f4 	bl	80064c4 <__multadd>
 80060dc:	45b0      	cmp	r8, r6
 80060de:	4683      	mov	fp, r0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	f04f 020a 	mov.w	r2, #10
 80060e8:	4641      	mov	r1, r8
 80060ea:	4628      	mov	r0, r5
 80060ec:	d107      	bne.n	80060fe <_dtoa_r+0xb1e>
 80060ee:	f000 f9e9 	bl	80064c4 <__multadd>
 80060f2:	4680      	mov	r8, r0
 80060f4:	4606      	mov	r6, r0
 80060f6:	9b08      	ldr	r3, [sp, #32]
 80060f8:	3301      	adds	r3, #1
 80060fa:	9308      	str	r3, [sp, #32]
 80060fc:	e775      	b.n	8005fea <_dtoa_r+0xa0a>
 80060fe:	f000 f9e1 	bl	80064c4 <__multadd>
 8006102:	4631      	mov	r1, r6
 8006104:	4680      	mov	r8, r0
 8006106:	2300      	movs	r3, #0
 8006108:	220a      	movs	r2, #10
 800610a:	4628      	mov	r0, r5
 800610c:	f000 f9da 	bl	80064c4 <__multadd>
 8006110:	4606      	mov	r6, r0
 8006112:	e7f0      	b.n	80060f6 <_dtoa_r+0xb16>
 8006114:	f1b9 0f00 	cmp.w	r9, #0
 8006118:	bfcc      	ite	gt
 800611a:	464f      	movgt	r7, r9
 800611c:	2701      	movle	r7, #1
 800611e:	f04f 0800 	mov.w	r8, #0
 8006122:	9a03      	ldr	r2, [sp, #12]
 8006124:	4417      	add	r7, r2
 8006126:	4659      	mov	r1, fp
 8006128:	2201      	movs	r2, #1
 800612a:	4628      	mov	r0, r5
 800612c:	9308      	str	r3, [sp, #32]
 800612e:	f000 fb75 	bl	800681c <__lshift>
 8006132:	4621      	mov	r1, r4
 8006134:	4683      	mov	fp, r0
 8006136:	f000 fbe1 	bl	80068fc <__mcmp>
 800613a:	2800      	cmp	r0, #0
 800613c:	dcb2      	bgt.n	80060a4 <_dtoa_r+0xac4>
 800613e:	d102      	bne.n	8006146 <_dtoa_r+0xb66>
 8006140:	9b08      	ldr	r3, [sp, #32]
 8006142:	07db      	lsls	r3, r3, #31
 8006144:	d4ae      	bmi.n	80060a4 <_dtoa_r+0xac4>
 8006146:	463b      	mov	r3, r7
 8006148:	461f      	mov	r7, r3
 800614a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800614e:	2a30      	cmp	r2, #48	; 0x30
 8006150:	d0fa      	beq.n	8006148 <_dtoa_r+0xb68>
 8006152:	e6f9      	b.n	8005f48 <_dtoa_r+0x968>
 8006154:	9a03      	ldr	r2, [sp, #12]
 8006156:	429a      	cmp	r2, r3
 8006158:	d1a5      	bne.n	80060a6 <_dtoa_r+0xac6>
 800615a:	2331      	movs	r3, #49	; 0x31
 800615c:	f10a 0a01 	add.w	sl, sl, #1
 8006160:	e779      	b.n	8006056 <_dtoa_r+0xa76>
 8006162:	4b14      	ldr	r3, [pc, #80]	; (80061b4 <_dtoa_r+0xbd4>)
 8006164:	f7ff baa8 	b.w	80056b8 <_dtoa_r+0xd8>
 8006168:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800616a:	2b00      	cmp	r3, #0
 800616c:	f47f aa81 	bne.w	8005672 <_dtoa_r+0x92>
 8006170:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <_dtoa_r+0xbd8>)
 8006172:	f7ff baa1 	b.w	80056b8 <_dtoa_r+0xd8>
 8006176:	f1b9 0f00 	cmp.w	r9, #0
 800617a:	dc03      	bgt.n	8006184 <_dtoa_r+0xba4>
 800617c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800617e:	2b02      	cmp	r3, #2
 8006180:	f73f aecb 	bgt.w	8005f1a <_dtoa_r+0x93a>
 8006184:	9f03      	ldr	r7, [sp, #12]
 8006186:	4621      	mov	r1, r4
 8006188:	4658      	mov	r0, fp
 800618a:	f7ff f99d 	bl	80054c8 <quorem>
 800618e:	9a03      	ldr	r2, [sp, #12]
 8006190:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006194:	f807 3b01 	strb.w	r3, [r7], #1
 8006198:	1aba      	subs	r2, r7, r2
 800619a:	4591      	cmp	r9, r2
 800619c:	ddba      	ble.n	8006114 <_dtoa_r+0xb34>
 800619e:	4659      	mov	r1, fp
 80061a0:	2300      	movs	r3, #0
 80061a2:	220a      	movs	r2, #10
 80061a4:	4628      	mov	r0, r5
 80061a6:	f000 f98d 	bl	80064c4 <__multadd>
 80061aa:	4683      	mov	fp, r0
 80061ac:	e7eb      	b.n	8006186 <_dtoa_r+0xba6>
 80061ae:	bf00      	nop
 80061b0:	080077af 	.word	0x080077af
 80061b4:	0800770c 	.word	0x0800770c
 80061b8:	08007730 	.word	0x08007730

080061bc <std>:
 80061bc:	2300      	movs	r3, #0
 80061be:	b510      	push	{r4, lr}
 80061c0:	4604      	mov	r4, r0
 80061c2:	e9c0 3300 	strd	r3, r3, [r0]
 80061c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ca:	6083      	str	r3, [r0, #8]
 80061cc:	8181      	strh	r1, [r0, #12]
 80061ce:	6643      	str	r3, [r0, #100]	; 0x64
 80061d0:	81c2      	strh	r2, [r0, #14]
 80061d2:	6183      	str	r3, [r0, #24]
 80061d4:	4619      	mov	r1, r3
 80061d6:	2208      	movs	r2, #8
 80061d8:	305c      	adds	r0, #92	; 0x5c
 80061da:	f7fe fcf5 	bl	8004bc8 <memset>
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <std+0x38>)
 80061e0:	6224      	str	r4, [r4, #32]
 80061e2:	6263      	str	r3, [r4, #36]	; 0x24
 80061e4:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <std+0x3c>)
 80061e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <std+0x40>)
 80061ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061ec:	4b04      	ldr	r3, [pc, #16]	; (8006200 <std+0x44>)
 80061ee:	6323      	str	r3, [r4, #48]	; 0x30
 80061f0:	bd10      	pop	{r4, pc}
 80061f2:	bf00      	nop
 80061f4:	08006fb5 	.word	0x08006fb5
 80061f8:	08006fd7 	.word	0x08006fd7
 80061fc:	0800700f 	.word	0x0800700f
 8006200:	08007033 	.word	0x08007033

08006204 <_cleanup_r>:
 8006204:	4901      	ldr	r1, [pc, #4]	; (800620c <_cleanup_r+0x8>)
 8006206:	f000 b8af 	b.w	8006368 <_fwalk_reent>
 800620a:	bf00      	nop
 800620c:	08007341 	.word	0x08007341

08006210 <__sfmoreglue>:
 8006210:	2268      	movs	r2, #104	; 0x68
 8006212:	b570      	push	{r4, r5, r6, lr}
 8006214:	1e4d      	subs	r5, r1, #1
 8006216:	4355      	muls	r5, r2
 8006218:	460e      	mov	r6, r1
 800621a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800621e:	f000 fced 	bl	8006bfc <_malloc_r>
 8006222:	4604      	mov	r4, r0
 8006224:	b140      	cbz	r0, 8006238 <__sfmoreglue+0x28>
 8006226:	2100      	movs	r1, #0
 8006228:	e9c0 1600 	strd	r1, r6, [r0]
 800622c:	300c      	adds	r0, #12
 800622e:	60a0      	str	r0, [r4, #8]
 8006230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006234:	f7fe fcc8 	bl	8004bc8 <memset>
 8006238:	4620      	mov	r0, r4
 800623a:	bd70      	pop	{r4, r5, r6, pc}

0800623c <__sfp_lock_acquire>:
 800623c:	4801      	ldr	r0, [pc, #4]	; (8006244 <__sfp_lock_acquire+0x8>)
 800623e:	f000 b8b8 	b.w	80063b2 <__retarget_lock_acquire_recursive>
 8006242:	bf00      	nop
 8006244:	20000f85 	.word	0x20000f85

08006248 <__sfp_lock_release>:
 8006248:	4801      	ldr	r0, [pc, #4]	; (8006250 <__sfp_lock_release+0x8>)
 800624a:	f000 b8b3 	b.w	80063b4 <__retarget_lock_release_recursive>
 800624e:	bf00      	nop
 8006250:	20000f85 	.word	0x20000f85

08006254 <__sinit_lock_acquire>:
 8006254:	4801      	ldr	r0, [pc, #4]	; (800625c <__sinit_lock_acquire+0x8>)
 8006256:	f000 b8ac 	b.w	80063b2 <__retarget_lock_acquire_recursive>
 800625a:	bf00      	nop
 800625c:	20000f86 	.word	0x20000f86

08006260 <__sinit_lock_release>:
 8006260:	4801      	ldr	r0, [pc, #4]	; (8006268 <__sinit_lock_release+0x8>)
 8006262:	f000 b8a7 	b.w	80063b4 <__retarget_lock_release_recursive>
 8006266:	bf00      	nop
 8006268:	20000f86 	.word	0x20000f86

0800626c <__sinit>:
 800626c:	b510      	push	{r4, lr}
 800626e:	4604      	mov	r4, r0
 8006270:	f7ff fff0 	bl	8006254 <__sinit_lock_acquire>
 8006274:	69a3      	ldr	r3, [r4, #24]
 8006276:	b11b      	cbz	r3, 8006280 <__sinit+0x14>
 8006278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800627c:	f7ff bff0 	b.w	8006260 <__sinit_lock_release>
 8006280:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006284:	6523      	str	r3, [r4, #80]	; 0x50
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <__sinit+0x68>)
 8006288:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <__sinit+0x6c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	62a2      	str	r2, [r4, #40]	; 0x28
 800628e:	42a3      	cmp	r3, r4
 8006290:	bf08      	it	eq
 8006292:	2301      	moveq	r3, #1
 8006294:	4620      	mov	r0, r4
 8006296:	bf08      	it	eq
 8006298:	61a3      	streq	r3, [r4, #24]
 800629a:	f000 f81f 	bl	80062dc <__sfp>
 800629e:	6060      	str	r0, [r4, #4]
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 f81b 	bl	80062dc <__sfp>
 80062a6:	60a0      	str	r0, [r4, #8]
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 f817 	bl	80062dc <__sfp>
 80062ae:	2200      	movs	r2, #0
 80062b0:	2104      	movs	r1, #4
 80062b2:	60e0      	str	r0, [r4, #12]
 80062b4:	6860      	ldr	r0, [r4, #4]
 80062b6:	f7ff ff81 	bl	80061bc <std>
 80062ba:	2201      	movs	r2, #1
 80062bc:	2109      	movs	r1, #9
 80062be:	68a0      	ldr	r0, [r4, #8]
 80062c0:	f7ff ff7c 	bl	80061bc <std>
 80062c4:	2202      	movs	r2, #2
 80062c6:	2112      	movs	r1, #18
 80062c8:	68e0      	ldr	r0, [r4, #12]
 80062ca:	f7ff ff77 	bl	80061bc <std>
 80062ce:	2301      	movs	r3, #1
 80062d0:	61a3      	str	r3, [r4, #24]
 80062d2:	e7d1      	b.n	8006278 <__sinit+0xc>
 80062d4:	080076f8 	.word	0x080076f8
 80062d8:	08006205 	.word	0x08006205

080062dc <__sfp>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	4607      	mov	r7, r0
 80062e0:	f7ff ffac 	bl	800623c <__sfp_lock_acquire>
 80062e4:	4b1e      	ldr	r3, [pc, #120]	; (8006360 <__sfp+0x84>)
 80062e6:	681e      	ldr	r6, [r3, #0]
 80062e8:	69b3      	ldr	r3, [r6, #24]
 80062ea:	b913      	cbnz	r3, 80062f2 <__sfp+0x16>
 80062ec:	4630      	mov	r0, r6
 80062ee:	f7ff ffbd 	bl	800626c <__sinit>
 80062f2:	3648      	adds	r6, #72	; 0x48
 80062f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	d503      	bpl.n	8006304 <__sfp+0x28>
 80062fc:	6833      	ldr	r3, [r6, #0]
 80062fe:	b30b      	cbz	r3, 8006344 <__sfp+0x68>
 8006300:	6836      	ldr	r6, [r6, #0]
 8006302:	e7f7      	b.n	80062f4 <__sfp+0x18>
 8006304:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006308:	b9d5      	cbnz	r5, 8006340 <__sfp+0x64>
 800630a:	4b16      	ldr	r3, [pc, #88]	; (8006364 <__sfp+0x88>)
 800630c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006310:	60e3      	str	r3, [r4, #12]
 8006312:	6665      	str	r5, [r4, #100]	; 0x64
 8006314:	f000 f84c 	bl	80063b0 <__retarget_lock_init_recursive>
 8006318:	f7ff ff96 	bl	8006248 <__sfp_lock_release>
 800631c:	2208      	movs	r2, #8
 800631e:	4629      	mov	r1, r5
 8006320:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006324:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006328:	6025      	str	r5, [r4, #0]
 800632a:	61a5      	str	r5, [r4, #24]
 800632c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006330:	f7fe fc4a 	bl	8004bc8 <memset>
 8006334:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006338:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800633c:	4620      	mov	r0, r4
 800633e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006340:	3468      	adds	r4, #104	; 0x68
 8006342:	e7d9      	b.n	80062f8 <__sfp+0x1c>
 8006344:	2104      	movs	r1, #4
 8006346:	4638      	mov	r0, r7
 8006348:	f7ff ff62 	bl	8006210 <__sfmoreglue>
 800634c:	4604      	mov	r4, r0
 800634e:	6030      	str	r0, [r6, #0]
 8006350:	2800      	cmp	r0, #0
 8006352:	d1d5      	bne.n	8006300 <__sfp+0x24>
 8006354:	f7ff ff78 	bl	8006248 <__sfp_lock_release>
 8006358:	230c      	movs	r3, #12
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	e7ee      	b.n	800633c <__sfp+0x60>
 800635e:	bf00      	nop
 8006360:	080076f8 	.word	0x080076f8
 8006364:	ffff0001 	.word	0xffff0001

08006368 <_fwalk_reent>:
 8006368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636c:	4606      	mov	r6, r0
 800636e:	4688      	mov	r8, r1
 8006370:	2700      	movs	r7, #0
 8006372:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006376:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800637a:	f1b9 0901 	subs.w	r9, r9, #1
 800637e:	d505      	bpl.n	800638c <_fwalk_reent+0x24>
 8006380:	6824      	ldr	r4, [r4, #0]
 8006382:	2c00      	cmp	r4, #0
 8006384:	d1f7      	bne.n	8006376 <_fwalk_reent+0xe>
 8006386:	4638      	mov	r0, r7
 8006388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638c:	89ab      	ldrh	r3, [r5, #12]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d907      	bls.n	80063a2 <_fwalk_reent+0x3a>
 8006392:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006396:	3301      	adds	r3, #1
 8006398:	d003      	beq.n	80063a2 <_fwalk_reent+0x3a>
 800639a:	4629      	mov	r1, r5
 800639c:	4630      	mov	r0, r6
 800639e:	47c0      	blx	r8
 80063a0:	4307      	orrs	r7, r0
 80063a2:	3568      	adds	r5, #104	; 0x68
 80063a4:	e7e9      	b.n	800637a <_fwalk_reent+0x12>
	...

080063a8 <_localeconv_r>:
 80063a8:	4800      	ldr	r0, [pc, #0]	; (80063ac <_localeconv_r+0x4>)
 80063aa:	4770      	bx	lr
 80063ac:	20000160 	.word	0x20000160

080063b0 <__retarget_lock_init_recursive>:
 80063b0:	4770      	bx	lr

080063b2 <__retarget_lock_acquire_recursive>:
 80063b2:	4770      	bx	lr

080063b4 <__retarget_lock_release_recursive>:
 80063b4:	4770      	bx	lr
	...

080063b8 <malloc>:
 80063b8:	4b02      	ldr	r3, [pc, #8]	; (80063c4 <malloc+0xc>)
 80063ba:	4601      	mov	r1, r0
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	f000 bc1d 	b.w	8006bfc <_malloc_r>
 80063c2:	bf00      	nop
 80063c4:	2000000c 	.word	0x2000000c

080063c8 <memchr>:
 80063c8:	4603      	mov	r3, r0
 80063ca:	b510      	push	{r4, lr}
 80063cc:	b2c9      	uxtb	r1, r1
 80063ce:	4402      	add	r2, r0
 80063d0:	4293      	cmp	r3, r2
 80063d2:	4618      	mov	r0, r3
 80063d4:	d101      	bne.n	80063da <memchr+0x12>
 80063d6:	2000      	movs	r0, #0
 80063d8:	e003      	b.n	80063e2 <memchr+0x1a>
 80063da:	7804      	ldrb	r4, [r0, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	428c      	cmp	r4, r1
 80063e0:	d1f6      	bne.n	80063d0 <memchr+0x8>
 80063e2:	bd10      	pop	{r4, pc}

080063e4 <memcpy>:
 80063e4:	440a      	add	r2, r1
 80063e6:	4291      	cmp	r1, r2
 80063e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063ec:	d100      	bne.n	80063f0 <memcpy+0xc>
 80063ee:	4770      	bx	lr
 80063f0:	b510      	push	{r4, lr}
 80063f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f6:	4291      	cmp	r1, r2
 80063f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063fc:	d1f9      	bne.n	80063f2 <memcpy+0xe>
 80063fe:	bd10      	pop	{r4, pc}

08006400 <_Balloc>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006404:	4604      	mov	r4, r0
 8006406:	460d      	mov	r5, r1
 8006408:	b976      	cbnz	r6, 8006428 <_Balloc+0x28>
 800640a:	2010      	movs	r0, #16
 800640c:	f7ff ffd4 	bl	80063b8 <malloc>
 8006410:	4602      	mov	r2, r0
 8006412:	6260      	str	r0, [r4, #36]	; 0x24
 8006414:	b920      	cbnz	r0, 8006420 <_Balloc+0x20>
 8006416:	2166      	movs	r1, #102	; 0x66
 8006418:	4b17      	ldr	r3, [pc, #92]	; (8006478 <_Balloc+0x78>)
 800641a:	4818      	ldr	r0, [pc, #96]	; (800647c <_Balloc+0x7c>)
 800641c:	f000 fee0 	bl	80071e0 <__assert_func>
 8006420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006424:	6006      	str	r6, [r0, #0]
 8006426:	60c6      	str	r6, [r0, #12]
 8006428:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800642a:	68f3      	ldr	r3, [r6, #12]
 800642c:	b183      	cbz	r3, 8006450 <_Balloc+0x50>
 800642e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006436:	b9b8      	cbnz	r0, 8006468 <_Balloc+0x68>
 8006438:	2101      	movs	r1, #1
 800643a:	fa01 f605 	lsl.w	r6, r1, r5
 800643e:	1d72      	adds	r2, r6, #5
 8006440:	4620      	mov	r0, r4
 8006442:	0092      	lsls	r2, r2, #2
 8006444:	f000 fb5e 	bl	8006b04 <_calloc_r>
 8006448:	b160      	cbz	r0, 8006464 <_Balloc+0x64>
 800644a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800644e:	e00e      	b.n	800646e <_Balloc+0x6e>
 8006450:	2221      	movs	r2, #33	; 0x21
 8006452:	2104      	movs	r1, #4
 8006454:	4620      	mov	r0, r4
 8006456:	f000 fb55 	bl	8006b04 <_calloc_r>
 800645a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800645c:	60f0      	str	r0, [r6, #12]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e4      	bne.n	800642e <_Balloc+0x2e>
 8006464:	2000      	movs	r0, #0
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	6802      	ldr	r2, [r0, #0]
 800646a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800646e:	2300      	movs	r3, #0
 8006470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006474:	e7f7      	b.n	8006466 <_Balloc+0x66>
 8006476:	bf00      	nop
 8006478:	0800773d 	.word	0x0800773d
 800647c:	08007820 	.word	0x08007820

08006480 <_Bfree>:
 8006480:	b570      	push	{r4, r5, r6, lr}
 8006482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006484:	4605      	mov	r5, r0
 8006486:	460c      	mov	r4, r1
 8006488:	b976      	cbnz	r6, 80064a8 <_Bfree+0x28>
 800648a:	2010      	movs	r0, #16
 800648c:	f7ff ff94 	bl	80063b8 <malloc>
 8006490:	4602      	mov	r2, r0
 8006492:	6268      	str	r0, [r5, #36]	; 0x24
 8006494:	b920      	cbnz	r0, 80064a0 <_Bfree+0x20>
 8006496:	218a      	movs	r1, #138	; 0x8a
 8006498:	4b08      	ldr	r3, [pc, #32]	; (80064bc <_Bfree+0x3c>)
 800649a:	4809      	ldr	r0, [pc, #36]	; (80064c0 <_Bfree+0x40>)
 800649c:	f000 fea0 	bl	80071e0 <__assert_func>
 80064a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064a4:	6006      	str	r6, [r0, #0]
 80064a6:	60c6      	str	r6, [r0, #12]
 80064a8:	b13c      	cbz	r4, 80064ba <_Bfree+0x3a>
 80064aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064ac:	6862      	ldr	r2, [r4, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064b4:	6021      	str	r1, [r4, #0]
 80064b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	0800773d 	.word	0x0800773d
 80064c0:	08007820 	.word	0x08007820

080064c4 <__multadd>:
 80064c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c8:	4607      	mov	r7, r0
 80064ca:	460c      	mov	r4, r1
 80064cc:	461e      	mov	r6, r3
 80064ce:	2000      	movs	r0, #0
 80064d0:	690d      	ldr	r5, [r1, #16]
 80064d2:	f101 0c14 	add.w	ip, r1, #20
 80064d6:	f8dc 3000 	ldr.w	r3, [ip]
 80064da:	3001      	adds	r0, #1
 80064dc:	b299      	uxth	r1, r3
 80064de:	fb02 6101 	mla	r1, r2, r1, r6
 80064e2:	0c1e      	lsrs	r6, r3, #16
 80064e4:	0c0b      	lsrs	r3, r1, #16
 80064e6:	fb02 3306 	mla	r3, r2, r6, r3
 80064ea:	b289      	uxth	r1, r1
 80064ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064f0:	4285      	cmp	r5, r0
 80064f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064f6:	f84c 1b04 	str.w	r1, [ip], #4
 80064fa:	dcec      	bgt.n	80064d6 <__multadd+0x12>
 80064fc:	b30e      	cbz	r6, 8006542 <__multadd+0x7e>
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	42ab      	cmp	r3, r5
 8006502:	dc19      	bgt.n	8006538 <__multadd+0x74>
 8006504:	6861      	ldr	r1, [r4, #4]
 8006506:	4638      	mov	r0, r7
 8006508:	3101      	adds	r1, #1
 800650a:	f7ff ff79 	bl	8006400 <_Balloc>
 800650e:	4680      	mov	r8, r0
 8006510:	b928      	cbnz	r0, 800651e <__multadd+0x5a>
 8006512:	4602      	mov	r2, r0
 8006514:	21b5      	movs	r1, #181	; 0xb5
 8006516:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <__multadd+0x84>)
 8006518:	480c      	ldr	r0, [pc, #48]	; (800654c <__multadd+0x88>)
 800651a:	f000 fe61 	bl	80071e0 <__assert_func>
 800651e:	6922      	ldr	r2, [r4, #16]
 8006520:	f104 010c 	add.w	r1, r4, #12
 8006524:	3202      	adds	r2, #2
 8006526:	0092      	lsls	r2, r2, #2
 8006528:	300c      	adds	r0, #12
 800652a:	f7ff ff5b 	bl	80063e4 <memcpy>
 800652e:	4621      	mov	r1, r4
 8006530:	4638      	mov	r0, r7
 8006532:	f7ff ffa5 	bl	8006480 <_Bfree>
 8006536:	4644      	mov	r4, r8
 8006538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800653c:	3501      	adds	r5, #1
 800653e:	615e      	str	r6, [r3, #20]
 8006540:	6125      	str	r5, [r4, #16]
 8006542:	4620      	mov	r0, r4
 8006544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006548:	080077af 	.word	0x080077af
 800654c:	08007820 	.word	0x08007820

08006550 <__hi0bits>:
 8006550:	0c02      	lsrs	r2, r0, #16
 8006552:	0412      	lsls	r2, r2, #16
 8006554:	4603      	mov	r3, r0
 8006556:	b9ca      	cbnz	r2, 800658c <__hi0bits+0x3c>
 8006558:	0403      	lsls	r3, r0, #16
 800655a:	2010      	movs	r0, #16
 800655c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006560:	bf04      	itt	eq
 8006562:	021b      	lsleq	r3, r3, #8
 8006564:	3008      	addeq	r0, #8
 8006566:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800656a:	bf04      	itt	eq
 800656c:	011b      	lsleq	r3, r3, #4
 800656e:	3004      	addeq	r0, #4
 8006570:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006574:	bf04      	itt	eq
 8006576:	009b      	lsleq	r3, r3, #2
 8006578:	3002      	addeq	r0, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	db05      	blt.n	800658a <__hi0bits+0x3a>
 800657e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006582:	f100 0001 	add.w	r0, r0, #1
 8006586:	bf08      	it	eq
 8006588:	2020      	moveq	r0, #32
 800658a:	4770      	bx	lr
 800658c:	2000      	movs	r0, #0
 800658e:	e7e5      	b.n	800655c <__hi0bits+0xc>

08006590 <__lo0bits>:
 8006590:	6803      	ldr	r3, [r0, #0]
 8006592:	4602      	mov	r2, r0
 8006594:	f013 0007 	ands.w	r0, r3, #7
 8006598:	d00b      	beq.n	80065b2 <__lo0bits+0x22>
 800659a:	07d9      	lsls	r1, r3, #31
 800659c:	d421      	bmi.n	80065e2 <__lo0bits+0x52>
 800659e:	0798      	lsls	r0, r3, #30
 80065a0:	bf49      	itett	mi
 80065a2:	085b      	lsrmi	r3, r3, #1
 80065a4:	089b      	lsrpl	r3, r3, #2
 80065a6:	2001      	movmi	r0, #1
 80065a8:	6013      	strmi	r3, [r2, #0]
 80065aa:	bf5c      	itt	pl
 80065ac:	2002      	movpl	r0, #2
 80065ae:	6013      	strpl	r3, [r2, #0]
 80065b0:	4770      	bx	lr
 80065b2:	b299      	uxth	r1, r3
 80065b4:	b909      	cbnz	r1, 80065ba <__lo0bits+0x2a>
 80065b6:	2010      	movs	r0, #16
 80065b8:	0c1b      	lsrs	r3, r3, #16
 80065ba:	b2d9      	uxtb	r1, r3
 80065bc:	b909      	cbnz	r1, 80065c2 <__lo0bits+0x32>
 80065be:	3008      	adds	r0, #8
 80065c0:	0a1b      	lsrs	r3, r3, #8
 80065c2:	0719      	lsls	r1, r3, #28
 80065c4:	bf04      	itt	eq
 80065c6:	091b      	lsreq	r3, r3, #4
 80065c8:	3004      	addeq	r0, #4
 80065ca:	0799      	lsls	r1, r3, #30
 80065cc:	bf04      	itt	eq
 80065ce:	089b      	lsreq	r3, r3, #2
 80065d0:	3002      	addeq	r0, #2
 80065d2:	07d9      	lsls	r1, r3, #31
 80065d4:	d403      	bmi.n	80065de <__lo0bits+0x4e>
 80065d6:	085b      	lsrs	r3, r3, #1
 80065d8:	f100 0001 	add.w	r0, r0, #1
 80065dc:	d003      	beq.n	80065e6 <__lo0bits+0x56>
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	4770      	bx	lr
 80065e2:	2000      	movs	r0, #0
 80065e4:	4770      	bx	lr
 80065e6:	2020      	movs	r0, #32
 80065e8:	4770      	bx	lr
	...

080065ec <__i2b>:
 80065ec:	b510      	push	{r4, lr}
 80065ee:	460c      	mov	r4, r1
 80065f0:	2101      	movs	r1, #1
 80065f2:	f7ff ff05 	bl	8006400 <_Balloc>
 80065f6:	4602      	mov	r2, r0
 80065f8:	b928      	cbnz	r0, 8006606 <__i2b+0x1a>
 80065fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80065fe:	4b04      	ldr	r3, [pc, #16]	; (8006610 <__i2b+0x24>)
 8006600:	4804      	ldr	r0, [pc, #16]	; (8006614 <__i2b+0x28>)
 8006602:	f000 fded 	bl	80071e0 <__assert_func>
 8006606:	2301      	movs	r3, #1
 8006608:	6144      	str	r4, [r0, #20]
 800660a:	6103      	str	r3, [r0, #16]
 800660c:	bd10      	pop	{r4, pc}
 800660e:	bf00      	nop
 8006610:	080077af 	.word	0x080077af
 8006614:	08007820 	.word	0x08007820

08006618 <__multiply>:
 8006618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661c:	4691      	mov	r9, r2
 800661e:	690a      	ldr	r2, [r1, #16]
 8006620:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006624:	460c      	mov	r4, r1
 8006626:	429a      	cmp	r2, r3
 8006628:	bfbe      	ittt	lt
 800662a:	460b      	movlt	r3, r1
 800662c:	464c      	movlt	r4, r9
 800662e:	4699      	movlt	r9, r3
 8006630:	6927      	ldr	r7, [r4, #16]
 8006632:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006636:	68a3      	ldr	r3, [r4, #8]
 8006638:	6861      	ldr	r1, [r4, #4]
 800663a:	eb07 060a 	add.w	r6, r7, sl
 800663e:	42b3      	cmp	r3, r6
 8006640:	b085      	sub	sp, #20
 8006642:	bfb8      	it	lt
 8006644:	3101      	addlt	r1, #1
 8006646:	f7ff fedb 	bl	8006400 <_Balloc>
 800664a:	b930      	cbnz	r0, 800665a <__multiply+0x42>
 800664c:	4602      	mov	r2, r0
 800664e:	f240 115d 	movw	r1, #349	; 0x15d
 8006652:	4b43      	ldr	r3, [pc, #268]	; (8006760 <__multiply+0x148>)
 8006654:	4843      	ldr	r0, [pc, #268]	; (8006764 <__multiply+0x14c>)
 8006656:	f000 fdc3 	bl	80071e0 <__assert_func>
 800665a:	f100 0514 	add.w	r5, r0, #20
 800665e:	462b      	mov	r3, r5
 8006660:	2200      	movs	r2, #0
 8006662:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006666:	4543      	cmp	r3, r8
 8006668:	d321      	bcc.n	80066ae <__multiply+0x96>
 800666a:	f104 0314 	add.w	r3, r4, #20
 800666e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006672:	f109 0314 	add.w	r3, r9, #20
 8006676:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800667a:	9202      	str	r2, [sp, #8]
 800667c:	1b3a      	subs	r2, r7, r4
 800667e:	3a15      	subs	r2, #21
 8006680:	f022 0203 	bic.w	r2, r2, #3
 8006684:	3204      	adds	r2, #4
 8006686:	f104 0115 	add.w	r1, r4, #21
 800668a:	428f      	cmp	r7, r1
 800668c:	bf38      	it	cc
 800668e:	2204      	movcc	r2, #4
 8006690:	9201      	str	r2, [sp, #4]
 8006692:	9a02      	ldr	r2, [sp, #8]
 8006694:	9303      	str	r3, [sp, #12]
 8006696:	429a      	cmp	r2, r3
 8006698:	d80c      	bhi.n	80066b4 <__multiply+0x9c>
 800669a:	2e00      	cmp	r6, #0
 800669c:	dd03      	ble.n	80066a6 <__multiply+0x8e>
 800669e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d059      	beq.n	800675a <__multiply+0x142>
 80066a6:	6106      	str	r6, [r0, #16]
 80066a8:	b005      	add	sp, #20
 80066aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ae:	f843 2b04 	str.w	r2, [r3], #4
 80066b2:	e7d8      	b.n	8006666 <__multiply+0x4e>
 80066b4:	f8b3 a000 	ldrh.w	sl, [r3]
 80066b8:	f1ba 0f00 	cmp.w	sl, #0
 80066bc:	d023      	beq.n	8006706 <__multiply+0xee>
 80066be:	46a9      	mov	r9, r5
 80066c0:	f04f 0c00 	mov.w	ip, #0
 80066c4:	f104 0e14 	add.w	lr, r4, #20
 80066c8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80066cc:	f8d9 1000 	ldr.w	r1, [r9]
 80066d0:	fa1f fb82 	uxth.w	fp, r2
 80066d4:	b289      	uxth	r1, r1
 80066d6:	fb0a 110b 	mla	r1, sl, fp, r1
 80066da:	4461      	add	r1, ip
 80066dc:	f8d9 c000 	ldr.w	ip, [r9]
 80066e0:	0c12      	lsrs	r2, r2, #16
 80066e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80066e6:	fb0a c202 	mla	r2, sl, r2, ip
 80066ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80066ee:	b289      	uxth	r1, r1
 80066f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066f4:	4577      	cmp	r7, lr
 80066f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80066fa:	f849 1b04 	str.w	r1, [r9], #4
 80066fe:	d8e3      	bhi.n	80066c8 <__multiply+0xb0>
 8006700:	9a01      	ldr	r2, [sp, #4]
 8006702:	f845 c002 	str.w	ip, [r5, r2]
 8006706:	9a03      	ldr	r2, [sp, #12]
 8006708:	3304      	adds	r3, #4
 800670a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800670e:	f1b9 0f00 	cmp.w	r9, #0
 8006712:	d020      	beq.n	8006756 <__multiply+0x13e>
 8006714:	46ae      	mov	lr, r5
 8006716:	f04f 0a00 	mov.w	sl, #0
 800671a:	6829      	ldr	r1, [r5, #0]
 800671c:	f104 0c14 	add.w	ip, r4, #20
 8006720:	f8bc b000 	ldrh.w	fp, [ip]
 8006724:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006728:	b289      	uxth	r1, r1
 800672a:	fb09 220b 	mla	r2, r9, fp, r2
 800672e:	4492      	add	sl, r2
 8006730:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006734:	f84e 1b04 	str.w	r1, [lr], #4
 8006738:	f85c 2b04 	ldr.w	r2, [ip], #4
 800673c:	f8be 1000 	ldrh.w	r1, [lr]
 8006740:	0c12      	lsrs	r2, r2, #16
 8006742:	fb09 1102 	mla	r1, r9, r2, r1
 8006746:	4567      	cmp	r7, ip
 8006748:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800674c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006750:	d8e6      	bhi.n	8006720 <__multiply+0x108>
 8006752:	9a01      	ldr	r2, [sp, #4]
 8006754:	50a9      	str	r1, [r5, r2]
 8006756:	3504      	adds	r5, #4
 8006758:	e79b      	b.n	8006692 <__multiply+0x7a>
 800675a:	3e01      	subs	r6, #1
 800675c:	e79d      	b.n	800669a <__multiply+0x82>
 800675e:	bf00      	nop
 8006760:	080077af 	.word	0x080077af
 8006764:	08007820 	.word	0x08007820

08006768 <__pow5mult>:
 8006768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800676c:	4615      	mov	r5, r2
 800676e:	f012 0203 	ands.w	r2, r2, #3
 8006772:	4606      	mov	r6, r0
 8006774:	460f      	mov	r7, r1
 8006776:	d007      	beq.n	8006788 <__pow5mult+0x20>
 8006778:	4c25      	ldr	r4, [pc, #148]	; (8006810 <__pow5mult+0xa8>)
 800677a:	3a01      	subs	r2, #1
 800677c:	2300      	movs	r3, #0
 800677e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006782:	f7ff fe9f 	bl	80064c4 <__multadd>
 8006786:	4607      	mov	r7, r0
 8006788:	10ad      	asrs	r5, r5, #2
 800678a:	d03d      	beq.n	8006808 <__pow5mult+0xa0>
 800678c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800678e:	b97c      	cbnz	r4, 80067b0 <__pow5mult+0x48>
 8006790:	2010      	movs	r0, #16
 8006792:	f7ff fe11 	bl	80063b8 <malloc>
 8006796:	4602      	mov	r2, r0
 8006798:	6270      	str	r0, [r6, #36]	; 0x24
 800679a:	b928      	cbnz	r0, 80067a8 <__pow5mult+0x40>
 800679c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80067a0:	4b1c      	ldr	r3, [pc, #112]	; (8006814 <__pow5mult+0xac>)
 80067a2:	481d      	ldr	r0, [pc, #116]	; (8006818 <__pow5mult+0xb0>)
 80067a4:	f000 fd1c 	bl	80071e0 <__assert_func>
 80067a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067ac:	6004      	str	r4, [r0, #0]
 80067ae:	60c4      	str	r4, [r0, #12]
 80067b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067b8:	b94c      	cbnz	r4, 80067ce <__pow5mult+0x66>
 80067ba:	f240 2171 	movw	r1, #625	; 0x271
 80067be:	4630      	mov	r0, r6
 80067c0:	f7ff ff14 	bl	80065ec <__i2b>
 80067c4:	2300      	movs	r3, #0
 80067c6:	4604      	mov	r4, r0
 80067c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80067cc:	6003      	str	r3, [r0, #0]
 80067ce:	f04f 0900 	mov.w	r9, #0
 80067d2:	07eb      	lsls	r3, r5, #31
 80067d4:	d50a      	bpl.n	80067ec <__pow5mult+0x84>
 80067d6:	4639      	mov	r1, r7
 80067d8:	4622      	mov	r2, r4
 80067da:	4630      	mov	r0, r6
 80067dc:	f7ff ff1c 	bl	8006618 <__multiply>
 80067e0:	4680      	mov	r8, r0
 80067e2:	4639      	mov	r1, r7
 80067e4:	4630      	mov	r0, r6
 80067e6:	f7ff fe4b 	bl	8006480 <_Bfree>
 80067ea:	4647      	mov	r7, r8
 80067ec:	106d      	asrs	r5, r5, #1
 80067ee:	d00b      	beq.n	8006808 <__pow5mult+0xa0>
 80067f0:	6820      	ldr	r0, [r4, #0]
 80067f2:	b938      	cbnz	r0, 8006804 <__pow5mult+0x9c>
 80067f4:	4622      	mov	r2, r4
 80067f6:	4621      	mov	r1, r4
 80067f8:	4630      	mov	r0, r6
 80067fa:	f7ff ff0d 	bl	8006618 <__multiply>
 80067fe:	6020      	str	r0, [r4, #0]
 8006800:	f8c0 9000 	str.w	r9, [r0]
 8006804:	4604      	mov	r4, r0
 8006806:	e7e4      	b.n	80067d2 <__pow5mult+0x6a>
 8006808:	4638      	mov	r0, r7
 800680a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800680e:	bf00      	nop
 8006810:	08007970 	.word	0x08007970
 8006814:	0800773d 	.word	0x0800773d
 8006818:	08007820 	.word	0x08007820

0800681c <__lshift>:
 800681c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006820:	460c      	mov	r4, r1
 8006822:	4607      	mov	r7, r0
 8006824:	4691      	mov	r9, r2
 8006826:	6923      	ldr	r3, [r4, #16]
 8006828:	6849      	ldr	r1, [r1, #4]
 800682a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800682e:	68a3      	ldr	r3, [r4, #8]
 8006830:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006834:	f108 0601 	add.w	r6, r8, #1
 8006838:	42b3      	cmp	r3, r6
 800683a:	db0b      	blt.n	8006854 <__lshift+0x38>
 800683c:	4638      	mov	r0, r7
 800683e:	f7ff fddf 	bl	8006400 <_Balloc>
 8006842:	4605      	mov	r5, r0
 8006844:	b948      	cbnz	r0, 800685a <__lshift+0x3e>
 8006846:	4602      	mov	r2, r0
 8006848:	f240 11d9 	movw	r1, #473	; 0x1d9
 800684c:	4b29      	ldr	r3, [pc, #164]	; (80068f4 <__lshift+0xd8>)
 800684e:	482a      	ldr	r0, [pc, #168]	; (80068f8 <__lshift+0xdc>)
 8006850:	f000 fcc6 	bl	80071e0 <__assert_func>
 8006854:	3101      	adds	r1, #1
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	e7ee      	b.n	8006838 <__lshift+0x1c>
 800685a:	2300      	movs	r3, #0
 800685c:	f100 0114 	add.w	r1, r0, #20
 8006860:	f100 0210 	add.w	r2, r0, #16
 8006864:	4618      	mov	r0, r3
 8006866:	4553      	cmp	r3, sl
 8006868:	db37      	blt.n	80068da <__lshift+0xbe>
 800686a:	6920      	ldr	r0, [r4, #16]
 800686c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006870:	f104 0314 	add.w	r3, r4, #20
 8006874:	f019 091f 	ands.w	r9, r9, #31
 8006878:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800687c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006880:	d02f      	beq.n	80068e2 <__lshift+0xc6>
 8006882:	468a      	mov	sl, r1
 8006884:	f04f 0c00 	mov.w	ip, #0
 8006888:	f1c9 0e20 	rsb	lr, r9, #32
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	fa02 f209 	lsl.w	r2, r2, r9
 8006892:	ea42 020c 	orr.w	r2, r2, ip
 8006896:	f84a 2b04 	str.w	r2, [sl], #4
 800689a:	f853 2b04 	ldr.w	r2, [r3], #4
 800689e:	4298      	cmp	r0, r3
 80068a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80068a4:	d8f2      	bhi.n	800688c <__lshift+0x70>
 80068a6:	1b03      	subs	r3, r0, r4
 80068a8:	3b15      	subs	r3, #21
 80068aa:	f023 0303 	bic.w	r3, r3, #3
 80068ae:	3304      	adds	r3, #4
 80068b0:	f104 0215 	add.w	r2, r4, #21
 80068b4:	4290      	cmp	r0, r2
 80068b6:	bf38      	it	cc
 80068b8:	2304      	movcc	r3, #4
 80068ba:	f841 c003 	str.w	ip, [r1, r3]
 80068be:	f1bc 0f00 	cmp.w	ip, #0
 80068c2:	d001      	beq.n	80068c8 <__lshift+0xac>
 80068c4:	f108 0602 	add.w	r6, r8, #2
 80068c8:	3e01      	subs	r6, #1
 80068ca:	4638      	mov	r0, r7
 80068cc:	4621      	mov	r1, r4
 80068ce:	612e      	str	r6, [r5, #16]
 80068d0:	f7ff fdd6 	bl	8006480 <_Bfree>
 80068d4:	4628      	mov	r0, r5
 80068d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068da:	f842 0f04 	str.w	r0, [r2, #4]!
 80068de:	3301      	adds	r3, #1
 80068e0:	e7c1      	b.n	8006866 <__lshift+0x4a>
 80068e2:	3904      	subs	r1, #4
 80068e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80068e8:	4298      	cmp	r0, r3
 80068ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80068ee:	d8f9      	bhi.n	80068e4 <__lshift+0xc8>
 80068f0:	e7ea      	b.n	80068c8 <__lshift+0xac>
 80068f2:	bf00      	nop
 80068f4:	080077af 	.word	0x080077af
 80068f8:	08007820 	.word	0x08007820

080068fc <__mcmp>:
 80068fc:	4603      	mov	r3, r0
 80068fe:	690a      	ldr	r2, [r1, #16]
 8006900:	6900      	ldr	r0, [r0, #16]
 8006902:	b530      	push	{r4, r5, lr}
 8006904:	1a80      	subs	r0, r0, r2
 8006906:	d10d      	bne.n	8006924 <__mcmp+0x28>
 8006908:	3314      	adds	r3, #20
 800690a:	3114      	adds	r1, #20
 800690c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006910:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006914:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006918:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800691c:	4295      	cmp	r5, r2
 800691e:	d002      	beq.n	8006926 <__mcmp+0x2a>
 8006920:	d304      	bcc.n	800692c <__mcmp+0x30>
 8006922:	2001      	movs	r0, #1
 8006924:	bd30      	pop	{r4, r5, pc}
 8006926:	42a3      	cmp	r3, r4
 8006928:	d3f4      	bcc.n	8006914 <__mcmp+0x18>
 800692a:	e7fb      	b.n	8006924 <__mcmp+0x28>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	e7f8      	b.n	8006924 <__mcmp+0x28>
	...

08006934 <__mdiff>:
 8006934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006938:	460d      	mov	r5, r1
 800693a:	4607      	mov	r7, r0
 800693c:	4611      	mov	r1, r2
 800693e:	4628      	mov	r0, r5
 8006940:	4614      	mov	r4, r2
 8006942:	f7ff ffdb 	bl	80068fc <__mcmp>
 8006946:	1e06      	subs	r6, r0, #0
 8006948:	d111      	bne.n	800696e <__mdiff+0x3a>
 800694a:	4631      	mov	r1, r6
 800694c:	4638      	mov	r0, r7
 800694e:	f7ff fd57 	bl	8006400 <_Balloc>
 8006952:	4602      	mov	r2, r0
 8006954:	b928      	cbnz	r0, 8006962 <__mdiff+0x2e>
 8006956:	f240 2132 	movw	r1, #562	; 0x232
 800695a:	4b3a      	ldr	r3, [pc, #232]	; (8006a44 <__mdiff+0x110>)
 800695c:	483a      	ldr	r0, [pc, #232]	; (8006a48 <__mdiff+0x114>)
 800695e:	f000 fc3f 	bl	80071e0 <__assert_func>
 8006962:	2301      	movs	r3, #1
 8006964:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006968:	4610      	mov	r0, r2
 800696a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696e:	bfa4      	itt	ge
 8006970:	4623      	movge	r3, r4
 8006972:	462c      	movge	r4, r5
 8006974:	4638      	mov	r0, r7
 8006976:	6861      	ldr	r1, [r4, #4]
 8006978:	bfa6      	itte	ge
 800697a:	461d      	movge	r5, r3
 800697c:	2600      	movge	r6, #0
 800697e:	2601      	movlt	r6, #1
 8006980:	f7ff fd3e 	bl	8006400 <_Balloc>
 8006984:	4602      	mov	r2, r0
 8006986:	b918      	cbnz	r0, 8006990 <__mdiff+0x5c>
 8006988:	f44f 7110 	mov.w	r1, #576	; 0x240
 800698c:	4b2d      	ldr	r3, [pc, #180]	; (8006a44 <__mdiff+0x110>)
 800698e:	e7e5      	b.n	800695c <__mdiff+0x28>
 8006990:	f102 0814 	add.w	r8, r2, #20
 8006994:	46c2      	mov	sl, r8
 8006996:	f04f 0c00 	mov.w	ip, #0
 800699a:	6927      	ldr	r7, [r4, #16]
 800699c:	60c6      	str	r6, [r0, #12]
 800699e:	692e      	ldr	r6, [r5, #16]
 80069a0:	f104 0014 	add.w	r0, r4, #20
 80069a4:	f105 0914 	add.w	r9, r5, #20
 80069a8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80069ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80069b0:	3410      	adds	r4, #16
 80069b2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80069b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80069ba:	fa1f f18b 	uxth.w	r1, fp
 80069be:	448c      	add	ip, r1
 80069c0:	b299      	uxth	r1, r3
 80069c2:	0c1b      	lsrs	r3, r3, #16
 80069c4:	ebac 0101 	sub.w	r1, ip, r1
 80069c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80069cc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80069d0:	b289      	uxth	r1, r1
 80069d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80069d6:	454e      	cmp	r6, r9
 80069d8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80069dc:	f84a 3b04 	str.w	r3, [sl], #4
 80069e0:	d8e7      	bhi.n	80069b2 <__mdiff+0x7e>
 80069e2:	1b73      	subs	r3, r6, r5
 80069e4:	3b15      	subs	r3, #21
 80069e6:	f023 0303 	bic.w	r3, r3, #3
 80069ea:	3515      	adds	r5, #21
 80069ec:	3304      	adds	r3, #4
 80069ee:	42ae      	cmp	r6, r5
 80069f0:	bf38      	it	cc
 80069f2:	2304      	movcc	r3, #4
 80069f4:	4418      	add	r0, r3
 80069f6:	4443      	add	r3, r8
 80069f8:	461e      	mov	r6, r3
 80069fa:	4605      	mov	r5, r0
 80069fc:	4575      	cmp	r5, lr
 80069fe:	d30e      	bcc.n	8006a1e <__mdiff+0xea>
 8006a00:	f10e 0103 	add.w	r1, lr, #3
 8006a04:	1a09      	subs	r1, r1, r0
 8006a06:	f021 0103 	bic.w	r1, r1, #3
 8006a0a:	3803      	subs	r0, #3
 8006a0c:	4586      	cmp	lr, r0
 8006a0e:	bf38      	it	cc
 8006a10:	2100      	movcc	r1, #0
 8006a12:	4419      	add	r1, r3
 8006a14:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006a18:	b18b      	cbz	r3, 8006a3e <__mdiff+0x10a>
 8006a1a:	6117      	str	r7, [r2, #16]
 8006a1c:	e7a4      	b.n	8006968 <__mdiff+0x34>
 8006a1e:	f855 8b04 	ldr.w	r8, [r5], #4
 8006a22:	fa1f f188 	uxth.w	r1, r8
 8006a26:	4461      	add	r1, ip
 8006a28:	140c      	asrs	r4, r1, #16
 8006a2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a2e:	b289      	uxth	r1, r1
 8006a30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006a34:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006a38:	f846 1b04 	str.w	r1, [r6], #4
 8006a3c:	e7de      	b.n	80069fc <__mdiff+0xc8>
 8006a3e:	3f01      	subs	r7, #1
 8006a40:	e7e8      	b.n	8006a14 <__mdiff+0xe0>
 8006a42:	bf00      	nop
 8006a44:	080077af 	.word	0x080077af
 8006a48:	08007820 	.word	0x08007820

08006a4c <__d2b>:
 8006a4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a50:	2101      	movs	r1, #1
 8006a52:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006a56:	4690      	mov	r8, r2
 8006a58:	461d      	mov	r5, r3
 8006a5a:	f7ff fcd1 	bl	8006400 <_Balloc>
 8006a5e:	4604      	mov	r4, r0
 8006a60:	b930      	cbnz	r0, 8006a70 <__d2b+0x24>
 8006a62:	4602      	mov	r2, r0
 8006a64:	f240 310a 	movw	r1, #778	; 0x30a
 8006a68:	4b24      	ldr	r3, [pc, #144]	; (8006afc <__d2b+0xb0>)
 8006a6a:	4825      	ldr	r0, [pc, #148]	; (8006b00 <__d2b+0xb4>)
 8006a6c:	f000 fbb8 	bl	80071e0 <__assert_func>
 8006a70:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006a74:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006a78:	bb2d      	cbnz	r5, 8006ac6 <__d2b+0x7a>
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	f1b8 0300 	subs.w	r3, r8, #0
 8006a80:	d026      	beq.n	8006ad0 <__d2b+0x84>
 8006a82:	4668      	mov	r0, sp
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	f7ff fd83 	bl	8006590 <__lo0bits>
 8006a8a:	9900      	ldr	r1, [sp, #0]
 8006a8c:	b1f0      	cbz	r0, 8006acc <__d2b+0x80>
 8006a8e:	9a01      	ldr	r2, [sp, #4]
 8006a90:	f1c0 0320 	rsb	r3, r0, #32
 8006a94:	fa02 f303 	lsl.w	r3, r2, r3
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	40c2      	lsrs	r2, r0
 8006a9c:	6163      	str	r3, [r4, #20]
 8006a9e:	9201      	str	r2, [sp, #4]
 8006aa0:	9b01      	ldr	r3, [sp, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	bf14      	ite	ne
 8006aa6:	2102      	movne	r1, #2
 8006aa8:	2101      	moveq	r1, #1
 8006aaa:	61a3      	str	r3, [r4, #24]
 8006aac:	6121      	str	r1, [r4, #16]
 8006aae:	b1c5      	cbz	r5, 8006ae2 <__d2b+0x96>
 8006ab0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ab4:	4405      	add	r5, r0
 8006ab6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006aba:	603d      	str	r5, [r7, #0]
 8006abc:	6030      	str	r0, [r6, #0]
 8006abe:	4620      	mov	r0, r4
 8006ac0:	b002      	add	sp, #8
 8006ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aca:	e7d6      	b.n	8006a7a <__d2b+0x2e>
 8006acc:	6161      	str	r1, [r4, #20]
 8006ace:	e7e7      	b.n	8006aa0 <__d2b+0x54>
 8006ad0:	a801      	add	r0, sp, #4
 8006ad2:	f7ff fd5d 	bl	8006590 <__lo0bits>
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	9b01      	ldr	r3, [sp, #4]
 8006ada:	6121      	str	r1, [r4, #16]
 8006adc:	6163      	str	r3, [r4, #20]
 8006ade:	3020      	adds	r0, #32
 8006ae0:	e7e5      	b.n	8006aae <__d2b+0x62>
 8006ae2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006ae6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006aea:	6038      	str	r0, [r7, #0]
 8006aec:	6918      	ldr	r0, [r3, #16]
 8006aee:	f7ff fd2f 	bl	8006550 <__hi0bits>
 8006af2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006af6:	6031      	str	r1, [r6, #0]
 8006af8:	e7e1      	b.n	8006abe <__d2b+0x72>
 8006afa:	bf00      	nop
 8006afc:	080077af 	.word	0x080077af
 8006b00:	08007820 	.word	0x08007820

08006b04 <_calloc_r>:
 8006b04:	b570      	push	{r4, r5, r6, lr}
 8006b06:	fba1 5402 	umull	r5, r4, r1, r2
 8006b0a:	b934      	cbnz	r4, 8006b1a <_calloc_r+0x16>
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	f000 f875 	bl	8006bfc <_malloc_r>
 8006b12:	4606      	mov	r6, r0
 8006b14:	b928      	cbnz	r0, 8006b22 <_calloc_r+0x1e>
 8006b16:	4630      	mov	r0, r6
 8006b18:	bd70      	pop	{r4, r5, r6, pc}
 8006b1a:	220c      	movs	r2, #12
 8006b1c:	2600      	movs	r6, #0
 8006b1e:	6002      	str	r2, [r0, #0]
 8006b20:	e7f9      	b.n	8006b16 <_calloc_r+0x12>
 8006b22:	462a      	mov	r2, r5
 8006b24:	4621      	mov	r1, r4
 8006b26:	f7fe f84f 	bl	8004bc8 <memset>
 8006b2a:	e7f4      	b.n	8006b16 <_calloc_r+0x12>

08006b2c <_free_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	4605      	mov	r5, r0
 8006b30:	2900      	cmp	r1, #0
 8006b32:	d040      	beq.n	8006bb6 <_free_r+0x8a>
 8006b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b38:	1f0c      	subs	r4, r1, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	bfb8      	it	lt
 8006b3e:	18e4      	addlt	r4, r4, r3
 8006b40:	f000 fcd6 	bl	80074f0 <__malloc_lock>
 8006b44:	4a1c      	ldr	r2, [pc, #112]	; (8006bb8 <_free_r+0x8c>)
 8006b46:	6813      	ldr	r3, [r2, #0]
 8006b48:	b933      	cbnz	r3, 8006b58 <_free_r+0x2c>
 8006b4a:	6063      	str	r3, [r4, #4]
 8006b4c:	6014      	str	r4, [r2, #0]
 8006b4e:	4628      	mov	r0, r5
 8006b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b54:	f000 bcd2 	b.w	80074fc <__malloc_unlock>
 8006b58:	42a3      	cmp	r3, r4
 8006b5a:	d908      	bls.n	8006b6e <_free_r+0x42>
 8006b5c:	6820      	ldr	r0, [r4, #0]
 8006b5e:	1821      	adds	r1, r4, r0
 8006b60:	428b      	cmp	r3, r1
 8006b62:	bf01      	itttt	eq
 8006b64:	6819      	ldreq	r1, [r3, #0]
 8006b66:	685b      	ldreq	r3, [r3, #4]
 8006b68:	1809      	addeq	r1, r1, r0
 8006b6a:	6021      	streq	r1, [r4, #0]
 8006b6c:	e7ed      	b.n	8006b4a <_free_r+0x1e>
 8006b6e:	461a      	mov	r2, r3
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	b10b      	cbz	r3, 8006b78 <_free_r+0x4c>
 8006b74:	42a3      	cmp	r3, r4
 8006b76:	d9fa      	bls.n	8006b6e <_free_r+0x42>
 8006b78:	6811      	ldr	r1, [r2, #0]
 8006b7a:	1850      	adds	r0, r2, r1
 8006b7c:	42a0      	cmp	r0, r4
 8006b7e:	d10b      	bne.n	8006b98 <_free_r+0x6c>
 8006b80:	6820      	ldr	r0, [r4, #0]
 8006b82:	4401      	add	r1, r0
 8006b84:	1850      	adds	r0, r2, r1
 8006b86:	4283      	cmp	r3, r0
 8006b88:	6011      	str	r1, [r2, #0]
 8006b8a:	d1e0      	bne.n	8006b4e <_free_r+0x22>
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	4401      	add	r1, r0
 8006b92:	6011      	str	r1, [r2, #0]
 8006b94:	6053      	str	r3, [r2, #4]
 8006b96:	e7da      	b.n	8006b4e <_free_r+0x22>
 8006b98:	d902      	bls.n	8006ba0 <_free_r+0x74>
 8006b9a:	230c      	movs	r3, #12
 8006b9c:	602b      	str	r3, [r5, #0]
 8006b9e:	e7d6      	b.n	8006b4e <_free_r+0x22>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	1821      	adds	r1, r4, r0
 8006ba4:	428b      	cmp	r3, r1
 8006ba6:	bf01      	itttt	eq
 8006ba8:	6819      	ldreq	r1, [r3, #0]
 8006baa:	685b      	ldreq	r3, [r3, #4]
 8006bac:	1809      	addeq	r1, r1, r0
 8006bae:	6021      	streq	r1, [r4, #0]
 8006bb0:	6063      	str	r3, [r4, #4]
 8006bb2:	6054      	str	r4, [r2, #4]
 8006bb4:	e7cb      	b.n	8006b4e <_free_r+0x22>
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	20000f88 	.word	0x20000f88

08006bbc <sbrk_aligned>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	4e0e      	ldr	r6, [pc, #56]	; (8006bf8 <sbrk_aligned+0x3c>)
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	6831      	ldr	r1, [r6, #0]
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	b911      	cbnz	r1, 8006bce <sbrk_aligned+0x12>
 8006bc8:	f000 f9e4 	bl	8006f94 <_sbrk_r>
 8006bcc:	6030      	str	r0, [r6, #0]
 8006bce:	4621      	mov	r1, r4
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f000 f9df 	bl	8006f94 <_sbrk_r>
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	d00a      	beq.n	8006bf0 <sbrk_aligned+0x34>
 8006bda:	1cc4      	adds	r4, r0, #3
 8006bdc:	f024 0403 	bic.w	r4, r4, #3
 8006be0:	42a0      	cmp	r0, r4
 8006be2:	d007      	beq.n	8006bf4 <sbrk_aligned+0x38>
 8006be4:	1a21      	subs	r1, r4, r0
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 f9d4 	bl	8006f94 <_sbrk_r>
 8006bec:	3001      	adds	r0, #1
 8006bee:	d101      	bne.n	8006bf4 <sbrk_aligned+0x38>
 8006bf0:	f04f 34ff 	mov.w	r4, #4294967295
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
 8006bf8:	20000f8c 	.word	0x20000f8c

08006bfc <_malloc_r>:
 8006bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c00:	1ccd      	adds	r5, r1, #3
 8006c02:	f025 0503 	bic.w	r5, r5, #3
 8006c06:	3508      	adds	r5, #8
 8006c08:	2d0c      	cmp	r5, #12
 8006c0a:	bf38      	it	cc
 8006c0c:	250c      	movcc	r5, #12
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	4607      	mov	r7, r0
 8006c12:	db01      	blt.n	8006c18 <_malloc_r+0x1c>
 8006c14:	42a9      	cmp	r1, r5
 8006c16:	d905      	bls.n	8006c24 <_malloc_r+0x28>
 8006c18:	230c      	movs	r3, #12
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	603b      	str	r3, [r7, #0]
 8006c1e:	4630      	mov	r0, r6
 8006c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c24:	4e2e      	ldr	r6, [pc, #184]	; (8006ce0 <_malloc_r+0xe4>)
 8006c26:	f000 fc63 	bl	80074f0 <__malloc_lock>
 8006c2a:	6833      	ldr	r3, [r6, #0]
 8006c2c:	461c      	mov	r4, r3
 8006c2e:	bb34      	cbnz	r4, 8006c7e <_malloc_r+0x82>
 8006c30:	4629      	mov	r1, r5
 8006c32:	4638      	mov	r0, r7
 8006c34:	f7ff ffc2 	bl	8006bbc <sbrk_aligned>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	d14d      	bne.n	8006cda <_malloc_r+0xde>
 8006c3e:	6834      	ldr	r4, [r6, #0]
 8006c40:	4626      	mov	r6, r4
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	d140      	bne.n	8006cc8 <_malloc_r+0xcc>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	eb04 0803 	add.w	r8, r4, r3
 8006c50:	f000 f9a0 	bl	8006f94 <_sbrk_r>
 8006c54:	4580      	cmp	r8, r0
 8006c56:	d13a      	bne.n	8006cce <_malloc_r+0xd2>
 8006c58:	6821      	ldr	r1, [r4, #0]
 8006c5a:	3503      	adds	r5, #3
 8006c5c:	1a6d      	subs	r5, r5, r1
 8006c5e:	f025 0503 	bic.w	r5, r5, #3
 8006c62:	3508      	adds	r5, #8
 8006c64:	2d0c      	cmp	r5, #12
 8006c66:	bf38      	it	cc
 8006c68:	250c      	movcc	r5, #12
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	f7ff ffa5 	bl	8006bbc <sbrk_aligned>
 8006c72:	3001      	adds	r0, #1
 8006c74:	d02b      	beq.n	8006cce <_malloc_r+0xd2>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	442b      	add	r3, r5
 8006c7a:	6023      	str	r3, [r4, #0]
 8006c7c:	e00e      	b.n	8006c9c <_malloc_r+0xa0>
 8006c7e:	6822      	ldr	r2, [r4, #0]
 8006c80:	1b52      	subs	r2, r2, r5
 8006c82:	d41e      	bmi.n	8006cc2 <_malloc_r+0xc6>
 8006c84:	2a0b      	cmp	r2, #11
 8006c86:	d916      	bls.n	8006cb6 <_malloc_r+0xba>
 8006c88:	1961      	adds	r1, r4, r5
 8006c8a:	42a3      	cmp	r3, r4
 8006c8c:	6025      	str	r5, [r4, #0]
 8006c8e:	bf18      	it	ne
 8006c90:	6059      	strne	r1, [r3, #4]
 8006c92:	6863      	ldr	r3, [r4, #4]
 8006c94:	bf08      	it	eq
 8006c96:	6031      	streq	r1, [r6, #0]
 8006c98:	5162      	str	r2, [r4, r5]
 8006c9a:	604b      	str	r3, [r1, #4]
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	f104 060b 	add.w	r6, r4, #11
 8006ca2:	f000 fc2b 	bl	80074fc <__malloc_unlock>
 8006ca6:	f026 0607 	bic.w	r6, r6, #7
 8006caa:	1d23      	adds	r3, r4, #4
 8006cac:	1af2      	subs	r2, r6, r3
 8006cae:	d0b6      	beq.n	8006c1e <_malloc_r+0x22>
 8006cb0:	1b9b      	subs	r3, r3, r6
 8006cb2:	50a3      	str	r3, [r4, r2]
 8006cb4:	e7b3      	b.n	8006c1e <_malloc_r+0x22>
 8006cb6:	6862      	ldr	r2, [r4, #4]
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	bf0c      	ite	eq
 8006cbc:	6032      	streq	r2, [r6, #0]
 8006cbe:	605a      	strne	r2, [r3, #4]
 8006cc0:	e7ec      	b.n	8006c9c <_malloc_r+0xa0>
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	6864      	ldr	r4, [r4, #4]
 8006cc6:	e7b2      	b.n	8006c2e <_malloc_r+0x32>
 8006cc8:	4634      	mov	r4, r6
 8006cca:	6876      	ldr	r6, [r6, #4]
 8006ccc:	e7b9      	b.n	8006c42 <_malloc_r+0x46>
 8006cce:	230c      	movs	r3, #12
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	f000 fc12 	bl	80074fc <__malloc_unlock>
 8006cd8:	e7a1      	b.n	8006c1e <_malloc_r+0x22>
 8006cda:	6025      	str	r5, [r4, #0]
 8006cdc:	e7de      	b.n	8006c9c <_malloc_r+0xa0>
 8006cde:	bf00      	nop
 8006ce0:	20000f88 	.word	0x20000f88

08006ce4 <__sfputc_r>:
 8006ce4:	6893      	ldr	r3, [r2, #8]
 8006ce6:	b410      	push	{r4}
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	6093      	str	r3, [r2, #8]
 8006cee:	da07      	bge.n	8006d00 <__sfputc_r+0x1c>
 8006cf0:	6994      	ldr	r4, [r2, #24]
 8006cf2:	42a3      	cmp	r3, r4
 8006cf4:	db01      	blt.n	8006cfa <__sfputc_r+0x16>
 8006cf6:	290a      	cmp	r1, #10
 8006cf8:	d102      	bne.n	8006d00 <__sfputc_r+0x1c>
 8006cfa:	bc10      	pop	{r4}
 8006cfc:	f000 b99e 	b.w	800703c <__swbuf_r>
 8006d00:	6813      	ldr	r3, [r2, #0]
 8006d02:	1c58      	adds	r0, r3, #1
 8006d04:	6010      	str	r0, [r2, #0]
 8006d06:	7019      	strb	r1, [r3, #0]
 8006d08:	4608      	mov	r0, r1
 8006d0a:	bc10      	pop	{r4}
 8006d0c:	4770      	bx	lr

08006d0e <__sfputs_r>:
 8006d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d10:	4606      	mov	r6, r0
 8006d12:	460f      	mov	r7, r1
 8006d14:	4614      	mov	r4, r2
 8006d16:	18d5      	adds	r5, r2, r3
 8006d18:	42ac      	cmp	r4, r5
 8006d1a:	d101      	bne.n	8006d20 <__sfputs_r+0x12>
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	e007      	b.n	8006d30 <__sfputs_r+0x22>
 8006d20:	463a      	mov	r2, r7
 8006d22:	4630      	mov	r0, r6
 8006d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d28:	f7ff ffdc 	bl	8006ce4 <__sfputc_r>
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d1f3      	bne.n	8006d18 <__sfputs_r+0xa>
 8006d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d34 <_vfiprintf_r>:
 8006d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d38:	460d      	mov	r5, r1
 8006d3a:	4614      	mov	r4, r2
 8006d3c:	4698      	mov	r8, r3
 8006d3e:	4606      	mov	r6, r0
 8006d40:	b09d      	sub	sp, #116	; 0x74
 8006d42:	b118      	cbz	r0, 8006d4c <_vfiprintf_r+0x18>
 8006d44:	6983      	ldr	r3, [r0, #24]
 8006d46:	b90b      	cbnz	r3, 8006d4c <_vfiprintf_r+0x18>
 8006d48:	f7ff fa90 	bl	800626c <__sinit>
 8006d4c:	4b89      	ldr	r3, [pc, #548]	; (8006f74 <_vfiprintf_r+0x240>)
 8006d4e:	429d      	cmp	r5, r3
 8006d50:	d11b      	bne.n	8006d8a <_vfiprintf_r+0x56>
 8006d52:	6875      	ldr	r5, [r6, #4]
 8006d54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d56:	07d9      	lsls	r1, r3, #31
 8006d58:	d405      	bmi.n	8006d66 <_vfiprintf_r+0x32>
 8006d5a:	89ab      	ldrh	r3, [r5, #12]
 8006d5c:	059a      	lsls	r2, r3, #22
 8006d5e:	d402      	bmi.n	8006d66 <_vfiprintf_r+0x32>
 8006d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d62:	f7ff fb26 	bl	80063b2 <__retarget_lock_acquire_recursive>
 8006d66:	89ab      	ldrh	r3, [r5, #12]
 8006d68:	071b      	lsls	r3, r3, #28
 8006d6a:	d501      	bpl.n	8006d70 <_vfiprintf_r+0x3c>
 8006d6c:	692b      	ldr	r3, [r5, #16]
 8006d6e:	b9eb      	cbnz	r3, 8006dac <_vfiprintf_r+0x78>
 8006d70:	4629      	mov	r1, r5
 8006d72:	4630      	mov	r0, r6
 8006d74:	f000 f9c6 	bl	8007104 <__swsetup_r>
 8006d78:	b1c0      	cbz	r0, 8006dac <_vfiprintf_r+0x78>
 8006d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d7c:	07dc      	lsls	r4, r3, #31
 8006d7e:	d50e      	bpl.n	8006d9e <_vfiprintf_r+0x6a>
 8006d80:	f04f 30ff 	mov.w	r0, #4294967295
 8006d84:	b01d      	add	sp, #116	; 0x74
 8006d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8a:	4b7b      	ldr	r3, [pc, #492]	; (8006f78 <_vfiprintf_r+0x244>)
 8006d8c:	429d      	cmp	r5, r3
 8006d8e:	d101      	bne.n	8006d94 <_vfiprintf_r+0x60>
 8006d90:	68b5      	ldr	r5, [r6, #8]
 8006d92:	e7df      	b.n	8006d54 <_vfiprintf_r+0x20>
 8006d94:	4b79      	ldr	r3, [pc, #484]	; (8006f7c <_vfiprintf_r+0x248>)
 8006d96:	429d      	cmp	r5, r3
 8006d98:	bf08      	it	eq
 8006d9a:	68f5      	ldreq	r5, [r6, #12]
 8006d9c:	e7da      	b.n	8006d54 <_vfiprintf_r+0x20>
 8006d9e:	89ab      	ldrh	r3, [r5, #12]
 8006da0:	0598      	lsls	r0, r3, #22
 8006da2:	d4ed      	bmi.n	8006d80 <_vfiprintf_r+0x4c>
 8006da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006da6:	f7ff fb05 	bl	80063b4 <__retarget_lock_release_recursive>
 8006daa:	e7e9      	b.n	8006d80 <_vfiprintf_r+0x4c>
 8006dac:	2300      	movs	r3, #0
 8006dae:	9309      	str	r3, [sp, #36]	; 0x24
 8006db0:	2320      	movs	r3, #32
 8006db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006db6:	2330      	movs	r3, #48	; 0x30
 8006db8:	f04f 0901 	mov.w	r9, #1
 8006dbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dc0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006f80 <_vfiprintf_r+0x24c>
 8006dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dc8:	4623      	mov	r3, r4
 8006dca:	469a      	mov	sl, r3
 8006dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dd0:	b10a      	cbz	r2, 8006dd6 <_vfiprintf_r+0xa2>
 8006dd2:	2a25      	cmp	r2, #37	; 0x25
 8006dd4:	d1f9      	bne.n	8006dca <_vfiprintf_r+0x96>
 8006dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8006dda:	d00b      	beq.n	8006df4 <_vfiprintf_r+0xc0>
 8006ddc:	465b      	mov	r3, fp
 8006dde:	4622      	mov	r2, r4
 8006de0:	4629      	mov	r1, r5
 8006de2:	4630      	mov	r0, r6
 8006de4:	f7ff ff93 	bl	8006d0e <__sfputs_r>
 8006de8:	3001      	adds	r0, #1
 8006dea:	f000 80aa 	beq.w	8006f42 <_vfiprintf_r+0x20e>
 8006dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006df0:	445a      	add	r2, fp
 8006df2:	9209      	str	r2, [sp, #36]	; 0x24
 8006df4:	f89a 3000 	ldrb.w	r3, [sl]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 80a2 	beq.w	8006f42 <_vfiprintf_r+0x20e>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f04f 32ff 	mov.w	r2, #4294967295
 8006e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e08:	f10a 0a01 	add.w	sl, sl, #1
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	9307      	str	r3, [sp, #28]
 8006e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e14:	931a      	str	r3, [sp, #104]	; 0x68
 8006e16:	4654      	mov	r4, sl
 8006e18:	2205      	movs	r2, #5
 8006e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e1e:	4858      	ldr	r0, [pc, #352]	; (8006f80 <_vfiprintf_r+0x24c>)
 8006e20:	f7ff fad2 	bl	80063c8 <memchr>
 8006e24:	9a04      	ldr	r2, [sp, #16]
 8006e26:	b9d8      	cbnz	r0, 8006e60 <_vfiprintf_r+0x12c>
 8006e28:	06d1      	lsls	r1, r2, #27
 8006e2a:	bf44      	itt	mi
 8006e2c:	2320      	movmi	r3, #32
 8006e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e32:	0713      	lsls	r3, r2, #28
 8006e34:	bf44      	itt	mi
 8006e36:	232b      	movmi	r3, #43	; 0x2b
 8006e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e40:	2b2a      	cmp	r3, #42	; 0x2a
 8006e42:	d015      	beq.n	8006e70 <_vfiprintf_r+0x13c>
 8006e44:	4654      	mov	r4, sl
 8006e46:	2000      	movs	r0, #0
 8006e48:	f04f 0c0a 	mov.w	ip, #10
 8006e4c:	9a07      	ldr	r2, [sp, #28]
 8006e4e:	4621      	mov	r1, r4
 8006e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e54:	3b30      	subs	r3, #48	; 0x30
 8006e56:	2b09      	cmp	r3, #9
 8006e58:	d94e      	bls.n	8006ef8 <_vfiprintf_r+0x1c4>
 8006e5a:	b1b0      	cbz	r0, 8006e8a <_vfiprintf_r+0x156>
 8006e5c:	9207      	str	r2, [sp, #28]
 8006e5e:	e014      	b.n	8006e8a <_vfiprintf_r+0x156>
 8006e60:	eba0 0308 	sub.w	r3, r0, r8
 8006e64:	fa09 f303 	lsl.w	r3, r9, r3
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	46a2      	mov	sl, r4
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	e7d2      	b.n	8006e16 <_vfiprintf_r+0xe2>
 8006e70:	9b03      	ldr	r3, [sp, #12]
 8006e72:	1d19      	adds	r1, r3, #4
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	9103      	str	r1, [sp, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bfbb      	ittet	lt
 8006e7c:	425b      	neglt	r3, r3
 8006e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e82:	9307      	strge	r3, [sp, #28]
 8006e84:	9307      	strlt	r3, [sp, #28]
 8006e86:	bfb8      	it	lt
 8006e88:	9204      	strlt	r2, [sp, #16]
 8006e8a:	7823      	ldrb	r3, [r4, #0]
 8006e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e8e:	d10c      	bne.n	8006eaa <_vfiprintf_r+0x176>
 8006e90:	7863      	ldrb	r3, [r4, #1]
 8006e92:	2b2a      	cmp	r3, #42	; 0x2a
 8006e94:	d135      	bne.n	8006f02 <_vfiprintf_r+0x1ce>
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	3402      	adds	r4, #2
 8006e9a:	1d1a      	adds	r2, r3, #4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	9203      	str	r2, [sp, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	bfb8      	it	lt
 8006ea4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ea8:	9305      	str	r3, [sp, #20]
 8006eaa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006f84 <_vfiprintf_r+0x250>
 8006eae:	2203      	movs	r2, #3
 8006eb0:	4650      	mov	r0, sl
 8006eb2:	7821      	ldrb	r1, [r4, #0]
 8006eb4:	f7ff fa88 	bl	80063c8 <memchr>
 8006eb8:	b140      	cbz	r0, 8006ecc <_vfiprintf_r+0x198>
 8006eba:	2340      	movs	r3, #64	; 0x40
 8006ebc:	eba0 000a 	sub.w	r0, r0, sl
 8006ec0:	fa03 f000 	lsl.w	r0, r3, r0
 8006ec4:	9b04      	ldr	r3, [sp, #16]
 8006ec6:	3401      	adds	r4, #1
 8006ec8:	4303      	orrs	r3, r0
 8006eca:	9304      	str	r3, [sp, #16]
 8006ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed0:	2206      	movs	r2, #6
 8006ed2:	482d      	ldr	r0, [pc, #180]	; (8006f88 <_vfiprintf_r+0x254>)
 8006ed4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ed8:	f7ff fa76 	bl	80063c8 <memchr>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d03f      	beq.n	8006f60 <_vfiprintf_r+0x22c>
 8006ee0:	4b2a      	ldr	r3, [pc, #168]	; (8006f8c <_vfiprintf_r+0x258>)
 8006ee2:	bb1b      	cbnz	r3, 8006f2c <_vfiprintf_r+0x1f8>
 8006ee4:	9b03      	ldr	r3, [sp, #12]
 8006ee6:	3307      	adds	r3, #7
 8006ee8:	f023 0307 	bic.w	r3, r3, #7
 8006eec:	3308      	adds	r3, #8
 8006eee:	9303      	str	r3, [sp, #12]
 8006ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef2:	443b      	add	r3, r7
 8006ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef6:	e767      	b.n	8006dc8 <_vfiprintf_r+0x94>
 8006ef8:	460c      	mov	r4, r1
 8006efa:	2001      	movs	r0, #1
 8006efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f00:	e7a5      	b.n	8006e4e <_vfiprintf_r+0x11a>
 8006f02:	2300      	movs	r3, #0
 8006f04:	f04f 0c0a 	mov.w	ip, #10
 8006f08:	4619      	mov	r1, r3
 8006f0a:	3401      	adds	r4, #1
 8006f0c:	9305      	str	r3, [sp, #20]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f14:	3a30      	subs	r2, #48	; 0x30
 8006f16:	2a09      	cmp	r2, #9
 8006f18:	d903      	bls.n	8006f22 <_vfiprintf_r+0x1ee>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0c5      	beq.n	8006eaa <_vfiprintf_r+0x176>
 8006f1e:	9105      	str	r1, [sp, #20]
 8006f20:	e7c3      	b.n	8006eaa <_vfiprintf_r+0x176>
 8006f22:	4604      	mov	r4, r0
 8006f24:	2301      	movs	r3, #1
 8006f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f2a:	e7f0      	b.n	8006f0e <_vfiprintf_r+0x1da>
 8006f2c:	ab03      	add	r3, sp, #12
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	462a      	mov	r2, r5
 8006f32:	4630      	mov	r0, r6
 8006f34:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <_vfiprintf_r+0x25c>)
 8006f36:	a904      	add	r1, sp, #16
 8006f38:	f7fd feec 	bl	8004d14 <_printf_float>
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	1c78      	adds	r0, r7, #1
 8006f40:	d1d6      	bne.n	8006ef0 <_vfiprintf_r+0x1bc>
 8006f42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f44:	07d9      	lsls	r1, r3, #31
 8006f46:	d405      	bmi.n	8006f54 <_vfiprintf_r+0x220>
 8006f48:	89ab      	ldrh	r3, [r5, #12]
 8006f4a:	059a      	lsls	r2, r3, #22
 8006f4c:	d402      	bmi.n	8006f54 <_vfiprintf_r+0x220>
 8006f4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f50:	f7ff fa30 	bl	80063b4 <__retarget_lock_release_recursive>
 8006f54:	89ab      	ldrh	r3, [r5, #12]
 8006f56:	065b      	lsls	r3, r3, #25
 8006f58:	f53f af12 	bmi.w	8006d80 <_vfiprintf_r+0x4c>
 8006f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f5e:	e711      	b.n	8006d84 <_vfiprintf_r+0x50>
 8006f60:	ab03      	add	r3, sp, #12
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	462a      	mov	r2, r5
 8006f66:	4630      	mov	r0, r6
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <_vfiprintf_r+0x25c>)
 8006f6a:	a904      	add	r1, sp, #16
 8006f6c:	f7fe f96e 	bl	800524c <_printf_i>
 8006f70:	e7e4      	b.n	8006f3c <_vfiprintf_r+0x208>
 8006f72:	bf00      	nop
 8006f74:	080077e0 	.word	0x080077e0
 8006f78:	08007800 	.word	0x08007800
 8006f7c:	080077c0 	.word	0x080077c0
 8006f80:	0800797c 	.word	0x0800797c
 8006f84:	08007982 	.word	0x08007982
 8006f88:	08007986 	.word	0x08007986
 8006f8c:	08004d15 	.word	0x08004d15
 8006f90:	08006d0f 	.word	0x08006d0f

08006f94 <_sbrk_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	2300      	movs	r3, #0
 8006f98:	4d05      	ldr	r5, [pc, #20]	; (8006fb0 <_sbrk_r+0x1c>)
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	602b      	str	r3, [r5, #0]
 8006fa0:	f7fa fab6 	bl	8001510 <_sbrk>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_sbrk_r+0x1a>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_sbrk_r+0x1a>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	20000f90 	.word	0x20000f90

08006fb4 <__sread>:
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbc:	f000 faa4 	bl	8007508 <_read_r>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	bfab      	itete	ge
 8006fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8006fc8:	181b      	addge	r3, r3, r0
 8006fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fce:	bfac      	ite	ge
 8006fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fd2:	81a3      	strhlt	r3, [r4, #12]
 8006fd4:	bd10      	pop	{r4, pc}

08006fd6 <__swrite>:
 8006fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fda:	461f      	mov	r7, r3
 8006fdc:	898b      	ldrh	r3, [r1, #12]
 8006fde:	4605      	mov	r5, r0
 8006fe0:	05db      	lsls	r3, r3, #23
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	d505      	bpl.n	8006ff4 <__swrite+0x1e>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	2200      	movs	r2, #0
 8006fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff0:	f000 f9f4 	bl	80073dc <_lseek_r>
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	4632      	mov	r2, r6
 8006ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ffc:	81a3      	strh	r3, [r4, #12]
 8006ffe:	4628      	mov	r0, r5
 8007000:	463b      	mov	r3, r7
 8007002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800700a:	f000 b869 	b.w	80070e0 <_write_r>

0800700e <__sseek>:
 800700e:	b510      	push	{r4, lr}
 8007010:	460c      	mov	r4, r1
 8007012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007016:	f000 f9e1 	bl	80073dc <_lseek_r>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	bf15      	itete	ne
 8007020:	6560      	strne	r0, [r4, #84]	; 0x54
 8007022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800702a:	81a3      	strheq	r3, [r4, #12]
 800702c:	bf18      	it	ne
 800702e:	81a3      	strhne	r3, [r4, #12]
 8007030:	bd10      	pop	{r4, pc}

08007032 <__sclose>:
 8007032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007036:	f000 b8f1 	b.w	800721c <_close_r>
	...

0800703c <__swbuf_r>:
 800703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703e:	460e      	mov	r6, r1
 8007040:	4614      	mov	r4, r2
 8007042:	4605      	mov	r5, r0
 8007044:	b118      	cbz	r0, 800704e <__swbuf_r+0x12>
 8007046:	6983      	ldr	r3, [r0, #24]
 8007048:	b90b      	cbnz	r3, 800704e <__swbuf_r+0x12>
 800704a:	f7ff f90f 	bl	800626c <__sinit>
 800704e:	4b21      	ldr	r3, [pc, #132]	; (80070d4 <__swbuf_r+0x98>)
 8007050:	429c      	cmp	r4, r3
 8007052:	d12b      	bne.n	80070ac <__swbuf_r+0x70>
 8007054:	686c      	ldr	r4, [r5, #4]
 8007056:	69a3      	ldr	r3, [r4, #24]
 8007058:	60a3      	str	r3, [r4, #8]
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	071a      	lsls	r2, r3, #28
 800705e:	d52f      	bpl.n	80070c0 <__swbuf_r+0x84>
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	b36b      	cbz	r3, 80070c0 <__swbuf_r+0x84>
 8007064:	6923      	ldr	r3, [r4, #16]
 8007066:	6820      	ldr	r0, [r4, #0]
 8007068:	b2f6      	uxtb	r6, r6
 800706a:	1ac0      	subs	r0, r0, r3
 800706c:	6963      	ldr	r3, [r4, #20]
 800706e:	4637      	mov	r7, r6
 8007070:	4283      	cmp	r3, r0
 8007072:	dc04      	bgt.n	800707e <__swbuf_r+0x42>
 8007074:	4621      	mov	r1, r4
 8007076:	4628      	mov	r0, r5
 8007078:	f000 f962 	bl	8007340 <_fflush_r>
 800707c:	bb30      	cbnz	r0, 80070cc <__swbuf_r+0x90>
 800707e:	68a3      	ldr	r3, [r4, #8]
 8007080:	3001      	adds	r0, #1
 8007082:	3b01      	subs	r3, #1
 8007084:	60a3      	str	r3, [r4, #8]
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	6022      	str	r2, [r4, #0]
 800708c:	701e      	strb	r6, [r3, #0]
 800708e:	6963      	ldr	r3, [r4, #20]
 8007090:	4283      	cmp	r3, r0
 8007092:	d004      	beq.n	800709e <__swbuf_r+0x62>
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	07db      	lsls	r3, r3, #31
 8007098:	d506      	bpl.n	80070a8 <__swbuf_r+0x6c>
 800709a:	2e0a      	cmp	r6, #10
 800709c:	d104      	bne.n	80070a8 <__swbuf_r+0x6c>
 800709e:	4621      	mov	r1, r4
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 f94d 	bl	8007340 <_fflush_r>
 80070a6:	b988      	cbnz	r0, 80070cc <__swbuf_r+0x90>
 80070a8:	4638      	mov	r0, r7
 80070aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ac:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <__swbuf_r+0x9c>)
 80070ae:	429c      	cmp	r4, r3
 80070b0:	d101      	bne.n	80070b6 <__swbuf_r+0x7a>
 80070b2:	68ac      	ldr	r4, [r5, #8]
 80070b4:	e7cf      	b.n	8007056 <__swbuf_r+0x1a>
 80070b6:	4b09      	ldr	r3, [pc, #36]	; (80070dc <__swbuf_r+0xa0>)
 80070b8:	429c      	cmp	r4, r3
 80070ba:	bf08      	it	eq
 80070bc:	68ec      	ldreq	r4, [r5, #12]
 80070be:	e7ca      	b.n	8007056 <__swbuf_r+0x1a>
 80070c0:	4621      	mov	r1, r4
 80070c2:	4628      	mov	r0, r5
 80070c4:	f000 f81e 	bl	8007104 <__swsetup_r>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d0cb      	beq.n	8007064 <__swbuf_r+0x28>
 80070cc:	f04f 37ff 	mov.w	r7, #4294967295
 80070d0:	e7ea      	b.n	80070a8 <__swbuf_r+0x6c>
 80070d2:	bf00      	nop
 80070d4:	080077e0 	.word	0x080077e0
 80070d8:	08007800 	.word	0x08007800
 80070dc:	080077c0 	.word	0x080077c0

080070e0 <_write_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	2200      	movs	r2, #0
 80070ea:	4d05      	ldr	r5, [pc, #20]	; (8007100 <_write_r+0x20>)
 80070ec:	602a      	str	r2, [r5, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f7fa f9c1 	bl	8001476 <_write>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_write_r+0x1e>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_write_r+0x1e>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	20000f90 	.word	0x20000f90

08007104 <__swsetup_r>:
 8007104:	4b32      	ldr	r3, [pc, #200]	; (80071d0 <__swsetup_r+0xcc>)
 8007106:	b570      	push	{r4, r5, r6, lr}
 8007108:	681d      	ldr	r5, [r3, #0]
 800710a:	4606      	mov	r6, r0
 800710c:	460c      	mov	r4, r1
 800710e:	b125      	cbz	r5, 800711a <__swsetup_r+0x16>
 8007110:	69ab      	ldr	r3, [r5, #24]
 8007112:	b913      	cbnz	r3, 800711a <__swsetup_r+0x16>
 8007114:	4628      	mov	r0, r5
 8007116:	f7ff f8a9 	bl	800626c <__sinit>
 800711a:	4b2e      	ldr	r3, [pc, #184]	; (80071d4 <__swsetup_r+0xd0>)
 800711c:	429c      	cmp	r4, r3
 800711e:	d10f      	bne.n	8007140 <__swsetup_r+0x3c>
 8007120:	686c      	ldr	r4, [r5, #4]
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007128:	0719      	lsls	r1, r3, #28
 800712a:	d42c      	bmi.n	8007186 <__swsetup_r+0x82>
 800712c:	06dd      	lsls	r5, r3, #27
 800712e:	d411      	bmi.n	8007154 <__swsetup_r+0x50>
 8007130:	2309      	movs	r3, #9
 8007132:	6033      	str	r3, [r6, #0]
 8007134:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007138:	f04f 30ff 	mov.w	r0, #4294967295
 800713c:	81a3      	strh	r3, [r4, #12]
 800713e:	e03e      	b.n	80071be <__swsetup_r+0xba>
 8007140:	4b25      	ldr	r3, [pc, #148]	; (80071d8 <__swsetup_r+0xd4>)
 8007142:	429c      	cmp	r4, r3
 8007144:	d101      	bne.n	800714a <__swsetup_r+0x46>
 8007146:	68ac      	ldr	r4, [r5, #8]
 8007148:	e7eb      	b.n	8007122 <__swsetup_r+0x1e>
 800714a:	4b24      	ldr	r3, [pc, #144]	; (80071dc <__swsetup_r+0xd8>)
 800714c:	429c      	cmp	r4, r3
 800714e:	bf08      	it	eq
 8007150:	68ec      	ldreq	r4, [r5, #12]
 8007152:	e7e6      	b.n	8007122 <__swsetup_r+0x1e>
 8007154:	0758      	lsls	r0, r3, #29
 8007156:	d512      	bpl.n	800717e <__swsetup_r+0x7a>
 8007158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800715a:	b141      	cbz	r1, 800716e <__swsetup_r+0x6a>
 800715c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007160:	4299      	cmp	r1, r3
 8007162:	d002      	beq.n	800716a <__swsetup_r+0x66>
 8007164:	4630      	mov	r0, r6
 8007166:	f7ff fce1 	bl	8006b2c <_free_r>
 800716a:	2300      	movs	r3, #0
 800716c:	6363      	str	r3, [r4, #52]	; 0x34
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	2300      	movs	r3, #0
 8007178:	6063      	str	r3, [r4, #4]
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	f043 0308 	orr.w	r3, r3, #8
 8007184:	81a3      	strh	r3, [r4, #12]
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	b94b      	cbnz	r3, 800719e <__swsetup_r+0x9a>
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007194:	d003      	beq.n	800719e <__swsetup_r+0x9a>
 8007196:	4621      	mov	r1, r4
 8007198:	4630      	mov	r0, r6
 800719a:	f000 f957 	bl	800744c <__smakebuf_r>
 800719e:	89a0      	ldrh	r0, [r4, #12]
 80071a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071a4:	f010 0301 	ands.w	r3, r0, #1
 80071a8:	d00a      	beq.n	80071c0 <__swsetup_r+0xbc>
 80071aa:	2300      	movs	r3, #0
 80071ac:	60a3      	str	r3, [r4, #8]
 80071ae:	6963      	ldr	r3, [r4, #20]
 80071b0:	425b      	negs	r3, r3
 80071b2:	61a3      	str	r3, [r4, #24]
 80071b4:	6923      	ldr	r3, [r4, #16]
 80071b6:	b943      	cbnz	r3, 80071ca <__swsetup_r+0xc6>
 80071b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071bc:	d1ba      	bne.n	8007134 <__swsetup_r+0x30>
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	0781      	lsls	r1, r0, #30
 80071c2:	bf58      	it	pl
 80071c4:	6963      	ldrpl	r3, [r4, #20]
 80071c6:	60a3      	str	r3, [r4, #8]
 80071c8:	e7f4      	b.n	80071b4 <__swsetup_r+0xb0>
 80071ca:	2000      	movs	r0, #0
 80071cc:	e7f7      	b.n	80071be <__swsetup_r+0xba>
 80071ce:	bf00      	nop
 80071d0:	2000000c 	.word	0x2000000c
 80071d4:	080077e0 	.word	0x080077e0
 80071d8:	08007800 	.word	0x08007800
 80071dc:	080077c0 	.word	0x080077c0

080071e0 <__assert_func>:
 80071e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071e2:	4614      	mov	r4, r2
 80071e4:	461a      	mov	r2, r3
 80071e6:	4b09      	ldr	r3, [pc, #36]	; (800720c <__assert_func+0x2c>)
 80071e8:	4605      	mov	r5, r0
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68d8      	ldr	r0, [r3, #12]
 80071ee:	b14c      	cbz	r4, 8007204 <__assert_func+0x24>
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <__assert_func+0x30>)
 80071f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071f6:	9100      	str	r1, [sp, #0]
 80071f8:	462b      	mov	r3, r5
 80071fa:	4906      	ldr	r1, [pc, #24]	; (8007214 <__assert_func+0x34>)
 80071fc:	f000 f8dc 	bl	80073b8 <fiprintf>
 8007200:	f000 f9a1 	bl	8007546 <abort>
 8007204:	4b04      	ldr	r3, [pc, #16]	; (8007218 <__assert_func+0x38>)
 8007206:	461c      	mov	r4, r3
 8007208:	e7f3      	b.n	80071f2 <__assert_func+0x12>
 800720a:	bf00      	nop
 800720c:	2000000c 	.word	0x2000000c
 8007210:	0800798d 	.word	0x0800798d
 8007214:	0800799a 	.word	0x0800799a
 8007218:	080079c8 	.word	0x080079c8

0800721c <_close_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	2300      	movs	r3, #0
 8007220:	4d05      	ldr	r5, [pc, #20]	; (8007238 <_close_r+0x1c>)
 8007222:	4604      	mov	r4, r0
 8007224:	4608      	mov	r0, r1
 8007226:	602b      	str	r3, [r5, #0]
 8007228:	f7fa f941 	bl	80014ae <_close>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_close_r+0x1a>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_close_r+0x1a>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	20000f90 	.word	0x20000f90

0800723c <__sflush_r>:
 800723c:	898a      	ldrh	r2, [r1, #12]
 800723e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007240:	4605      	mov	r5, r0
 8007242:	0710      	lsls	r0, r2, #28
 8007244:	460c      	mov	r4, r1
 8007246:	d457      	bmi.n	80072f8 <__sflush_r+0xbc>
 8007248:	684b      	ldr	r3, [r1, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	dc04      	bgt.n	8007258 <__sflush_r+0x1c>
 800724e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	dc01      	bgt.n	8007258 <__sflush_r+0x1c>
 8007254:	2000      	movs	r0, #0
 8007256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800725a:	2e00      	cmp	r6, #0
 800725c:	d0fa      	beq.n	8007254 <__sflush_r+0x18>
 800725e:	2300      	movs	r3, #0
 8007260:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007264:	682f      	ldr	r7, [r5, #0]
 8007266:	602b      	str	r3, [r5, #0]
 8007268:	d032      	beq.n	80072d0 <__sflush_r+0x94>
 800726a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	075a      	lsls	r2, r3, #29
 8007270:	d505      	bpl.n	800727e <__sflush_r+0x42>
 8007272:	6863      	ldr	r3, [r4, #4]
 8007274:	1ac0      	subs	r0, r0, r3
 8007276:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007278:	b10b      	cbz	r3, 800727e <__sflush_r+0x42>
 800727a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800727c:	1ac0      	subs	r0, r0, r3
 800727e:	2300      	movs	r3, #0
 8007280:	4602      	mov	r2, r0
 8007282:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007284:	4628      	mov	r0, r5
 8007286:	6a21      	ldr	r1, [r4, #32]
 8007288:	47b0      	blx	r6
 800728a:	1c43      	adds	r3, r0, #1
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	d106      	bne.n	800729e <__sflush_r+0x62>
 8007290:	6829      	ldr	r1, [r5, #0]
 8007292:	291d      	cmp	r1, #29
 8007294:	d82c      	bhi.n	80072f0 <__sflush_r+0xb4>
 8007296:	4a29      	ldr	r2, [pc, #164]	; (800733c <__sflush_r+0x100>)
 8007298:	40ca      	lsrs	r2, r1
 800729a:	07d6      	lsls	r6, r2, #31
 800729c:	d528      	bpl.n	80072f0 <__sflush_r+0xb4>
 800729e:	2200      	movs	r2, #0
 80072a0:	6062      	str	r2, [r4, #4]
 80072a2:	6922      	ldr	r2, [r4, #16]
 80072a4:	04d9      	lsls	r1, r3, #19
 80072a6:	6022      	str	r2, [r4, #0]
 80072a8:	d504      	bpl.n	80072b4 <__sflush_r+0x78>
 80072aa:	1c42      	adds	r2, r0, #1
 80072ac:	d101      	bne.n	80072b2 <__sflush_r+0x76>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	b903      	cbnz	r3, 80072b4 <__sflush_r+0x78>
 80072b2:	6560      	str	r0, [r4, #84]	; 0x54
 80072b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072b6:	602f      	str	r7, [r5, #0]
 80072b8:	2900      	cmp	r1, #0
 80072ba:	d0cb      	beq.n	8007254 <__sflush_r+0x18>
 80072bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072c0:	4299      	cmp	r1, r3
 80072c2:	d002      	beq.n	80072ca <__sflush_r+0x8e>
 80072c4:	4628      	mov	r0, r5
 80072c6:	f7ff fc31 	bl	8006b2c <_free_r>
 80072ca:	2000      	movs	r0, #0
 80072cc:	6360      	str	r0, [r4, #52]	; 0x34
 80072ce:	e7c2      	b.n	8007256 <__sflush_r+0x1a>
 80072d0:	6a21      	ldr	r1, [r4, #32]
 80072d2:	2301      	movs	r3, #1
 80072d4:	4628      	mov	r0, r5
 80072d6:	47b0      	blx	r6
 80072d8:	1c41      	adds	r1, r0, #1
 80072da:	d1c7      	bne.n	800726c <__sflush_r+0x30>
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0c4      	beq.n	800726c <__sflush_r+0x30>
 80072e2:	2b1d      	cmp	r3, #29
 80072e4:	d001      	beq.n	80072ea <__sflush_r+0xae>
 80072e6:	2b16      	cmp	r3, #22
 80072e8:	d101      	bne.n	80072ee <__sflush_r+0xb2>
 80072ea:	602f      	str	r7, [r5, #0]
 80072ec:	e7b2      	b.n	8007254 <__sflush_r+0x18>
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	e7ae      	b.n	8007256 <__sflush_r+0x1a>
 80072f8:	690f      	ldr	r7, [r1, #16]
 80072fa:	2f00      	cmp	r7, #0
 80072fc:	d0aa      	beq.n	8007254 <__sflush_r+0x18>
 80072fe:	0793      	lsls	r3, r2, #30
 8007300:	bf18      	it	ne
 8007302:	2300      	movne	r3, #0
 8007304:	680e      	ldr	r6, [r1, #0]
 8007306:	bf08      	it	eq
 8007308:	694b      	ldreq	r3, [r1, #20]
 800730a:	1bf6      	subs	r6, r6, r7
 800730c:	600f      	str	r7, [r1, #0]
 800730e:	608b      	str	r3, [r1, #8]
 8007310:	2e00      	cmp	r6, #0
 8007312:	dd9f      	ble.n	8007254 <__sflush_r+0x18>
 8007314:	4633      	mov	r3, r6
 8007316:	463a      	mov	r2, r7
 8007318:	4628      	mov	r0, r5
 800731a:	6a21      	ldr	r1, [r4, #32]
 800731c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007320:	47e0      	blx	ip
 8007322:	2800      	cmp	r0, #0
 8007324:	dc06      	bgt.n	8007334 <__sflush_r+0xf8>
 8007326:	89a3      	ldrh	r3, [r4, #12]
 8007328:	f04f 30ff 	mov.w	r0, #4294967295
 800732c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007330:	81a3      	strh	r3, [r4, #12]
 8007332:	e790      	b.n	8007256 <__sflush_r+0x1a>
 8007334:	4407      	add	r7, r0
 8007336:	1a36      	subs	r6, r6, r0
 8007338:	e7ea      	b.n	8007310 <__sflush_r+0xd4>
 800733a:	bf00      	nop
 800733c:	20400001 	.word	0x20400001

08007340 <_fflush_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	690b      	ldr	r3, [r1, #16]
 8007344:	4605      	mov	r5, r0
 8007346:	460c      	mov	r4, r1
 8007348:	b913      	cbnz	r3, 8007350 <_fflush_r+0x10>
 800734a:	2500      	movs	r5, #0
 800734c:	4628      	mov	r0, r5
 800734e:	bd38      	pop	{r3, r4, r5, pc}
 8007350:	b118      	cbz	r0, 800735a <_fflush_r+0x1a>
 8007352:	6983      	ldr	r3, [r0, #24]
 8007354:	b90b      	cbnz	r3, 800735a <_fflush_r+0x1a>
 8007356:	f7fe ff89 	bl	800626c <__sinit>
 800735a:	4b14      	ldr	r3, [pc, #80]	; (80073ac <_fflush_r+0x6c>)
 800735c:	429c      	cmp	r4, r3
 800735e:	d11b      	bne.n	8007398 <_fflush_r+0x58>
 8007360:	686c      	ldr	r4, [r5, #4]
 8007362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0ef      	beq.n	800734a <_fflush_r+0xa>
 800736a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800736c:	07d0      	lsls	r0, r2, #31
 800736e:	d404      	bmi.n	800737a <_fflush_r+0x3a>
 8007370:	0599      	lsls	r1, r3, #22
 8007372:	d402      	bmi.n	800737a <_fflush_r+0x3a>
 8007374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007376:	f7ff f81c 	bl	80063b2 <__retarget_lock_acquire_recursive>
 800737a:	4628      	mov	r0, r5
 800737c:	4621      	mov	r1, r4
 800737e:	f7ff ff5d 	bl	800723c <__sflush_r>
 8007382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007384:	4605      	mov	r5, r0
 8007386:	07da      	lsls	r2, r3, #31
 8007388:	d4e0      	bmi.n	800734c <_fflush_r+0xc>
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	059b      	lsls	r3, r3, #22
 800738e:	d4dd      	bmi.n	800734c <_fflush_r+0xc>
 8007390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007392:	f7ff f80f 	bl	80063b4 <__retarget_lock_release_recursive>
 8007396:	e7d9      	b.n	800734c <_fflush_r+0xc>
 8007398:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <_fflush_r+0x70>)
 800739a:	429c      	cmp	r4, r3
 800739c:	d101      	bne.n	80073a2 <_fflush_r+0x62>
 800739e:	68ac      	ldr	r4, [r5, #8]
 80073a0:	e7df      	b.n	8007362 <_fflush_r+0x22>
 80073a2:	4b04      	ldr	r3, [pc, #16]	; (80073b4 <_fflush_r+0x74>)
 80073a4:	429c      	cmp	r4, r3
 80073a6:	bf08      	it	eq
 80073a8:	68ec      	ldreq	r4, [r5, #12]
 80073aa:	e7da      	b.n	8007362 <_fflush_r+0x22>
 80073ac:	080077e0 	.word	0x080077e0
 80073b0:	08007800 	.word	0x08007800
 80073b4:	080077c0 	.word	0x080077c0

080073b8 <fiprintf>:
 80073b8:	b40e      	push	{r1, r2, r3}
 80073ba:	b503      	push	{r0, r1, lr}
 80073bc:	4601      	mov	r1, r0
 80073be:	ab03      	add	r3, sp, #12
 80073c0:	4805      	ldr	r0, [pc, #20]	; (80073d8 <fiprintf+0x20>)
 80073c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073c6:	6800      	ldr	r0, [r0, #0]
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	f7ff fcb3 	bl	8006d34 <_vfiprintf_r>
 80073ce:	b002      	add	sp, #8
 80073d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073d4:	b003      	add	sp, #12
 80073d6:	4770      	bx	lr
 80073d8:	2000000c 	.word	0x2000000c

080073dc <_lseek_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4604      	mov	r4, r0
 80073e0:	4608      	mov	r0, r1
 80073e2:	4611      	mov	r1, r2
 80073e4:	2200      	movs	r2, #0
 80073e6:	4d05      	ldr	r5, [pc, #20]	; (80073fc <_lseek_r+0x20>)
 80073e8:	602a      	str	r2, [r5, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	f7fa f883 	bl	80014f6 <_lseek>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d102      	bne.n	80073fa <_lseek_r+0x1e>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	b103      	cbz	r3, 80073fa <_lseek_r+0x1e>
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	bd38      	pop	{r3, r4, r5, pc}
 80073fc:	20000f90 	.word	0x20000f90

08007400 <__swhatbuf_r>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	460e      	mov	r6, r1
 8007404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007408:	4614      	mov	r4, r2
 800740a:	2900      	cmp	r1, #0
 800740c:	461d      	mov	r5, r3
 800740e:	b096      	sub	sp, #88	; 0x58
 8007410:	da08      	bge.n	8007424 <__swhatbuf_r+0x24>
 8007412:	2200      	movs	r2, #0
 8007414:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007418:	602a      	str	r2, [r5, #0]
 800741a:	061a      	lsls	r2, r3, #24
 800741c:	d410      	bmi.n	8007440 <__swhatbuf_r+0x40>
 800741e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007422:	e00e      	b.n	8007442 <__swhatbuf_r+0x42>
 8007424:	466a      	mov	r2, sp
 8007426:	f000 f895 	bl	8007554 <_fstat_r>
 800742a:	2800      	cmp	r0, #0
 800742c:	dbf1      	blt.n	8007412 <__swhatbuf_r+0x12>
 800742e:	9a01      	ldr	r2, [sp, #4]
 8007430:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007434:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007438:	425a      	negs	r2, r3
 800743a:	415a      	adcs	r2, r3
 800743c:	602a      	str	r2, [r5, #0]
 800743e:	e7ee      	b.n	800741e <__swhatbuf_r+0x1e>
 8007440:	2340      	movs	r3, #64	; 0x40
 8007442:	2000      	movs	r0, #0
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	b016      	add	sp, #88	; 0x58
 8007448:	bd70      	pop	{r4, r5, r6, pc}
	...

0800744c <__smakebuf_r>:
 800744c:	898b      	ldrh	r3, [r1, #12]
 800744e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007450:	079d      	lsls	r5, r3, #30
 8007452:	4606      	mov	r6, r0
 8007454:	460c      	mov	r4, r1
 8007456:	d507      	bpl.n	8007468 <__smakebuf_r+0x1c>
 8007458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	2301      	movs	r3, #1
 8007462:	6163      	str	r3, [r4, #20]
 8007464:	b002      	add	sp, #8
 8007466:	bd70      	pop	{r4, r5, r6, pc}
 8007468:	466a      	mov	r2, sp
 800746a:	ab01      	add	r3, sp, #4
 800746c:	f7ff ffc8 	bl	8007400 <__swhatbuf_r>
 8007470:	9900      	ldr	r1, [sp, #0]
 8007472:	4605      	mov	r5, r0
 8007474:	4630      	mov	r0, r6
 8007476:	f7ff fbc1 	bl	8006bfc <_malloc_r>
 800747a:	b948      	cbnz	r0, 8007490 <__smakebuf_r+0x44>
 800747c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007480:	059a      	lsls	r2, r3, #22
 8007482:	d4ef      	bmi.n	8007464 <__smakebuf_r+0x18>
 8007484:	f023 0303 	bic.w	r3, r3, #3
 8007488:	f043 0302 	orr.w	r3, r3, #2
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	e7e3      	b.n	8007458 <__smakebuf_r+0xc>
 8007490:	4b0d      	ldr	r3, [pc, #52]	; (80074c8 <__smakebuf_r+0x7c>)
 8007492:	62b3      	str	r3, [r6, #40]	; 0x28
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	6020      	str	r0, [r4, #0]
 8007498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749c:	81a3      	strh	r3, [r4, #12]
 800749e:	9b00      	ldr	r3, [sp, #0]
 80074a0:	6120      	str	r0, [r4, #16]
 80074a2:	6163      	str	r3, [r4, #20]
 80074a4:	9b01      	ldr	r3, [sp, #4]
 80074a6:	b15b      	cbz	r3, 80074c0 <__smakebuf_r+0x74>
 80074a8:	4630      	mov	r0, r6
 80074aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ae:	f000 f863 	bl	8007578 <_isatty_r>
 80074b2:	b128      	cbz	r0, 80074c0 <__smakebuf_r+0x74>
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	f023 0303 	bic.w	r3, r3, #3
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	89a0      	ldrh	r0, [r4, #12]
 80074c2:	4305      	orrs	r5, r0
 80074c4:	81a5      	strh	r5, [r4, #12]
 80074c6:	e7cd      	b.n	8007464 <__smakebuf_r+0x18>
 80074c8:	08006205 	.word	0x08006205

080074cc <__ascii_mbtowc>:
 80074cc:	b082      	sub	sp, #8
 80074ce:	b901      	cbnz	r1, 80074d2 <__ascii_mbtowc+0x6>
 80074d0:	a901      	add	r1, sp, #4
 80074d2:	b142      	cbz	r2, 80074e6 <__ascii_mbtowc+0x1a>
 80074d4:	b14b      	cbz	r3, 80074ea <__ascii_mbtowc+0x1e>
 80074d6:	7813      	ldrb	r3, [r2, #0]
 80074d8:	600b      	str	r3, [r1, #0]
 80074da:	7812      	ldrb	r2, [r2, #0]
 80074dc:	1e10      	subs	r0, r2, #0
 80074de:	bf18      	it	ne
 80074e0:	2001      	movne	r0, #1
 80074e2:	b002      	add	sp, #8
 80074e4:	4770      	bx	lr
 80074e6:	4610      	mov	r0, r2
 80074e8:	e7fb      	b.n	80074e2 <__ascii_mbtowc+0x16>
 80074ea:	f06f 0001 	mvn.w	r0, #1
 80074ee:	e7f8      	b.n	80074e2 <__ascii_mbtowc+0x16>

080074f0 <__malloc_lock>:
 80074f0:	4801      	ldr	r0, [pc, #4]	; (80074f8 <__malloc_lock+0x8>)
 80074f2:	f7fe bf5e 	b.w	80063b2 <__retarget_lock_acquire_recursive>
 80074f6:	bf00      	nop
 80074f8:	20000f84 	.word	0x20000f84

080074fc <__malloc_unlock>:
 80074fc:	4801      	ldr	r0, [pc, #4]	; (8007504 <__malloc_unlock+0x8>)
 80074fe:	f7fe bf59 	b.w	80063b4 <__retarget_lock_release_recursive>
 8007502:	bf00      	nop
 8007504:	20000f84 	.word	0x20000f84

08007508 <_read_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4604      	mov	r4, r0
 800750c:	4608      	mov	r0, r1
 800750e:	4611      	mov	r1, r2
 8007510:	2200      	movs	r2, #0
 8007512:	4d05      	ldr	r5, [pc, #20]	; (8007528 <_read_r+0x20>)
 8007514:	602a      	str	r2, [r5, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	f7f9 ff90 	bl	800143c <_read>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d102      	bne.n	8007526 <_read_r+0x1e>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	b103      	cbz	r3, 8007526 <_read_r+0x1e>
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	20000f90 	.word	0x20000f90

0800752c <__ascii_wctomb>:
 800752c:	4603      	mov	r3, r0
 800752e:	4608      	mov	r0, r1
 8007530:	b141      	cbz	r1, 8007544 <__ascii_wctomb+0x18>
 8007532:	2aff      	cmp	r2, #255	; 0xff
 8007534:	d904      	bls.n	8007540 <__ascii_wctomb+0x14>
 8007536:	228a      	movs	r2, #138	; 0x8a
 8007538:	f04f 30ff 	mov.w	r0, #4294967295
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	4770      	bx	lr
 8007540:	2001      	movs	r0, #1
 8007542:	700a      	strb	r2, [r1, #0]
 8007544:	4770      	bx	lr

08007546 <abort>:
 8007546:	2006      	movs	r0, #6
 8007548:	b508      	push	{r3, lr}
 800754a:	f000 f84d 	bl	80075e8 <raise>
 800754e:	2001      	movs	r0, #1
 8007550:	f7f9 ff6a 	bl	8001428 <_exit>

08007554 <_fstat_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	2300      	movs	r3, #0
 8007558:	4d06      	ldr	r5, [pc, #24]	; (8007574 <_fstat_r+0x20>)
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	4611      	mov	r1, r2
 8007560:	602b      	str	r3, [r5, #0]
 8007562:	f7f9 ffaf 	bl	80014c4 <_fstat>
 8007566:	1c43      	adds	r3, r0, #1
 8007568:	d102      	bne.n	8007570 <_fstat_r+0x1c>
 800756a:	682b      	ldr	r3, [r5, #0]
 800756c:	b103      	cbz	r3, 8007570 <_fstat_r+0x1c>
 800756e:	6023      	str	r3, [r4, #0]
 8007570:	bd38      	pop	{r3, r4, r5, pc}
 8007572:	bf00      	nop
 8007574:	20000f90 	.word	0x20000f90

08007578 <_isatty_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	2300      	movs	r3, #0
 800757c:	4d05      	ldr	r5, [pc, #20]	; (8007594 <_isatty_r+0x1c>)
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	f7f9 ffad 	bl	80014e2 <_isatty>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_isatty_r+0x1a>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_isatty_r+0x1a>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	20000f90 	.word	0x20000f90

08007598 <_raise_r>:
 8007598:	291f      	cmp	r1, #31
 800759a:	b538      	push	{r3, r4, r5, lr}
 800759c:	4604      	mov	r4, r0
 800759e:	460d      	mov	r5, r1
 80075a0:	d904      	bls.n	80075ac <_raise_r+0x14>
 80075a2:	2316      	movs	r3, #22
 80075a4:	6003      	str	r3, [r0, #0]
 80075a6:	f04f 30ff 	mov.w	r0, #4294967295
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80075ae:	b112      	cbz	r2, 80075b6 <_raise_r+0x1e>
 80075b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075b4:	b94b      	cbnz	r3, 80075ca <_raise_r+0x32>
 80075b6:	4620      	mov	r0, r4
 80075b8:	f000 f830 	bl	800761c <_getpid_r>
 80075bc:	462a      	mov	r2, r5
 80075be:	4601      	mov	r1, r0
 80075c0:	4620      	mov	r0, r4
 80075c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075c6:	f000 b817 	b.w	80075f8 <_kill_r>
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d00a      	beq.n	80075e4 <_raise_r+0x4c>
 80075ce:	1c59      	adds	r1, r3, #1
 80075d0:	d103      	bne.n	80075da <_raise_r+0x42>
 80075d2:	2316      	movs	r3, #22
 80075d4:	6003      	str	r3, [r0, #0]
 80075d6:	2001      	movs	r0, #1
 80075d8:	e7e7      	b.n	80075aa <_raise_r+0x12>
 80075da:	2400      	movs	r4, #0
 80075dc:	4628      	mov	r0, r5
 80075de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075e2:	4798      	blx	r3
 80075e4:	2000      	movs	r0, #0
 80075e6:	e7e0      	b.n	80075aa <_raise_r+0x12>

080075e8 <raise>:
 80075e8:	4b02      	ldr	r3, [pc, #8]	; (80075f4 <raise+0xc>)
 80075ea:	4601      	mov	r1, r0
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	f7ff bfd3 	b.w	8007598 <_raise_r>
 80075f2:	bf00      	nop
 80075f4:	2000000c 	.word	0x2000000c

080075f8 <_kill_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	2300      	movs	r3, #0
 80075fc:	4d06      	ldr	r5, [pc, #24]	; (8007618 <_kill_r+0x20>)
 80075fe:	4604      	mov	r4, r0
 8007600:	4608      	mov	r0, r1
 8007602:	4611      	mov	r1, r2
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	f7f9 feff 	bl	8001408 <_kill>
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	d102      	bne.n	8007614 <_kill_r+0x1c>
 800760e:	682b      	ldr	r3, [r5, #0]
 8007610:	b103      	cbz	r3, 8007614 <_kill_r+0x1c>
 8007612:	6023      	str	r3, [r4, #0]
 8007614:	bd38      	pop	{r3, r4, r5, pc}
 8007616:	bf00      	nop
 8007618:	20000f90 	.word	0x20000f90

0800761c <_getpid_r>:
 800761c:	f7f9 beed 	b.w	80013fa <_getpid>

08007620 <_init>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	bf00      	nop
 8007624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007626:	bc08      	pop	{r3}
 8007628:	469e      	mov	lr, r3
 800762a:	4770      	bx	lr

0800762c <_fini>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr
