
Proximity_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007550  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08007660  08007660  00017660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b0c  08007b0c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007b0c  08007b0c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b0c  08007b0c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b0c  08007b0c  00017b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b10  08007b10  00017b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db8  200001dc  08007cf0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f94  08007cf0  00020f94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009926  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5f  00000000  00000000  00029b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002c328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194b9  00000000  00000000  0002cce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaaf  00000000  00000000  000461a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089424  00000000  00000000  00050c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da074  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a18  00000000  00000000  000da0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007648 	.word	0x08007648

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007648 	.word	0x08007648

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <I2C_Delay>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
static void I2C_Delay(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
		ѭ������Ϊ7ʱ��SCLƵ�� = 347KHz�� SCL�ߵ�ƽʱ��1.5us��SCL�͵�ƽʱ��2.87us 
	 	ѭ������Ϊ5ʱ��SCLƵ�� = 421KHz�� SCL�ߵ�ƽʱ��1.25us��SCL�͵�ƽʱ��2.375us 
        
    IAR���̱���Ч�ʸߣ���������Ϊ7
	*/
	for (i = 0; i < 29; i++);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	e002      	b.n	8000a9a <I2C_Delay+0x12>
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	3301      	adds	r3, #1
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b1c      	cmp	r3, #28
 8000a9e:	d9f9      	bls.n	8000a94 <I2C_Delay+0xc>
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <I2C_Start>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Start(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C���������ź� */
	I2C_SDA_HIGH();
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <I2C_Start+0x3c>)
 8000ab6:	f003 f9e4 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 8000aba:	2201      	movs	r2, #1
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <I2C_Start+0x3c>)
 8000ac0:	f003 f9df 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000ac4:	f7ff ffe0 	bl	8000a88 <I2C_Delay>
	I2C_SDA_LOW();
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2140      	movs	r1, #64	; 0x40
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <I2C_Start+0x3c>)
 8000ace:	f003 f9d8 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000ad2:	f7ff ffd9 	bl	8000a88 <I2C_Delay>
	I2C_SCL_LOW();
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <I2C_Start+0x3c>)
 8000adc:	f003 f9d1 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000ae0:	f7ff ffd2 	bl	8000a88 <I2C_Delay>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40010c00 	.word	0x40010c00

08000aec <I2C_Stop>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Stop(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C����ֹͣ�ź� */
	I2C_SDA_LOW();
 8000af0:	2200      	movs	r2, #0
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <I2C_Stop+0x2c>)
 8000af6:	f003 f9c4 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 8000afa:	2201      	movs	r2, #1
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <I2C_Stop+0x2c>)
 8000b00:	f003 f9bf 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000b04:	f7ff ffc0 	bl	8000a88 <I2C_Delay>
	I2C_SDA_HIGH();
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2140      	movs	r1, #64	; 0x40
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <I2C_Stop+0x2c>)
 8000b0e:	f003 f9b8 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <I2C_SendByte>:
  * �������: Byte �� �ȴ����͵��ֽ�
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_SendByte(uint8_t Byte)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	/* �ȷ����ֽڵĸ�λbit7 */
	for (i = 0; i < 8; i++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	e02c      	b.n	8000b86 <I2C_SendByte+0x6a>
	{		
		if (Byte & 0x80)//提取当前字节最高有效位
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da05      	bge.n	8000b40 <I2C_SendByte+0x24>
		{
			I2C_SDA_HIGH();
 8000b34:	2201      	movs	r2, #1
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	4817      	ldr	r0, [pc, #92]	; (8000b98 <I2C_SendByte+0x7c>)
 8000b3a:	f003 f9a2 	bl	8003e82 <HAL_GPIO_WritePin>
 8000b3e:	e004      	b.n	8000b4a <I2C_SendByte+0x2e>
		}
		else
		{
			I2C_SDA_LOW();
 8000b40:	2200      	movs	r2, #0
 8000b42:	2140      	movs	r1, #64	; 0x40
 8000b44:	4814      	ldr	r0, [pc, #80]	; (8000b98 <I2C_SendByte+0x7c>)
 8000b46:	f003 f99c 	bl	8003e82 <HAL_GPIO_WritePin>
		}
		I2C_Delay();
 8000b4a:	f7ff ff9d 	bl	8000a88 <I2C_Delay>
		I2C_SCL_HIGH();
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <I2C_SendByte+0x7c>)
 8000b54:	f003 f995 	bl	8003e82 <HAL_GPIO_WritePin>
		I2C_Delay();	
 8000b58:	f7ff ff96 	bl	8000a88 <I2C_Delay>
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2180      	movs	r1, #128	; 0x80
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <I2C_SendByte+0x7c>)
 8000b62:	f003 f98e 	bl	8003e82 <HAL_GPIO_WritePin>
		if (i == 7)
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	2b07      	cmp	r3, #7
 8000b6a:	d104      	bne.n	8000b76 <I2C_SendByte+0x5a>
		{
			I2C_SDA_HIGH(); //
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2140      	movs	r1, #64	; 0x40
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <I2C_SendByte+0x7c>)
 8000b72:	f003 f986 	bl	8003e82 <HAL_GPIO_WritePin>
		}
		Byte <<= 1;//左移一位，以读取下一位
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	71fb      	strb	r3, [r7, #7]
		I2C_Delay();
 8000b7c:	f7ff ff84 	bl	8000a88 <I2C_Delay>
	for (i = 0; i < 8; i++)
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	3301      	adds	r3, #1
 8000b84:	73fb      	strb	r3, [r7, #15]
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	2b07      	cmp	r3, #7
 8000b8a:	d9cf      	bls.n	8000b2c <I2C_SendByte+0x10>
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <I2C_ReadByte>:
  * �������: ��
  * �� �� ֵ: ����������
  * ˵    ������
  */
uint8_t I2C_ReadByte(uint8_t ack)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t value;//读取值

	value = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < 8; i++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	e01d      	b.n	8000bec <I2C_ReadByte+0x50>
	{
		value <<= 1;
 8000bb0:	7bbb      	ldrb	r3, [r7, #14]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	73bb      	strb	r3, [r7, #14]
		I2C_SCL_HIGH();
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	4814      	ldr	r0, [pc, #80]	; (8000c0c <I2C_ReadByte+0x70>)
 8000bbc:	f003 f961 	bl	8003e82 <HAL_GPIO_WritePin>
		I2C_Delay();
 8000bc0:	f7ff ff62 	bl	8000a88 <I2C_Delay>
		if (I2C_SDA_READ())
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	4811      	ldr	r0, [pc, #68]	; (8000c0c <I2C_ReadByte+0x70>)
 8000bc8:	f003 f944 	bl	8003e54 <HAL_GPIO_ReadPin>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <I2C_ReadByte+0x3c>
		{
			value++;
 8000bd2:	7bbb      	ldrb	r3, [r7, #14]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	73bb      	strb	r3, [r7, #14]
		}
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <I2C_ReadByte+0x70>)
 8000bde:	f003 f950 	bl	8003e82 <HAL_GPIO_WritePin>
		I2C_Delay();
 8000be2:	f7ff ff51 	bl	8000a88 <I2C_Delay>
	for (i = 0; i < 8; i++)
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	3301      	adds	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	d9de      	bls.n	8000bb0 <I2C_ReadByte+0x14>
	}
  if(ack==0)
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <I2C_ReadByte+0x62>
		I2C_NAck();
 8000bf8:	f000 f856 	bl	8000ca8 <I2C_NAck>
 8000bfc:	e001      	b.n	8000c02 <I2C_ReadByte+0x66>
	else
		I2C_Ack();
 8000bfe:	f000 f833 	bl	8000c68 <I2C_Ack>
	return value;
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40010c00 	.word	0x40010c00

08000c10 <I2C_WaitAck>:
  * �������: ��
  * �� �� ֵ: ����0��ʾ��ȷӦ��1��ʾ��������Ӧ
  * ˵    ������
  */
uint8_t I2C_WaitAck(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 8000c16:	2201      	movs	r2, #1
 8000c18:	2140      	movs	r1, #64	; 0x40
 8000c1a:	4812      	ldr	r0, [pc, #72]	; (8000c64 <I2C_WaitAck+0x54>)
 8000c1c:	f003 f931 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000c20:	f7ff ff32 	bl	8000a88 <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����SCL = 1, ��ʱ�����᷵��ACKӦ�� */
 8000c24:	2201      	movs	r2, #1
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	480e      	ldr	r0, [pc, #56]	; (8000c64 <I2C_WaitAck+0x54>)
 8000c2a:	f003 f92a 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000c2e:	f7ff ff2b 	bl	8000a88 <I2C_Delay>
	if (I2C_SDA_READ())	/* CPU��ȡSDA����״̬ */
 8000c32:	2140      	movs	r1, #64	; 0x40
 8000c34:	480b      	ldr	r0, [pc, #44]	; (8000c64 <I2C_WaitAck+0x54>)
 8000c36:	f003 f90d 	bl	8003e54 <HAL_GPIO_ReadPin>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <I2C_WaitAck+0x36>
	{
		re = 1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	e001      	b.n	8000c4a <I2C_WaitAck+0x3a>
	}
	else
	{
		re = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_LOW();
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <I2C_WaitAck+0x54>)
 8000c50:	f003 f917 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000c54:	f7ff ff18 	bl	8000a88 <I2C_Delay>
	return re;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40010c00 	.word	0x40010c00

08000c68 <I2C_Ack>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Ack(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	I2C_SDA_LOW();	/* CPU����SDA = 0 */
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2140      	movs	r1, #64	; 0x40
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <I2C_Ack+0x3c>)
 8000c72:	f003 f906 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000c76:	f7ff ff07 	bl	8000a88 <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����1��ʱ�� */
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <I2C_Ack+0x3c>)
 8000c80:	f003 f8ff 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000c84:	f7ff ff00 	bl	8000a88 <I2C_Delay>
	I2C_SCL_LOW();
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <I2C_Ack+0x3c>)
 8000c8e:	f003 f8f8 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000c92:	f7ff fef9 	bl	8000a88 <I2C_Delay>
	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 8000c96:	2201      	movs	r2, #1
 8000c98:	2140      	movs	r1, #64	; 0x40
 8000c9a:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <I2C_Ack+0x3c>)
 8000c9c:	f003 f8f1 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010c00 	.word	0x40010c00

08000ca8 <I2C_NAck>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_NAck(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	I2C_SDA_HIGH();	/* CPU����SDA = 1 */
 8000cac:	2201      	movs	r2, #1
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	480a      	ldr	r0, [pc, #40]	; (8000cdc <I2C_NAck+0x34>)
 8000cb2:	f003 f8e6 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000cb6:	f7ff fee7 	bl	8000a88 <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����1��ʱ�� */
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <I2C_NAck+0x34>)
 8000cc0:	f003 f8df 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000cc4:	f7ff fee0 	bl	8000a88 <I2C_Delay>
	I2C_SCL_LOW();
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <I2C_NAck+0x34>)
 8000cce:	f003 f8d8 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay();	
 8000cd2:	f7ff fed9 	bl	8000a88 <I2C_Delay>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40010c00 	.word	0x40010c00

08000ce0 <I2C_Delay2>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
static void I2C_Delay2(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
		ѭ������Ϊ7ʱ��SCLƵ�� = 347KHz�� SCL�ߵ�ƽʱ��1.5us��SCL�͵�ƽʱ��2.87us 
	 	ѭ������Ϊ5ʱ��SCLƵ�� = 421KHz�� SCL�ߵ�ƽʱ��1.25us��SCL�͵�ƽʱ��2.375us 
        
    IAR���̱���Ч�ʸߣ���������Ϊ7
	*/
	for (i = 0; i < 29; i++);
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	71fb      	strb	r3, [r7, #7]
 8000cea:	e002      	b.n	8000cf2 <I2C_Delay2+0x12>
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b1c      	cmp	r3, #28
 8000cf6:	d9f9      	bls.n	8000cec <I2C_Delay2+0xc>
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <I2C_Start2>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Start2(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C���������ź� */
	I2C_SDA_HIGH();
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0e:	480e      	ldr	r0, [pc, #56]	; (8000d48 <I2C_Start2+0x44>)
 8000d10:	f003 f8b7 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1a:	480b      	ldr	r0, [pc, #44]	; (8000d48 <I2C_Start2+0x44>)
 8000d1c:	f003 f8b1 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000d20:	f7ff ffde 	bl	8000ce0 <I2C_Delay2>
	I2C_SDA_LOW();
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <I2C_Start2+0x44>)
 8000d2c:	f003 f8a9 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000d30:	f7ff ffd6 	bl	8000ce0 <I2C_Delay2>
	I2C_SCL_LOW();
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <I2C_Start2+0x44>)
 8000d3c:	f003 f8a1 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000d40:	f7ff ffce 	bl	8000ce0 <I2C_Delay2>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40010c00 	.word	0x40010c00

08000d4c <I2C_Stop2>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Stop2(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C����ֹͣ�ź� */
	I2C_SDA_LOW();
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d56:	4809      	ldr	r0, [pc, #36]	; (8000d7c <I2C_Stop2+0x30>)
 8000d58:	f003 f893 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <I2C_Stop2+0x30>)
 8000d64:	f003 f88d 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000d68:	f7ff ffba 	bl	8000ce0 <I2C_Delay2>
	I2C_SDA_HIGH();
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d72:	4802      	ldr	r0, [pc, #8]	; (8000d7c <I2C_Stop2+0x30>)
 8000d74:	f003 f885 	bl	8003e82 <HAL_GPIO_WritePin>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40010c00 	.word	0x40010c00

08000d80 <I2C_SendByte2>:
  * �������: Byte �� �ȴ����͵��ֽ�
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_SendByte2(uint8_t Byte)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	/* �ȷ����ֽڵĸ�λbit7 */
	for (i = 0; i < 8; i++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]
 8000d8e:	e031      	b.n	8000df4 <I2C_SendByte2+0x74>
	{		
		if (Byte & 0x80)//提取当前字节最高有效位
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	da06      	bge.n	8000da6 <I2C_SendByte2+0x26>
		{
			I2C_SDA_HIGH();
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9e:	4819      	ldr	r0, [pc, #100]	; (8000e04 <I2C_SendByte2+0x84>)
 8000da0:	f003 f86f 	bl	8003e82 <HAL_GPIO_WritePin>
 8000da4:	e005      	b.n	8000db2 <I2C_SendByte2+0x32>
		}
		else
		{
			I2C_SDA_LOW();
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dac:	4815      	ldr	r0, [pc, #84]	; (8000e04 <I2C_SendByte2+0x84>)
 8000dae:	f003 f868 	bl	8003e82 <HAL_GPIO_WritePin>
		}
		I2C_Delay2();
 8000db2:	f7ff ff95 	bl	8000ce0 <I2C_Delay2>
		I2C_SCL_HIGH();
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbc:	4811      	ldr	r0, [pc, #68]	; (8000e04 <I2C_SendByte2+0x84>)
 8000dbe:	f003 f860 	bl	8003e82 <HAL_GPIO_WritePin>
		I2C_Delay2();
 8000dc2:	f7ff ff8d 	bl	8000ce0 <I2C_Delay2>
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <I2C_SendByte2+0x84>)
 8000dce:	f003 f858 	bl	8003e82 <HAL_GPIO_WritePin>
		if (i == 7)
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	2b07      	cmp	r3, #7
 8000dd6:	d105      	bne.n	8000de4 <I2C_SendByte2+0x64>
		{
			I2C_SDA_HIGH(); //
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dde:	4809      	ldr	r0, [pc, #36]	; (8000e04 <I2C_SendByte2+0x84>)
 8000de0:	f003 f84f 	bl	8003e82 <HAL_GPIO_WritePin>
		}
		Byte <<= 1;//左移一位，以读取下一位
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
		I2C_Delay2();
 8000dea:	f7ff ff79 	bl	8000ce0 <I2C_Delay2>
	for (i = 0; i < 8; i++)
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	3301      	adds	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	2b07      	cmp	r3, #7
 8000df8:	d9ca      	bls.n	8000d90 <I2C_SendByte2+0x10>
	}
}
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <I2C_WaitAck2>:
  * �������: ��
  * �� �� ֵ: ����0��ʾ��ȷӦ��1��ʾ��������Ӧ
  * ˵    ������
  */
uint8_t I2C_WaitAck2(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e14:	4813      	ldr	r0, [pc, #76]	; (8000e64 <I2C_WaitAck2+0x5c>)
 8000e16:	f003 f834 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000e1a:	f7ff ff61 	bl	8000ce0 <I2C_Delay2>
	I2C_SCL_HIGH();	/* CPU����SCL = 1, ��ʱ�����᷵��ACKӦ�� */
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e24:	480f      	ldr	r0, [pc, #60]	; (8000e64 <I2C_WaitAck2+0x5c>)
 8000e26:	f003 f82c 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000e2a:	f7ff ff59 	bl	8000ce0 <I2C_Delay2>
	if (I2C_SDA_READ())	/* CPU��ȡSDA����״̬ */
 8000e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e32:	480c      	ldr	r0, [pc, #48]	; (8000e64 <I2C_WaitAck2+0x5c>)
 8000e34:	f003 f80e 	bl	8003e54 <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d002      	beq.n	8000e44 <I2C_WaitAck2+0x3c>
	{
		re = 1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	e001      	b.n	8000e48 <I2C_WaitAck2+0x40>
	}
	else
	{
		re = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_LOW();
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <I2C_WaitAck2+0x5c>)
 8000e50:	f003 f817 	bl	8003e82 <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000e54:	f7ff ff44 	bl	8000ce0 <I2C_Delay2>
	return re;
 8000e58:	79fb      	ldrb	r3, [r7, #7]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40010c00 	.word	0x40010c00

08000e68 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e70:	1d39      	adds	r1, r7, #4
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	2201      	movs	r2, #1
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <__io_putchar+0x20>)
 8000e7a:	f003 fc82 	bl	8004782 <HAL_UART_Transmit>
  return ch;
 8000e7e:	687b      	ldr	r3, [r7, #4]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200001f8 	.word	0x200001f8

08000e8c <__io_getchar>:
#else
#define PUTCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

GETCHAR_PROTOTYPE
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  uint8_t ch;
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e92:	1df9      	adds	r1, r7, #7
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <__io_getchar+0x20>)
 8000e9c:	f003 fd03 	bl	80048a6 <HAL_UART_Receive>
  return ch;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001f8 	.word	0x200001f8

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init(); //初始化HAL库
 8000eb6:	f002 fcdf 	bl	8003878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config(); //初始化时钟树
 8000eba:	f000 f8bb 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init(); //初始化GPIO端口
 8000ebe:	f000 f925 	bl	800110c <MX_GPIO_Init>
  MX_USART1_UART_Init();//初始化串口1
 8000ec2:	f000 f8f9 	bl	80010b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /*基于TCA9535端口扩展器，拉低VL6180X的GPIO0端口，复位所有的TOF传感器，使其设备地址恢复为初始地址0x52*/
  TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_CONFIG_PORT0_REG, 0x00);//设置TCA9535端口扩展器Port0为输出模式
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2106      	movs	r1, #6
 8000eca:	2040      	movs	r0, #64	; 0x40
 8000ecc:	f000 fb70 	bl	80015b0 <TCA9535_WrByte>
  TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_CONFIG_PORT1_REG, 0x00);//设置TCA9535端口扩展器Port1为输出模式
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	2040      	movs	r0, #64	; 0x40
 8000ed6:	f000 fb6b 	bl	80015b0 <TCA9535_WrByte>

  TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT0_REG, 0x00);//复位TCA9535端口扩展器Port0所有引脚
 8000eda:	2200      	movs	r2, #0
 8000edc:	2102      	movs	r1, #2
 8000ede:	2040      	movs	r0, #64	; 0x40
 8000ee0:	f000 fb66 	bl	80015b0 <TCA9535_WrByte>
  TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT1_REG, 0x00);//复位TCA9535端口扩展器Port1所有引脚
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2103      	movs	r1, #3
 8000ee8:	2040      	movs	r0, #64	; 0x40
 8000eea:	f000 fb61 	bl	80015b0 <TCA9535_WrByte>

  int i, id, FinalI2cAddr, status, enabled_port0_pin, enabled_port1_pin;
//  id = 0;//给id赋初值，保证其地址的正确
  enabled_port0_pin = 0x00;//表达Port0中待置位的8个引脚，向其8位二进制数中某一位写1，即置位相应引脚
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  enabled_port1_pin = 0x00;//表达Port1中待置位的8个引脚，向其8位二进制数中某一位写1，即置位相应引脚
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]

  //逐一更新各传感器的地址
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e042      	b.n	8000f82 <main+0xd2>
  {
	if(i < 8)//当前端口为Port0
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	2b07      	cmp	r3, #7
 8000f00:	dc0b      	bgt.n	8000f1a <main+0x6a>
	{
		/*
		 * 从Port0第一个引脚P00开始，逐一置位下一个引脚，并保持上一个引脚的置位。
		 * enabled_port0_pin二进制值与要置位的引脚的关系为2*enabled_port0_pin+1
		 */
		enabled_port0_pin = 2*enabled_port0_pin + 1;
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	3301      	adds	r3, #1
 8000f08:	613b      	str	r3, [r7, #16]
		TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT0_REG, enabled_port0_pin);//向相应寄存器写入enabled_port0_pin，使能当前TOF传感器
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	2102      	movs	r1, #2
 8000f12:	2040      	movs	r0, #64	; 0x40
 8000f14:	f000 fb4c 	bl	80015b0 <TCA9535_WrByte>
 8000f18:	e00a      	b.n	8000f30 <main+0x80>
	}
	else//当前端口为Port1,其它操作同Port0
	{
		enabled_port1_pin = 2*enabled_port1_pin + 1;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	3301      	adds	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
		TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT1_REG, enabled_port1_pin);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	2103      	movs	r1, #3
 8000f2a:	2040      	movs	r0, #64	; 0x40
 8000f2c:	f000 fb40 	bl	80015b0 <TCA9535_WrByte>
	}
    HAL_Delay(2);//延时以保证使能成功
 8000f30:	2002      	movs	r0, #2
 8000f32:	f002 fd03 	bl	800393c <HAL_Delay>
    Devs[i].i2c_dev_addr = 0x52;//刚刚使能的TOF传感器，保存访问地址为默认地址0x52
 8000f36:	4a3e      	ldr	r2, [pc, #248]	; (8001030 <main+0x180>)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	21d4      	movs	r1, #212	; 0xd4
 8000f3c:	fb01 f303 	mul.w	r3, r1, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	33d0      	adds	r3, #208	; 0xd0
 8000f44:	2252      	movs	r2, #82	; 0x52
 8000f46:	601a      	str	r2, [r3, #0]
    FinalI2cAddr = 0x52 + ((i + 1) * 2);//获取修改后的地址（独一无二，不同于0x52）
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	332a      	adds	r3, #42	; 0x2a
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
    status = VL6180x_SetI2CAddress(&Devs[i], FinalI2cAddr); //将修改后的地址写入TOF传感器保存设备地址的寄存器
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	22d4      	movs	r2, #212	; 0xd4
 8000f54:	fb02 f303 	mul.w	r3, r2, r3
 8000f58:	4a35      	ldr	r2, [pc, #212]	; (8001030 <main+0x180>)
 8000f5a:	4413      	add	r3, r2
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fc10 	bl	8001788 <VL6180x_SetI2CAddress>
 8000f68:	6078      	str	r0, [r7, #4]
    Devs[i].i2c_dev_addr = FinalI2cAddr;//记录修改后的地址
 8000f6a:	4a31      	ldr	r2, [pc, #196]	; (8001030 <main+0x180>)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	21d4      	movs	r1, #212	; 0xd4
 8000f70:	fb01 f303 	mul.w	r3, r1, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	33d0      	adds	r3, #208	; 0xd0
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	ddb9      	ble.n	8000efc <main+0x4c>
//    status = VL6180x_RdByte(&Devs[i], IDENTIFICATION_MODEL_ID, &id);//测试I2C读值是否正常
  }
  //初始化TOF模块
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e049      	b.n	8001022 <main+0x172>
  {
    VL6180x_InitData(&Devs[i]);
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	22d4      	movs	r2, #212	; 0xd4
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	4a26      	ldr	r2, [pc, #152]	; (8001030 <main+0x180>)
 8000f98:	4413      	add	r3, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fb6a 	bl	8001674 <VL6180x_InitData>
    VL6180x_Prepare(&Devs[i]);
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	22d4      	movs	r2, #212	; 0xd4
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4a21      	ldr	r2, [pc, #132]	; (8001030 <main+0x180>)
 8000faa:	4413      	add	r3, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fc5b 	bl	8001868 <VL6180x_Prepare>
//    /* 调整测量范围
    VL6180x_SetGroupParamHold(&Devs[i], 1);
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	22d4      	movs	r2, #212	; 0xd4
 8000fb6:	fb02 f303 	mul.w	r3, r2, r3
 8000fba:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <main+0x180>)
 8000fbc:	4413      	add	r3, r2
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fc38 	bl	8001836 <VL6180x_SetGroupParamHold>
    VL6180x_RangeGetThresholds(&Devs[i], NULL, NULL);
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	22d4      	movs	r2, #212	; 0xd4
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
 8000fce:	4a18      	ldr	r2, [pc, #96]	; (8001030 <main+0x180>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 ff5a 	bl	8001e90 <VL6180x_RangeGetThresholds>
    VL6180x_UpscaleSetScaling(&Devs[i], 3);//三倍测量范围
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	22d4      	movs	r2, #212	; 0xd4
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	4a12      	ldr	r2, [pc, #72]	; (8001030 <main+0x180>)
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2103      	movs	r1, #3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 f8ac 	bl	8002148 <VL6180x_UpscaleSetScaling>
    VL6180x_RangeSetThresholds(&Devs[i], 0, 600, 0);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	22d4      	movs	r2, #212	; 0xd4
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <main+0x180>)
 8000ffa:	1898      	adds	r0, r3, r2
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001002:	2100      	movs	r1, #0
 8001004:	f000 fef8 	bl	8001df8 <VL6180x_RangeSetThresholds>
    VL6180x_SetGroupParamHold(&Devs[i], 0);
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	22d4      	movs	r2, #212	; 0xd4
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <main+0x180>)
 8001012:	4413      	add	r3, r2
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fc0d 	bl	8001836 <VL6180x_SetGroupParamHold>
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	ddb2      	ble.n	8000f8e <main+0xde>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	Sample_SimpleRanging();//TOF传感器VL6180X的测距函数
 8001028:	f000 f8e2 	bl	80011f0 <Sample_SimpleRanging>
  {
 800102c:	e7fc      	b.n	8001028 <main+0x178>
 800102e:	bf00      	nop
 8001030:	2000023c 	.word	0x2000023c

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b090      	sub	sp, #64	; 0x40
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2228      	movs	r2, #40	; 0x28
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fdd4 	bl	8004bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105a:	2301      	movs	r3, #1
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105e:	2310      	movs	r3, #16
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001062:	2302      	movs	r3, #2
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001066:	2300      	movs	r3, #0
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800106a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0318 	add.w	r3, r7, #24
 8001074:	4618      	mov	r0, r3
 8001076:	f002 ff1d 	bl	8003eb4 <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001080:	f000 f924 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001088:	2302      	movs	r3, #2
 800108a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001094:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2101      	movs	r1, #1
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 f98a 	bl	80043b8 <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010aa:	f000 f90f 	bl	80012cc <Error_Handler>
  }
}
 80010ae:	bf00      	nop
 80010b0:	3740      	adds	r7, #64	; 0x40
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <MX_USART1_UART_Init+0x50>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010f0:	f003 fafa 	bl	80046e8 <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010fa:	f000 f8e7 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001f8 	.word	0x200001f8
 8001108:	40013800 	.word	0x40013800

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <MX_GPIO_Init+0xd8>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <MX_GPIO_Init+0xd8>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <MX_GPIO_Init+0xd8>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <MX_GPIO_Init+0xd8>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <MX_GPIO_Init+0xd8>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_GPIO_Init+0xd8>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_GPIO_Init+0xd8>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <MX_GPIO_Init+0xd8>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_GPIO_Init+0xd8>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800116e:	481e      	ldr	r0, [pc, #120]	; (80011e8 <MX_GPIO_Init+0xdc>)
 8001170:	f002 fe87 	bl	8003e82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|CAP_SCL_Pin
 8001174:	2200      	movs	r2, #0
 8001176:	f64f 71c7 	movw	r1, #65479	; 0xffc7
 800117a:	481c      	ldr	r0, [pc, #112]	; (80011ec <MX_GPIO_Init+0xe0>)
 800117c:	f002 fe81 	bl	8003e82 <HAL_GPIO_WritePin>
                          |CAP_SDA_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|TOF_SDA_Pin|TOF_SCL_Pin|EXP_SDA_Pin
                          |EXP_SCL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001180:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4619      	mov	r1, r3
 8001198:	4813      	ldr	r0, [pc, #76]	; (80011e8 <MX_GPIO_Init+0xdc>)
 800119a:	f002 fcd7 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800119e:	f24f 0307 	movw	r3, #61447	; 0xf007
 80011a2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4619      	mov	r1, r3
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <MX_GPIO_Init+0xe0>)
 80011b8:	f002 fcc8 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAP_SCL_Pin CAP_SDA_Pin TOF_SDA_Pin TOF_SCL_Pin
                           EXP_SDA_Pin EXP_SCL_Pin */
  GPIO_InitStruct.Pin = CAP_SCL_Pin|CAP_SDA_Pin|TOF_SDA_Pin|TOF_SCL_Pin
 80011bc:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 80011c0:	613b      	str	r3, [r7, #16]
                          |EXP_SDA_Pin|EXP_SCL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011c2:	2311      	movs	r3, #17
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_GPIO_Init+0xe0>)
 80011d6:	f002 fcb9 	bl	8003b4c <HAL_GPIO_Init>

}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010800 	.word	0x40010800
 80011ec:	40010c00 	.word	0x40010c00

080011f0 <Sample_SimpleRanging>:

/* USER CODE BEGIN 4 */
void Sample_SimpleRanging(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80011f6:	af00      	add	r7, sp, #0
  VL6180x_RangeData_t Range[DEVICE_NUMBER];//存储各设备测距值
  uint32_t start = HAL_GetTick();
 80011f8:	f002 fb96 	bl	8003928 <HAL_GetTick>
 80011fc:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
  for (int i = 0; i <= DEVICE_NUMBER - 1; i++)
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8001206:	e03e      	b.n	8001286 <Sample_SimpleRanging+0x96>
  {
    VL6180x_RangePollMeasurement(&Devs[i], &Range[i]);//测距操作
 8001208:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800120c:	22d4      	movs	r2, #212	; 0xd4
 800120e:	fb02 f303 	mul.w	r3, r2, r3
 8001212:	4a29      	ldr	r2, [pc, #164]	; (80012b8 <Sample_SimpleRanging+0xc8>)
 8001214:	1898      	adds	r0, r3, r2
 8001216:	4639      	mov	r1, r7
 8001218:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	4619      	mov	r1, r3
 8001228:	f000 fc31 	bl	8001a8e <VL6180x_RangePollMeasurement>
    if (Range[i].errorStatus == 0)//串口输出
 800122c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001230:	f5a3 7124 	sub.w	r1, r3, #656	; 0x290
 8001234:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	440b      	add	r3, r1
 8001242:	3308      	adds	r3, #8
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d114      	bne.n	8001274 <Sample_SimpleRanging+0x84>
    {
      printf("range %d: %ld mm\r\n", i + 1, Range[i].range_mm);
 800124a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800124e:	1c58      	adds	r0, r3, #1
 8001250:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001254:	f5a3 7124 	sub.w	r1, r3, #656	; 0x290
 8001258:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	440b      	add	r3, r1
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4601      	mov	r1, r0
 800126c:	4813      	ldr	r0, [pc, #76]	; (80012bc <Sample_SimpleRanging+0xcc>)
 800126e:	f004 f927 	bl	80054c0 <iprintf>
 8001272:	e003      	b.n	800127c <Sample_SimpleRanging+0x8c>
    }
    else
    {
      printf("%s\r\n", "error");
 8001274:	4912      	ldr	r1, [pc, #72]	; (80012c0 <Sample_SimpleRanging+0xd0>)
 8001276:	4813      	ldr	r0, [pc, #76]	; (80012c4 <Sample_SimpleRanging+0xd4>)
 8001278:	f004 f922 	bl	80054c0 <iprintf>
  for (int i = 0; i <= DEVICE_NUMBER - 1; i++)
 800127c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001280:	3301      	adds	r3, #1
 8001282:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8001286:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800128a:	2b0f      	cmp	r3, #15
 800128c:	ddbc      	ble.n	8001208 <Sample_SimpleRanging+0x18>
    }
  }
  uint32_t end = HAL_GetTick();
 800128e:	f002 fb4b 	bl	8003928 <HAL_GetTick>
 8001292:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
  uint32_t cycle = end - start;
 8001296:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800129a:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
  printf("cycle: %d ms\r\n", cycle);
 80012a4:	f8d7 1280 	ldr.w	r1, [r7, #640]	; 0x280
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <Sample_SimpleRanging+0xd8>)
 80012aa:	f004 f909 	bl	80054c0 <iprintf>
}
 80012ae:	bf00      	nop
 80012b0:	f507 7724 	add.w	r7, r7, #656	; 0x290
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000023c 	.word	0x2000023c
 80012bc:	08007660 	.word	0x08007660
 80012c0:	08007674 	.word	0x08007674
 80012c4:	0800767c 	.word	0x0800767c
 80012c8:	08007684 	.word	0x08007684

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <Error_Handler+0x8>
	...

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_MspInit+0x5c>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_MspInit+0x5c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6193      	str	r3, [r2, #24]
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_MspInit+0x5c>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_MspInit+0x5c>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_MspInit+0x5c>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_MspInit+0x5c>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_MspInit+0x60>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_MspInit+0x60>)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	40021000 	.word	0x40021000
 8001338:	40010000 	.word	0x40010000

0800133c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <HAL_UART_MspInit+0x8c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d131      	bne.n	80013c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_UART_MspInit+0x90>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_UART_MspInit+0x90>)
 8001362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_UART_MspInit+0x90>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_UART_MspInit+0x90>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <HAL_UART_MspInit+0x90>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_UART_MspInit+0x90>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800138c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4619      	mov	r1, r3
 80013a0:	480b      	ldr	r0, [pc, #44]	; (80013d0 <HAL_UART_MspInit+0x94>)
 80013a2:	f002 fbd3 	bl	8003b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <HAL_UART_MspInit+0x94>)
 80013bc:	f002 fbc6 	bl	8003b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010800 	.word	0x40010800

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141a:	f002 fa73 	bl	8003904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}

08001422 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
	return 1;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <_kill>:

int _kill(int pid, int sig)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800143a:	f003 fbaf 	bl	8004b9c <__errno>
 800143e:	4603      	mov	r3, r0
 8001440:	2216      	movs	r2, #22
 8001442:	601a      	str	r2, [r3, #0]
	return -1;
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_exit>:

void _exit (int status)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ffe7 	bl	8001430 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001462:	e7fe      	b.n	8001462 <_exit+0x12>

08001464 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e00a      	b.n	800148c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001476:	f7ff fd09 	bl	8000e8c <__io_getchar>
 800147a:	4601      	mov	r1, r0
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	60ba      	str	r2, [r7, #8]
 8001482:	b2ca      	uxtb	r2, r1
 8001484:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbf0      	blt.n	8001476 <_read+0x12>
	}

return len;
 8001494:	687b      	ldr	r3, [r7, #4]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e009      	b.n	80014c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fcd5 	bl	8000e68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf1      	blt.n	80014b0 <_write+0x12>
	}
	return len;
 80014cc:	687b      	ldr	r3, [r7, #4]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_close>:

int _close(int file)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	return -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fc:	605a      	str	r2, [r3, #4]
	return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <_isatty>:

int _isatty(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
	return 1;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
	return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
	...

08001538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <_sbrk+0x5c>)
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <_sbrk+0x60>)
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <_sbrk+0x64>)
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <_sbrk+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	429a      	cmp	r2, r3
 8001566:	d207      	bcs.n	8001578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001568:	f003 fb18 	bl	8004b9c <__errno>
 800156c:	4603      	mov	r3, r0
 800156e:	220c      	movs	r2, #12
 8001570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	e009      	b.n	800158c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <_sbrk+0x64>)
 8001588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20005000 	.word	0x20005000
 8001598:	00000400 	.word	0x00000400
 800159c:	20000f7c 	.word	0x20000f7c
 80015a0:	20000f98 	.word	0x20000f98

080015a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <TCA9535_WrByte>:
#include "tca9535.h"

int TCA9535_WrByte(uint8_t dev, uint8_t index, uint8_t data){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
 80015ba:	460b      	mov	r3, r1
 80015bc:	71bb      	strb	r3, [r7, #6]
 80015be:	4613      	mov	r3, r2
 80015c0:	717b      	strb	r3, [r7, #5]
    int status;
    int a = 5;
 80015c2:	2305      	movs	r3, #5
 80015c4:	60fb      	str	r3, [r7, #12]
    uint8_t *buffer = &a;//初始化指针
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	617b      	str	r3, [r7, #20]

    buffer[0] = index;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	79ba      	ldrb	r2, [r7, #6]
 80015d0:	701a      	strb	r2, [r3, #0]
    buffer[1] = data;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	797a      	ldrb	r2, [r7, #5]
 80015d8:	701a      	strb	r2, [r3, #0]

    status = I2C2Write(dev, buffer,(uint8_t)2);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2202      	movs	r2, #2
 80015de:	6979      	ldr	r1, [r7, #20]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f806 	bl	80015f2 <I2C2Write>
 80015e6:	6138      	str	r0, [r7, #16]
    return status;
 80015e8:	693b      	ldr	r3, [r7, #16]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <I2C2Write>:
}

//I2C底层通讯函数选择
/* TCA9535底层驱动函数：写 */
int I2C2Write(uint8_t addr, uint8_t *buff, uint8_t len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	6039      	str	r1, [r7, #0]
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	4613      	mov	r3, r2
 8001600:	71bb      	strb	r3, [r7, #6]
  int status, i;
  I2C_Start2();//开启I2C总线
 8001602:	f7ff fb7f 	bl	8000d04 <I2C_Start2>
  I2C_SendByte2(addr | 0);//发送8位设备地址及LSB的写方向位，实现写功能
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fbb9 	bl	8000d80 <I2C_SendByte2>
  if (I2C_WaitAck2())//如果从机没有应答
 800160e:	f7ff fbfb 	bl	8000e08 <I2C_WaitAck2>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <I2C2Write+0x2e>
  {
    I2C_Stop2();//关闭I2C总线
 8001618:	f7ff fb98 	bl	8000d4c <I2C_Stop2>
    return 1;//返回报错标志
 800161c:	2301      	movs	r3, #1
 800161e:	e025      	b.n	800166c <I2C2Write+0x7a>
  }
  for (i = 0; i < len; i++)
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	e01b      	b.n	800165e <I2C2Write+0x6c>
  {
    I2C_SendByte2(buff[i]);//发送buff中的各字节
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	4413      	add	r3, r2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fba6 	bl	8000d80 <I2C_SendByte2>
    if (i == len - 1)//在发送最后一个字节的数据时
 8001634:	79bb      	ldrb	r3, [r7, #6]
 8001636:	3b01      	subs	r3, #1
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	429a      	cmp	r2, r3
 800163c:	d109      	bne.n	8001652 <I2C2Write+0x60>
    {
      if (I2C_WaitAck2())//等待从机应答
 800163e:	f7ff fbe3 	bl	8000e08 <I2C_WaitAck2>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <I2C2Write+0x66>
      {
        I2C_Stop2();//关闭I2C总线
 8001648:	f7ff fb80 	bl	8000d4c <I2C_Stop2>
        status = 1;//返回报错标志
 800164c:	2301      	movs	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e002      	b.n	8001658 <I2C2Write+0x66>
      }
    }
    else
    {
      status = I2C_WaitAck2();//返回报错标志
 8001652:	f7ff fbd9 	bl	8000e08 <I2C_WaitAck2>
 8001656:	60f8      	str	r0, [r7, #12]
  for (i = 0; i < len; i++)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	3301      	adds	r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	79bb      	ldrb	r3, [r7, #6]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	429a      	cmp	r2, r3
 8001664:	dbdf      	blt.n	8001626 <I2C2Write+0x34>
    }
  }
  I2C_Stop2();//关闭I2C总线
 8001666:	f7ff fb71 	bl	8000d4c <I2C_Stop2>
  return status;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <VL6180x_InitData>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_InitData(VL6180xDev_t dev)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	uint16_t u16;
	uint32_t XTalkCompRate_KCps;

	LOG_FUNCTION_START("");

	VL6180xDevDataSet(dev, EceFactorM, DEF_ECE_FACTOR_M);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2255      	movs	r2, #85	; 0x55
 8001680:	811a      	strh	r2, [r3, #8]
	VL6180xDevDataSet(dev, EceFactorD, DEF_ECE_FACTOR_D);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2264      	movs	r2, #100	; 0x64
 8001686:	815a      	strh	r2, [r3, #10]

	VL6180xDevDataSet(dev, RangeIgnore.Enabled, 0);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	741a      	strb	r2, [r3, #16]

#ifdef VL6180x_HAVE_UPSCALE_DATA
	VL6180xDevDataSet(dev, UpscaleFactor,  DEF_UPSCALE);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	761a      	strb	r2, [r3, #24]
#endif

#ifdef VL6180x_HAVE_ALS_DATA
	VL6180xDevDataSet(dev, IntegrationPeriod, DEF_INT_PEFRIOD);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2264      	movs	r2, #100	; 0x64
 8001698:	825a      	strh	r2, [r3, #18]
	VL6180xDevDataSet(dev, AlsGainCode, DEF_ALS_GAIN);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	829a      	strh	r2, [r3, #20]
	VL6180xDevDataSet(dev, AlsScaler, DEF_ALS_SCALER);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	82da      	strh	r2, [r3, #22]
#endif

#ifdef VL6180x_HAVE_WRAP_AROUND_DATA
	VL6180xDevDataSet(dev, WrapAroundFilterActive, (VL6180x_WRAP_AROUND_FILTER_SUPPORT > 0));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	765a      	strb	r2, [r3, #25]
	VL6180xDevDataSet(dev, DMaxEnable, DEF_DMAX_ENABLE);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
#endif

	_DMax_OneTimeInit(dev);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f001 fd3d 	bl	8003134 <_DMax_OneTimeInit>
	do {

		/* backup offset initial value from nvm these must be done prior any over call that use offset */
		status = VL6180x_RdByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, (uint8_t *)&offset);
 80016ba:	f107 0313 	add.w	r3, r7, #19
 80016be:	461a      	mov	r2, r3
 80016c0:	2124      	movs	r1, #36	; 0x24
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f001 ff5d 	bl	8003582 <VL6180x_RdByte>
 80016c8:	61f8      	str	r0, [r7, #28]
		if (status) {
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d14a      	bne.n	8001766 <VL6180x_InitData+0xf2>
			VL6180x_ErrLog("SYSRANGE_PART_TO_PART_RANGE_OFFSET rd fail");
			break;
		}
		VL6180xDevDataSet(dev, Part2PartOffsetNVM, offset);
 80016d0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

		status = VL6180x_RdDWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &CalValue);
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	461a      	mov	r2, r3
 80016e0:	2126      	movs	r1, #38	; 0x26
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f001 ffb6 	bl	8003654 <VL6180x_RdDWord>
 80016e8:	61f8      	str	r0, [r7, #28]
		if (status) {
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d13c      	bne.n	800176a <VL6180x_InitData+0xf6>
			VL6180x_ErrLog("Part2PartAmbNVM rd fail");
			break;
		}
		if ((CalValue&0xFFFF0000) == 0) {
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	0c1b      	lsrs	r3, r3, #16
 80016f4:	041b      	lsls	r3, r3, #16
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <VL6180x_InitData+0x8a>
			CalValue = 0x00CE03F8;
 80016fa:	4b22      	ldr	r3, [pc, #136]	; (8001784 <VL6180x_InitData+0x110>)
 80016fc:	60fb      	str	r3, [r7, #12]
		}
		VL6180xDevDataSet(dev, Part2PartAmbNVM, CalValue);
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	601a      	str	r2, [r3, #0]

		status = VL6180x_RdWord(dev, SYSRANGE_CROSSTALK_COMPENSATION_RATE , &u16);
 8001704:	f107 030a 	add.w	r3, r7, #10
 8001708:	461a      	mov	r2, r3
 800170a:	211e      	movs	r1, #30
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f001 ff68 	bl	80035e2 <VL6180x_RdWord>
 8001712:	61f8      	str	r0, [r7, #28]
		if (status) {
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d129      	bne.n	800176e <VL6180x_InitData+0xfa>
			VL6180x_ErrLog("SYSRANGE_CROSSTALK_COMPENSATION_RATE rd fail ");
			break;
		}
		XTalkCompRate_KCps = Fix7_2_KCPs(u16);
 800171a:	897b      	ldrh	r3, [r7, #10]
 800171c:	461a      	mov	r2, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	09db      	lsrs	r3, r3, #7
 8001728:	61bb      	str	r3, [r7, #24]
		VL6180xDevDataSet(dev, XTalkCompRate_KCps, XTalkCompRate_KCps);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	605a      	str	r2, [r3, #4]

		dmax_status = _DMax_InitData(dev);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f001 fd59 	bl	80031e8 <_DMax_InitData>
 8001736:	6178      	str	r0, [r7, #20]
		if (dmax_status < 0) {
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db19      	blt.n	8001772 <VL6180x_InitData+0xfe>
			VL6180x_ErrLog("DMax init failure");
			break;
		}

		/* Read or wait for fresh out of reset  */
		status = VL6180x_RdByte(dev, SYSTEM_FRESH_OUT_OF_RESET, &FreshOutReset);
 800173e:	f107 0312 	add.w	r3, r7, #18
 8001742:	461a      	mov	r2, r3
 8001744:	2116      	movs	r1, #22
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f001 ff1b 	bl	8003582 <VL6180x_RdByte>
 800174c:	61f8      	str	r0, [r7, #28]
		if (status) {
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d110      	bne.n	8001776 <VL6180x_InitData+0x102>
			VL6180x_ErrLog("SYSTEM_FRESH_OUT_OF_RESET rd fail");
			break;
		}
		if (FreshOutReset != 1 || dmax_status)
 8001754:	7cbb      	ldrb	r3, [r7, #18]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d102      	bne.n	8001760 <VL6180x_InitData+0xec>
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00b      	beq.n	8001778 <VL6180x_InitData+0x104>
			status = CALIBRATION_WARNING;
 8001760:	2301      	movs	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	e008      	b.n	8001778 <VL6180x_InitData+0x104>
			break;
 8001766:	bf00      	nop
 8001768:	e006      	b.n	8001778 <VL6180x_InitData+0x104>
			break;
 800176a:	bf00      	nop
 800176c:	e004      	b.n	8001778 <VL6180x_InitData+0x104>
			break;
 800176e:	bf00      	nop
 8001770:	e002      	b.n	8001778 <VL6180x_InitData+0x104>
			break;
 8001772:	bf00      	nop
 8001774:	e000      	b.n	8001778 <VL6180x_InitData+0x104>
			break;
 8001776:	bf00      	nop

	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 8001778:	69fb      	ldr	r3, [r7, #28]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	00ce03f8 	.word	0x00ce03f8

08001788 <VL6180x_SetI2CAddress>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_SetI2CAddress(VL6180xDev_t dev, uint8_t NewAddress)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
	int status;
	LOG_FUNCTION_START("");

	status = VL6180x_WrByte(dev, I2C_SLAVE_DEVICE_ADDRESS, NewAddress / 2);
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	f240 2112 	movw	r1, #530	; 0x212
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f001 fe1f 	bl	80033e4 <VL6180x_WrByte>
 80017a6:	60f8      	str	r0, [r7, #12]
	if (status) {
		VL6180x_ErrLog("new i2c addr Wr fail");
	}
	LOG_FUNCTION_END(status);
	return status;
 80017a8:	68fb      	ldr	r3, [r7, #12]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <VL6180x_StaticInit>:
}



int VL6180x_StaticInit(VL6180xDev_t dev)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
	int status = 0, init_status;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
	/* TODO doc When using configurable scaling but using 1x as start condition
	 * load tunning upscale  or not ??? */
	if (_GetUpscale(dev) == 1 && !(VL6180x_UPSCALE_SUPPORT < 0))
		init_status = VL6180x_RangeStaticInit(dev);
	else
		init_status = VL6180x_UpscaleStaticInit(dev);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fd3c 	bl	800223c <VL6180x_UpscaleStaticInit>
 80017c4:	6138      	str	r0, [r7, #16]

	if (init_status < 0) {
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db2c      	blt.n	8001826 <VL6180x_StaticInit+0x74>
	#if REFRESH_CACHED_DATA_AFTER_INIT
	#ifdef VL6180x_HAVE_ALS_DATA
	/* update cached value after tuning applied */
	do {
		uint8_t data;
		status =  VL6180x_RdByte(dev, FW_ALS_RESULT_SCALER, &data);
 80017cc:	f107 030f 	add.w	r3, r7, #15
 80017d0:	461a      	mov	r2, r3
 80017d2:	f44f 7190 	mov.w	r1, #288	; 0x120
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f001 fed3 	bl	8003582 <VL6180x_RdByte>
 80017dc:	6178      	str	r0, [r7, #20]
		if (status)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d114      	bne.n	800180e <VL6180x_StaticInit+0x5c>
			break;
		VL6180xDevDataSet(dev, AlsScaler, data);
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	82da      	strh	r2, [r3, #22]

		status =  VL6180x_RdByte(dev, SYSALS_ANALOGUE_GAIN, &data);
 80017ec:	f107 030f 	add.w	r3, r7, #15
 80017f0:	461a      	mov	r2, r3
 80017f2:	213f      	movs	r1, #63	; 0x3f
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f001 fec4 	bl	8003582 <VL6180x_RdByte>
 80017fa:	6178      	str	r0, [r7, #20]
		if (status)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d107      	bne.n	8001812 <VL6180x_StaticInit+0x60>
			break;
		VL6180x_AlsSetAnalogueGain(dev, data);
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	4619      	mov	r1, r3
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f8c9 	bl	800199e <VL6180x_AlsSetAnalogueGain>
 800180c:	e002      	b.n	8001814 <VL6180x_StaticInit+0x62>
			break;
 800180e:	bf00      	nop
 8001810:	e000      	b.n	8001814 <VL6180x_StaticInit+0x62>
			break;
 8001812:	bf00      	nop
	#endif
	#endif /* REFRESH_CACHED_DATA_AFTER_INIT */
	if (status < 0) {
		VL6180x_ErrLog("StaticInit fail");
	}
	if (!status && init_status) {
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d107      	bne.n	800182a <VL6180x_StaticInit+0x78>
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <VL6180x_StaticInit+0x78>
		status = init_status;
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e002      	b.n	800182c <VL6180x_StaticInit+0x7a>
		goto error;
 8001826:	bf00      	nop
 8001828:	e000      	b.n	800182c <VL6180x_StaticInit+0x7a>
	}
error:
 800182a:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800182c:	697b      	ldr	r3, [r7, #20]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <VL6180x_SetGroupParamHold>:


int VL6180x_SetGroupParamHold(VL6180xDev_t dev, int Hold)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t value;

	LOG_FUNCTION_START("%d", Hold);
	if (Hold)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <VL6180x_SetGroupParamHold+0x16>
		value = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	e001      	b.n	8001850 <VL6180x_SetGroupParamHold+0x1a>
	else
		value = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
	status = VL6180x_WrByte(dev, SYSTEM_GROUPED_PARAMETER_HOLD, value);
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	461a      	mov	r2, r3
 8001854:	2117      	movs	r1, #23
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f001 fdc4 	bl	80033e4 <VL6180x_WrByte>
 800185c:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(status);
	return status;
 800185e:	68bb      	ldr	r3, [r7, #8]

}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <VL6180x_Prepare>:

int VL6180x_Prepare(VL6180xDev_t dev)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	int status;
	LOG_FUNCTION_START("");

	do {
		status = VL6180x_StaticInit(dev);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff9e 	bl	80017b2 <VL6180x_StaticInit>
 8001876:	60f8      	str	r0, [r7, #12]
		if (status < 0)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db42      	blt.n	8001904 <VL6180x_Prepare+0x9c>
			break;

		/* set range InterruptMode to new sample */
		status = VL6180x_RangeConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 800187e:	2104      	movs	r1, #4
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fcf9 	bl	8002278 <VL6180x_RangeConfigInterrupt>
 8001886:	60f8      	str	r0, [r7, #12]
		if (status)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d13c      	bne.n	8001908 <VL6180x_Prepare+0xa0>
			break;

		/* set default threshold */
		status = VL6180x_RangeSetRawThresholds(dev, 10, 200);
 800188e:	22c8      	movs	r2, #200	; 0xc8
 8001890:	210a      	movs	r1, #10
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fa92 	bl	8001dbc <VL6180x_RangeSetRawThresholds>
 8001898:	60f8      	str	r0, [r7, #12]
		if (status) {
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d135      	bne.n	800190c <VL6180x_Prepare+0xa4>
			VL6180x_ErrLog("VL6180x_RangeSetRawThresholds fail");
			break;
		}
	#if VL6180x_ALS_SUPPORT
		status = VL6180x_AlsSetIntegrationPeriod(dev, 100);
 80018a0:	2164      	movs	r1, #100	; 0x64
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f8c4 	bl	8001a30 <VL6180x_AlsSetIntegrationPeriod>
 80018a8:	60f8      	str	r0, [r7, #12]
		if (status)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d12f      	bne.n	8001910 <VL6180x_Prepare+0xa8>
			break;
		status = VL6180x_AlsSetInterMeasurementPeriod(dev,  200);
 80018b0:	21c8      	movs	r1, #200	; 0xc8
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f89a 	bl	80019ec <VL6180x_AlsSetInterMeasurementPeriod>
 80018b8:	60f8      	str	r0, [r7, #12]
		if (status)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d129      	bne.n	8001914 <VL6180x_Prepare+0xac>
			break;
		status = VL6180x_AlsSetAnalogueGain(dev,  0);
 80018c0:	2100      	movs	r1, #0
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f86b 	bl	800199e <VL6180x_AlsSetAnalogueGain>
 80018c8:	60f8      	str	r0, [r7, #12]
		if (status)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d123      	bne.n	8001918 <VL6180x_Prepare+0xb0>
			break;
		status = VL6180x_AlsSetThresholds(dev, 0, 0xFF);
 80018d0:	22ff      	movs	r2, #255	; 0xff
 80018d2:	2100      	movs	r1, #0
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f844 	bl	8001962 <VL6180x_AlsSetThresholds>
 80018da:	60f8      	str	r0, [r7, #12]
		if (status)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d11c      	bne.n	800191c <VL6180x_Prepare+0xb4>
			break;
		/* set Als InterruptMode to new sample */
		status = VL6180x_AlsConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 80018e2:	2104      	movs	r1, #4
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f821 	bl	800192c <VL6180x_AlsConfigInterrupt>
 80018ea:	60f8      	str	r0, [r7, #12]
		if (status) {
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d116      	bne.n	8001920 <VL6180x_Prepare+0xb8>
			VL6180x_ErrLog("VL6180x_AlsConfigInterrupt fail");
			break;
		}
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
		_filter_Init(dev);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fdd7 	bl	80024a6 <_filter_Init>
	#endif
		/* make sure to reset any left previous condition that can hangs first poll */
		status = VL6180x_ClearAllInterrupt(dev);
 80018f8:	2107      	movs	r1, #7
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 fb22 	bl	8001f44 <VL6180x_ClearInterrupt>
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	e00e      	b.n	8001922 <VL6180x_Prepare+0xba>
			break;
 8001904:	bf00      	nop
 8001906:	e00c      	b.n	8001922 <VL6180x_Prepare+0xba>
			break;
 8001908:	bf00      	nop
 800190a:	e00a      	b.n	8001922 <VL6180x_Prepare+0xba>
			break;
 800190c:	bf00      	nop
 800190e:	e008      	b.n	8001922 <VL6180x_Prepare+0xba>
			break;
 8001910:	bf00      	nop
 8001912:	e006      	b.n	8001922 <VL6180x_Prepare+0xba>
			break;
 8001914:	bf00      	nop
 8001916:	e004      	b.n	8001922 <VL6180x_Prepare+0xba>
			break;
 8001918:	bf00      	nop
 800191a:	e002      	b.n	8001922 <VL6180x_Prepare+0xba>
			break;
 800191c:	bf00      	nop
 800191e:	e000      	b.n	8001922 <VL6180x_Prepare+0xba>
			break;
 8001920:	bf00      	nop
	} while (0);
	LOG_FUNCTION_END(status);

	return status;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <VL6180x_AlsConfigInterrupt>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_AlsConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	2b04      	cmp	r3, #4
 800193c:	d809      	bhi.n	8001952 <VL6180x_AlsConfigInterrupt+0x26>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO, (uint8_t)(~CONFIG_GPIO_ALS_MASK), (ConfigGpioInt << 3));
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	22c7      	movs	r2, #199	; 0xc7
 8001946:	2114      	movs	r1, #20
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f001 fdd4 	bl	80034f6 <VL6180x_UpdateByte>
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	e002      	b.n	8001958 <VL6180x_AlsConfigInterrupt+0x2c>
	} else {
		VL6180x_ErrLog("Invalid config mode param %d", (int)ConfigGpioInt);
		status = INVALID_PARAMS;
 8001952:	f06f 0301 	mvn.w	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8001958:	68fb      	ldr	r3, [r7, #12]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <VL6180x_AlsSetThresholds>:



int VL6180x_AlsSetThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	70fb      	strb	r3, [r7, #3]
 800196e:	4613      	mov	r3, r2
 8001970:	70bb      	strb	r3, [r7, #2]
	int status;

	LOG_FUNCTION_START("%d %d", (int)low, (int)high);

	status = VL6180x_WrByte(dev, SYSALS_THRESH_LOW, low);
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	461a      	mov	r2, r3
 8001976:	213c      	movs	r1, #60	; 0x3c
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f001 fd33 	bl	80033e4 <VL6180x_WrByte>
 800197e:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <VL6180x_AlsSetThresholds+0x32>
		status = VL6180x_WrByte(dev, SYSALS_THRESH_HIGH, high);
 8001986:	78bb      	ldrb	r3, [r7, #2]
 8001988:	461a      	mov	r2, r3
 800198a:	213a      	movs	r1, #58	; 0x3a
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f001 fd29 	bl	80033e4 <VL6180x_WrByte>
 8001992:	60f8      	str	r0, [r7, #12]
	}

	LOG_FUNCTION_END(status) ;
	return status;
 8001994:	68fb      	ldr	r3, [r7, #12]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <VL6180x_AlsSetAnalogueGain>:


int VL6180x_AlsSetAnalogueGain(VL6180xDev_t dev, uint8_t gain)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	70fb      	strb	r3, [r7, #3]
	int status;
	uint8_t GainTotal;

	LOG_FUNCTION_START("%d", (int)gain);
	gain &= ~0x40;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019b0:	70fb      	strb	r3, [r7, #3]
	if (gain > 7) {
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	2b07      	cmp	r3, #7
 80019b6:	d901      	bls.n	80019bc <VL6180x_AlsSetAnalogueGain+0x1e>
		gain = 7;
 80019b8:	2307      	movs	r3, #7
 80019ba:	70fb      	strb	r3, [r7, #3]
	}
	GainTotal = gain | 0x40;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019c2:	73fb      	strb	r3, [r7, #15]

	status = VL6180x_WrByte(dev, SYSALS_ANALOGUE_GAIN, GainTotal);
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	461a      	mov	r2, r3
 80019c8:	213f      	movs	r1, #63	; 0x3f
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f001 fd0a 	bl	80033e4 <VL6180x_WrByte>
 80019d0:	60b8      	str	r0, [r7, #8]
	if (!status) {
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d103      	bne.n	80019e0 <VL6180x_AlsSetAnalogueGain+0x42>
		VL6180xDevDataSet(dev, AlsGainCode, gain);
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	829a      	strh	r2, [r3, #20]
	}

	LOG_FUNCTION_END_FMT(status, "%d %d", (int)gain, (int)GainTotal);
	return status;
 80019e0:	68bb      	ldr	r3, [r7, #8]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <VL6180x_AlsSetInterMeasurementPeriod>:

int VL6180x_AlsSetInterMeasurementPeriod(VL6180xDev_t dev,  uint16_t intermeasurement_period_ms)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
	int status;

	LOG_FUNCTION_START("%d", (int)intermeasurement_period_ms);
	/* clipping: range is 0-2550ms */
	if (intermeasurement_period_ms >= 255 * 10)
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	f640 12f5 	movw	r2, #2549	; 0x9f5
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d902      	bls.n	8001a08 <VL6180x_AlsSetInterMeasurementPeriod+0x1c>
		intermeasurement_period_ms = 255 * 10;
 8001a02:	f640 13f6 	movw	r3, #2550	; 0x9f6
 8001a06:	807b      	strh	r3, [r7, #2]
	status = VL6180x_WrByte(dev, SYSALS_INTERMEASUREMENT_PERIOD, (uint8_t)(intermeasurement_period_ms / 10));
 8001a08:	887b      	ldrh	r3, [r7, #2]
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <VL6180x_AlsSetInterMeasurementPeriod+0x40>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	08db      	lsrs	r3, r3, #3
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	213e      	movs	r1, #62	; 0x3e
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f001 fce2 	bl	80033e4 <VL6180x_WrByte>
 8001a20:	60f8      	str	r0, [r7, #12]

	LOG_FUNCTION_END_FMT(status, "%d", (int)intermeasurement_period_ms);
	return status;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	cccccccd 	.word	0xcccccccd

08001a30 <VL6180x_AlsSetIntegrationPeriod>:


int VL6180x_AlsSetIntegrationPeriod(VL6180xDev_t dev, uint16_t period_ms)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
	int status;
	uint16_t SetIntegrationPeriod;

	LOG_FUNCTION_START("%d", (int)period_ms);

	if (period_ms >= 1)
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <VL6180x_AlsSetIntegrationPeriod+0x1a>
		SetIntegrationPeriod = period_ms - 1;
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	81fb      	strh	r3, [r7, #14]
 8001a48:	e001      	b.n	8001a4e <VL6180x_AlsSetIntegrationPeriod+0x1e>
	else
		SetIntegrationPeriod = period_ms;
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	81fb      	strh	r3, [r7, #14]

	if (SetIntegrationPeriod > 464) {
 8001a4e:	89fb      	ldrh	r3, [r7, #14]
 8001a50:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8001a54:	d903      	bls.n	8001a5e <VL6180x_AlsSetIntegrationPeriod+0x2e>
		SetIntegrationPeriod = 464;
 8001a56:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8001a5a:	81fb      	strh	r3, [r7, #14]
 8001a5c:	e005      	b.n	8001a6a <VL6180x_AlsSetIntegrationPeriod+0x3a>
	} else if (SetIntegrationPeriod == 255)   {
 8001a5e:	89fb      	ldrh	r3, [r7, #14]
 8001a60:	2bff      	cmp	r3, #255	; 0xff
 8001a62:	d102      	bne.n	8001a6a <VL6180x_AlsSetIntegrationPeriod+0x3a>
		SetIntegrationPeriod++; /* can't write 255 since this causes the device to lock out.*/
 8001a64:	89fb      	ldrh	r3, [r7, #14]
 8001a66:	3301      	adds	r3, #1
 8001a68:	81fb      	strh	r3, [r7, #14]
	}

	status = VL6180x_WrWord(dev, SYSALS_INTEGRATION_PERIOD, SetIntegrationPeriod);
 8001a6a:	89fb      	ldrh	r3, [r7, #14]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2140      	movs	r1, #64	; 0x40
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f001 fcdc 	bl	800342e <VL6180x_WrWord>
 8001a76:	60b8      	str	r0, [r7, #8]
	if (!status) {
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <VL6180x_AlsSetIntegrationPeriod+0x54>
		VL6180xDevDataSet(dev, IntegrationPeriod, SetIntegrationPeriod) ;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	89fa      	ldrh	r2, [r7, #14]
 8001a82:	825a      	strh	r2, [r3, #18]
	}
	LOG_FUNCTION_END_FMT(status, "%d", (int)SetIntegrationPeriod);
	return status;
 8001a84:	68bb      	ldr	r3, [r7, #8]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <VL6180x_RangePollMeasurement>:

#endif /* HAVE_ALS_SUPPORT */


int VL6180x_RangePollMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
		VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		goto done;
	}
	#endif
	/* //![single_shot_snipet] */
	status = VL6180x_RangeSetSystemMode(dev, MODE_START_STOP | MODE_SINGLESHOT);
 8001a98:	2101      	movs	r1, #1
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 fc44 	bl	8002328 <VL6180x_RangeSetSystemMode>
 8001aa0:	6178      	str	r0, [r7, #20]
	if (status) {
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d12d      	bne.n	8001b04 <VL6180x_RangePollMeasurement+0x76>
	}


	/* poll for new sample ready */
	while (1) {
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	4619      	mov	r1, r3
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fa30 	bl	8001f14 <VL6180x_RangeGetInterruptStatus>
 8001ab4:	6178      	str	r0, [r7, #20]
		if (status) {
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10c      	bne.n	8001ad6 <VL6180x_RangePollMeasurement+0x48>
			break;
		}
		if (IntStatus.status.Range == RES_INT_STAT_GPIO_NEW_SAMPLE_READY || IntStatus.status.Error != 0) {
 8001abc:	7b3b      	ldrb	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d007      	beq.n	8001ad8 <VL6180x_RangePollMeasurement+0x4a>
 8001ac8:	7b3b      	ldrb	r3, [r7, #12]
 8001aca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <VL6180x_RangePollMeasurement+0x4a>
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 8001ad4:	e7e8      	b.n	8001aa8 <VL6180x_RangePollMeasurement+0x1a>
			break;
 8001ad6:	bf00      	nop

		VL6180x_PollDelay(dev);
	}
	/* //![single_shot_snipet] */

	if (!status) {
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d104      	bne.n	8001ae8 <VL6180x_RangePollMeasurement+0x5a>
		status = VL6180x_RangeGetMeasurement(dev, pRangeData);
 8001ade:	6839      	ldr	r1, [r7, #0]
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f8df 	bl	8001ca4 <VL6180x_RangeGetMeasurement>
 8001ae6:	6178      	str	r0, [r7, #20]
	}

	/*  clear range interrupt source */
	ClrStatus = VL6180x_RangeClearInterrupt(dev);
 8001ae8:	2101      	movs	r1, #1
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fa2a 	bl	8001f44 <VL6180x_ClearInterrupt>
 8001af0:	6138      	str	r0, [r7, #16]
	if (ClrStatus) {
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d007      	beq.n	8001b08 <VL6180x_RangePollMeasurement+0x7a>
		VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		/*  leave initial status if already in error  */
		if (!status) {
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d104      	bne.n	8001b08 <VL6180x_RangePollMeasurement+0x7a>
			status = ClrStatus;
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e002      	b.n	8001b0a <VL6180x_RangePollMeasurement+0x7c>
		goto done;
 8001b04:	bf00      	nop
 8001b06:	e000      	b.n	8001b0a <VL6180x_RangePollMeasurement+0x7c>
		}
	}
done:
 8001b08:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8001b0a:	697b      	ldr	r3, [r7, #20]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <VL6180x_GetCachedDWord>:


#if VL6180x_CACHED_REG

int VL6180x_GetCachedDWord(VL6180xDev_t dev, uint16_t  index, uint32_t *pValue)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	817b      	strh	r3, [r7, #10]
	int status;
	uint32_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d024      	beq.n	8001b76 <VL6180x_GetCachedDWord+0x62>
 8001b2c:	897b      	ldrh	r3, [r7, #10]
 8001b2e:	2b4c      	cmp	r3, #76	; 0x4c
 8001b30:	d921      	bls.n	8001b76 <VL6180x_GetCachedDWord+0x62>
		index >= VL6180x_FIRST_CACHED_INDEX  &&
 8001b32:	897b      	ldrh	r3, [r7, #10]
 8001b34:	2b81      	cmp	r3, #129	; 0x81
 8001b36:	d81e      	bhi.n	8001b76 <VL6180x_GetCachedDWord+0x62>
		index <= (VL6180x_LAST_CACHED_INDEX - 3)) {
		uint8_t *pBytes = &VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8001b38:	897b      	ldrh	r3, [r7, #10]
 8001b3a:	3b4d      	subs	r3, #77	; 0x4d
 8001b3c:	3380      	adds	r3, #128	; 0x80
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	3301      	adds	r3, #1
 8001b44:	61bb      	str	r3, [r7, #24]
		Value = ((uint32_t)pBytes[0] << 24) |
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	061a      	lsls	r2, r3, #24
				((uint32_t)pBytes[1] << 16) |
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	041b      	lsls	r3, r3, #16
		Value = ((uint32_t)pBytes[0] << 24) |
 8001b54:	431a      	orrs	r2, r3
				((uint32_t)pBytes[2] << 8) |
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	3302      	adds	r3, #2
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	021b      	lsls	r3, r3, #8
				((uint32_t)pBytes[1] << 16) |
 8001b5e:	4313      	orrs	r3, r2
				(uint32_t)pBytes[3];
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	3203      	adds	r2, #3
 8001b64:	7812      	ldrb	r2, [r2, #0]
		Value = ((uint32_t)pBytes[0] << 24) |
 8001b66:	4313      	orrs	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
		*pValue = Value;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	601a      	str	r2, [r3, #0]
		status = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
		index <= (VL6180x_LAST_CACHED_INDEX - 3)) {
 8001b74:	e006      	b.n	8001b84 <VL6180x_GetCachedDWord+0x70>
	} else {
		status =  VL6180x_RdDWord(dev, index, pValue);
 8001b76:	897b      	ldrh	r3, [r7, #10]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f001 fd69 	bl	8003654 <VL6180x_RdDWord>
 8001b82:	61f8      	str	r0, [r7, #28]
	}
	return status;
 8001b84:	69fb      	ldr	r3, [r7, #28]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3720      	adds	r7, #32
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <VL6180x_GetCachedWord>:

int VL6180x_GetCachedWord(VL6180xDev_t dev, uint16_t  index, uint16_t *pValue)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b088      	sub	sp, #32
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	460b      	mov	r3, r1
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	817b      	strh	r3, [r7, #10]
	int status;
	uint32_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d01b      	beq.n	8001bde <VL6180x_GetCachedWord+0x50>
 8001ba6:	897b      	ldrh	r3, [r7, #10]
 8001ba8:	2b4c      	cmp	r3, #76	; 0x4c
 8001baa:	d918      	bls.n	8001bde <VL6180x_GetCachedWord+0x50>
		index >= VL6180x_FIRST_CACHED_INDEX  &&
 8001bac:	897b      	ldrh	r3, [r7, #10]
 8001bae:	2b83      	cmp	r3, #131	; 0x83
 8001bb0:	d815      	bhi.n	8001bde <VL6180x_GetCachedWord+0x50>
		index <= (VL6180x_LAST_CACHED_INDEX - 1)) {
		uint8_t *pBytes = &VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8001bb2:	897b      	ldrh	r3, [r7, #10]
 8001bb4:	3b4d      	subs	r3, #77	; 0x4d
 8001bb6:	3380      	adds	r3, #128	; 0x80
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
		Value = ((uint32_t)pBytes[0] << 8) | (uint32_t)pBytes[1];
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	3201      	adds	r2, #1
 8001bca:	7812      	ldrb	r2, [r2, #0]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
		*pValue = Value;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	801a      	strh	r2, [r3, #0]
		status = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
		index <= (VL6180x_LAST_CACHED_INDEX - 1)) {
 8001bdc:	e006      	b.n	8001bec <VL6180x_GetCachedWord+0x5e>
	} else {
		status =  VL6180x_RdWord(dev, index, pValue);
 8001bde:	897b      	ldrh	r3, [r7, #10]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4619      	mov	r1, r3
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f001 fcfc 	bl	80035e2 <VL6180x_RdWord>
 8001bea:	61f8      	str	r0, [r7, #28]
	}
	return status;
 8001bec:	69fb      	ldr	r3, [r7, #28]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <VL6180x_GetCachedByte>:

int VL6180x_GetCachedByte(VL6180xDev_t dev, uint16_t  index, uint8_t *pValue)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	817b      	strh	r3, [r7, #10]
	int status;
	uint8_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d012      	beq.n	8001c34 <VL6180x_GetCachedByte+0x3e>
 8001c0e:	897b      	ldrh	r3, [r7, #10]
 8001c10:	2b4c      	cmp	r3, #76	; 0x4c
 8001c12:	d90f      	bls.n	8001c34 <VL6180x_GetCachedByte+0x3e>
		index >= VL6180x_FIRST_CACHED_INDEX &&
 8001c14:	897b      	ldrh	r3, [r7, #10]
 8001c16:	2b84      	cmp	r3, #132	; 0x84
 8001c18:	d80c      	bhi.n	8001c34 <VL6180x_GetCachedByte+0x3e>
		index <= VL6180x_LAST_CACHED_INDEX) {
		Value = VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8001c1a:	897b      	ldrh	r3, [r7, #10]
 8001c1c:	3b4d      	subs	r3, #77	; 0x4d
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4413      	add	r3, r2
 8001c22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001c26:	74fb      	strb	r3, [r7, #19]
		*pValue = Value;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7cfa      	ldrb	r2, [r7, #19]
 8001c2c:	701a      	strb	r2, [r3, #0]
		status = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e006      	b.n	8001c42 <VL6180x_GetCachedByte+0x4c>
	} else {
		status =  VL6180x_RdByte(dev, index, pValue);
 8001c34:	897b      	ldrh	r3, [r7, #10]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f001 fca1 	bl	8003582 <VL6180x_RdByte>
 8001c40:	6178      	str	r0, [r7, #20]
	}
	return status;
 8001c42:	697b      	ldr	r3, [r7, #20]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_CachedRegs_Fetch>:


int _CachedRegs_Fetch(VL6180xDev_t dev)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	int status;
	uint8_t *Buffer;
	if (VL6180xDevDataGet(dev, CacheFilled) == 0) {
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10e      	bne.n	8001c7c <_CachedRegs_Fetch+0x30>
		VL6180xDevDataSet(dev, CacheFilled, 1);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		Buffer = &VL6180xDevDataGet(dev, CachedRegs[0]);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3381      	adds	r3, #129	; 0x81
 8001c6a:	60bb      	str	r3, [r7, #8]
		status = VL6180x_RdMulti(dev, VL6180x_FIRST_CACHED_INDEX, Buffer, VL6180x_CACHED_REG_CNT);
 8001c6c:	2338      	movs	r3, #56	; 0x38
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	214d      	movs	r1, #77	; 0x4d
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f001 fd2d 	bl	80036d2 <VL6180x_RdMulti>
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	e001      	b.n	8001c80 <_CachedRegs_Fetch+0x34>
	} else {
		status = 0 ;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
	}
	return status;
 8001c80:	68fb      	ldr	r3, [r7, #12]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_CachedRegs_Flush>:

void _CachedRegs_Flush(VL6180xDev_t dev)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
	VL6180xDevDataSet(dev, CacheFilled, 0);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <VL6180x_RangeGetMeasurement>:
#endif /* VL6180x_CACHED_REG */



int VL6180x_RangeGetMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
	uint16_t RawRate;
	uint8_t RawStatus;

	LOG_FUNCTION_START("");

	status = _CachedRegs_Fetch(dev);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffcc 	bl	8001c4c <_CachedRegs_Fetch>
 8001cb4:	60f8      	str	r0, [r7, #12]
	if (status) {
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d153      	bne.n	8001d64 <VL6180x_RangeGetMeasurement+0xc0>
		VL6180x_ErrLog("Cache register read fail");
		goto error;
	}
	status = VL6180x_RangeGetResult(dev, &pRangeData->range_mm);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f85c 	bl	8001d7e <VL6180x_RangeGetResult>
 8001cc6:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d14c      	bne.n	8001d68 <VL6180x_RangeGetMeasurement+0xc4>
		status = VL6180x_GetCachedWord(dev, RESULT_RANGE_SIGNAL_RATE, &RawRate);
 8001cce:	f107 030a 	add.w	r3, r7, #10
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2166      	movs	r1, #102	; 0x66
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ff59 	bl	8001b8e <VL6180x_GetCachedWord>
 8001cdc:	60f8      	str	r0, [r7, #12]
		if (!status) {
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d144      	bne.n	8001d6e <VL6180x_RangeGetMeasurement+0xca>
			pRangeData->signalRate_mcps = VL6180x_9to7Conv(RawRate);
 8001ce4:	897b      	ldrh	r3, [r7, #10]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	605a      	str	r2, [r3, #4]
			status = VL6180x_GetCachedByte(dev, RESULT_RANGE_STATUS, &RawStatus);
 8001cec:	f107 0309 	add.w	r3, r7, #9
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	214d      	movs	r1, #77	; 0x4d
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff7e 	bl	8001bf6 <VL6180x_GetCachedByte>
 8001cfa:	60f8      	str	r0, [r7, #12]
			if (!status) {
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d105      	bne.n	8001d0e <VL6180x_RangeGetMeasurement+0x6a>
				pRangeData->errorStatus = RawStatus >> 4;
 8001d02:	7a7b      	ldrb	r3, [r7, #9]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	609a      	str	r2, [r3, #8]
			} else {
				VL6180x_ErrLog("Rd RESULT_RANGE_STATUS fail");
			}
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT || VL6180x_HAVE_DMAX_RANGING
			status = _GetRateResult(dev, pRangeData);
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f001 f956 	bl	8002fc2 <_GetRateResult>
 8001d16:	60f8      	str	r0, [r7, #12]
			if (status)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d126      	bne.n	8001d6c <VL6180x_RangeGetMeasurement+0xc8>
				goto error;
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
			/* if enabled run filter */
			if (_IsWrapArroundActive(dev)) {
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7e5b      	ldrb	r3, [r3, #25]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d014      	beq.n	8001d50 <VL6180x_RangeGetMeasurement+0xac>
				status = _filter_GetResult(dev, pRangeData);
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f001 f8fb 	bl	8002f24 <_filter_GetResult>
 8001d2e:	60f8      	str	r0, [r7, #12]
				if (!status) {
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <VL6180x_RangeGetMeasurement+0xac>
					/* patch the range status and measure if it is filtered */
					if(pRangeData->FilteredData.filterError != NoError) {
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <VL6180x_RangeGetMeasurement+0xac>
						pRangeData->errorStatus = pRangeData->FilteredData.filterError;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	609a      	str	r2, [r3, #8]
						pRangeData->range_mm = pRangeData->FilteredData.range_mm;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	8c1b      	ldrh	r3, [r3, #32]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	601a      	str	r2, [r3, #0]
				}
			}
	#endif

	#if VL6180x_HAVE_DMAX_RANGING
			if (_IsDMaxActive(dev)) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <VL6180x_RangeGetMeasurement+0xca>
				_DMax_Compute(dev, pRangeData);
 8001d5a:	6839      	ldr	r1, [r7, #0]
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f001 fb01 	bl	8003364 <_DMax_Compute>
 8001d62:	e004      	b.n	8001d6e <VL6180x_RangeGetMeasurement+0xca>
		goto error;
 8001d64:	bf00      	nop
 8001d66:	e002      	b.n	8001d6e <VL6180x_RangeGetMeasurement+0xca>
		    VL6180x_ErrLog("Rd RESULT_RANGE_SIGNAL_RATE fail");
		}
	} else {
		VL6180x_ErrLog("VL6180x_GetRangeResult fail");
	}
error:
 8001d68:	bf00      	nop
 8001d6a:	e000      	b.n	8001d6e <VL6180x_RangeGetMeasurement+0xca>
				goto error;
 8001d6c:	bf00      	nop
	_CachedRegs_Flush(dev);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ff8b 	bl	8001c8a <_CachedRegs_Flush>
	LOG_FUNCTION_END_FMT(status, "%d %d %d", (int)pRangeData->range_mm, (int)pRangeData->signalRate_mcps,  (int)pRangeData->errorStatus) ;
	return status;
 8001d74:	68fb      	ldr	r3, [r7, #12]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <VL6180x_RangeGetResult>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeGetResult(VL6180xDev_t dev, int32_t *pRange_mm)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
	uint8_t RawRange;
	int32_t Upscale;

	LOG_FUNCTION_START("%p", pRange_mm);

	status = VL6180x_GetCachedByte(dev, RESULT_RANGE_VAL, &RawRange);
 8001d88:	f107 030f 	add.w	r3, r7, #15
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2162      	movs	r1, #98	; 0x62
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff30 	bl	8001bf6 <VL6180x_GetCachedByte>
 8001d96:	6178      	str	r0, [r7, #20]
	if (!status) {
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d109      	bne.n	8001db2 <VL6180x_RangeGetResult+0x34>
		Upscale = _GetUpscale(dev);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7e1b      	ldrb	r3, [r3, #24]
 8001da2:	613b      	str	r3, [r7, #16]
		*pRange_mm = Upscale * (int32_t)RawRange;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	461a      	mov	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	fb03 f202 	mul.w	r2, r3, r2
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	601a      	str	r2, [r3, #0]
	}
	LOG_FUNCTION_END_FMT(status, "%d", (int)*pRange_mm);
	return status;
 8001db2:	697b      	ldr	r3, [r7, #20]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <VL6180x_RangeSetRawThresholds>:

int VL6180x_RangeSetRawThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	70bb      	strb	r3, [r7, #2]
	int status;
	LOG_FUNCTION_START("%d %d", (int) low, (int)high);
	/* TODO we can optimize here grouping high/low in a word but that's cpu endianness dependent */
	status = VL6180x_WrByte(dev, SYSRANGE_THRESH_HIGH, high);
 8001dcc:	78bb      	ldrb	r3, [r7, #2]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2119      	movs	r1, #25
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f001 fb06 	bl	80033e4 <VL6180x_WrByte>
 8001dd8:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d106      	bne.n	8001dee <VL6180x_RangeSetRawThresholds+0x32>
		status = VL6180x_WrByte(dev, SYSRANGE_THRESH_LOW, low);
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	461a      	mov	r2, r3
 8001de4:	211a      	movs	r1, #26
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f001 fafc 	bl	80033e4 <VL6180x_WrByte>
 8001dec:	60f8      	str	r0, [r7, #12]
	}

	LOG_FUNCTION_END(status);
	return status;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <VL6180x_RangeSetThresholds>:

int VL6180x_RangeSetThresholds(VL6180xDev_t dev, uint16_t low, uint16_t high, int UseSafeParamHold)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	817b      	strh	r3, [r7, #10]
 8001e06:	4613      	mov	r3, r2
 8001e08:	813b      	strh	r3, [r7, #8]
	int status;
	int scale;
	LOG_FUNCTION_START("%d %d", (int) low, (int)high);
	scale = _GetUpscale(dev, UpscaleFactor);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	7e1b      	ldrb	r3, [r3, #24]
 8001e0e:	61bb      	str	r3, [r7, #24]
	if (low > scale * 255 || high > scale * 255) {
 8001e10:	8979      	ldrh	r1, [r7, #10]
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4613      	mov	r3, r2
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	4299      	cmp	r1, r3
 8001e1c:	dc06      	bgt.n	8001e2c <VL6180x_RangeSetThresholds+0x34>
 8001e1e:	8939      	ldrh	r1, [r7, #8]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4613      	mov	r3, r2
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	4299      	cmp	r1, r3
 8001e2a:	dd03      	ble.n	8001e34 <VL6180x_RangeSetThresholds+0x3c>
		status = INVALID_PARAMS;
 8001e2c:	f06f 0301 	mvn.w	r3, #1
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e028      	b.n	8001e86 <VL6180x_RangeSetThresholds+0x8e>
	} else {
		do {
			if (UseSafeParamHold) {
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <VL6180x_RangeSetThresholds+0x52>
				status = VL6180x_SetGroupParamHold(dev, 1);
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff fcfa 	bl	8001836 <VL6180x_SetGroupParamHold>
 8001e42:	61f8      	str	r0, [r7, #28]
				if (status)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d11c      	bne.n	8001e84 <VL6180x_RangeSetThresholds+0x8c>
					break;
		    }
		    status = VL6180x_RangeSetRawThresholds(dev, (uint8_t)(low / scale), (uint8_t)(high / scale));
 8001e4a:	897a      	ldrh	r2, [r7, #10]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e52:	b2d9      	uxtb	r1, r3
 8001e54:	893a      	ldrh	r2, [r7, #8]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f7ff ffab 	bl	8001dbc <VL6180x_RangeSetRawThresholds>
 8001e66:	61f8      	str	r0, [r7, #28]
		    if (status) {
				VL6180x_ErrLog("VL6180x_RangeSetRawThresholds fail");
		    }
		    if (UseSafeParamHold) {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00b      	beq.n	8001e86 <VL6180x_RangeSetThresholds+0x8e>
				int HoldStatus;
				/* tryt to unset param hold vene if previous fail */
				HoldStatus = VL6180x_SetGroupParamHold(dev, 0);
 8001e6e:	2100      	movs	r1, #0
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fce0 	bl	8001836 <VL6180x_SetGroupParamHold>
 8001e76:	6178      	str	r0, [r7, #20]
				if (!status)
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <VL6180x_RangeSetThresholds+0x8e>
					status = HoldStatus;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	e000      	b.n	8001e86 <VL6180x_RangeSetThresholds+0x8e>
					break;
 8001e84:	bf00      	nop
		    }
		} while (0);
	}

	LOG_FUNCTION_END(status);
	return status;
 8001e86:	69fb      	ldr	r3, [r7, #28]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <VL6180x_RangeGetThresholds>:


int VL6180x_RangeGetThresholds(VL6180xDev_t dev, uint16_t *low, uint16_t *high)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
	int status = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
	uint8_t RawLow, RawHigh;
	int scale;

	LOG_FUNCTION_START("%p %p", low , high);

	scale = _GetUpscale(dev, UpscaleFactor);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	7e1b      	ldrb	r3, [r3, #24]
 8001ea4:	61bb      	str	r3, [r7, #24]
	do {
		if (high != NULL) {
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <VL6180x_RangeGetThresholds+0x44>
			status = VL6180x_RdByte(dev, SYSRANGE_THRESH_HIGH, &RawHigh);
 8001eac:	f107 0316 	add.w	r3, r7, #22
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2119      	movs	r1, #25
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f001 fb64 	bl	8003582 <VL6180x_RdByte>
 8001eba:	61f8      	str	r0, [r7, #28]
			if (status) {
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d120      	bne.n	8001f04 <VL6180x_RangeGetThresholds+0x74>
				VL6180x_ErrLog("rd SYSRANGE_THRESH_HIGH fail");
				break;
			}
			*high = (uint16_t)RawHigh * scale;
 8001ec2:	7dbb      	ldrb	r3, [r7, #22]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	b292      	uxth	r2, r2
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	801a      	strh	r2, [r3, #0]
		}
		if (low != NULL) {
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d017      	beq.n	8001f0a <VL6180x_RangeGetThresholds+0x7a>
		    status = VL6180x_RdByte(dev, SYSRANGE_THRESH_LOW, &RawLow);
 8001eda:	f107 0317 	add.w	r3, r7, #23
 8001ede:	461a      	mov	r2, r3
 8001ee0:	211a      	movs	r1, #26
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f001 fb4d 	bl	8003582 <VL6180x_RdByte>
 8001ee8:	61f8      	str	r0, [r7, #28]
			if (status) {
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10b      	bne.n	8001f08 <VL6180x_RangeGetThresholds+0x78>
				VL6180x_ErrLog("rd SYSRANGE_THRESH_LOW fail");
				break;
		    }
		    *low = (uint16_t)RawLow * scale;
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	b292      	uxth	r2, r2
 8001ef8:	fb02 f303 	mul.w	r3, r2, r3
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	801a      	strh	r2, [r3, #0]
 8001f02:	e002      	b.n	8001f0a <VL6180x_RangeGetThresholds+0x7a>
				break;
 8001f04:	bf00      	nop
 8001f06:	e000      	b.n	8001f0a <VL6180x_RangeGetThresholds+0x7a>
				break;
 8001f08:	bf00      	nop
		}
	} while (0);
	LOG_FUNCTION_END_FMT(status, "%d %d", (int)*low , (int)*high);
	return status;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <VL6180x_RangeGetInterruptStatus>:


int VL6180x_RangeGetInterruptStatus(VL6180xDev_t dev, uint8_t *pIntStatus)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t IntStatus;
	LOG_FUNCTION_START("%p", pIntStatus);
	/* FIXME we are grouping "error" with over status the user must check implicitly for it
	 * not just new sample or over status , that will nevr show up in case of error*/
	status = VL6180x_GetCachedByte(dev, RESULT_INTERRUPT_STATUS_GPIO, &IntStatus);
 8001f1e:	f107 030b 	add.w	r3, r7, #11
 8001f22:	461a      	mov	r2, r3
 8001f24:	214f      	movs	r1, #79	; 0x4f
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fe65 	bl	8001bf6 <VL6180x_GetCachedByte>
 8001f2c:	60f8      	str	r0, [r7, #12]
	*pIntStatus = IntStatus & 0xC7;
 8001f2e:	7afb      	ldrb	r3, [r7, #11]
 8001f30:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END_FMT(status, "%d", (int)*pIntStatus);
	return status;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <VL6180x_ClearInterrupt>:
	LOG_FUNCTION_END_FMT(status, "%d", (int)*IntStatus);
	return status;
}

int VL6180x_ClearInterrupt(VL6180xDev_t dev, uint8_t IntClear)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
	int status;
	LOG_FUNCTION_START("%d", (int)IntClear);
	if (IntClear <= 7) {
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b07      	cmp	r3, #7
 8001f54:	d807      	bhi.n	8001f66 <VL6180x_ClearInterrupt+0x22>
		status = VL6180x_WrByte(dev, SYSTEM_INTERRUPT_CLEAR, IntClear);
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2115      	movs	r1, #21
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f001 fa41 	bl	80033e4 <VL6180x_WrByte>
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	e002      	b.n	8001f6c <VL6180x_ClearInterrupt+0x28>
	} else {
		status = INVALID_PARAMS;
 8001f66:	f06f 0301 	mvn.w	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_UpscaleInitPatch0>:
}

#if VL6180x_UPSCALE_SUPPORT != 1

static int _UpscaleInitPatch0(VL6180xDev_t dev)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
	int status;
	uint32_t CalValue = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
	CalValue = VL6180xDevDataGet(dev, Part2PartAmbNVM);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]
	status = VL6180x_WrDWord(dev, 0xDA, CalValue);
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	21da      	movs	r1, #218	; 0xda
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f001 fa7b 	bl	8003488 <VL6180x_WrDWord>
 8001f92:	60b8      	str	r0, [r7, #8]
	return status;
 8001f94:	68bb      	ldr	r3, [r7, #8]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <VL6180x_UpscaleRegInit>:

/* only include up-scaling register setting when up-scale support is configured in */
int VL6180x_UpscaleRegInit(VL6180xDev_t dev)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
	/*  apply REGISTER_TUNING_ER02_100614_CustomerView.txt */
	VL6180x_WrByte(dev, 0x0207, 0x01);
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f240 2107 	movw	r1, #519	; 0x207
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f001 fa19 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0208, 0x01);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f001 fa13 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0096, 0x00);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2196      	movs	r1, #150	; 0x96
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f001 fa0e 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0097, 0x54);
 8001fc8:	2254      	movs	r2, #84	; 0x54
 8001fca:	2197      	movs	r1, #151	; 0x97
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f001 fa09 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e3, 0x01);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	21e3      	movs	r1, #227	; 0xe3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f001 fa04 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e4, 0x03);
 8001fdc:	2203      	movs	r2, #3
 8001fde:	21e4      	movs	r1, #228	; 0xe4
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f001 f9ff 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e5, 0x02);
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	21e5      	movs	r1, #229	; 0xe5
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f001 f9fa 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e6, 0x01);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	21e6      	movs	r1, #230	; 0xe6
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f001 f9f5 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e7, 0x03);
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	21e7      	movs	r1, #231	; 0xe7
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f001 f9f0 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00f5, 0x02);
 8002004:	2202      	movs	r2, #2
 8002006:	21f5      	movs	r1, #245	; 0xf5
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f001 f9eb 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00d9, 0x05);
 800200e:	2205      	movs	r2, #5
 8002010:	21d9      	movs	r1, #217	; 0xd9
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f001 f9e6 	bl	80033e4 <VL6180x_WrByte>

	_UpscaleInitPatch0(dev);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ffac 	bl	8001f76 <_UpscaleInitPatch0>

	VL6180x_WrByte(dev, 0x009f, 0x00);
 800201e:	2200      	movs	r2, #0
 8002020:	219f      	movs	r1, #159	; 0x9f
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f001 f9de 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00a3, 0x28);
 8002028:	2228      	movs	r2, #40	; 0x28
 800202a:	21a3      	movs	r1, #163	; 0xa3
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f001 f9d9 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b7, 0x00);
 8002032:	2200      	movs	r2, #0
 8002034:	21b7      	movs	r1, #183	; 0xb7
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f001 f9d4 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00bb, 0x28);
 800203c:	2228      	movs	r2, #40	; 0x28
 800203e:	21bb      	movs	r1, #187	; 0xbb
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f001 f9cf 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b2, 0x09);
 8002046:	2209      	movs	r2, #9
 8002048:	21b2      	movs	r1, #178	; 0xb2
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f001 f9ca 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ca, 0x09);
 8002050:	2209      	movs	r2, #9
 8002052:	21ca      	movs	r1, #202	; 0xca
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f001 f9c5 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0198, 0x01);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f001 f9bf 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01b0, 0x17);
 8002066:	2217      	movs	r2, #23
 8002068:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f001 f9b9 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ad, 0x00);
 8002072:	2200      	movs	r2, #0
 8002074:	f240 11ad 	movw	r1, #429	; 0x1ad
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f001 f9b3 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ff, 0x05);
 800207e:	2205      	movs	r2, #5
 8002080:	21ff      	movs	r1, #255	; 0xff
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f001 f9ae 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0100, 0x05);
 8002088:	2205      	movs	r2, #5
 800208a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f001 f9a8 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0199, 0x05);
 8002094:	2205      	movs	r2, #5
 8002096:	f240 1199 	movw	r1, #409	; 0x199
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f001 f9a2 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a6, 0x1b);
 80020a0:	221b      	movs	r2, #27
 80020a2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f001 f99c 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ac, 0x3e);
 80020ac:	223e      	movs	r2, #62	; 0x3e
 80020ae:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f001 f996 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a7, 0x1f);
 80020b8:	221f      	movs	r2, #31
 80020ba:	f240 11a7 	movw	r1, #423	; 0x1a7
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f001 f990 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0030, 0x00);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2130      	movs	r1, #48	; 0x30
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f001 f98b 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0011, 0x10);
 80020ce:	2210      	movs	r2, #16
 80020d0:	2111      	movs	r1, #17
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f001 f986 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x010a, 0x30);
 80020d8:	2230      	movs	r2, #48	; 0x30
 80020da:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f001 f980 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003f, 0x46);
 80020e4:	2246      	movs	r2, #70	; 0x46
 80020e6:	213f      	movs	r1, #63	; 0x3f
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f001 f97b 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0031, 0xFF);
 80020ee:	22ff      	movs	r2, #255	; 0xff
 80020f0:	2131      	movs	r1, #49	; 0x31
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f001 f976 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0040, 0x63);
 80020f8:	2263      	movs	r2, #99	; 0x63
 80020fa:	2140      	movs	r1, #64	; 0x40
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f001 f971 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002e, 0x01);
 8002102:	2201      	movs	r2, #1
 8002104:	212e      	movs	r1, #46	; 0x2e
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f001 f96c 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002c, 0xff);
 800210c:	22ff      	movs	r2, #255	; 0xff
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f001 f967 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x001b, 0x09);
 8002116:	2209      	movs	r2, #9
 8002118:	211b      	movs	r1, #27
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f001 f962 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003e, 0x31);
 8002120:	2231      	movs	r2, #49	; 0x31
 8002122:	213e      	movs	r1, #62	; 0x3e
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f001 f95d 	bl	80033e4 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0014, 0x24);
 800212a:	2224      	movs	r2, #36	; 0x24
 800212c:	2114      	movs	r1, #20
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f001 f958 	bl	80033e4 <VL6180x_WrByte>
#if VL6180x_EXTENDED_RANGE
	VL6180x_RangeSetMaxConvergenceTime(dev, 63);
#else
	VL6180x_RangeSetMaxConvergenceTime(dev, 50);
 8002134:	2132      	movs	r1, #50	; 0x32
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f8d0 	bl	80022dc <VL6180x_RangeSetMaxConvergenceTime>
#endif
	return 0;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <VL6180x_UpscaleSetScaling>:
#else
#define VL6180x_UpscaleRegInit(...) -1
#endif

int VL6180x_UpscaleSetScaling(VL6180xDev_t dev, uint8_t scaling)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
	/* we are in fixed config so only allow configured factor */
	#define min_scaling VL6180x_UPSCALE_SUPPORT
	#define max_scaling VL6180x_UPSCALE_SUPPORT
#endif

	if (scaling >= min_scaling  && scaling <= max_scaling) {
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d063      	beq.n	8002222 <VL6180x_UpscaleSetScaling+0xda>
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d860      	bhi.n	8002222 <VL6180x_UpscaleSetScaling+0xda>

		Scaler = ScalerLookUP[scaling - 1];
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	3b01      	subs	r3, #1
 8002164:	4a34      	ldr	r2, [pc, #208]	; (8002238 <VL6180x_UpscaleSetScaling+0xf0>)
 8002166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800216a:	823b      	strh	r3, [r7, #16]
		status = VL6180x_WrWord(dev, RANGE_SCALER, Scaler);
 800216c:	8a3b      	ldrh	r3, [r7, #16]
 800216e:	461a      	mov	r2, r3
 8002170:	2196      	movs	r1, #150	; 0x96
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f001 f95b 	bl	800342e <VL6180x_WrWord>
 8002178:	6178      	str	r0, [r7, #20]
		_SetUpscale(dev, scaling);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	761a      	strb	r2, [r3, #24]

		/* Apply scaling on  part-2-part offset */
		Offset = VL6180xDevDataGet(dev, Part2PartOffsetNVM) / scaling;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8002186:	461a      	mov	r2, r3
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	fb92 f3f3 	sdiv	r3, r2, r3
 800218e:	73fb      	strb	r3, [r7, #15]
		status = VL6180x_WrByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, Offset);
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	461a      	mov	r2, r3
 8002194:	2124      	movs	r1, #36	; 0x24
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f001 f924 	bl	80033e4 <VL6180x_WrByte>
 800219c:	6178      	str	r0, [r7, #20]

		/* Apply scaling on CrossTalkValidHeight */
		if (status == 0) {
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10a      	bne.n	80021ba <VL6180x_UpscaleSetScaling+0x72>
			status = VL6180x_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
									DEF_CROSS_TALK_VALID_HEIGHT_VALUE /  scaling);
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	2214      	movs	r2, #20
 80021a8:	fb92 f3f3 	sdiv	r3, r2, r3
			status = VL6180x_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	2121      	movs	r1, #33	; 0x21
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f001 f916 	bl	80033e4 <VL6180x_WrByte>
 80021b8:	6178      	str	r0, [r7, #20]
		}
		/* Apply scaling on RangeIgnore ValidHeight if enabled */
		if( status == 0){
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d119      	bne.n	80021f4 <VL6180x_UpscaleSetScaling+0xac>
			if(  VL6180xDevDataGet(dev, RangeIgnore.Enabled) !=0 ){
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7c1b      	ldrb	r3, [r3, #16]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d015      	beq.n	80021f4 <VL6180x_UpscaleSetScaling+0xac>
				ValidHeight = VL6180xDevDataGet(dev, RangeIgnore.ValidHeight);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	899b      	ldrh	r3, [r3, #12]
 80021cc:	827b      	strh	r3, [r7, #18]
				ValidHeight  /= _GetUpscale(dev);
 80021ce:	8a7b      	ldrh	r3, [r7, #18]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	7e12      	ldrb	r2, [r2, #24]
 80021d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80021d8:	827b      	strh	r3, [r7, #18]
				if( ValidHeight > 255 )
 80021da:	8a7b      	ldrh	r3, [r7, #18]
 80021dc:	2bff      	cmp	r3, #255	; 0xff
 80021de:	d901      	bls.n	80021e4 <VL6180x_UpscaleSetScaling+0x9c>
					ValidHeight = 255;
 80021e0:	23ff      	movs	r3, #255	; 0xff
 80021e2:	827b      	strh	r3, [r7, #18]

				status = VL6180x_WrByte(dev, SYSRANGE_RANGE_IGNORE_VALID_HEIGHT,
 80021e4:	8a7b      	ldrh	r3, [r7, #18]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	2125      	movs	r1, #37	; 0x25
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f001 f8f9 	bl	80033e4 <VL6180x_WrByte>
 80021f2:	6178      	str	r0, [r7, #20]
							ValidHeight );
			}
		}

#if !VL6180x_EXTENDED_RANGE
		if (status == 0) {
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10a      	bne.n	8002210 <VL6180x_UpscaleSetScaling+0xc8>
			status = VL6180x_RangeSetEceState(dev, scaling == 1); /* enable ece only at 1x scaling */
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f84e 	bl	80022aa <VL6180x_RangeSetEceState>
 800220e:	6178      	str	r0, [r7, #20]
		}
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <VL6180x_UpscaleSetScaling+0xe2>
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d006      	beq.n	800222a <VL6180x_UpscaleSetScaling+0xe2>
			status = NOT_GUARANTEED ;
 800221c:	2303      	movs	r3, #3
 800221e:	617b      	str	r3, [r7, #20]
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 8002220:	e003      	b.n	800222a <VL6180x_UpscaleSetScaling+0xe2>
		}
#endif
	} else {
		status = INVALID_PARAMS;
 8002222:	f06f 0301 	mvn.w	r3, #1
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e000      	b.n	800222c <VL6180x_UpscaleSetScaling+0xe4>
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 800222a:	bf00      	nop
	}
#undef min_scaling
#undef max_scaling
	LOG_FUNCTION_END(status);
	return status;
 800222c:	697b      	ldr	r3, [r7, #20]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	080076bc 	.word	0x080076bc

0800223c <VL6180x_UpscaleStaticInit>:
	return status;
}


static int  VL6180x_UpscaleStaticInit(VL6180xDev_t dev)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	/* todo make these a fail macro in case only 1x is suppoted */
	int status;

	LOG_FUNCTION_START("");
	do {
		status = VL6180x_UpscaleRegInit(dev);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff feaa 	bl	8001f9e <VL6180x_UpscaleRegInit>
 800224a:	60f8      	str	r0, [r7, #12]
		if (status) {
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b00      	cmp	r3, #0
			VL6180x_ErrLog("VL6180x_RangeSetEceState fail");
			break;
		}
#endif
	} while (0);
	if (!status) {
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10b      	bne.n	800226e <VL6180x_UpscaleStaticInit+0x32>
		/*  must write the scaler at least once to the device to ensure the scaler is in a known state. */
		status = VL6180x_UpscaleSetScaling(dev, _GetUpscale(dev));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7e1b      	ldrb	r3, [r3, #24]
 800225a:	4619      	mov	r1, r3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff73 	bl	8002148 <VL6180x_UpscaleSetScaling>
 8002262:	60f8      	str	r0, [r7, #12]
		VL6180x_WrByte(dev, 0x016, 0x00); /* change fresh out of set status to 0 */
 8002264:	2200      	movs	r2, #0
 8002266:	2116      	movs	r1, #22
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f001 f8bb 	bl	80033e4 <VL6180x_WrByte>
	}
	LOG_FUNCTION_END(status);
	return status;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <VL6180x_RangeConfigInterrupt>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d807      	bhi.n	800229a <VL6180x_RangeConfigInterrupt+0x22>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO,
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	22f8      	movs	r2, #248	; 0xf8
 800228e:	2114      	movs	r1, #20
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f001 f930 	bl	80034f6 <VL6180x_UpdateByte>
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	e002      	b.n	80022a0 <VL6180x_RangeConfigInterrupt+0x28>
									(uint8_t)(~CONFIG_GPIO_RANGE_MASK),
									ConfigGpioInt);
	} else {
		VL6180x_ErrLog("Invalid config mode param %d", (int)ConfigGpioInt);
		status = INVALID_PARAMS;
 800229a:	f06f 0301 	mvn.w	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 80022a0:	68fb      	ldr	r3, [r7, #12]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <VL6180x_RangeSetEceState>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeSetEceState(VL6180xDev_t dev, int enable)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t or_mask;

	LOG_FUNCTION_START("%d", (int)enable);
	if (enable)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <VL6180x_RangeSetEceState+0x16>
		or_mask = RANGE_CHECK_ECE_ENABLE_MASK;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	e001      	b.n	80022c4 <VL6180x_RangeSetEceState+0x1a>
	else
		or_mask = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]

	status = VL6180x_UpdateByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, ~RANGE_CHECK_ECE_ENABLE_MASK, or_mask);
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	22fe      	movs	r2, #254	; 0xfe
 80022c8:	212d      	movs	r1, #45	; 0x2d
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f001 f913 	bl	80034f6 <VL6180x_UpdateByte>
 80022d0:	60b8      	str	r0, [r7, #8]
	LOG_FUNCTION_END(status);
	return status;
 80022d2:	68bb      	ldr	r3, [r7, #8]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <VL6180x_RangeSetMaxConvergenceTime>:


int VL6180x_RangeSetMaxConvergenceTime(VL6180xDev_t dev, uint8_t  MaxConTime_msec)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
	int status = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
	LOG_FUNCTION_START("%d", (int)MaxConTime_msec);
	do {
		status = VL6180x_WrByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, MaxConTime_msec);
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	461a      	mov	r2, r3
 80022f0:	211c      	movs	r1, #28
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f001 f876 	bl	80033e4 <VL6180x_WrByte>
 80022f8:	60f8      	str	r0, [r7, #12]
		if (status) {
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10b      	bne.n	8002318 <VL6180x_RangeSetMaxConvergenceTime+0x3c>
			break;
		}
		status = VL6180x_RangeSetEarlyConvergenceEestimateThreshold(dev);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f82a 	bl	800235a <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>
 8002306:	60f8      	str	r0, [r7, #12]
		if (status) {
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <VL6180x_RangeSetMaxConvergenceTime+0x40>
			break;
		}
		status = _DMax_InitData(dev);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 ff6a 	bl	80031e8 <_DMax_InitData>
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	e002      	b.n	800231e <VL6180x_RangeSetMaxConvergenceTime+0x42>
			break;
 8002318:	bf00      	nop
 800231a:	e000      	b.n	800231e <VL6180x_RangeSetMaxConvergenceTime+0x42>
			break;
 800231c:	bf00      	nop
	} while (0);
	LOG_FUNCTION_END(status);
	return status;
 800231e:	68fb      	ldr	r3, [r7, #12]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <VL6180x_RangeSetSystemMode>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeSetSystemMode(VL6180xDev_t dev, uint8_t  mode)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("%d", (int)mode);
	/* FIXME we are not checking device is ready via @a VL6180x_RangeWaitDeviceReady
	 * so if called back to back real fast we are not checking
	 * if previous mode "set" got absorbed => bit 0 must be 0 so that it work
	 */
	if (mode <= 3) {
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d807      	bhi.n	800234a <VL6180x_RangeSetSystemMode+0x22>
		status = VL6180x_WrByte(dev, SYSRANGE_START, mode);
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	461a      	mov	r2, r3
 800233e:	2118      	movs	r1, #24
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f001 f84f 	bl	80033e4 <VL6180x_WrByte>
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	e002      	b.n	8002350 <VL6180x_RangeSetSystemMode+0x28>
		if (status) {
		    VL6180x_ErrLog("SYSRANGE_START wr fail");
		}
	} else {
		status = INVALID_PARAMS;
 800234a:	f06f 0301 	mvn.w	r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8002350:	68fb      	ldr	r3, [r7, #12]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>:
	return status;
}


static int VL6180x_RangeSetEarlyConvergenceEestimateThreshold(VL6180xDev_t dev)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b08e      	sub	sp, #56	; 0x38
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
	int status;

	const uint32_t cMicroSecPerMilliSec  = 1000;
 8002362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
	const uint32_t cEceSampleTime_us     = 500;
 8002368:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ece_factor_m          = VL6180xDevDataGet(dev, EceFactorM);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	891b      	ldrh	r3, [r3, #8]
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ece_factor_d          = VL6180xDevDataGet(dev, EceFactorD);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	895b      	ldrh	r3, [r3, #10]
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t AveTime;

	LOG_FUNCTION_START("");

	do {
		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &u8);
 800237a:	f107 030f 	add.w	r3, r7, #15
 800237e:	461a      	mov	r2, r3
 8002380:	211c      	movs	r1, #28
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f001 f8fd 	bl	8003582 <VL6180x_RdByte>
 8002388:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 800238a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238c:	2b00      	cmp	r3, #0
 800238e:	d138      	bne.n	8002402 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xa8>
			VL6180x_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail");
			break;
		}
		maxConv_ms = u8;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	623b      	str	r3, [r7, #32]
		AveTime = _GetAveTotalTime(dev);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f83c 	bl	8002412 <_GetAveTotalTime>
 800239a:	61f8      	str	r0, [r7, #28]
		if (AveTime < 0) {
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	da03      	bge.n	80023aa <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0x50>
			status = -1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 80023a8:	e02e      	b.n	8002408 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
		}

		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ae:	fb03 f202 	mul.w	r2, r3, r2
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	61bb      	str	r3, [r7, #24]
		status = VL6180x_RdDWord(dev, 0xB8, &fineThresh);
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	461a      	mov	r2, r3
 80023be:	21b8      	movs	r1, #184	; 0xb8
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f001 f947 	bl	8003654 <VL6180x_RdDWord>
 80023c6:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d11b      	bne.n	8002406 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xac>
			VL6180x_ErrLog("reg 0xB8 rd fail");
			break;
		}
		fineThresh *= 256;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	613b      	str	r3, [r7, #16]
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	fb03 f202 	mul.w	r2, r3, r2
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]

		status = VL6180x_WrWord(dev, SYSRANGE_EARLY_CONVERGENCE_ESTIMATE, (uint16_t)eceThresh);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	2122      	movs	r1, #34	; 0x22
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f001 f818 	bl	800342e <VL6180x_WrWord>
 80023fe:	6378      	str	r0, [r7, #52]	; 0x34
 8002400:	e002      	b.n	8002408 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
			break;
 8002402:	bf00      	nop
 8002404:	e000      	b.n	8002408 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
			break;
 8002406:	bf00      	nop
	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 8002408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800240a:	4618      	mov	r0, r3
 800240c:	3738      	adds	r7, #56	; 0x38
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <_GetAveTotalTime>:
/*
 * Return >0 = time
 *       <0 1 if fail to get read data from device to compute time
 */
static int32_t _GetAveTotalTime(VL6180xDev_t dev)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b08c      	sub	sp, #48	; 0x30
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
	uint32_t cFwOverhead_us = 24;
 800241a:	2318      	movs	r3, #24
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t cVcpSetupTime_us = 70;
 800241e:	2346      	movs	r3, #70	; 0x46
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t cPLL2_StartupDelay_us = 200;
 8002422:	23c8      	movs	r3, #200	; 0xc8
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t cMeasMask = 0x07;
 8002426:	2307      	movs	r3, #7
 8002428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t u8;
	int status;

	LOG_FUNCTION_START("");

	status = VL6180x_RdByte(dev, 0x109, &u8);
 800242c:	f107 030b 	add.w	r3, r7, #11
 8002430:	461a      	mov	r2, r3
 8002432:	f240 1109 	movw	r1, #265	; 0x109
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f001 f8a3 	bl	8003582 <VL6180x_RdByte>
 800243c:	61f8      	str	r0, [r7, #28]
	if (status) {
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <_GetAveTotalTime+0x38>
		VL6180x_ErrLog("rd 0x109 fail");
		return -1;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
 8002448:	e029      	b.n	800249e <_GetAveTotalTime+0x8c>
	}
	Samples = u8 & cMeasMask;
 800244a:	7afa      	ldrb	r2, [r7, #11]
 800244c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002450:	4013      	ands	r3, r2
 8002452:	b2db      	uxtb	r3, r3
 8002454:	61bb      	str	r3, [r7, #24]
	status = VL6180x_RdByte(dev, READOUT_AVERAGING_SAMPLE_PERIOD, &u8);
 8002456:	f107 030b 	add.w	r3, r7, #11
 800245a:	461a      	mov	r2, r3
 800245c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f001 f88e 	bl	8003582 <VL6180x_RdByte>
 8002466:	61f8      	str	r0, [r7, #28]
	if (status) {
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <_GetAveTotalTime+0x62>
		VL6180x_ErrLog("i2c READOUT_AVERAGING_SAMPLE_PERIOD fail");
		return -1;
 800246e:	f04f 33ff 	mov.w	r3, #4294967295
 8002472:	e014      	b.n	800249e <_GetAveTotalTime+0x8c>
	}
	SamplePeriod = u8;
 8002474:	7afb      	ldrb	r3, [r7, #11]
 8002476:	617b      	str	r3, [r7, #20]
	SingleTime_us = cFwOverhead_us + cVcpSetupTime_us + (SamplePeriod * 10);
 8002478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	18d1      	adds	r1, r2, r3
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	440b      	add	r3, r1
 800248a:	613b      	str	r3, [r7, #16]
	TotalAveTime_us = (Samples + 1) * SingleTime_us + cPLL2_StartupDelay_us;
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	3301      	adds	r3, #1
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	fb03 f202 	mul.w	r2, r3, r2
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	4413      	add	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_END(TotalAveTime_us);
	return TotalAveTime_us;
 800249c:	68fb      	ldr	r3, [r7, #12]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3730      	adds	r7, #48	; 0x30
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_filter_Init>:
#define _FilterData(field) VL6180xDevDataGet(dev, FilterData.field)
/*
 * One time init
 */
int _filter_Init(VL6180xDev_t dev)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
	int i;
	_FilterData(MeasurementIndex) = 0;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	61da      	str	r2, [r3, #28]

	_FilterData(Default_ZeroVal) = 0;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	665a      	str	r2, [r3, #100]	; 0x64
	_FilterData(Default_VAVGVal) = 0;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	669a      	str	r2, [r3, #104]	; 0x68
	_FilterData(NoDelay_ZeroVal) = 0;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	66da      	str	r2, [r3, #108]	; 0x6c
	_FilterData(NoDelay_VAVGVal) = 0;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	671a      	str	r2, [r3, #112]	; 0x70
	_FilterData(Previous_VAVGDiff) = 0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	675a      	str	r2, [r3, #116]	; 0x74

	_FilterData(StdFilteredReads) = 0;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	_FilterData(FilteringOnGoingConsecutiveStates) = 0;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	679a      	str	r2, [r3, #120]	; 0x78

	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	e011      	b.n	800250a <_filter_Init+0x64>
		_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3310      	adds	r3, #16
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f4:	809a      	strh	r2, [r3, #4]
		_FilterData(LastReturnRates)[i] = 0;
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	330c      	adds	r3, #12
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3301      	adds	r3, #1
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b09      	cmp	r3, #9
 800250e:	ddea      	ble.n	80024e6 <_filter_Init+0x40>
	}
	_FilterData(MeasurementsSinceLastFlush)=0;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
	return 0;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <_filter_StdDevDamper>:
									uint32_t SignalRate,
									const uint32_t StdDevLimitLowLight,
									const uint32_t StdDevLimitLowLightSNR,
									const uint32_t StdDevLimitHighLight,
									const uint32_t StdDevLimitHighLightSNR)
{
 8002522:	b480      	push	{r7}
 8002524:	b087      	sub	sp, #28
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	603b      	str	r3, [r7, #0]
	uint32_t newStdDev;
	uint16_t SNR;

	if (AmbientRate > 0)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <_filter_StdDevDamper+0x26>
		SNR = (uint16_t) ((100 * SignalRate) / AmbientRate);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2264      	movs	r2, #100	; 0x64
 800253a:	fb03 f202 	mul.w	r2, r3, r2
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	827b      	strh	r3, [r7, #18]
 8002546:	e002      	b.n	800254e <_filter_StdDevDamper+0x2c>
	else
		SNR = 9999;
 8002548:	f242 730f 	movw	r3, #9999	; 0x270f
 800254c:	827b      	strh	r3, [r7, #18]

	if (SNR >= StdDevLimitLowLightSNR) {
 800254e:	8a7b      	ldrh	r3, [r7, #18]
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d802      	bhi.n	800255c <_filter_StdDevDamper+0x3a>
		newStdDev = StdDevLimitLowLight;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e016      	b.n	800258a <_filter_StdDevDamper+0x68>
	} else {
		if (SNR <= StdDevLimitHighLightSNR)
 800255c:	8a7b      	ldrh	r3, [r7, #18]
 800255e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002560:	429a      	cmp	r2, r3
 8002562:	d302      	bcc.n	800256a <_filter_StdDevDamper+0x48>
			newStdDev = StdDevLimitHighLight;
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	e00f      	b.n	800258a <_filter_StdDevDamper+0x68>
		else {
			newStdDev = (uint32_t)(StdDevLimitHighLight -
									(SNR - StdDevLimitHighLightSNR) *
 800256a:	8a7a      	ldrh	r2, [r7, #18]
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	1ad3      	subs	r3, r2, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8002570:	6a39      	ldr	r1, [r7, #32]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	1a8a      	subs	r2, r1, r2
									(SNR - StdDevLimitHighLightSNR) *
 8002576:	fb03 f202 	mul.w	r2, r3, r2
									(StdDevLimitLowLightSNR - StdDevLimitHighLightSNR));
 800257a:	6839      	ldr	r1, [r7, #0]
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	1acb      	subs	r3, r1, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8002580:	fbb2 f3f3 	udiv	r3, r2, r3
			newStdDev = (uint32_t)(StdDevLimitHighLight -
 8002584:	6a3a      	ldr	r2, [r7, #32]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
		}
	}

	return newStdDev;
 800258a:	697b      	ldr	r3, [r7, #20]
}
 800258c:	4618      	mov	r0, r3
 800258e:	371c      	adds	r7, #28
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
	...

08002598 <_filter_Start>:
								uint16_t m_trueRange_mm,
								uint16_t m_rawRange_mm,
								uint32_t m_rtnSignalRate,
								uint32_t m_rtnAmbientRate,
								uint16_t errorCode)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b0aa      	sub	sp, #168	; 0xa8
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	817b      	strh	r3, [r7, #10]
 80025a6:	4613      	mov	r3, r2
 80025a8:	813b      	strh	r3, [r7, #8]
	int status;
	uint16_t m_newTrueRange_mm = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	#if VL6180x_HAVE_MULTI_READ
	uint8_t MultiReadBuf[8];
	#endif
	uint16_t i;
	uint16_t bypassFilter = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t resetVAVGData = 1;
 80025b6:	2301      	movs	r3, #1
 80025b8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	uint16_t filterErrorCode = NoError;
 80025bc:	2300      	movs	r3, #0
 80025be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t filterErrorCodeOnRangingErrorCode = NoError;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	uint16_t registerValue;

	uint32_t register32BitsValue1;
	uint32_t register32BitsValue2;

	uint16_t ValidDistance = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	uint16_t SuspicuousRangingZone = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

	uint16_t WrapAroundFlag = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t NoWrapAroundFlag = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t NoWrapAroundHighConfidenceFlag = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	uint16_t FlushFilter = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	uint32_t RateChange = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	uint16_t StdDevSamplesMinNeeded = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	uint16_t StdDevSamples = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	uint32_t StdDevDistanceSum = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t StdDevDistanceMean = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t StdDevDistance = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t StdDevRateSum = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t StdDevRateMean = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t StdDevRate = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t StdDevLimitWithTargetMove = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t WrapAroundLowReturnRateLimit;
	uint32_t WrapAroundLowReturnRateLimit2;
	uint32_t WrapAroundLowReturnRateFilterLimit;
	uint32_t WrapAroundHighReturnRateFilterLimit;

	uint32_t MAX_VAVGDiff = 1800;
 800261a:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800261e:	657b      	str	r3, [r7, #84]	; 0x54

	uint8_t u8;//, u8_2;
	uint32_t XTalkCompRate_KCps;
	uint32_t StdDevLimit = 300;
 8002620:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002624:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t MaxOrInvalidDistance =   255*_GetUpscale(dev);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	7e1b      	ldrb	r3, [r3, #24]
 800262a:	461a      	mov	r2, r3
 800262c:	4613      	mov	r3, r2
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* #define MaxOrInvalidDistance  (uint16_t) (255 * 3) */

	/* Check if distance is Valid or not */
	switch (errorCode) {
 8002634:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002638:	3b0c      	subs	r3, #12
 800263a:	2b03      	cmp	r3, #3
 800263c:	d825      	bhi.n	800268a <_filter_Start+0xf2>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <_filter_Start+0xac>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	08002655 	.word	0x08002655
 8002648:	08002663 	.word	0x08002663
 800264c:	08002655 	.word	0x08002655
 8002650:	08002663 	.word	0x08002663
	case Raw_Ranging_Algo_Underflow:
	case Ranging_Algo_Underflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 8002654:	2310      	movs	r3, #16
 8002656:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		ValidDistance = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8002660:	e022      	b.n	80026a8 <_filter_Start+0x110>
	case Raw_Ranging_Algo_Overflow:
	case Ranging_Algo_Overflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 8002662:	2310      	movs	r3, #16
 8002664:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		//m_trueRange_mm = MaxOrInvalidDistance;
		m_trueRange_mm = 200*_GetUpscale(dev);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	7e1b      	ldrb	r3, [r3, #24]
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	0092      	lsls	r2, r2, #2
 8002672:	4413      	add	r3, r2
 8002674:	461a      	mov	r2, r3
 8002676:	0091      	lsls	r1, r2, #2
 8002678:	461a      	mov	r2, r3
 800267a:	460b      	mov	r3, r1
 800267c:	4413      	add	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	817b      	strh	r3, [r7, #10]
		ValidDistance = 1;
 8002682:	2301      	movs	r3, #1
 8002684:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8002688:	e00e      	b.n	80026a8 <_filter_Start+0x110>
	default:
		if (m_rawRange_mm >= MaxOrInvalidDistance) {
 800268a:	893b      	ldrh	r3, [r7, #8]
 800268c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800268e:	429a      	cmp	r2, r3
 8002690:	d806      	bhi.n	80026a0 <_filter_Start+0x108>
			ValidDistance = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
			bypassFilter = 1; /* Bypass the filter in this case as produced distance is not usable (and also the VAVGVal and ZeroVal values) */
 8002698:	2301      	movs	r3, #1
 800269a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
		} else {
			ValidDistance = 1;
		}
		break;
 800269e:	e002      	b.n	80026a6 <_filter_Start+0x10e>
			ValidDistance = 1;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 80026a6:	bf00      	nop
	}
	m_newTrueRange_mm = m_trueRange_mm;
 80026a8:	897b      	ldrh	r3, [r7, #10]
 80026aa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	XTalkCompRate_KCps = VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Update signal rate limits depending on crosstalk */
	SignalRateDMax = (uint32_t)_GetDMaxDataRetSignalAt400mm(dev) ;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026ba:	647b      	str	r3, [r7, #68]	; 0x44
	WrapAroundLowReturnRateLimit = WrapAroundLowReturnRateLimit_ROM  + XTalkCompRate_KCps;
 80026bc:	4b90      	ldr	r3, [pc, #576]	; (8002900 <_filter_Start+0x368>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026c2:	4413      	add	r3, r2
 80026c4:	643b      	str	r3, [r7, #64]	; 0x40
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 80026c6:	4b8f      	ldr	r3, [pc, #572]	; (8002904 <_filter_Start+0x36c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) +
 80026d0:	08db      	lsrs	r3, r3, #3
 80026d2:	4a8d      	ldr	r2, [pc, #564]	; (8002908 <_filter_Start+0x370>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 80026da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026dc:	4413      	add	r3, r2
 80026de:	63fb      	str	r3, [r7, #60]	; 0x3c
									XTalkCompRate_KCps;
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 80026e0:	4b8a      	ldr	r3, [pc, #552]	; (800290c <_filter_Start+0x374>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 80026ea:	08db      	lsrs	r3, r3, #3
 80026ec:	4a86      	ldr	r2, [pc, #536]	; (8002908 <_filter_Start+0x370>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 80026f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026f6:	4413      	add	r3, r2
 80026f8:	63bb      	str	r3, [r7, #56]	; 0x38
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 80026fa:	4b85      	ldr	r3, [pc, #532]	; (8002910 <_filter_Start+0x378>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002700:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 8002704:	08db      	lsrs	r3, r3, #3
 8002706:	4a80      	ldr	r2, [pc, #512]	; (8002908 <_filter_Start+0x370>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	089b      	lsrs	r3, r3, #2
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 800270e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002710:	4413      	add	r3, r2
 8002712:	637b      	str	r3, [r7, #52]	; 0x34


	/* Checks on low range data */
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit)) {
 8002714:	4b7f      	ldr	r3, [pc, #508]	; (8002914 <_filter_Start+0x37c>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	893a      	ldrh	r2, [r7, #8]
 800271a:	429a      	cmp	r2, r3
 800271c:	d209      	bcs.n	8002732 <_filter_Start+0x19a>
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002722:	429a      	cmp	r2, r3
 8002724:	d205      	bcs.n	8002732 <_filter_Start+0x19a>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 8002726:	2310      	movs	r3, #16
 8002728:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		bypassFilter = 1;
 800272c:	2301      	movs	r3, #1
 800272e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit2)) {
 8002732:	4b79      	ldr	r3, [pc, #484]	; (8002918 <_filter_Start+0x380>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	893a      	ldrh	r2, [r7, #8]
 8002738:	429a      	cmp	r2, r3
 800273a:	d209      	bcs.n	8002750 <_filter_Start+0x1b8>
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002740:	429a      	cmp	r2, r3
 8002742:	d205      	bcs.n	8002750 <_filter_Start+0x1b8>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 8002744:	2310      	movs	r3, #16
 8002746:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		bypassFilter = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < (WrapAroundLowReturnRateLimit2 + WrapAroundLowRawRangeLimit2SuspicuousAddedSignalRate))) {
 8002750:	4b71      	ldr	r3, [pc, #452]	; (8002918 <_filter_Start+0x380>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	893a      	ldrh	r2, [r7, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	d209      	bcs.n	800276e <_filter_Start+0x1d6>
 800275a:	4b70      	ldr	r3, [pc, #448]	; (800291c <_filter_Start+0x384>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002760:	4413      	add	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	d202      	bcs.n	800276e <_filter_Start+0x1d6>
		SuspicuousRangingZone = 1; /* On this area, we are in an highly suspicuous wraparound ares, filter parameter will be stengthen */
 8002768:	2301      	movs	r3, #1
 800276a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	}


	/* Checks on Ambient rate level */
	if (m_rtnAmbientRate > WrapAroundMaximumAmbientRateFilterLimit) {
 800276e:	4b6c      	ldr	r3, [pc, #432]	; (8002920 <_filter_Start+0x388>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002776:	429a      	cmp	r2, r3
 8002778:	d905      	bls.n	8002786 <_filter_Start+0x1ee>
		/* Too high ambient rate */
		FlushFilter = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		bypassFilter = 1;
 8002780:	2301      	movs	r3, #1
 8002782:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
    
	/*  Checks on Filter flush */
	if (m_rtnSignalRate < MinReturnRateFilterFlush) {
 8002786:	4b67      	ldr	r3, [pc, #412]	; (8002924 <_filter_Start+0x38c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	d205      	bcs.n	800279c <_filter_Start+0x204>
		/* Completely lost target, so flush the filter */
		FlushFilter = 1;
 8002790:	2301      	movs	r3, #1
 8002792:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		bypassFilter = 1;
 8002796:	2301      	movs	r3, #1
 8002798:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if (_FilterData(LastReturnRates)[0] != 0) {
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d020      	beq.n	80027e6 <_filter_Start+0x24e>
		if (m_rtnSignalRate > _FilterData(LastReturnRates)[0])
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d90d      	bls.n	80027ca <_filter_Start+0x232>
			RateChange = (100 *
						(m_rtnSignalRate - _FilterData(LastReturnRates)[0])) /
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 80027b6:	2264      	movs	r2, #100	; 0x64
 80027b8:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027c8:	e010      	b.n	80027ec <_filter_Start+0x254>
		else
			RateChange = (100 *
						(_FilterData(LastReturnRates)[0] - m_rtnSignalRate)) /
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 80027d2:	2264      	movs	r2, #100	; 0x64
 80027d4:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027e4:	e002      	b.n	80027ec <_filter_Start+0x254>
	} else
		RateChange = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (RateChange > MaxReturnRateChangeFilterFlush) {
 80027ec:	4b4e      	ldr	r3, [pc, #312]	; (8002928 <_filter_Start+0x390>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d902      	bls.n	80027fe <_filter_Start+0x266>
		FlushFilter = 1;
 80027f8:	2301      	movs	r3, #1
 80027fa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	}
	/* TODO optimize filter  using circular buffer */
	if (FlushFilter == 1) {
 80027fe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002802:	2b01      	cmp	r3, #1
 8002804:	d124      	bne.n	8002850 <_filter_Start+0x2b8>
		_FilterData(MeasurementIndex) = 0;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	61da      	str	r2, [r3, #28]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 800280c:	2300      	movs	r3, #0
 800280e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002812:	e015      	b.n	8002840 <_filter_Start+0x2a8>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8002814:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	3310      	adds	r3, #16
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002824:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 8002826:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	330c      	adds	r3, #12
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8002836:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800283a:	3301      	adds	r3, #1
 800283c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002840:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002844:	2b09      	cmp	r3, #9
 8002846:	d9e5      	bls.n	8002814 <_filter_Start+0x27c>
		}
		_FilterData(MeasurementsSinceLastFlush)=0;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	621a      	str	r2, [r3, #32]
 800284e:	e02d      	b.n	80028ac <_filter_Start+0x314>
	} else {
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 8002850:	2309      	movs	r3, #9
 8002852:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002856:	e025      	b.n	80028a4 <_filter_Start+0x30c>
			_FilterData(LastTrueRange)[i] = _FilterData(LastTrueRange)[i - 1];
 8002858:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800285c:	3b01      	subs	r3, #1
 800285e:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	3310      	adds	r3, #16
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	8898      	ldrh	r0, [r3, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	f101 0310 	add.w	r3, r1, #16
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	4602      	mov	r2, r0
 8002878:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = _FilterData(LastReturnRates)[i - 1];
 800287a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800287e:	3b01      	subs	r3, #1
 8002880:	f8b7 009c 	ldrh.w	r0, [r7, #156]	; 0x9c
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	330c      	adds	r3, #12
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	68f9      	ldr	r1, [r7, #12]
 8002890:	f100 030c 	add.w	r3, r0, #12
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	609a      	str	r2, [r3, #8]
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 800289a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800289e:	3b01      	subs	r3, #1
 80028a0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80028a4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1d5      	bne.n	8002858 <_filter_Start+0x2c0>
		}
	}

	if (ValidDistance == 1)
 80028ac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d103      	bne.n	80028bc <_filter_Start+0x324>
		_FilterData(LastTrueRange)[0] = m_trueRange_mm;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	897a      	ldrh	r2, [r7, #10]
 80028b8:	849a      	strh	r2, [r3, #36]	; 0x24
 80028ba:	e003      	b.n	80028c4 <_filter_Start+0x32c>
	else
		_FilterData(LastTrueRange)[0] = FILTER_INVALID_DISTANCE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c2:	849a      	strh	r2, [r3, #36]	; 0x24
	_FilterData(LastReturnRates)[0] = m_rtnSignalRate;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	639a      	str	r2, [r3, #56]	; 0x38
	_FilterData(MeasurementsSinceLastFlush)++;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	621a      	str	r2, [r3, #32]

	/* Check if we need to go through the filter or not */
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <_filter_Start+0x394>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	893a      	ldrh	r2, [r7, #8]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d203      	bcs.n	80028e6 <_filter_Start+0x34e>
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d324      	bcc.n	8002930 <_filter_Start+0x398>
		(m_rtnSignalRate < WrapAroundLowReturnRateFilterLimit)) ||
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <_filter_Start+0x394>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 80028ea:	893a      	ldrh	r2, [r7, #8]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d303      	bcc.n	80028f8 <_filter_Start+0x360>
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d31b      	bcc.n	8002930 <_filter_Start+0x398>
		(m_rtnSignalRate < WrapAroundHighReturnRateFilterLimit))))
		bypassFilter = 1;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80028fe:	e02d      	b.n	800295c <_filter_Start+0x3c4>
 8002900:	080076cc 	.word	0x080076cc
 8002904:	080076d0 	.word	0x080076d0
 8002908:	1a41a41b 	.word	0x1a41a41b
 800290c:	080076d4 	.word	0x080076d4
 8002910:	080076d8 	.word	0x080076d8
 8002914:	080076dc 	.word	0x080076dc
 8002918:	080076de 	.word	0x080076de
 800291c:	080076e0 	.word	0x080076e0
 8002920:	080076e4 	.word	0x080076e4
 8002924:	080076e8 	.word	0x080076e8
 8002928:	080076ec 	.word	0x080076ec
 800292c:	080076f0 	.word	0x080076f0
	else {
		/* if some wraparound filtering due to some ranging error code has been detected, update the filter status and bypass the filter */
		if(filterErrorCodeOnRangingErrorCode!=NoError){
 8002930:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002934:	2b00      	cmp	r3, #0
 8002936:	d011      	beq.n	800295c <_filter_Start+0x3c4>
#ifndef PRESERVE_DEVICE_ERROR_CODE
			filterErrorCode = filterErrorCodeOnRangingErrorCode;
#else
			if((errorCode==Raw_Ranging_Algo_Underflow) || (errorCode==Ranging_Algo_Underflow)) {
 8002938:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800293c:	2b0c      	cmp	r3, #12
 800293e:	d003      	beq.n	8002948 <_filter_Start+0x3b0>
 8002940:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002944:	2b0e      	cmp	r3, #14
 8002946:	d103      	bne.n	8002950 <_filter_Start+0x3b8>
				/* Preserves the error codes except for Raw_Ranging_Algo_Underflow and Ranging_Algo_Underflow */
				filterErrorCode = filterErrorCodeOnRangingErrorCode;
 8002948:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800294c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
			}
#endif
			bypassFilter = 1;
 8002950:	2301      	movs	r3, #1
 8002952:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			resetVAVGData = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
		}
	}

	/* Check which kind of measurement has been made */
	status = VL6180x_RdByte(dev, 0x01AC, &u8);
 800295c:	f107 0317 	add.w	r3, r7, #23
 8002960:	461a      	mov	r2, r3
 8002962:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fe0b 	bl	8003582 <VL6180x_RdByte>
 800296c:	6338      	str	r0, [r7, #48]	; 0x30
	if (status) {
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	2b00      	cmp	r3, #0
 8002972:	f040 82ba 	bne.w	8002eea <_filter_Start+0x952>
		VL6180x_ErrLog("0x01AC rd fail");
		goto done_err;
	}
	registerValue = u8;
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Read data for filtering */
#if VL6180x_HAVE_MULTI_READ
	status = VL6180x_RdMulti(dev, 0x10C, MultiReadBuf, 8); /* read only 8 lsb bits */
 800297a:	f107 0218 	add.w	r2, r7, #24
 800297e:	2308      	movs	r3, #8
 8002980:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fea4 	bl	80036d2 <VL6180x_RdMulti>
 800298a:	6338      	str	r0, [r7, #48]	; 0x30
	if (status) {
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	2b00      	cmp	r3, #0
 8002990:	f040 82ad 	bne.w	8002eee <_filter_Start+0x956>
		VL6180x_ErrLog("0x10C multi rd fail");
		goto done_err;
	}
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 8002994:	7e3b      	ldrb	r3, [r7, #24]
 8002996:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[1] << 16)
 8002998:	7e7b      	ldrb	r3, [r7, #25]
 800299a:	041b      	lsls	r3, r3, #16
 800299c:	441a      	add	r2, r3
			+ ((uint32_t) MultiReadBuf[2] << 8)
 800299e:	7ebb      	ldrb	r3, [r7, #26]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	4413      	add	r3, r2
			+ ((uint32_t) MultiReadBuf[3] << 0);
 80029a4:	7efa      	ldrb	r2, [r7, #27]
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 80029a6:	4413      	add	r3, r2
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 80029aa:	7f3b      	ldrb	r3, [r7, #28]
 80029ac:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[5] << 16)
 80029ae:	7f7b      	ldrb	r3, [r7, #29]
 80029b0:	041b      	lsls	r3, r3, #16
 80029b2:	441a      	add	r2, r3
			+ ((uint32_t) MultiReadBuf[6] << 8)
 80029b4:	7fbb      	ldrb	r3, [r7, #30]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	4413      	add	r3, r2
			+ ((uint32_t) MultiReadBuf[7] << 0);
 80029ba:	7ffa      	ldrb	r2, [r7, #31]
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 80029bc:	4413      	add	r3, r2
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
		goto done_err;
	}
#endif


	if ((FlushFilter == 1) || ((bypassFilter == 1) && (resetVAVGData == 1))) {
 80029c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d007      	beq.n	80029d8 <_filter_Start+0x440>
 80029c8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d121      	bne.n	8002a14 <_filter_Start+0x47c>
 80029d0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d11d      	bne.n	8002a14 <_filter_Start+0x47c>
		if (registerValue != 0x3E) {
 80029d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029da:	2b3e      	cmp	r3, #62	; 0x3e
 80029dc:	d00a      	beq.n	80029f4 <_filter_Start+0x45c>
			status = VL6180x_WrByte(dev, 0x1AC, 0x3E);
 80029de:	223e      	movs	r2, #62	; 0x3e
 80029e0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fcfd 	bl	80033e4 <VL6180x_WrByte>
 80029ea:	6338      	str	r0, [r7, #48]	; 0x30
			if (status) {
 80029ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f040 827f 	bne.w	8002ef2 <_filter_Start+0x95a>
			//	VL6180x_ErrLog("0x0F2 bypass wr fail");
			//	goto done_err;
			//}
		}
		/* Set both Default and NoDelay To same value */
		_FilterData(Default_ZeroVal) = register32BitsValue1;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f8:	665a      	str	r2, [r3, #100]	; 0x64
		_FilterData(Default_VAVGVal) = register32BitsValue2;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fe:	669a      	str	r2, [r3, #104]	; 0x68
		_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a04:	66da      	str	r2, [r3, #108]	; 0x6c
		_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0a:	671a      	str	r2, [r3, #112]	; 0x70

		_FilterData(MeasurementIndex) = 0;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
 8002a12:	e030      	b.n	8002a76 <_filter_Start+0x4de>
	} else {
		if (registerValue == 0x3E) {
 8002a14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a16:	2b3e      	cmp	r3, #62	; 0x3e
 8002a18:	d106      	bne.n	8002a28 <_filter_Start+0x490>
			_FilterData(Default_ZeroVal) = register32BitsValue1;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a1e:	665a      	str	r2, [r3, #100]	; 0x64
			_FilterData(Default_VAVGVal) = register32BitsValue2;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a24:	669a      	str	r2, [r3, #104]	; 0x68
 8002a26:	e005      	b.n	8002a34 <_filter_Start+0x49c>
		} else {
			_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a2c:	66da      	str	r2, [r3, #108]	; 0x6c
			_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a32:	671a      	str	r2, [r3, #112]	; 0x70
		}

		if (_FilterData(MeasurementIndex) % WrapAroundNoDelayCheckPeriod == 0) {
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	4a7f      	ldr	r2, [pc, #508]	; (8002c38 <_filter_Start+0x6a0>)
 8002a3a:	8812      	ldrh	r2, [r2, #0]
 8002a3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a40:	fb01 f202 	mul.w	r2, r1, r2
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <_filter_Start+0x4b8>
			u8 = 0x3C;
 8002a4a:	233c      	movs	r3, #60	; 0x3c
 8002a4c:	75fb      	strb	r3, [r7, #23]
 8002a4e:	e001      	b.n	8002a54 <_filter_Start+0x4bc>
			//u8_2 = 0x05;
		} else {
			u8 = 0x3E;
 8002a50:	233e      	movs	r3, #62	; 0x3e
 8002a52:	75fb      	strb	r3, [r7, #23]
			//u8_2 = 0x01;
		}
		status = VL6180x_WrByte(dev, 0x01AC, u8);
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fcc1 	bl	80033e4 <VL6180x_WrByte>
 8002a62:	6338      	str	r0, [r7, #48]	; 0x30
		if (status) {
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 8245 	bne.w	8002ef6 <_filter_Start+0x95e>
		//status = VL6180x_WrByte(dev, 0x0F2, u8_2);
		//if (status) {
		//	VL6180x_ErrLog("0x0F2  wr fail");
		//	goto done_err;
		//}
		_FilterData(MeasurementIndex)++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	61da      	str	r2, [r3, #28]
	}

	if (bypassFilter == 1) {
 8002a76:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d10d      	bne.n	8002a9a <_filter_Start+0x502>
		/* Do not go through the filter */

		/* Update filter error code */
		_FilterData(filterError) = filterErrorCode;
 8002a7e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	67da      	str	r2, [r3, #124]	; 0x7c

		/* Update reported range */
		if(filterErrorCode==RangingFiltered)
 8002a86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d102      	bne.n	8002a94 <_filter_Start+0x4fc>
			m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 8002a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a90:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

		return m_newTrueRange_mm;
 8002a94:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002a98:	e230      	b.n	8002efc <_filter_Start+0x964>
	}

	/* Computes current VAVGDiff */
	if (_FilterData(Default_VAVGVal) > _FilterData(NoDelay_VAVGVal))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d906      	bls.n	8002ab4 <_filter_Start+0x51c>
		VAVGDiff = _FilterData(Default_VAVGVal) - _FilterData(NoDelay_VAVGVal);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ab2:	e001      	b.n	8002ab8 <_filter_Start+0x520>
	else
		VAVGDiff = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	663b      	str	r3, [r7, #96]	; 0x60
	_FilterData(Previous_VAVGDiff) = VAVGDiff;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002abc:	675a      	str	r2, [r3, #116]	; 0x74

	if(SuspicuousRangingZone==0)
 8002abe:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <_filter_Start+0x536>
		MAX_VAVGDiff = MAX_VAVGDiff_ROM;
 8002ac6:	4b5d      	ldr	r3, [pc, #372]	; (8002c3c <_filter_Start+0x6a4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	657b      	str	r3, [r7, #84]	; 0x54
 8002acc:	e006      	b.n	8002adc <_filter_Start+0x544>
	else
		/* In suspicuous area, strengthen the filter */
		MAX_VAVGDiff = MAX_VAVGDiff_ROM / SuspicuousMAX_VAVGDiffRatio;
 8002ace:	4b5b      	ldr	r3, [pc, #364]	; (8002c3c <_filter_Start+0x6a4>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b5b      	ldr	r3, [pc, #364]	; (8002c40 <_filter_Start+0x6a8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check the VAVGDiff */
	if (_FilterData(Default_ZeroVal) > _FilterData(NoDelay_ZeroVal))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d906      	bls.n	8002af6 <_filter_Start+0x55e>
		IdealVAVGDiff = _FilterData(Default_ZeroVal) - _FilterData(NoDelay_ZeroVal);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002af4:	e005      	b.n	8002b02 <_filter_Start+0x56a>
	else
		IdealVAVGDiff = _FilterData(NoDelay_ZeroVal) - _FilterData(Default_ZeroVal);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (IdealVAVGDiff > MAX_VAVGDiff)
 8002b02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d904      	bls.n	8002b14 <_filter_Start+0x57c>
		MinVAVGDiff = IdealVAVGDiff - MAX_VAVGDiff;
 8002b0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b12:	e001      	b.n	8002b18 <_filter_Start+0x580>
	else
		MinVAVGDiff = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	65bb      	str	r3, [r7, #88]	; 0x58
	MaxVAVGDiff = IdealVAVGDiff + MAX_VAVGDiff;
 8002b18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1c:	4413      	add	r3, r2
 8002b1e:	623b      	str	r3, [r7, #32]
	if (VAVGDiff < MinVAVGDiff || VAVGDiff > MaxVAVGDiff) {
 8002b20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d303      	bcc.n	8002b30 <_filter_Start+0x598>
 8002b28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d906      	bls.n	8002b3e <_filter_Start+0x5a6>
		WrapAroundFlag = 1;
 8002b30:	2301      	movs	r3, #1
 8002b32:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		filterErrorCode = RangingFiltered;
 8002b36:	2310      	movs	r3, #16
 8002b38:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002b3c:	e149      	b.n	8002dd2 <_filter_Start+0x83a>
	} else {
		/* Go through filtering check */

		if(_FilterData(MeasurementIndex)<=1)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d803      	bhi.n	8002b4e <_filter_Start+0x5b6>
			/* On measurement after a bypass, uses an increase number of samples */
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES_AFTER_FLUSH_OR_BYPASS;
 8002b46:	2305      	movs	r3, #5
 8002b48:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002b4c:	e002      	b.n	8002b54 <_filter_Start+0x5bc>
		else
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

		/* StdDevLimit Damper on SNR */
		StdDevLimit = _filter_StdDevDamper(m_rtnAmbientRate, m_rtnSignalRate, StdDevLimitLowLight, StdDevLimitLowLightSNR, StdDevLimitHighLight, StdDevLimitHighLightSNR);
 8002b54:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <_filter_Start+0x6ac>)
 8002b56:	6819      	ldr	r1, [r3, #0]
 8002b58:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <_filter_Start+0x6b0>)
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <_filter_Start+0x6b4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a3b      	ldr	r2, [pc, #236]	; (8002c50 <_filter_Start+0x6b8>)
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	9201      	str	r2, [sp, #4]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	4603      	mov	r3, r0
 8002b6a:	460a      	mov	r2, r1
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8002b72:	f7ff fcd6 	bl	8002522 <_filter_StdDevDamper>
 8002b76:	6538      	str	r0, [r7, #80]	; 0x50

		/* Standard deviations computations */
		StdDevSamples = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		StdDevDistanceSum = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevDistanceMean = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	67bb      	str	r3, [r7, #120]	; 0x78
		StdDevDistance = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	677b      	str	r3, [r7, #116]	; 0x74
		StdDevRateSum = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	673b      	str	r3, [r7, #112]	; 0x70
		StdDevRateMean = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	66fb      	str	r3, [r7, #108]	; 0x6c
		StdDevRate = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002b9c:	e029      	b.n	8002bf2 <_filter_Start+0x65a>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8002b9e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	3310      	adds	r3, #16
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	889b      	ldrh	r3, [r3, #4]
 8002bac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d019      	beq.n	8002be8 <_filter_Start+0x650>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8002bb4:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8002bbe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	3310      	adds	r3, #16
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	889b      	ldrh	r3, [r3, #4]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bd0:	4413      	add	r3, r2
 8002bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8002bd4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	330c      	adds	r3, #12
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002be4:	4413      	add	r3, r2
 8002be6:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002be8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002bec:	3301      	adds	r3, #1
 8002bee:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002bf2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002bf6:	2b09      	cmp	r3, #9
 8002bf8:	d803      	bhi.n	8002c02 <_filter_Start+0x66a>
 8002bfa:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002bfe:	2b05      	cmp	r3, #5
 8002c00:	d9cd      	bls.n	8002b9e <_filter_Start+0x606>
			}
		}
		if (StdDevSamples > 0) {
 8002c02:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <_filter_Start+0x68a>
			StdDevDistanceMean = (uint32_t) (StdDevDistanceSum / StdDevSamples);
 8002c0a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002c0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	67bb      	str	r3, [r7, #120]	; 0x78
			StdDevRateMean = (uint32_t) (StdDevRateSum / StdDevSamples);
 8002c16:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002c1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		/* TODO optimize shorten Std dev in aisngle loop computation using sum of x2 - (sum of x)2 */
		StdDevSamples = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		StdDevDistanceSum = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevRateSum = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002c36:	e056      	b.n	8002ce6 <_filter_Start+0x74e>
 8002c38:	080076f2 	.word	0x080076f2
 8002c3c:	080076f4 	.word	0x080076f4
 8002c40:	080076f8 	.word	0x080076f8
 8002c44:	080076fc 	.word	0x080076fc
 8002c48:	08007700 	.word	0x08007700
 8002c4c:	08007704 	.word	0x08007704
 8002c50:	08007708 	.word	0x08007708
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8002c54:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	3310      	adds	r3, #16
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	889b      	ldrh	r3, [r3, #4]
 8002c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d038      	beq.n	8002cdc <_filter_Start+0x744>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8002c6a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
									(int)(_FilterData(LastTrueRange)[i] -
 8002c74:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	3310      	adds	r3, #16
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4413      	add	r3, r2
 8002c80:	889b      	ldrh	r3, [r3, #4]
 8002c82:	461a      	mov	r2, r3
 8002c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	4619      	mov	r1, r3
											StdDevDistanceMean) *
											(int) (_FilterData(LastTrueRange)[i] -
 8002c8a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	3310      	adds	r3, #16
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	889b      	ldrh	r3, [r3, #4]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c9c:	1ad3      	subs	r3, r2, r3
											StdDevDistanceMean) *
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	461a      	mov	r2, r3
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 8002ca4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ca6:	4413      	add	r3, r2
 8002ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
													StdDevDistanceMean));
				StdDevRateSum = (uint32_t) (StdDevRateSum +
									(int) (_FilterData(LastReturnRates)[i] -
 8002caa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	330c      	adds	r3, #12
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	4619      	mov	r1, r3
											StdDevRateMean) *
											(int) (_FilterData(LastReturnRates)[i] -
 8002cbe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cce:	1ad3      	subs	r3, r2, r3
											StdDevRateMean) *
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	461a      	mov	r2, r3
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 8002cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd8:	4413      	add	r3, r2
 8002cda:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002cdc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002ce6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002cea:	2b09      	cmp	r3, #9
 8002cec:	d803      	bhi.n	8002cf6 <_filter_Start+0x75e>
 8002cee:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	d9ae      	bls.n	8002c54 <_filter_Start+0x6bc>
													StdDevRateMean));
			}
		}
		if (StdDevSamples >= StdDevSamplesMinNeeded) {
 8002cf6:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8002cfa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d30e      	bcc.n	8002d20 <_filter_Start+0x788>
			StdDevDistance = (uint16_t) (StdDevDistanceSum / StdDevSamples);
 8002d02:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d06:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = (uint16_t) (StdDevRateSum / StdDevSamples);
 8002d10:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d1e:	e003      	b.n	8002d28 <_filter_Start+0x790>
		} else {
			StdDevDistance = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		/* Check Return rate standard deviation */
		if (StdDevRate < StdDevMovingTargetStdDevLimit) {
 8002d28:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <_filter_Start+0x96c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d249      	bcs.n	8002dc6 <_filter_Start+0x82e>
			if (StdDevSamples < StdDevSamplesMinNeeded) {
 8002d32:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8002d36:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d203      	bcs.n	8002d46 <_filter_Start+0x7ae>
				//m_newTrueRange_mm = MaxOrInvalidDistance;
				filterErrorCode = RangingFiltered;
 8002d3e:	2310      	movs	r3, #16
 8002d40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002d44:	e045      	b.n	8002dd2 <_filter_Start+0x83a>
			} else {
				/* Check distance standard deviation */
				if (StdDevRate < StdDevMovingTargetReturnRateLimit)
 8002d46:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <_filter_Start+0x970>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d20e      	bcs.n	8002d6e <_filter_Start+0x7d6>
					StdDevLimitWithTargetMove = StdDevLimit +
						(((StdDevMovingTargetStdDevForReturnRateLimit -
 8002d50:	4b6e      	ldr	r3, [pc, #440]	; (8002f0c <_filter_Start+0x974>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d56:	1ad3      	subs	r3, r2, r3
							StdDevLimit) * StdDevRate) /
 8002d58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d5a:	fb03 f202 	mul.w	r2, r3, r2
 8002d5e:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <_filter_Start+0x970>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
					StdDevLimitWithTargetMove = StdDevLimit +
 8002d66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d68:	4413      	add	r3, r2
 8002d6a:	667b      	str	r3, [r7, #100]	; 0x64
 8002d6c:	e002      	b.n	8002d74 <_filter_Start+0x7dc>
							StdDevMovingTargetReturnRateLimit);
				else
					StdDevLimitWithTargetMove = StdDevMovingTargetStdDevForReturnRateLimit;
 8002d6e:	4b67      	ldr	r3, [pc, #412]	; (8002f0c <_filter_Start+0x974>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	667b      	str	r3, [r7, #100]	; 0x64

				if(_FilterData(filterError)==NoError){
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <_filter_Start+0x7f0>
					/* No wrapAround detected yet, so relax constraints on the std dev */
					StdDevLimitWithTargetMove = StdDevLimitWithTargetMove * StdDevNoWrapDetectedMultiplier;
 8002d7c:	4b64      	ldr	r3, [pc, #400]	; (8002f10 <_filter_Start+0x978>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	667b      	str	r3, [r7, #100]	; 0x64
				}

				if (((StdDevDistance * StdDevHighConfidenceSNRLimit) < StdDevLimit) && (StdDevSamples>=FILTER_STDDEV_SAMPLES)) {
 8002d88:	4b62      	ldr	r3, [pc, #392]	; (8002f14 <_filter_Start+0x97c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d907      	bls.n	8002da8 <_filter_Start+0x810>
 8002d98:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d903      	bls.n	8002da8 <_filter_Start+0x810>
					NoWrapAroundHighConfidenceFlag = 1;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002da6:	e014      	b.n	8002dd2 <_filter_Start+0x83a>
				} else {
					if (StdDevDistance < StdDevLimitWithTargetMove) {
 8002da8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d203      	bcs.n	8002db8 <_filter_Start+0x820>
							NoWrapAroundFlag = 1;
 8002db0:	2301      	movs	r3, #1
 8002db2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8002db6:	e00c      	b.n	8002dd2 <_filter_Start+0x83a>
						} else {
						WrapAroundFlag = 1;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
						filterErrorCode = RangingFiltered;
 8002dbe:	2310      	movs	r3, #16
 8002dc0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002dc4:	e005      	b.n	8002dd2 <_filter_Start+0x83a>
					}
				}
			}
		} else {
			/* Target moving too fast */
			WrapAroundFlag = 1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			filterErrorCode = RangingFiltered;
 8002dcc:	2310      	movs	r3, #16
 8002dce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		}
	}

	if (ValidDistance == 0) {
 8002dd2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10d      	bne.n	8002df6 <_filter_Start+0x85e>
		/* In case of invalid distance */
		if (_FilterData(StdFilteredReads) > 0)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d04e      	beq.n	8002e82 <_filter_Start+0x8ea>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) - 1);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002df4:	e045      	b.n	8002e82 <_filter_Start+0x8ea>
	} else {
		if (WrapAroundFlag == 1) {
 8002df6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d116      	bne.n	8002e2c <_filter_Start+0x894>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) +
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002e04:	4b44      	ldr	r3, [pc, #272]	; (8002f18 <_filter_Start+0x980>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	4413      	add	r3, r2
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
											StdFilteredReadsIncrement);
			if (_FilterData(StdFilteredReads) > StdMaxFilteredReads)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002e18:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <_filter_Start+0x984>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d930      	bls.n	8002e82 <_filter_Start+0x8ea>
				_FilterData(StdFilteredReads) = StdMaxFilteredReads;
 8002e20:	4b3e      	ldr	r3, [pc, #248]	; (8002f1c <_filter_Start+0x984>)
 8002e22:	881a      	ldrh	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002e2a:	e02a      	b.n	8002e82 <_filter_Start+0x8ea>
		} else {
			if (NoWrapAroundFlag == 1) {
 8002e2c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d11e      	bne.n	8002e72 <_filter_Start+0x8da>
				if (_FilterData(StdFilteredReads) > 0) {
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d021      	beq.n	8002e82 <_filter_Start+0x8ea>
					filterErrorCode = RangingFiltered;
 8002e3e:	2310      	movs	r3, #16
 8002e40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					if (_FilterData(StdFilteredReads) > StdFilteredReadsDecrement)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002e4a:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <_filter_Start+0x988>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d90a      	bls.n	8002e68 <_filter_Start+0x8d0>
						_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) -
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002e58:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <_filter_Start+0x988>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002e66:	e00c      	b.n	8002e82 <_filter_Start+0x8ea>
														StdFilteredReadsDecrement);
					else
						_FilterData(StdFilteredReads) = 0;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002e70:	e007      	b.n	8002e82 <_filter_Start+0x8ea>
				}
			} else {
				if (NoWrapAroundHighConfidenceFlag == 1) {
 8002e72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d103      	bne.n	8002e82 <_filter_Start+0x8ea>
					_FilterData(StdFilteredReads) = 0;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	}

	/* If we detect a change from no Error to RangingFilteringOnGoing, then it means that
	 * the filter detected a change in te scene, so discard all previous measurements.
	 */
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d121      	bne.n	8002ece <_filter_Start+0x936>
 8002e8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01d      	beq.n	8002ece <_filter_Start+0x936>
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 8002e92:	2301      	movs	r3, #1
 8002e94:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002e98:	e015      	b.n	8002ec6 <_filter_Start+0x92e>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8002e9a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eaa:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 8002eac:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 8002ebc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002ec6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002eca:	2b09      	cmp	r3, #9
 8002ecc:	d9e5      	bls.n	8002e9a <_filter_Start+0x902>
		}
	}

	/* Update filter error code */
	_FilterData(filterError) = filterErrorCode;
 8002ece:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	67da      	str	r2, [r3, #124]	; 0x7c

	/* Update reported range */
	if(filterErrorCode==RangingFiltered)
 8002ed6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d102      	bne.n	8002ee4 <_filter_Start+0x94c>
		m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 8002ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	return m_newTrueRange_mm;
 8002ee4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002ee8:	e008      	b.n	8002efc <_filter_Start+0x964>
		goto done_err;
 8002eea:	bf00      	nop
 8002eec:	e004      	b.n	8002ef8 <_filter_Start+0x960>
		goto done_err;
 8002eee:	bf00      	nop
 8002ef0:	e002      	b.n	8002ef8 <_filter_Start+0x960>
				goto done_err;
 8002ef2:	bf00      	nop
 8002ef4:	e000      	b.n	8002ef8 <_filter_Start+0x960>
			goto done_err;
 8002ef6:	bf00      	nop
done_err:
	return -1;
 8002ef8:	f04f 33ff 	mov.w	r3, #4294967295

#undef MaxOrInvalidDistance
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	37a0      	adds	r7, #160	; 0xa0
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	0800770c 	.word	0x0800770c
 8002f08:	08007710 	.word	0x08007710
 8002f0c:	08007714 	.word	0x08007714
 8002f10:	08007718 	.word	0x08007718
 8002f14:	0800771c 	.word	0x0800771c
 8002f18:	08007720 	.word	0x08007720
 8002f1c:	08007722 	.word	0x08007722
 8002f20:	08007724 	.word	0x08007724

08002f24 <_filter_GetResult>:


static int _filter_GetResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b08b      	sub	sp, #44	; 0x2c
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
	uint32_t m_rawRange_mm = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
	int32_t  FilteredRange;
	const uint8_t scaler = _GetUpscale(dev);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7e1b      	ldrb	r3, [r3, #24]
 8002f36:	75fb      	strb	r3, [r7, #23]
	uint8_t u8;
	int status;

	do {
		status = VL6180x_GetCachedByte(dev, RESULT_RANGE_RAW, &u8);
 8002f38:	f107 030f 	add.w	r3, r7, #15
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2164      	movs	r1, #100	; 0x64
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7fe fe58 	bl	8001bf6 <VL6180x_GetCachedByte>
 8002f46:	61f8      	str	r0, [r7, #28]
		if (status) {
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d133      	bne.n	8002fb6 <_filter_GetResult+0x92>
		    VL6180x_ErrLog("RESULT_RANGE_RAW rd fail");
		    break;
		}
		m_rawRange_mm = u8;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	61bb      	str	r3, [r7, #24]

		FilteredRange = _filter_Start(dev, pRangeData->range_mm, (m_rawRange_mm * scaler), pRangeData->rtnRate, pRangeData->rtnAmbRate, pRangeData->errorStatus);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b299      	uxth	r1, r3
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	b298      	uxth	r0, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	691c      	ldr	r4, [r3, #16]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	6892      	ldr	r2, [r2, #8]
 8002f72:	b292      	uxth	r2, r2
 8002f74:	9201      	str	r2, [sp, #4]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	4623      	mov	r3, r4
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff fb0b 	bl	8002598 <_filter_Start>
 8002f82:	6138      	str	r0, [r7, #16]
		if (FilteredRange < 0) {
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	da03      	bge.n	8002f92 <_filter_GetResult+0x6e>
		    status = -1;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8e:	61fb      	str	r3, [r7, #28]
		    break;
 8002f90:	e012      	b.n	8002fb8 <_filter_GetResult+0x94>
		}
		pRangeData->FilteredData.range_mm = FilteredRange;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	841a      	strh	r2, [r3, #32]
		pRangeData->FilteredData.rawRange_mm = m_rawRange_mm * scaler;
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	845a      	strh	r2, [r3, #34]	; 0x22
		pRangeData->FilteredData.filterError= _FilterData(filterError);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
 8002fb4:	e000      	b.n	8002fb8 <_filter_GetResult+0x94>
		    break;
 8002fb6:	bf00      	nop
	} while (0);
	return status;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3724      	adds	r7, #36	; 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd90      	pop	{r4, r7, pc}

08002fc2 <_GetRateResult>:
#endif /* VL6180x_WRAP_AROUND_FILTER_SUPPORT */

#ifdef VL6180x_HAVE_RATE_DATA

static int _GetRateResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b08c      	sub	sp, #48	; 0x30
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]
	uint32_t m_rtnConvTime = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
	uint32_t m_rtnSignalRate = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t m_rtnAmbientRate = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	623b      	str	r3, [r7, #32]
	uint32_t m_rtnSignalCount = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
	uint32_t m_rtnAmbientCount = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
	uint32_t m_refConvTime = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60bb      	str	r3, [r7, #8]
	uint32_t cRtnSignalCountMax = 0x7FFFFFFF;
 8002fe4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002fe8:	61fb      	str	r3, [r7, #28]
	uint32_t cDllPeriods = 6;
 8002fea:	2306      	movs	r3, #6
 8002fec:	61bb      	str	r3, [r7, #24]
	uint32_t calcConvTime = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c

	int status;

	do {
		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_SIGNAL_COUNT, &m_rtnSignalCount);
 8002ff2:	f107 0310 	add.w	r3, r7, #16
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	216c      	movs	r1, #108	; 0x6c
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe fd8a 	bl	8001b14 <VL6180x_GetCachedDWord>
 8003000:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	d156      	bne.n	80030b6 <_GetRateResult+0xf4>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_SIGNAL_COUNT rd fail");
			break;
		}
		if (m_rtnSignalCount > cRtnSignalCountMax) {
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	429a      	cmp	r2, r3
 800300e:	d201      	bcs.n	8003014 <_GetRateResult+0x52>
			m_rtnSignalCount = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_AMB_COUNT, &m_rtnAmbientCount);
 8003014:	f107 030c 	add.w	r3, r7, #12
 8003018:	461a      	mov	r2, r3
 800301a:	2174      	movs	r1, #116	; 0x74
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7fe fd79 	bl	8001b14 <VL6180x_GetCachedDWord>
 8003022:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	2b00      	cmp	r3, #0
 8003028:	d147      	bne.n	80030ba <_GetRateResult+0xf8>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_AMB_COUNTrd fail");
			break;
		}


		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_CONV_TIME, &m_rtnConvTime);
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	461a      	mov	r2, r3
 8003030:	217c      	movs	r1, #124	; 0x7c
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fe fd6e 	bl	8001b14 <VL6180x_GetCachedDWord>
 8003038:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	d13e      	bne.n	80030be <_GetRateResult+0xfc>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_CONV_TIME rd fail");
			break;
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_REFERENCE_CONV_TIME, &m_refConvTime);
 8003040:	f107 0308 	add.w	r3, r7, #8
 8003044:	461a      	mov	r2, r3
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7fe fd63 	bl	8001b14 <VL6180x_GetCachedDWord>
 800304e:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8003050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003052:	2b00      	cmp	r3, #0
 8003054:	d135      	bne.n	80030c2 <_GetRateResult+0x100>
			VL6180x_ErrLog("RESULT_RANGE_REFERENCE_CONV_TIME rd fail");
			break;
		}

		pRangeData->rtnConvTime = m_rtnConvTime;
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	615a      	str	r2, [r3, #20]
		pRangeData->refConvTime = m_refConvTime;
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	619a      	str	r2, [r3, #24]

		calcConvTime = m_refConvTime;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (m_rtnConvTime > m_refConvTime) {
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	d901      	bls.n	8003072 <_GetRateResult+0xb0>
			calcConvTime = m_rtnConvTime;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if (calcConvTime == 0)
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <_GetRateResult+0xbc>
			calcConvTime = 63000;
 8003078:	f24f 6318 	movw	r3, #63000	; 0xf618
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c

		m_rtnSignalRate = (m_rtnSignalCount * 1000) / calcConvTime;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003084:	fb03 f202 	mul.w	r2, r3, r2
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	fbb2 f3f3 	udiv	r3, r2, r3
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
		m_rtnAmbientRate = (m_rtnAmbientCount * cDllPeriods * 1000) / calcConvTime;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800309c:	fb03 f202 	mul.w	r2, r3, r2
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	623b      	str	r3, [r7, #32]

		pRangeData->rtnRate = m_rtnSignalRate;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	611a      	str	r2, [r3, #16]
		pRangeData->rtnAmbRate = m_rtnAmbientRate;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6a3a      	ldr	r2, [r7, #32]
 80030b2:	60da      	str	r2, [r3, #12]
 80030b4:	e006      	b.n	80030c4 <_GetRateResult+0x102>
			break;
 80030b6:	bf00      	nop
 80030b8:	e004      	b.n	80030c4 <_GetRateResult+0x102>
			break;
 80030ba:	bf00      	nop
 80030bc:	e002      	b.n	80030c4 <_GetRateResult+0x102>
			break;
 80030be:	bf00      	nop
 80030c0:	e000      	b.n	80030c4 <_GetRateResult+0x102>
			break;
 80030c2:	bf00      	nop


	} while (0);
	return status;
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3730      	adds	r7, #48	; 0x30
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <VL6180x_SqrtUint32>:
/*
 * 32 bit integer square root with not so bad precision (integer result) and is quite fast
 * see http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
 */
uint32_t VL6180x_SqrtUint32(uint32_t num)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
	uint32_t res = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
	uint32_t bit = 1 << 30; /* The second-to-top bit is set: 1 << 30 for 32 bits */
 80030da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030de:	60bb      	str	r3, [r7, #8]

	/* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80030e0:	e002      	b.n	80030e8 <VL6180x_SqrtUint32+0x1a>
		bit >>= 2;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d8f8      	bhi.n	80030e2 <VL6180x_SqrtUint32+0x14>

	while (bit != 0) {
 80030f0:	e017      	b.n	8003122 <VL6180x_SqrtUint32+0x54>
		if (num >= res + bit) {
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4413      	add	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d30b      	bcc.n	8003116 <VL6180x_SqrtUint32+0x48>
		    num -= res + bit;
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4413      	add	r3, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	607b      	str	r3, [r7, #4]
		    res = (res >> 1) + bit;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	4413      	add	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e002      	b.n	800311c <VL6180x_SqrtUint32+0x4e>
		} else
		    res >>= 1;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
		bit >>= 2;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e4      	bne.n	80030f2 <VL6180x_SqrtUint32+0x24>
	}
	return res;
 8003128:	68fb      	ldr	r3, [r7, #12]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <_DMax_OneTimeInit>:
#endif


/* DMax one time init */
void _DMax_OneTimeInit(VL6180xDev_t dev)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
	_DMaxData(ambTuningWindowFactor_K) = DEF_AMBIENT_TUNING;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2250      	movs	r2, #80	; 0x50
 8003140:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
	...

08003150 <_DMax_RawValueAtRateKCps>:


static uint32_t _DMax_RawValueAtRateKCps(VL6180xDev_t dev, int32_t rate)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
	uint32_t RawDMax;
	DMaxFix_t retSignalAt400mm;
	uint32_t ambTuningWindowFactor_K;


	ambTuningWindowFactor_K = _DMaxData(ambTuningWindowFactor_K);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003160:	617b      	str	r3, [r7, #20]
	snrLimit_K              = _DMaxData(snrLimit_K);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003168:	613b      	str	r3, [r7, #16]
	retSignalAt400mm        = _DMaxData(retSignalAt400mm);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003170:	60fb      	str	r3, [r7, #12]
	/* 12 to 18 bits Kcps */
	if (rate > 0) {
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	dd2c      	ble.n	80031d2 <_DMax_RawValueAtRateKCps+0x82>
		DMaxSq = 400 * 400 * 1000 / rate - (400 * 400 / 330);
 8003178:	4a1a      	ldr	r2, [pc, #104]	; (80031e4 <_DMax_RawValueAtRateKCps+0x94>)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003180:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003184:	61fb      	str	r3, [r7, #28]
		/* K of (1/RtnAmb -1/330 )=> 30bit- (12-18)bit  => 12-18 bits*/
		if (DMaxSq <= 0) {
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	2b00      	cmp	r3, #0
 800318a:	dc02      	bgt.n	8003192 <_DMax_RawValueAtRateKCps+0x42>
		    RawDMax = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	e022      	b.n	80031d8 <_DMax_RawValueAtRateKCps+0x88>
		} else {
		    /* value can be more 32 bit so base on raneg apply
			 * retSignalAt400mm before or after division to presevr accuracy */
		    if (DMaxSq < (2 << 12)) {
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003198:	da0b      	bge.n	80031b2 <_DMax_RawValueAtRateKCps+0x62>
				DMaxSq = DMaxSq * retSignalAt400mm /
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	4619      	mov	r1, r3
							(snrLimit_K + ambTuningWindowFactor_K);
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	4413      	add	r3, r2
				DMaxSq = DMaxSq * retSignalAt400mm /
 80031aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	e009      	b.n	80031c6 <_DMax_RawValueAtRateKCps+0x76>
				/* max 12 + 12 to 18 -10 => 12-26 bit */
		    } else {
				DMaxSq = DMaxSq / (snrLimit_K + ambTuningWindowFactor_K) * retSignalAt400mm;
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	6939      	ldr	r1, [r7, #16]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	fb02 f303 	mul.w	r3, r2, r3
 80031c4:	61fb      	str	r3, [r7, #28]
				/* 12 to 18 -10 + 12 to 18 *=> 12-26 bit */
		    }
		    RawDMax = VL6180x_SqrtUint32(DMaxSq);
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff80 	bl	80030ce <VL6180x_SqrtUint32>
 80031ce:	61b8      	str	r0, [r7, #24]
 80031d0:	e002      	b.n	80031d8 <_DMax_RawValueAtRateKCps+0x88>
		}
	} else {
		RawDMax = 0x7FFFFFFF; /* bigest possibmle 32bit signed value */
 80031d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80031d6:	61bb      	str	r3, [r7, #24]
	}
	return RawDMax;
 80031d8:	69bb      	ldr	r3, [r7, #24]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	09896800 	.word	0x09896800

080031e8 <_DMax_InitData>:
 *  SYSRANGE_MAX_CONVERGENCE_TIME
 *  SYSRANGE_RANGE_CHECK_ENABLES    mask RANGE_CHECK_RANGE_ENABLE_MASK
 *  range 0xb8-0xbb (0xbb)
 */
static int _DMax_InitData(VL6180xDev_t dev)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	; 0x30
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
	int32_t minSignalNeeded;
	uint8_t SysRangeCheckEn;
	uint8_t snrLimit;
	static const int ROMABLE_DATA MaxConvTimeAdjust = -4;

	warning = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");
	do {
		status = VL6180x_RdByte(dev, 0x02A, &u8);
 80031f4:	f107 0313 	add.w	r3, r7, #19
 80031f8:	461a      	mov	r2, r3
 80031fa:	212a      	movs	r1, #42	; 0x2a
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f9c0 	bl	8003582 <VL6180x_RdByte>
 8003202:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 8095 	bne.w	8003336 <_DMax_InitData+0x14e>
		    VL6180x_ErrLog("Reg 0x02A rd fail");
		    break;
		}

		if (u8 == 0) {
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <_DMax_InitData+0x32>
		    warning = CALIBRATION_WARNING;
 8003212:	2301      	movs	r3, #1
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
		    u8 = 40; /* use a default average value */
 8003216:	2328      	movs	r3, #40	; 0x28
 8003218:	74fb      	strb	r3, [r7, #19]
		}
		Reg2A_KCps = Fix7_2_KCPs(u8); /* convert to KCPs */
 800321a:	7cfb      	ldrb	r3, [r7, #19]
 800321c:	461a      	mov	r2, r3
 800321e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	09db      	lsrs	r3, r3, #7
 8003228:	61fb      	str	r3, [r7, #28]

		status = VL6180x_RdByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, &SysRangeCheckEn);
 800322a:	f107 030a 	add.w	r3, r7, #10
 800322e:	461a      	mov	r2, r3
 8003230:	212d      	movs	r1, #45	; 0x2d
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f9a5 	bl	8003582 <VL6180x_RdByte>
 8003238:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d17c      	bne.n	800333a <_DMax_InitData+0x152>
		    VL6180x_ErrLog("SYSRANGE_RANGE_CHECK_ENABLES rd fail ");
		    break;
		}

		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &MaxConvTime);
 8003240:	f107 030b 	add.w	r3, r7, #11
 8003244:	461a      	mov	r2, r3
 8003246:	211c      	movs	r1, #28
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f99a 	bl	8003582 <VL6180x_RdByte>
 800324e:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d173      	bne.n	800333e <_DMax_InitData+0x156>
		    VL6180x_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail ");
			break;
		}

		status = VL6180x_RdDWord(dev, 0x0B8, &RegB8);
 8003256:	f107 030c 	add.w	r3, r7, #12
 800325a:	461a      	mov	r2, r3
 800325c:	21b8      	movs	r1, #184	; 0xb8
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f9f8 	bl	8003654 <VL6180x_RdDWord>
 8003264:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d16a      	bne.n	8003342 <_DMax_InitData+0x15a>
		    VL6180x_ErrLog("reg 0x0B8 rd fail ");
		    break;
		}

		status = VL6180x_RdByte(dev, SYSRANGE_MAX_AMBIENT_LEVEL_MULT, &snrLimit);
 800326c:	f107 0309 	add.w	r3, r7, #9
 8003270:	461a      	mov	r2, r3
 8003272:	212c      	movs	r1, #44	; 0x2c
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f984 	bl	8003582 <VL6180x_RdByte>
 800327a:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d161      	bne.n	8003346 <_DMax_InitData+0x15e>
		    VL6180x_ErrLog("SYSRANGE_MAX_AMBIENT_LEVEL_MULT rd fail ");
		    break;
		}
		_DMaxData(snrLimit_K) = (int32_t)16 * 1000 / snrLimit;
 8003282:	7a7b      	ldrb	r3, [r7, #9]
 8003284:	461a      	mov	r2, r3
 8003286:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800328a:	fb93 f2f2 	sdiv	r2, r3, r2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		XTalkCompRate_KCps =   VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	61bb      	str	r3, [r7, #24]

		if (Reg2A_KCps >= XTalkCompRate_KCps) {
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d304      	bcc.n	80032ac <_DMax_InitData+0xc4>
		    _DMaxData(retSignalAt400mm) = Reg2A_KCps;
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80032aa:	e003      	b.n	80032b4 <_DMax_InitData+0xcc>
		} else{
		    _DMaxData(retSignalAt400mm) = 0;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			/* Reg2A_K - XTalkCompRate_KCp <0 is invalid */
		}

		/* if xtalk range check is off omit it in snr clipping */
		if (SysRangeCheckEn&RANGE_CHECK_RANGE_ENABLE_MASK) {
 80032b4:	7abb      	ldrb	r3, [r7, #10]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d013      	beq.n	80032e6 <_DMax_InitData+0xfe>
		    status = VL6180x_RdWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &u16);
 80032be:	f107 0310 	add.w	r3, r7, #16
 80032c2:	461a      	mov	r2, r3
 80032c4:	2126      	movs	r1, #38	; 0x26
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f98b 	bl	80035e2 <VL6180x_RdWord>
 80032cc:	62f8      	str	r0, [r7, #44]	; 0x2c
		    if (status) {
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d13a      	bne.n	800334a <_DMax_InitData+0x162>
				VL6180x_ErrLog("SYSRANGE_RANGE_IGNORE_THRESHOLD rd fail ");
				break;
		    }
		    RangeIgnoreThreshold = Fix7_2_KCPs(u16);
 80032d4:	8a3b      	ldrh	r3, [r7, #16]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032dc:	fb02 f303 	mul.w	r3, r2, r3
 80032e0:	09db      	lsrs	r3, r3, #7
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
 80032e4:	e001      	b.n	80032ea <_DMax_InitData+0x102>
		} else{
		    RangeIgnoreThreshold  = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
		}

		minSignalNeeded = (RegB8 * 256) / ((int32_t)MaxConvTime + (int32_t)MaxConvTimeAdjust);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	7afa      	ldrb	r2, [r7, #11]
 80032f0:	4611      	mov	r1, r2
 80032f2:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <_DMax_InitData+0x178>)
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	440a      	add	r2, r1
 80032f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80032fc:	623b      	str	r3, [r7, #32]
		/* KCps 8+8 bit -(1 to 6 bit) => 15-10 bit */
		/* minSignalNeeded = max ( minSignalNeeded,  RangeIgnoreThreshold - XTalkCompRate_KCps) */
		if (minSignalNeeded  <= (int32_t)RangeIgnoreThreshold - (int32_t)XTalkCompRate_KCps)
 80032fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	429a      	cmp	r2, r3
 8003308:	dc03      	bgt.n	8003312 <_DMax_InitData+0x12a>
		    minSignalNeeded  =  RangeIgnoreThreshold - XTalkCompRate_KCps;
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	623b      	str	r3, [r7, #32]

		u32 = (minSignalNeeded*(uint32_t)snrLimit) / 16;
 8003312:	7a7b      	ldrb	r3, [r7, #9]
 8003314:	461a      	mov	r2, r3
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	fb02 f303 	mul.w	r3, r2, r3
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	617b      	str	r3, [r7, #20]
		_DMaxData(ClipSnrLimit) = _DMax_RawValueAtRateKCps(dev, u32);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	4619      	mov	r1, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ff13 	bl	8003150 <_DMax_RawValueAtRateKCps>
 800332a:	4603      	mov	r3, r0
 800332c:	b29a      	uxth	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8003334:	e00a      	b.n	800334c <_DMax_InitData+0x164>
		    break;
 8003336:	bf00      	nop
 8003338:	e008      	b.n	800334c <_DMax_InitData+0x164>
		    break;
 800333a:	bf00      	nop
 800333c:	e006      	b.n	800334c <_DMax_InitData+0x164>
			break;
 800333e:	bf00      	nop
 8003340:	e004      	b.n	800334c <_DMax_InitData+0x164>
		    break;
 8003342:	bf00      	nop
 8003344:	e002      	b.n	800334c <_DMax_InitData+0x164>
		    break;
 8003346:	bf00      	nop
 8003348:	e000      	b.n	800334c <_DMax_InitData+0x164>
				break;
 800334a:	bf00      	nop
		/* clip to dmax to min signal snr limit rate*/
	} while (0);
	if (!status)
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <_DMax_InitData+0x16e>
		status = warning;
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOG_FUNCTION_END(status);
	return status;
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003358:	4618      	mov	r0, r3
 800335a:	3730      	adds	r7, #48	; 0x30
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	08007728 	.word	0x08007728

08003364 <_DMax_Compute>:

static int _DMax_Compute(VL6180xDev_t dev, VL6180x_RangeData_t *pRange)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
	int32_t DMax;
	int scaling;
	uint16_t HwLimitAtScale;
	static const int ROMABLE_DATA rtnAmbLowLimit_KCps = 330 * 1000;

	rtnAmbRate = pRange->rtnAmbRate;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	613b      	str	r3, [r7, #16]
	if (rtnAmbRate  < rtnAmbLowLimit_KCps) {
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <_DMax_Compute+0x78>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4293      	cmp	r3, r2
 800337e:	d224      	bcs.n	80033ca <_DMax_Compute+0x66>
		DMax = _DMax_RawValueAtRateKCps(dev, rtnAmbRate);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff fee3 	bl	8003150 <_DMax_RawValueAtRateKCps>
 800338a:	4603      	mov	r3, r0
 800338c:	617b      	str	r3, [r7, #20]
		scaling = _GetUpscale(dev);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	7e1b      	ldrb	r3, [r3, #24]
 8003392:	60fb      	str	r3, [r7, #12]
		HwLimitAtScale = UpperLimitLookUP[scaling - 1];
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3b01      	subs	r3, #1
 8003398:	4a11      	ldr	r2, [pc, #68]	; (80033e0 <_DMax_Compute+0x7c>)
 800339a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800339e:	817b      	strh	r3, [r7, #10]

		if (DMax > _DMaxData(ClipSnrLimit)) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80033a6:	461a      	mov	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	4293      	cmp	r3, r2
 80033ac:	dd03      	ble.n	80033b6 <_DMax_Compute+0x52>
		    DMax = _DMaxData(ClipSnrLimit);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80033b4:	617b      	str	r3, [r7, #20]
		}
		if (DMax > HwLimitAtScale) {
 80033b6:	897b      	ldrh	r3, [r7, #10]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	dd01      	ble.n	80033c2 <_DMax_Compute+0x5e>
		    DMax = HwLimitAtScale;
 80033be:	897b      	ldrh	r3, [r7, #10]
 80033c0:	617b      	str	r3, [r7, #20]
		}
		pRange->DMax = DMax;
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	61da      	str	r2, [r3, #28]
 80033c8:	e002      	b.n	80033d0 <_DMax_Compute+0x6c>
	} else {
		pRange->DMax = 0;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2200      	movs	r2, #0
 80033ce:	61da      	str	r2, [r3, #28]
	}
	return 0;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	0800772c 	.word	0x0800772c
 80033e0:	080076c4 	.word	0x080076c4

080033e4 <VL6180x_WrByte>:
#else
#error "invalid I2C_BUFFER_CONFIG "
#endif


int VL6180x_WrByte(VL6180xDev_t dev, uint16_t index, uint8_t data){
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	807b      	strh	r3, [r7, #2]
 80033f0:	4613      	mov	r3, r2
 80033f2:	707b      	strb	r3, [r7, #1]
    DECL_I2C_BUFFER
    VL6180x_I2C_USER_VAR

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
 80033f4:	f107 0308 	add.w	r3, r7, #8
 80033f8:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	b29b      	uxth	r3, r3
 8003400:	b2da      	uxtb	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	3301      	adds	r3, #1
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	701a      	strb	r2, [r3, #0]
    buffer[2]=data;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	3302      	adds	r3, #2
 8003414:	787a      	ldrb	r2, [r7, #1]
 8003416:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)3);
 8003418:	2203      	movs	r2, #3
 800341a:	6979      	ldr	r1, [r7, #20]
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f984 	bl	800372a <VL6180x_I2CWrite>
 8003422:	6138      	str	r0, [r7, #16]
    VL6180x_DoneI2CAcces(dev);
    return status;
 8003424:	693b      	ldr	r3, [r7, #16]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <VL6180x_WrWord>:

int VL6180x_WrWord(VL6180xDev_t dev, uint16_t index, uint16_t data){
 800342e:	b580      	push	{r7, lr}
 8003430:	b086      	sub	sp, #24
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	807b      	strh	r3, [r7, #2]
 800343a:	4613      	mov	r3, r2
 800343c:	803b      	strh	r3, [r7, #0]
    uint8_t *buffer;
    VL6180x_I2C_USER_VAR

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,4);
 800343e:	f107 0308 	add.w	r3, r7, #8
 8003442:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 8003444:	887b      	ldrh	r3, [r7, #2]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	b29b      	uxth	r3, r3
 800344a:	b2da      	uxtb	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	3301      	adds	r3, #1
 8003454:	887a      	ldrh	r2, [r7, #2]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>8;
 800345a:	883b      	ldrh	r3, [r7, #0]
 800345c:	0a1b      	lsrs	r3, r3, #8
 800345e:	b29a      	uxth	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3302      	adds	r3, #2
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]
    buffer[3]=data&0xFF;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	3303      	adds	r3, #3
 800346c:	883a      	ldrh	r2, [r7, #0]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)4);
 8003472:	2204      	movs	r2, #4
 8003474:	6979      	ldr	r1, [r7, #20]
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f957 	bl	800372a <VL6180x_I2CWrite>
 800347c:	6138      	str	r0, [r7, #16]
    VL6180x_DoneI2CAcces(dev);
    return status;
 800347e:	693b      	ldr	r3, [r7, #16]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <VL6180x_WrDWord>:

int VL6180x_WrDWord(VL6180xDev_t dev, uint16_t index, uint32_t data){
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	460b      	mov	r3, r1
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	817b      	strh	r3, [r7, #10]
    int  status;
    uint8_t *buffer;


    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,6);
 8003496:	f107 0310 	add.w	r3, r7, #16
 800349a:	61fb      	str	r3, [r7, #28]
    buffer[0]=index>>8;
 800349c:	897b      	ldrh	r3, [r7, #10]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3301      	adds	r3, #1
 80034ac:	897a      	ldrh	r2, [r7, #10]
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>24;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	0e1a      	lsrs	r2, r3, #24
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3302      	adds	r3, #2
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]
    buffer[3]=(data>>16)&0xFF;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0c1a      	lsrs	r2, r3, #16
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3303      	adds	r3, #3
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]
    buffer[4]=(data>>8)&0xFF;;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0a1a      	lsrs	r2, r3, #8
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3304      	adds	r3, #4
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]
    buffer[5]=data&0xFF;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3305      	adds	r3, #5
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	701a      	strb	r2, [r3, #0]
    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)6);
 80034e0:	2206      	movs	r2, #6
 80034e2:	69f9      	ldr	r1, [r7, #28]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f920 	bl	800372a <VL6180x_I2CWrite>
 80034ea:	61b8      	str	r0, [r7, #24]
    VL6180x_DoneI2CAcces(dev);

    return status;
 80034ec:	69bb      	ldr	r3, [r7, #24]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <VL6180x_UpdateByte>:

int VL6180x_UpdateByte(VL6180xDev_t dev, uint16_t index, uint8_t AndData, uint8_t OrData){
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	4608      	mov	r0, r1
 8003500:	4611      	mov	r1, r2
 8003502:	461a      	mov	r2, r3
 8003504:	4603      	mov	r3, r0
 8003506:	807b      	strh	r3, [r7, #2]
 8003508:	460b      	mov	r3, r1
 800350a:	707b      	strb	r3, [r7, #1]
 800350c:	4613      	mov	r3, r2
 800350e:	703b      	strb	r3, [r7, #0]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
 8003510:	f107 0308 	add.w	r3, r7, #8
 8003514:	613b      	str	r3, [r7, #16]
    buffer[0]=index>>8;
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	0a1b      	lsrs	r3, r3, #8
 800351a:	b29b      	uxth	r3, r3
 800351c:	b2da      	uxtb	r2, r3
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	3301      	adds	r3, #1
 8003526:	887a      	ldrh	r2, [r7, #2]
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *)buffer,(uint8_t)2);
 800352c:	2202      	movs	r2, #2
 800352e:	6939      	ldr	r1, [r7, #16]
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f8fa 	bl	800372a <VL6180x_I2CWrite>
 8003536:	6178      	str	r0, [r7, #20]
    if( !status ){
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d11c      	bne.n	8003578 <VL6180x_UpdateByte+0x82>
        /* read data direct onto buffer */
        status=VL6180x_I2CRead(dev, &buffer[2],1);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	3302      	adds	r3, #2
 8003542:	2201      	movs	r2, #1
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f931 	bl	80037ae <VL6180x_I2CRead>
 800354c:	6178      	str	r0, [r7, #20]
        if( !status ){
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <VL6180x_UpdateByte+0x82>
            buffer[2]=(buffer[2]&AndData)|OrData;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	3302      	adds	r3, #2
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	787b      	ldrb	r3, [r7, #1]
 800355c:	4013      	ands	r3, r2
 800355e:	b2d9      	uxtb	r1, r3
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	3302      	adds	r3, #2
 8003564:	783a      	ldrb	r2, [r7, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]
            status=VL6180x_I2CWrite(dev, buffer, (uint8_t)3);
 800356c:	2203      	movs	r2, #3
 800356e:	6939      	ldr	r1, [r7, #16]
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8da 	bl	800372a <VL6180x_I2CWrite>
 8003576:	6178      	str	r0, [r7, #20]
        }
    }

    VL6180x_DoneI2CAcces(dev);

    return status;
 8003578:	697b      	ldr	r3, [r7, #20]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <VL6180x_RdByte>:

int VL6180x_RdByte(VL6180xDev_t dev, uint16_t index, uint8_t *data){
 8003582:	b580      	push	{r7, lr}
 8003584:	b088      	sub	sp, #32
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	460b      	mov	r3, r1
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	817b      	strh	r3, [r7, #10]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);//为buffer分配地址
 8003590:	f107 0310 	add.w	r3, r7, #16
 8003594:	61bb      	str	r3, [r7, #24]
    buffer[0]=index>>8;//将寄存器地址高8位存入buffer[0]
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	0a1b      	lsrs	r3, r3, #8
 800359a:	b29b      	uxth	r3, r3
 800359c:	b2da      	uxtb	r2, r3
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;//将寄存器地址低8位存入buffer[1]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	3301      	adds	r3, #1
 80035a6:	897a      	ldrh	r2, [r7, #10]
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	701a      	strb	r2, [r3, #0]
    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);//向I2C总线发送设备地址及16位寄存器地址
 80035ac:	2202      	movs	r2, #2
 80035ae:	69b9      	ldr	r1, [r7, #24]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f8ba 	bl	800372a <VL6180x_I2CWrite>
 80035b6:	61f8      	str	r0, [r7, #28]
    if( !status ){
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10c      	bne.n	80035d8 <VL6180x_RdByte+0x56>
        status=VL6180x_I2CRead(dev, buffer,1);//读取该寄存器中的值，并将其返回到buffer中
 80035be:	2201      	movs	r2, #1
 80035c0:	69b9      	ldr	r1, [r7, #24]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f8f3 	bl	80037ae <VL6180x_I2CRead>
 80035c8:	61f8      	str	r0, [r7, #28]
        if( !status ){
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d103      	bne.n	80035d8 <VL6180x_RdByte+0x56>
            *data = (uint8_t)buffer[0];//将buffer中的值传给data
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	701a      	strb	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);

    return status;
 80035d8:	69fb      	ldr	r3, [r7, #28]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3720      	adds	r7, #32
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <VL6180x_RdWord>:

int VL6180x_RdWord(VL6180xDev_t dev, uint16_t index, uint16_t *data){
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b088      	sub	sp, #32
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	460b      	mov	r3, r1
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	817b      	strh	r3, [r7, #10]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);
 80035f0:	f107 0310 	add.w	r3, r7, #16
 80035f4:	61bb      	str	r3, [r7, #24]
    buffer[0]=index>>8;
 80035f6:	897b      	ldrh	r3, [r7, #10]
 80035f8:	0a1b      	lsrs	r3, r3, #8
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	3301      	adds	r3, #1
 8003606:	897a      	ldrh	r2, [r7, #10]
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);
 800360c:	2202      	movs	r2, #2
 800360e:	69b9      	ldr	r1, [r7, #24]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f88a 	bl	800372a <VL6180x_I2CWrite>
 8003616:	61f8      	str	r0, [r7, #28]
    if( !status){
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d115      	bne.n	800364a <VL6180x_RdWord+0x68>
        status=VL6180x_I2CRead(dev, buffer,2);
 800361e:	2202      	movs	r2, #2
 8003620:	69b9      	ldr	r1, [r7, #24]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f8c3 	bl	80037ae <VL6180x_I2CRead>
 8003628:	61f8      	str	r0, [r7, #28]
        if( !status ){
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10c      	bne.n	800364a <VL6180x_RdWord+0x68>
            /* VL6180x register are Big endian if cpu is be direct read direct into *data is possible */
            *data=((uint16_t)buffer[0]<<8)|(uint16_t)buffer[1];
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	b21a      	sxth	r2, r3
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	3301      	adds	r3, #1
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b21b      	sxth	r3, r3
 8003640:	4313      	orrs	r3, r2
 8003642:	b21b      	sxth	r3, r3
 8003644:	b29a      	uxth	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	801a      	strh	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 800364a:	69fb      	ldr	r3, [r7, #28]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <VL6180x_RdDWord>:

int  VL6180x_RdDWord(VL6180xDev_t dev, uint16_t index, uint32_t *data){
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	460b      	mov	r3, r1
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	817b      	strh	r3, [r7, #10]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,4);
 8003662:	f107 0310 	add.w	r3, r7, #16
 8003666:	61bb      	str	r3, [r7, #24]

    buffer[0]=index>>8;
 8003668:	897b      	ldrh	r3, [r7, #10]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	b29b      	uxth	r3, r3
 800366e:	b2da      	uxtb	r2, r3
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	3301      	adds	r3, #1
 8003678:	897a      	ldrh	r2, [r7, #10]
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 800367e:	2202      	movs	r2, #2
 8003680:	69b9      	ldr	r1, [r7, #24]
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f851 	bl	800372a <VL6180x_I2CWrite>
 8003688:	61f8      	str	r0, [r7, #28]
    if( !status ){
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11b      	bne.n	80036c8 <VL6180x_RdDWord+0x74>
        status=VL6180x_I2CRead(dev, buffer,4);
 8003690:	2204      	movs	r2, #4
 8003692:	69b9      	ldr	r1, [r7, #24]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f88a 	bl	80037ae <VL6180x_I2CRead>
 800369a:	61f8      	str	r0, [r7, #28]
        if( !status ){
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d112      	bne.n	80036c8 <VL6180x_RdDWord+0x74>
            /* VL6180x register are Big endian if cpu is be direct read direct into data is possible */
            *data=((uint32_t)buffer[0]<<24)|((uint32_t)buffer[1]<<16)|((uint32_t)buffer[2]<<8)|((uint32_t)buffer[3]);
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	061a      	lsls	r2, r3, #24
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	3301      	adds	r3, #1
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	041b      	lsls	r3, r3, #16
 80036b0:	431a      	orrs	r2, r3
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	3302      	adds	r3, #2
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	4313      	orrs	r3, r2
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	3203      	adds	r2, #3
 80036c0:	7812      	ldrb	r2, [r2, #0]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	601a      	str	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 80036c8:	69fb      	ldr	r3, [r7, #28]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <VL6180x_RdMulti>:


int  VL6180x_RdMulti(VL6180xDev_t dev, uint16_t index, uint8_t *data, int nData){
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b088      	sub	sp, #32
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	460b      	mov	r3, r1
 80036e0:	817b      	strh	r3, [r7, #10]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,2);
 80036e2:	f107 0310 	add.w	r3, r7, #16
 80036e6:	61bb      	str	r3, [r7, #24]

    buffer[0]=index>>8;
 80036e8:	897b      	ldrh	r3, [r7, #10]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	3301      	adds	r3, #1
 80036f8:	897a      	ldrh	r2, [r7, #10]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 80036fe:	2202      	movs	r2, #2
 8003700:	69b9      	ldr	r1, [r7, #24]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f811 	bl	800372a <VL6180x_I2CWrite>
 8003708:	61f8      	str	r0, [r7, #28]
    if( !status ){
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d107      	bne.n	8003720 <VL6180x_RdMulti+0x4e>
        status=VL6180x_I2CRead(dev, data, nData);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f848 	bl	80037ae <VL6180x_I2CRead>
 800371e:	61f8      	str	r0, [r7, #28]
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 8003720:	69fb      	ldr	r3, [r7, #28]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <VL6180x_I2CWrite>:
  I2C_Stop();//关闭I2C总线
  return status = 0;
}
#else
int VL6180x_I2CWrite(VL6180xDev_t dev, uint8_t *buff, uint8_t len)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	4613      	mov	r3, r2
 8003736:	71fb      	strb	r3, [r7, #7]
  int status, i;
  I2C_Start();//开启I2C总线
 8003738:	f7fd f9b8 	bl	8000aac <I2C_Start>
  I2C_SendByte(dev->i2c_dev_addr | 0);//发送8位设备地址及LSB的写方向位，实现写功能
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003742:	4618      	mov	r0, r3
 8003744:	f7fd f9ea 	bl	8000b1c <I2C_SendByte>
  if (I2C_WaitAck())//如果从机没有应答
 8003748:	f7fd fa62 	bl	8000c10 <I2C_WaitAck>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <VL6180x_I2CWrite+0x30>
  {
    I2C_Stop();//关闭I2C总线
 8003752:	f7fd f9cb 	bl	8000aec <I2C_Stop>
    return 1;//返回报错标志
 8003756:	2301      	movs	r3, #1
 8003758:	e025      	b.n	80037a6 <VL6180x_I2CWrite+0x7c>
  }
  for (i = 0; i < len; i++)
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	e01b      	b.n	8003798 <VL6180x_I2CWrite+0x6e>
  {
    I2C_SendByte(buff[i]);//发送buff中的各字节
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	4413      	add	r3, r2
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7fd f9d7 	bl	8000b1c <I2C_SendByte>
    if (i == len - 1)//在发送最后一个字节的数据时
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	3b01      	subs	r3, #1
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	429a      	cmp	r2, r3
 8003776:	d109      	bne.n	800378c <VL6180x_I2CWrite+0x62>
    {
      if (I2C_WaitAck())//等待从机应答
 8003778:	f7fd fa4a 	bl	8000c10 <I2C_WaitAck>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <VL6180x_I2CWrite+0x68>
      {
        I2C_Stop();//关闭I2C总线
 8003782:	f7fd f9b3 	bl	8000aec <I2C_Stop>
        status = 1;//返回报错标志
 8003786:	2301      	movs	r3, #1
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e002      	b.n	8003792 <VL6180x_I2CWrite+0x68>
      }
    }
    else
    {
      status = I2C_WaitAck();//返回报错标志
 800378c:	f7fd fa40 	bl	8000c10 <I2C_WaitAck>
 8003790:	6178      	str	r0, [r7, #20]
  for (i = 0; i < len; i++)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	3301      	adds	r3, #1
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	429a      	cmp	r2, r3
 800379e:	dbdf      	blt.n	8003760 <VL6180x_I2CWrite+0x36>
    }
  }
  I2C_Stop();//关闭I2C总线
 80037a0:	f7fd f9a4 	bl	8000aec <I2C_Stop>
  return status;
 80037a4:	697b      	ldr	r3, [r7, #20]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <VL6180x_I2CRead>:

/* VL6180X底层驱动函数：读 */
int VL6180x_I2CRead(VL6180xDev_t dev, uint8_t *buff, uint8_t len)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	4613      	mov	r3, r2
 80037ba:	71fb      	strb	r3, [r7, #7]
  int status, i;
  I2C_Start();//开启I2C总线
 80037bc:	f7fd f976 	bl	8000aac <I2C_Start>
  I2C_SendByte(dev->i2c_dev_addr | 1);//发送8位设备地址及LSB的读方向位，实现读功能
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd f9a6 	bl	8000b1c <I2C_SendByte>
  I2C_WaitAck();//等待从机应答
 80037d0:	f7fd fa1e 	bl	8000c10 <I2C_WaitAck>
  for (i = 0; i < len; i++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e01a      	b.n	8003810 <VL6180x_I2CRead+0x62>
  {
    if (i == len - 1)//在读取最后一个字节的数据时
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	3b01      	subs	r3, #1
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d109      	bne.n	80037f8 <VL6180x_I2CRead+0x4a>
    {
      buff[i] = I2C_ReadByte(0);//读取数据，将其保存于buff[i]，并向从机发送非应答信号，终止数据读取
 80037e4:	2000      	movs	r0, #0
 80037e6:	f7fd f9d9 	bl	8000b9c <I2C_ReadByte>
 80037ea:	4601      	mov	r1, r0
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	4413      	add	r3, r2
 80037f2:	b2ca      	uxtb	r2, r1
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	e008      	b.n	800380a <VL6180x_I2CRead+0x5c>
    }
    else
    {
      buff[i] = I2C_ReadByte(1);//读取数据，将其保存于buff[i]，并向从机发送应答信号，继续读取数据
 80037f8:	2001      	movs	r0, #1
 80037fa:	f7fd f9cf 	bl	8000b9c <I2C_ReadByte>
 80037fe:	4601      	mov	r1, r0
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	4413      	add	r3, r2
 8003806:	b2ca      	uxtb	r2, r1
 8003808:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3301      	adds	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	429a      	cmp	r2, r3
 8003816:	dbe0      	blt.n	80037da <VL6180x_I2CRead+0x2c>
    }
  }
  I2C_Stop();//关闭I2C总线
 8003818:	f7fd f968 	bl	8000aec <I2C_Stop>
  return status = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	693b      	ldr	r3, [r7, #16]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800382c:	480c      	ldr	r0, [pc, #48]	; (8003860 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800382e:	490d      	ldr	r1, [pc, #52]	; (8003864 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003830:	4a0d      	ldr	r2, [pc, #52]	; (8003868 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003834:	e002      	b.n	800383c <LoopCopyDataInit>

08003836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800383a:	3304      	adds	r3, #4

0800383c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800383c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800383e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003840:	d3f9      	bcc.n	8003836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003842:	4a0a      	ldr	r2, [pc, #40]	; (800386c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003844:	4c0a      	ldr	r4, [pc, #40]	; (8003870 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003848:	e001      	b.n	800384e <LoopFillZerobss>

0800384a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800384a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800384c:	3204      	adds	r2, #4

0800384e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800384e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003850:	d3fb      	bcc.n	800384a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003852:	f7fd fea7 	bl	80015a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003856:	f001 f9a7 	bl	8004ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800385a:	f7fd fb29 	bl	8000eb0 <main>
  bx lr
 800385e:	4770      	bx	lr
  ldr r0, =_sdata
 8003860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003864:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003868:	08007b14 	.word	0x08007b14
  ldr r2, =_sbss
 800386c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003870:	20000f94 	.word	0x20000f94

08003874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003874:	e7fe      	b.n	8003874 <ADC1_2_IRQHandler>
	...

08003878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800387c:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <HAL_Init+0x28>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a07      	ldr	r2, [pc, #28]	; (80038a0 <HAL_Init+0x28>)
 8003882:	f043 0310 	orr.w	r3, r3, #16
 8003886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003888:	2003      	movs	r0, #3
 800388a:	f000 f92b 	bl	8003ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800388e:	200f      	movs	r0, #15
 8003890:	f000 f808 	bl	80038a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003894:	f7fd fd20 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40022000 	.word	0x40022000

080038a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_InitTick+0x54>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_InitTick+0x58>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	4619      	mov	r1, r3
 80038b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f935 	bl	8003b32 <HAL_SYSTICK_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e00e      	b.n	80038f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d80a      	bhi.n	80038ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d8:	2200      	movs	r2, #0
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295
 80038e0:	f000 f90b 	bl	8003afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038e4:	4a06      	ldr	r2, [pc, #24]	; (8003900 <HAL_InitTick+0x5c>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e000      	b.n	80038f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000000 	.word	0x20000000
 80038fc:	20000008 	.word	0x20000008
 8003900:	20000004 	.word	0x20000004

08003904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_IncTick+0x1c>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_IncTick+0x20>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4413      	add	r3, r2
 8003914:	4a03      	ldr	r2, [pc, #12]	; (8003924 <HAL_IncTick+0x20>)
 8003916:	6013      	str	r3, [r2, #0]
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	20000008 	.word	0x20000008
 8003924:	20000f80 	.word	0x20000f80

08003928 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return uwTick;
 800392c:	4b02      	ldr	r3, [pc, #8]	; (8003938 <HAL_GetTick+0x10>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	20000f80 	.word	0x20000f80

0800393c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003944:	f7ff fff0 	bl	8003928 <HAL_GetTick>
 8003948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d005      	beq.n	8003962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_Delay+0x44>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003962:	bf00      	nop
 8003964:	f7ff ffe0 	bl	8003928 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	429a      	cmp	r2, r3
 8003972:	d8f7      	bhi.n	8003964 <HAL_Delay+0x28>
  {
  }
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000008 	.word	0x20000008

08003984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039a0:	4013      	ands	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b6:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	60d3      	str	r3, [r2, #12]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d0:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <__NVIC_GetPriorityGrouping+0x18>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	f003 0307 	and.w	r3, r3, #7
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	6039      	str	r1, [r7, #0]
 80039f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	db0a      	blt.n	8003a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	490c      	ldr	r1, [pc, #48]	; (8003a34 <__NVIC_SetPriority+0x4c>)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	0112      	lsls	r2, r2, #4
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a10:	e00a      	b.n	8003a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4908      	ldr	r1, [pc, #32]	; (8003a38 <__NVIC_SetPriority+0x50>)
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	3b04      	subs	r3, #4
 8003a20:	0112      	lsls	r2, r2, #4
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	440b      	add	r3, r1
 8003a26:	761a      	strb	r2, [r3, #24]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	e000e100 	.word	0xe000e100
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	; 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f1c3 0307 	rsb	r3, r3, #7
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	bf28      	it	cs
 8003a5a:	2304      	movcs	r3, #4
 8003a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d902      	bls.n	8003a6c <NVIC_EncodePriority+0x30>
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	3b03      	subs	r3, #3
 8003a6a:	e000      	b.n	8003a6e <NVIC_EncodePriority+0x32>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	f04f 32ff 	mov.w	r2, #4294967295
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43da      	mvns	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	401a      	ands	r2, r3
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a84:	f04f 31ff 	mov.w	r1, #4294967295
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8e:	43d9      	mvns	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a94:	4313      	orrs	r3, r2
         );
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3724      	adds	r7, #36	; 0x24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ab0:	d301      	bcc.n	8003ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00f      	b.n	8003ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ab6:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <SysTick_Config+0x40>)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003abe:	210f      	movs	r1, #15
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	f7ff ff90 	bl	80039e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <SysTick_Config+0x40>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ace:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <SysTick_Config+0x40>)
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	e000e010 	.word	0xe000e010

08003ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff49 	bl	8003984 <__NVIC_SetPriorityGrouping>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	4603      	mov	r3, r0
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
 8003b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b0c:	f7ff ff5e 	bl	80039cc <__NVIC_GetPriorityGrouping>
 8003b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	6978      	ldr	r0, [r7, #20]
 8003b18:	f7ff ff90 	bl	8003a3c <NVIC_EncodePriority>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff5f 	bl	80039e8 <__NVIC_SetPriority>
}
 8003b2a:	bf00      	nop
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ffb0 	bl	8003aa0 <SysTick_Config>
 8003b40:	4603      	mov	r3, r0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b08b      	sub	sp, #44	; 0x2c
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b56:	2300      	movs	r3, #0
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b5e:	e169      	b.n	8003e34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b60:	2201      	movs	r2, #1
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	f040 8158 	bne.w	8003e2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4a9a      	ldr	r2, [pc, #616]	; (8003dec <HAL_GPIO_Init+0x2a0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d05e      	beq.n	8003c46 <HAL_GPIO_Init+0xfa>
 8003b88:	4a98      	ldr	r2, [pc, #608]	; (8003dec <HAL_GPIO_Init+0x2a0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d875      	bhi.n	8003c7a <HAL_GPIO_Init+0x12e>
 8003b8e:	4a98      	ldr	r2, [pc, #608]	; (8003df0 <HAL_GPIO_Init+0x2a4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d058      	beq.n	8003c46 <HAL_GPIO_Init+0xfa>
 8003b94:	4a96      	ldr	r2, [pc, #600]	; (8003df0 <HAL_GPIO_Init+0x2a4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d86f      	bhi.n	8003c7a <HAL_GPIO_Init+0x12e>
 8003b9a:	4a96      	ldr	r2, [pc, #600]	; (8003df4 <HAL_GPIO_Init+0x2a8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d052      	beq.n	8003c46 <HAL_GPIO_Init+0xfa>
 8003ba0:	4a94      	ldr	r2, [pc, #592]	; (8003df4 <HAL_GPIO_Init+0x2a8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d869      	bhi.n	8003c7a <HAL_GPIO_Init+0x12e>
 8003ba6:	4a94      	ldr	r2, [pc, #592]	; (8003df8 <HAL_GPIO_Init+0x2ac>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d04c      	beq.n	8003c46 <HAL_GPIO_Init+0xfa>
 8003bac:	4a92      	ldr	r2, [pc, #584]	; (8003df8 <HAL_GPIO_Init+0x2ac>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d863      	bhi.n	8003c7a <HAL_GPIO_Init+0x12e>
 8003bb2:	4a92      	ldr	r2, [pc, #584]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d046      	beq.n	8003c46 <HAL_GPIO_Init+0xfa>
 8003bb8:	4a90      	ldr	r2, [pc, #576]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d85d      	bhi.n	8003c7a <HAL_GPIO_Init+0x12e>
 8003bbe:	2b12      	cmp	r3, #18
 8003bc0:	d82a      	bhi.n	8003c18 <HAL_GPIO_Init+0xcc>
 8003bc2:	2b12      	cmp	r3, #18
 8003bc4:	d859      	bhi.n	8003c7a <HAL_GPIO_Init+0x12e>
 8003bc6:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_GPIO_Init+0x80>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003c47 	.word	0x08003c47
 8003bd0:	08003c21 	.word	0x08003c21
 8003bd4:	08003c33 	.word	0x08003c33
 8003bd8:	08003c75 	.word	0x08003c75
 8003bdc:	08003c7b 	.word	0x08003c7b
 8003be0:	08003c7b 	.word	0x08003c7b
 8003be4:	08003c7b 	.word	0x08003c7b
 8003be8:	08003c7b 	.word	0x08003c7b
 8003bec:	08003c7b 	.word	0x08003c7b
 8003bf0:	08003c7b 	.word	0x08003c7b
 8003bf4:	08003c7b 	.word	0x08003c7b
 8003bf8:	08003c7b 	.word	0x08003c7b
 8003bfc:	08003c7b 	.word	0x08003c7b
 8003c00:	08003c7b 	.word	0x08003c7b
 8003c04:	08003c7b 	.word	0x08003c7b
 8003c08:	08003c7b 	.word	0x08003c7b
 8003c0c:	08003c7b 	.word	0x08003c7b
 8003c10:	08003c29 	.word	0x08003c29
 8003c14:	08003c3d 	.word	0x08003c3d
 8003c18:	4a79      	ldr	r2, [pc, #484]	; (8003e00 <HAL_GPIO_Init+0x2b4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c1e:	e02c      	b.n	8003c7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	623b      	str	r3, [r7, #32]
          break;
 8003c26:	e029      	b.n	8003c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	623b      	str	r3, [r7, #32]
          break;
 8003c30:	e024      	b.n	8003c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	3308      	adds	r3, #8
 8003c38:	623b      	str	r3, [r7, #32]
          break;
 8003c3a:	e01f      	b.n	8003c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	330c      	adds	r3, #12
 8003c42:	623b      	str	r3, [r7, #32]
          break;
 8003c44:	e01a      	b.n	8003c7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d102      	bne.n	8003c54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c4e:	2304      	movs	r3, #4
 8003c50:	623b      	str	r3, [r7, #32]
          break;
 8003c52:	e013      	b.n	8003c7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d105      	bne.n	8003c68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	611a      	str	r2, [r3, #16]
          break;
 8003c66:	e009      	b.n	8003c7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c68:	2308      	movs	r3, #8
 8003c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	615a      	str	r2, [r3, #20]
          break;
 8003c72:	e003      	b.n	8003c7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c74:	2300      	movs	r3, #0
 8003c76:	623b      	str	r3, [r7, #32]
          break;
 8003c78:	e000      	b.n	8003c7c <HAL_GPIO_Init+0x130>
          break;
 8003c7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2bff      	cmp	r3, #255	; 0xff
 8003c80:	d801      	bhi.n	8003c86 <HAL_GPIO_Init+0x13a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	e001      	b.n	8003c8a <HAL_GPIO_Init+0x13e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2bff      	cmp	r3, #255	; 0xff
 8003c90:	d802      	bhi.n	8003c98 <HAL_GPIO_Init+0x14c>
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	e002      	b.n	8003c9e <HAL_GPIO_Init+0x152>
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	3b08      	subs	r3, #8
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	210f      	movs	r1, #15
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	401a      	ands	r2, r3
 8003cb0:	6a39      	ldr	r1, [r7, #32]
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80b1 	beq.w	8003e2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ccc:	4b4d      	ldr	r3, [pc, #308]	; (8003e04 <HAL_GPIO_Init+0x2b8>)
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	4a4c      	ldr	r2, [pc, #304]	; (8003e04 <HAL_GPIO_Init+0x2b8>)
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	6193      	str	r3, [r2, #24]
 8003cd8:	4b4a      	ldr	r3, [pc, #296]	; (8003e04 <HAL_GPIO_Init+0x2b8>)
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ce4:	4a48      	ldr	r2, [pc, #288]	; (8003e08 <HAL_GPIO_Init+0x2bc>)
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	3302      	adds	r3, #2
 8003cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	220f      	movs	r2, #15
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4013      	ands	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a40      	ldr	r2, [pc, #256]	; (8003e0c <HAL_GPIO_Init+0x2c0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d013      	beq.n	8003d38 <HAL_GPIO_Init+0x1ec>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a3f      	ldr	r2, [pc, #252]	; (8003e10 <HAL_GPIO_Init+0x2c4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00d      	beq.n	8003d34 <HAL_GPIO_Init+0x1e8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3e      	ldr	r2, [pc, #248]	; (8003e14 <HAL_GPIO_Init+0x2c8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <HAL_GPIO_Init+0x1e4>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3d      	ldr	r2, [pc, #244]	; (8003e18 <HAL_GPIO_Init+0x2cc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d101      	bne.n	8003d2c <HAL_GPIO_Init+0x1e0>
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e006      	b.n	8003d3a <HAL_GPIO_Init+0x1ee>
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	e004      	b.n	8003d3a <HAL_GPIO_Init+0x1ee>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e002      	b.n	8003d3a <HAL_GPIO_Init+0x1ee>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <HAL_GPIO_Init+0x1ee>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	f002 0203 	and.w	r2, r2, #3
 8003d40:	0092      	lsls	r2, r2, #2
 8003d42:	4093      	lsls	r3, r2
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d4a:	492f      	ldr	r1, [pc, #188]	; (8003e08 <HAL_GPIO_Init+0x2bc>)
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	089b      	lsrs	r3, r3, #2
 8003d50:	3302      	adds	r3, #2
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d006      	beq.n	8003d72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d64:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	492c      	ldr	r1, [pc, #176]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]
 8003d70:	e006      	b.n	8003d80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d72:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	4928      	ldr	r1, [pc, #160]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d006      	beq.n	8003d9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d8c:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	4922      	ldr	r1, [pc, #136]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
 8003d98:	e006      	b.n	8003da8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d9a:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	491e      	ldr	r1, [pc, #120]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d006      	beq.n	8003dc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	4918      	ldr	r1, [pc, #96]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	608b      	str	r3, [r1, #8]
 8003dc0:	e006      	b.n	8003dd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dc2:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	4914      	ldr	r1, [pc, #80]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d021      	beq.n	8003e20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ddc:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	490e      	ldr	r1, [pc, #56]	; (8003e1c <HAL_GPIO_Init+0x2d0>)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60cb      	str	r3, [r1, #12]
 8003de8:	e021      	b.n	8003e2e <HAL_GPIO_Init+0x2e2>
 8003dea:	bf00      	nop
 8003dec:	10320000 	.word	0x10320000
 8003df0:	10310000 	.word	0x10310000
 8003df4:	10220000 	.word	0x10220000
 8003df8:	10210000 	.word	0x10210000
 8003dfc:	10120000 	.word	0x10120000
 8003e00:	10110000 	.word	0x10110000
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40010800 	.word	0x40010800
 8003e10:	40010c00 	.word	0x40010c00
 8003e14:	40011000 	.word	0x40011000
 8003e18:	40011400 	.word	0x40011400
 8003e1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	4909      	ldr	r1, [pc, #36]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	3301      	adds	r3, #1
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f47f ae8e 	bne.w	8003b60 <HAL_GPIO_Init+0x14>
  }
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	372c      	adds	r7, #44	; 0x2c
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr
 8003e50:	40010400 	.word	0x40010400

08003e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	887b      	ldrh	r3, [r7, #2]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	e001      	b.n	8003e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	807b      	strh	r3, [r7, #2]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e92:	787b      	ldrb	r3, [r7, #1]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e98:	887a      	ldrh	r2, [r7, #2]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e9e:	e003      	b.n	8003ea8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	041a      	lsls	r2, r3, #16
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	611a      	str	r2, [r3, #16]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr
	...

08003eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e272      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8087 	beq.w	8003fe2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ed4:	4b92      	ldr	r3, [pc, #584]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d00c      	beq.n	8003efa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ee0:	4b8f      	ldr	r3, [pc, #572]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d112      	bne.n	8003f12 <HAL_RCC_OscConfig+0x5e>
 8003eec:	4b8c      	ldr	r3, [pc, #560]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef8:	d10b      	bne.n	8003f12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efa:	4b89      	ldr	r3, [pc, #548]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d06c      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x12c>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d168      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e24c      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCC_OscConfig+0x76>
 8003f1c:	4b80      	ldr	r3, [pc, #512]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a7f      	ldr	r2, [pc, #508]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	e02e      	b.n	8003f88 <HAL_RCC_OscConfig+0xd4>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x98>
 8003f32:	4b7b      	ldr	r3, [pc, #492]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a7a      	ldr	r2, [pc, #488]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	4b78      	ldr	r3, [pc, #480]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a77      	ldr	r2, [pc, #476]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e01d      	b.n	8003f88 <HAL_RCC_OscConfig+0xd4>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCC_OscConfig+0xbc>
 8003f56:	4b72      	ldr	r3, [pc, #456]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a71      	ldr	r2, [pc, #452]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b6f      	ldr	r3, [pc, #444]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a6e      	ldr	r2, [pc, #440]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e00b      	b.n	8003f88 <HAL_RCC_OscConfig+0xd4>
 8003f70:	4b6b      	ldr	r3, [pc, #428]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a6a      	ldr	r2, [pc, #424]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b68      	ldr	r3, [pc, #416]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a67      	ldr	r2, [pc, #412]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d013      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7ff fcca 	bl	8003928 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f98:	f7ff fcc6 	bl	8003928 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	; 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e200      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003faa:	4b5d      	ldr	r3, [pc, #372]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0xe4>
 8003fb6:	e014      	b.n	8003fe2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7ff fcb6 	bl	8003928 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc0:	f7ff fcb2 	bl	8003928 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e1ec      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd2:	4b53      	ldr	r3, [pc, #332]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x10c>
 8003fde:	e000      	b.n	8003fe2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d063      	beq.n	80040b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fee:	4b4c      	ldr	r3, [pc, #304]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ffa:	4b49      	ldr	r3, [pc, #292]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	2b08      	cmp	r3, #8
 8004004:	d11c      	bne.n	8004040 <HAL_RCC_OscConfig+0x18c>
 8004006:	4b46      	ldr	r3, [pc, #280]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d116      	bne.n	8004040 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004012:	4b43      	ldr	r3, [pc, #268]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_RCC_OscConfig+0x176>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d001      	beq.n	800402a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e1c0      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402a:	4b3d      	ldr	r3, [pc, #244]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4939      	ldr	r1, [pc, #228]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 800403a:	4313      	orrs	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403e:	e03a      	b.n	80040b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004048:	4b36      	ldr	r3, [pc, #216]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404e:	f7ff fc6b 	bl	8003928 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004056:	f7ff fc67 	bl	8003928 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e1a1      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004068:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004074:	4b2a      	ldr	r3, [pc, #168]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4927      	ldr	r1, [pc, #156]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]
 8004088:	e015      	b.n	80040b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800408a:	4b26      	ldr	r3, [pc, #152]	; (8004124 <HAL_RCC_OscConfig+0x270>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7ff fc4a 	bl	8003928 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004098:	f7ff fc46 	bl	8003928 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e180      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d03a      	beq.n	8004138 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d019      	beq.n	80040fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ca:	4b17      	ldr	r3, [pc, #92]	; (8004128 <HAL_RCC_OscConfig+0x274>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d0:	f7ff fc2a 	bl	8003928 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d8:	f7ff fc26 	bl	8003928 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e160      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ea:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040f6:	2001      	movs	r0, #1
 80040f8:	f000 fad8 	bl	80046ac <RCC_Delay>
 80040fc:	e01c      	b.n	8004138 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <HAL_RCC_OscConfig+0x274>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004104:	f7ff fc10 	bl	8003928 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410a:	e00f      	b.n	800412c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800410c:	f7ff fc0c 	bl	8003928 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d908      	bls.n	800412c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e146      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000
 8004124:	42420000 	.word	0x42420000
 8004128:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412c:	4b92      	ldr	r3, [pc, #584]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e9      	bne.n	800410c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 80a6 	beq.w	8004292 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414a:	4b8b      	ldr	r3, [pc, #556]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10d      	bne.n	8004172 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	4b88      	ldr	r3, [pc, #544]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	4a87      	ldr	r2, [pc, #540]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004160:	61d3      	str	r3, [r2, #28]
 8004162:	4b85      	ldr	r3, [pc, #532]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800416e:	2301      	movs	r3, #1
 8004170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004172:	4b82      	ldr	r3, [pc, #520]	; (800437c <HAL_RCC_OscConfig+0x4c8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d118      	bne.n	80041b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800417e:	4b7f      	ldr	r3, [pc, #508]	; (800437c <HAL_RCC_OscConfig+0x4c8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a7e      	ldr	r2, [pc, #504]	; (800437c <HAL_RCC_OscConfig+0x4c8>)
 8004184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418a:	f7ff fbcd 	bl	8003928 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004192:	f7ff fbc9 	bl	8003928 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b64      	cmp	r3, #100	; 0x64
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e103      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	4b75      	ldr	r3, [pc, #468]	; (800437c <HAL_RCC_OscConfig+0x4c8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d106      	bne.n	80041c6 <HAL_RCC_OscConfig+0x312>
 80041b8:	4b6f      	ldr	r3, [pc, #444]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	4a6e      	ldr	r2, [pc, #440]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6213      	str	r3, [r2, #32]
 80041c4:	e02d      	b.n	8004222 <HAL_RCC_OscConfig+0x36e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x334>
 80041ce:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	4a69      	ldr	r2, [pc, #420]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	6213      	str	r3, [r2, #32]
 80041da:	4b67      	ldr	r3, [pc, #412]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	4a66      	ldr	r2, [pc, #408]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	f023 0304 	bic.w	r3, r3, #4
 80041e4:	6213      	str	r3, [r2, #32]
 80041e6:	e01c      	b.n	8004222 <HAL_RCC_OscConfig+0x36e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b05      	cmp	r3, #5
 80041ee:	d10c      	bne.n	800420a <HAL_RCC_OscConfig+0x356>
 80041f0:	4b61      	ldr	r3, [pc, #388]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	4a60      	ldr	r2, [pc, #384]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	f043 0304 	orr.w	r3, r3, #4
 80041fa:	6213      	str	r3, [r2, #32]
 80041fc:	4b5e      	ldr	r3, [pc, #376]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	4a5d      	ldr	r2, [pc, #372]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	6213      	str	r3, [r2, #32]
 8004208:	e00b      	b.n	8004222 <HAL_RCC_OscConfig+0x36e>
 800420a:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	4a5a      	ldr	r2, [pc, #360]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 8004210:	f023 0301 	bic.w	r3, r3, #1
 8004214:	6213      	str	r3, [r2, #32]
 8004216:	4b58      	ldr	r3, [pc, #352]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	4a57      	ldr	r2, [pc, #348]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 800421c:	f023 0304 	bic.w	r3, r3, #4
 8004220:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d015      	beq.n	8004256 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422a:	f7ff fb7d 	bl	8003928 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004230:	e00a      	b.n	8004248 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004232:	f7ff fb79 	bl	8003928 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e0b1      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004248:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0ee      	beq.n	8004232 <HAL_RCC_OscConfig+0x37e>
 8004254:	e014      	b.n	8004280 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004256:	f7ff fb67 	bl	8003928 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800425c:	e00a      	b.n	8004274 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425e:	f7ff fb63 	bl	8003928 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	f241 3288 	movw	r2, #5000	; 0x1388
 800426c:	4293      	cmp	r3, r2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e09b      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004274:	4b40      	ldr	r3, [pc, #256]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1ee      	bne.n	800425e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004280:	7dfb      	ldrb	r3, [r7, #23]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d105      	bne.n	8004292 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004286:	4b3c      	ldr	r3, [pc, #240]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	4a3b      	ldr	r2, [pc, #236]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 800428c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004290:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8087 	beq.w	80043aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800429c:	4b36      	ldr	r3, [pc, #216]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d061      	beq.n	800436c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d146      	bne.n	800433e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b0:	4b33      	ldr	r3, [pc, #204]	; (8004380 <HAL_RCC_OscConfig+0x4cc>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b6:	f7ff fb37 	bl	8003928 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042be:	f7ff fb33 	bl	8003928 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e06d      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d0:	4b29      	ldr	r3, [pc, #164]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f0      	bne.n	80042be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e4:	d108      	bne.n	80042f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042e6:	4b24      	ldr	r3, [pc, #144]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	4921      	ldr	r1, [pc, #132]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f8:	4b1f      	ldr	r3, [pc, #124]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a19      	ldr	r1, [r3, #32]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	430b      	orrs	r3, r1
 800430a:	491b      	ldr	r1, [pc, #108]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	4313      	orrs	r3, r2
 800430e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCC_OscConfig+0x4cc>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7ff fb07 	bl	8003928 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431e:	f7ff fb03 	bl	8003928 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e03d      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004330:	4b11      	ldr	r3, [pc, #68]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x46a>
 800433c:	e035      	b.n	80043aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_RCC_OscConfig+0x4cc>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7ff faf0 	bl	8003928 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434c:	f7ff faec 	bl	8003928 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e026      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCC_OscConfig+0x4c4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x498>
 800436a:	e01e      	b.n	80043aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d107      	bne.n	8004384 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e019      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
 8004378:	40021000 	.word	0x40021000
 800437c:	40007000 	.word	0x40007000
 8004380:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_OscConfig+0x500>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	429a      	cmp	r2, r3
 8004396:	d106      	bne.n	80043a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d001      	beq.n	80043aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40021000 	.word	0x40021000

080043b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0d0      	b.n	800456e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043cc:	4b6a      	ldr	r3, [pc, #424]	; (8004578 <HAL_RCC_ClockConfig+0x1c0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d910      	bls.n	80043fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043da:	4b67      	ldr	r3, [pc, #412]	; (8004578 <HAL_RCC_ClockConfig+0x1c0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 0207 	bic.w	r2, r3, #7
 80043e2:	4965      	ldr	r1, [pc, #404]	; (8004578 <HAL_RCC_ClockConfig+0x1c0>)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ea:	4b63      	ldr	r3, [pc, #396]	; (8004578 <HAL_RCC_ClockConfig+0x1c0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0b8      	b.n	800456e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004414:	4b59      	ldr	r3, [pc, #356]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	4a58      	ldr	r2, [pc, #352]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800441e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800442c:	4b53      	ldr	r3, [pc, #332]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4a52      	ldr	r2, [pc, #328]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004436:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004438:	4b50      	ldr	r3, [pc, #320]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	494d      	ldr	r1, [pc, #308]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004446:	4313      	orrs	r3, r2
 8004448:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d040      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d107      	bne.n	800446e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	4b47      	ldr	r3, [pc, #284]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d115      	bne.n	8004496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e07f      	b.n	800456e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004476:	4b41      	ldr	r3, [pc, #260]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e073      	b.n	800456e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004486:	4b3d      	ldr	r3, [pc, #244]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e06b      	b.n	800456e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004496:	4b39      	ldr	r3, [pc, #228]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4936      	ldr	r1, [pc, #216]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a8:	f7ff fa3e 	bl	8003928 <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b0:	f7ff fa3a 	bl	8003928 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e053      	b.n	800456e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	4b2d      	ldr	r3, [pc, #180]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 020c 	and.w	r2, r3, #12
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d1eb      	bne.n	80044b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044d8:	4b27      	ldr	r3, [pc, #156]	; (8004578 <HAL_RCC_ClockConfig+0x1c0>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d210      	bcs.n	8004508 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b24      	ldr	r3, [pc, #144]	; (8004578 <HAL_RCC_ClockConfig+0x1c0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 0207 	bic.w	r2, r3, #7
 80044ee:	4922      	ldr	r1, [pc, #136]	; (8004578 <HAL_RCC_ClockConfig+0x1c0>)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f6:	4b20      	ldr	r3, [pc, #128]	; (8004578 <HAL_RCC_ClockConfig+0x1c0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e032      	b.n	800456e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004514:	4b19      	ldr	r3, [pc, #100]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4916      	ldr	r1, [pc, #88]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	490e      	ldr	r1, [pc, #56]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004542:	4313      	orrs	r3, r2
 8004544:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004546:	f000 f821 	bl	800458c <HAL_RCC_GetSysClockFreq>
 800454a:	4602      	mov	r2, r0
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	490a      	ldr	r1, [pc, #40]	; (8004580 <HAL_RCC_ClockConfig+0x1c8>)
 8004558:	5ccb      	ldrb	r3, [r1, r3]
 800455a:	fa22 f303 	lsr.w	r3, r2, r3
 800455e:	4a09      	ldr	r2, [pc, #36]	; (8004584 <HAL_RCC_ClockConfig+0x1cc>)
 8004560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004562:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_RCC_ClockConfig+0x1d0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff f99c 	bl	80038a4 <HAL_InitTick>

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40022000 	.word	0x40022000
 800457c:	40021000 	.word	0x40021000
 8004580:	080076a4 	.word	0x080076a4
 8004584:	20000000 	.word	0x20000000
 8004588:	20000004 	.word	0x20000004

0800458c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800458c:	b490      	push	{r4, r7}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004592:	4b29      	ldr	r3, [pc, #164]	; (8004638 <HAL_RCC_GetSysClockFreq+0xac>)
 8004594:	1d3c      	adds	r4, r7, #4
 8004596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800459c:	f240 2301 	movw	r3, #513	; 0x201
 80045a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	2300      	movs	r3, #0
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045b6:	4b21      	ldr	r3, [pc, #132]	; (800463c <HAL_RCC_GetSysClockFreq+0xb0>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d002      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x40>
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d003      	beq.n	80045d2 <HAL_RCC_GetSysClockFreq+0x46>
 80045ca:	e02b      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045cc:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045ce:	623b      	str	r3, [r7, #32]
      break;
 80045d0:	e02b      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	0c9b      	lsrs	r3, r3, #18
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	3328      	adds	r3, #40	; 0x28
 80045dc:	443b      	add	r3, r7
 80045de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d012      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045ee:	4b13      	ldr	r3, [pc, #76]	; (800463c <HAL_RCC_GetSysClockFreq+0xb0>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	0c5b      	lsrs	r3, r3, #17
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	3328      	adds	r3, #40	; 0x28
 80045fa:	443b      	add	r3, r7
 80045fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004600:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	4a0e      	ldr	r2, [pc, #56]	; (8004640 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004606:	fb03 f202 	mul.w	r2, r3, r2
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
 8004612:	e004      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	4a0b      	ldr	r2, [pc, #44]	; (8004644 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004618:	fb02 f303 	mul.w	r3, r2, r3
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	623b      	str	r3, [r7, #32]
      break;
 8004622:	e002      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004626:	623b      	str	r3, [r7, #32]
      break;
 8004628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462a:	6a3b      	ldr	r3, [r7, #32]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3728      	adds	r7, #40	; 0x28
 8004630:	46bd      	mov	sp, r7
 8004632:	bc90      	pop	{r4, r7}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	08007694 	.word	0x08007694
 800463c:	40021000 	.word	0x40021000
 8004640:	007a1200 	.word	0x007a1200
 8004644:	003d0900 	.word	0x003d0900

08004648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800464c:	4b02      	ldr	r3, [pc, #8]	; (8004658 <HAL_RCC_GetHCLKFreq+0x10>)
 800464e:	681b      	ldr	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	20000000 	.word	0x20000000

0800465c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004660:	f7ff fff2 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	0a1b      	lsrs	r3, r3, #8
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4903      	ldr	r1, [pc, #12]	; (8004680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40021000 	.word	0x40021000
 8004680:	080076b4 	.word	0x080076b4

08004684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004688:	f7ff ffde 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	0adb      	lsrs	r3, r3, #11
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4903      	ldr	r1, [pc, #12]	; (80046a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800469a:	5ccb      	ldrb	r3, [r1, r3]
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000
 80046a8:	080076b4 	.word	0x080076b4

080046ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <RCC_Delay+0x34>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a0a      	ldr	r2, [pc, #40]	; (80046e4 <RCC_Delay+0x38>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	0a5b      	lsrs	r3, r3, #9
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046c8:	bf00      	nop
  }
  while (Delay --);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1e5a      	subs	r2, r3, #1
 80046ce:	60fa      	str	r2, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1f9      	bne.n	80046c8 <RCC_Delay+0x1c>
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	20000000 	.word	0x20000000
 80046e4:	10624dd3 	.word	0x10624dd3

080046e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e03f      	b.n	800477a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fc fe14 	bl	800133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	; 0x24
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800472a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f9a7 	bl	8004a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695a      	ldr	r2, [r3, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b08a      	sub	sp, #40	; 0x28
 8004786:	af02      	add	r7, sp, #8
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	603b      	str	r3, [r7, #0]
 800478e:	4613      	mov	r3, r2
 8004790:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d17c      	bne.n	800489c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_UART_Transmit+0x2c>
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e075      	b.n	800489e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Transmit+0x3e>
 80047bc:	2302      	movs	r3, #2
 80047be:	e06e      	b.n	800489e <HAL_UART_Transmit+0x11c>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2221      	movs	r2, #33	; 0x21
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047d6:	f7ff f8a7 	bl	8003928 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f0:	d108      	bne.n	8004804 <HAL_UART_Transmit+0x82>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	e003      	b.n	800480c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004814:	e02a      	b.n	800486c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	2180      	movs	r1, #128	; 0x80
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f8e2 	bl	80049ea <UART_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e036      	b.n	800489e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	3302      	adds	r3, #2
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e007      	b.n	800485e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1cf      	bne.n	8004816 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	2140      	movs	r1, #64	; 0x40
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f8b2 	bl	80049ea <UART_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e006      	b.n	800489e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e000      	b.n	800489e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
  }
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3720      	adds	r7, #32
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b08a      	sub	sp, #40	; 0x28
 80048aa:	af02      	add	r7, sp, #8
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	4613      	mov	r3, r2
 80048b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	f040 808c 	bne.w	80049e0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_UART_Receive+0x2e>
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e084      	b.n	80049e2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Receive+0x40>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e07d      	b.n	80049e2 <HAL_UART_Receive+0x13c>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2222      	movs	r2, #34	; 0x22
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004902:	f7ff f811 	bl	8003928 <HAL_GetTick>
 8004906:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	88fa      	ldrh	r2, [r7, #6]
 800490c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491c:	d108      	bne.n	8004930 <HAL_UART_Receive+0x8a>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d104      	bne.n	8004930 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	e003      	b.n	8004938 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004934:	2300      	movs	r3, #0
 8004936:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004940:	e043      	b.n	80049ca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2200      	movs	r2, #0
 800494a:	2120      	movs	r1, #32
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f84c 	bl	80049ea <UART_WaitOnFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e042      	b.n	80049e2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10c      	bne.n	800497c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	b29b      	uxth	r3, r3
 800496a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496e:	b29a      	uxth	r2, r3
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	3302      	adds	r3, #2
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	e01f      	b.n	80049bc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004984:	d007      	beq.n	8004996 <HAL_UART_Receive+0xf0>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <HAL_UART_Receive+0xfe>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e008      	b.n	80049b6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	3301      	adds	r3, #1
 80049ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1b6      	bne.n	8004942 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	e000      	b.n	80049e2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80049e0:	2302      	movs	r3, #2
  }
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	4613      	mov	r3, r2
 80049f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fa:	e02c      	b.n	8004a56 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d028      	beq.n	8004a56 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a0a:	f7fe ff8d 	bl	8003928 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d21d      	bcs.n	8004a56 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a28:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695a      	ldr	r2, [r3, #20]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0201 	bic.w	r2, r2, #1
 8004a38:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e00f      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	bf0c      	ite	eq
 8004a66:	2301      	moveq	r3, #1
 8004a68:	2300      	movne	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d0c3      	beq.n	80049fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004aba:	f023 030c 	bic.w	r3, r3, #12
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2c      	ldr	r2, [pc, #176]	; (8004b94 <UART_SetConfig+0x114>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d103      	bne.n	8004af0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ae8:	f7ff fdcc 	bl	8004684 <HAL_RCC_GetPCLK2Freq>
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	e002      	b.n	8004af6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004af0:	f7ff fdb4 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 8004af4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009a      	lsls	r2, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <UART_SetConfig+0x118>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	0119      	lsls	r1, r3, #4
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009a      	lsls	r2, r3, #2
 8004b20:	441a      	add	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <UART_SetConfig+0x118>)
 8004b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	2064      	movs	r0, #100	; 0x64
 8004b36:	fb00 f303 	mul.w	r3, r0, r3
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	3332      	adds	r3, #50	; 0x32
 8004b40:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <UART_SetConfig+0x118>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b4c:	4419      	add	r1, r3
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009a      	lsls	r2, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b64:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <UART_SetConfig+0x118>)
 8004b66:	fba3 0302 	umull	r0, r3, r3, r2
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	2064      	movs	r0, #100	; 0x64
 8004b6e:	fb00 f303 	mul.w	r3, r0, r3
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	3332      	adds	r3, #50	; 0x32
 8004b78:	4a07      	ldr	r2, [pc, #28]	; (8004b98 <UART_SetConfig+0x118>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	f003 020f 	and.w	r2, r3, #15
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	440a      	add	r2, r1
 8004b8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40013800 	.word	0x40013800
 8004b98:	51eb851f 	.word	0x51eb851f

08004b9c <__errno>:
 8004b9c:	4b01      	ldr	r3, [pc, #4]	; (8004ba4 <__errno+0x8>)
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	2000000c 	.word	0x2000000c

08004ba8 <__libc_init_array>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	2600      	movs	r6, #0
 8004bac:	4d0c      	ldr	r5, [pc, #48]	; (8004be0 <__libc_init_array+0x38>)
 8004bae:	4c0d      	ldr	r4, [pc, #52]	; (8004be4 <__libc_init_array+0x3c>)
 8004bb0:	1b64      	subs	r4, r4, r5
 8004bb2:	10a4      	asrs	r4, r4, #2
 8004bb4:	42a6      	cmp	r6, r4
 8004bb6:	d109      	bne.n	8004bcc <__libc_init_array+0x24>
 8004bb8:	f002 fd46 	bl	8007648 <_init>
 8004bbc:	2600      	movs	r6, #0
 8004bbe:	4d0a      	ldr	r5, [pc, #40]	; (8004be8 <__libc_init_array+0x40>)
 8004bc0:	4c0a      	ldr	r4, [pc, #40]	; (8004bec <__libc_init_array+0x44>)
 8004bc2:	1b64      	subs	r4, r4, r5
 8004bc4:	10a4      	asrs	r4, r4, #2
 8004bc6:	42a6      	cmp	r6, r4
 8004bc8:	d105      	bne.n	8004bd6 <__libc_init_array+0x2e>
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd0:	4798      	blx	r3
 8004bd2:	3601      	adds	r6, #1
 8004bd4:	e7ee      	b.n	8004bb4 <__libc_init_array+0xc>
 8004bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bda:	4798      	blx	r3
 8004bdc:	3601      	adds	r6, #1
 8004bde:	e7f2      	b.n	8004bc6 <__libc_init_array+0x1e>
 8004be0:	08007b0c 	.word	0x08007b0c
 8004be4:	08007b0c 	.word	0x08007b0c
 8004be8:	08007b0c 	.word	0x08007b0c
 8004bec:	08007b10 	.word	0x08007b10

08004bf0 <memset>:
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	4402      	add	r2, r0
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d100      	bne.n	8004bfa <memset+0xa>
 8004bf8:	4770      	bx	lr
 8004bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004bfe:	e7f9      	b.n	8004bf4 <memset+0x4>

08004c00 <__cvt>:
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c06:	461f      	mov	r7, r3
 8004c08:	bfbb      	ittet	lt
 8004c0a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004c0e:	461f      	movlt	r7, r3
 8004c10:	2300      	movge	r3, #0
 8004c12:	232d      	movlt	r3, #45	; 0x2d
 8004c14:	b088      	sub	sp, #32
 8004c16:	4614      	mov	r4, r2
 8004c18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c1a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004c1c:	7013      	strb	r3, [r2, #0]
 8004c1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c20:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004c24:	f023 0820 	bic.w	r8, r3, #32
 8004c28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c2c:	d005      	beq.n	8004c3a <__cvt+0x3a>
 8004c2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c32:	d100      	bne.n	8004c36 <__cvt+0x36>
 8004c34:	3501      	adds	r5, #1
 8004c36:	2302      	movs	r3, #2
 8004c38:	e000      	b.n	8004c3c <__cvt+0x3c>
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	aa07      	add	r2, sp, #28
 8004c3e:	9204      	str	r2, [sp, #16]
 8004c40:	aa06      	add	r2, sp, #24
 8004c42:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004c46:	e9cd 3500 	strd	r3, r5, [sp]
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	463b      	mov	r3, r7
 8004c4e:	f000 fcdb 	bl	8005608 <_dtoa_r>
 8004c52:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c56:	4606      	mov	r6, r0
 8004c58:	d102      	bne.n	8004c60 <__cvt+0x60>
 8004c5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c5c:	07db      	lsls	r3, r3, #31
 8004c5e:	d522      	bpl.n	8004ca6 <__cvt+0xa6>
 8004c60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c64:	eb06 0905 	add.w	r9, r6, r5
 8004c68:	d110      	bne.n	8004c8c <__cvt+0x8c>
 8004c6a:	7833      	ldrb	r3, [r6, #0]
 8004c6c:	2b30      	cmp	r3, #48	; 0x30
 8004c6e:	d10a      	bne.n	8004c86 <__cvt+0x86>
 8004c70:	2200      	movs	r2, #0
 8004c72:	2300      	movs	r3, #0
 8004c74:	4620      	mov	r0, r4
 8004c76:	4639      	mov	r1, r7
 8004c78:	f7fb fe96 	bl	80009a8 <__aeabi_dcmpeq>
 8004c7c:	b918      	cbnz	r0, 8004c86 <__cvt+0x86>
 8004c7e:	f1c5 0501 	rsb	r5, r5, #1
 8004c82:	f8ca 5000 	str.w	r5, [sl]
 8004c86:	f8da 3000 	ldr.w	r3, [sl]
 8004c8a:	4499      	add	r9, r3
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2300      	movs	r3, #0
 8004c90:	4620      	mov	r0, r4
 8004c92:	4639      	mov	r1, r7
 8004c94:	f7fb fe88 	bl	80009a8 <__aeabi_dcmpeq>
 8004c98:	b108      	cbz	r0, 8004c9e <__cvt+0x9e>
 8004c9a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004c9e:	2230      	movs	r2, #48	; 0x30
 8004ca0:	9b07      	ldr	r3, [sp, #28]
 8004ca2:	454b      	cmp	r3, r9
 8004ca4:	d307      	bcc.n	8004cb6 <__cvt+0xb6>
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	9b07      	ldr	r3, [sp, #28]
 8004caa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004cac:	1b9b      	subs	r3, r3, r6
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	b008      	add	sp, #32
 8004cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb6:	1c59      	adds	r1, r3, #1
 8004cb8:	9107      	str	r1, [sp, #28]
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e7f0      	b.n	8004ca0 <__cvt+0xa0>

08004cbe <__exponent>:
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cc2:	2900      	cmp	r1, #0
 8004cc4:	f803 2b02 	strb.w	r2, [r3], #2
 8004cc8:	bfb6      	itet	lt
 8004cca:	222d      	movlt	r2, #45	; 0x2d
 8004ccc:	222b      	movge	r2, #43	; 0x2b
 8004cce:	4249      	neglt	r1, r1
 8004cd0:	2909      	cmp	r1, #9
 8004cd2:	7042      	strb	r2, [r0, #1]
 8004cd4:	dd2b      	ble.n	8004d2e <__exponent+0x70>
 8004cd6:	f10d 0407 	add.w	r4, sp, #7
 8004cda:	46a4      	mov	ip, r4
 8004cdc:	270a      	movs	r7, #10
 8004cde:	fb91 f6f7 	sdiv	r6, r1, r7
 8004ce2:	460a      	mov	r2, r1
 8004ce4:	46a6      	mov	lr, r4
 8004ce6:	fb07 1516 	mls	r5, r7, r6, r1
 8004cea:	2a63      	cmp	r2, #99	; 0x63
 8004cec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	f104 34ff 	add.w	r4, r4, #4294967295
 8004cf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004cfa:	dcf0      	bgt.n	8004cde <__exponent+0x20>
 8004cfc:	3130      	adds	r1, #48	; 0x30
 8004cfe:	f1ae 0502 	sub.w	r5, lr, #2
 8004d02:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d06:	4629      	mov	r1, r5
 8004d08:	1c44      	adds	r4, r0, #1
 8004d0a:	4561      	cmp	r1, ip
 8004d0c:	d30a      	bcc.n	8004d24 <__exponent+0x66>
 8004d0e:	f10d 0209 	add.w	r2, sp, #9
 8004d12:	eba2 020e 	sub.w	r2, r2, lr
 8004d16:	4565      	cmp	r5, ip
 8004d18:	bf88      	it	hi
 8004d1a:	2200      	movhi	r2, #0
 8004d1c:	4413      	add	r3, r2
 8004d1e:	1a18      	subs	r0, r3, r0
 8004d20:	b003      	add	sp, #12
 8004d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d28:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d2c:	e7ed      	b.n	8004d0a <__exponent+0x4c>
 8004d2e:	2330      	movs	r3, #48	; 0x30
 8004d30:	3130      	adds	r1, #48	; 0x30
 8004d32:	7083      	strb	r3, [r0, #2]
 8004d34:	70c1      	strb	r1, [r0, #3]
 8004d36:	1d03      	adds	r3, r0, #4
 8004d38:	e7f1      	b.n	8004d1e <__exponent+0x60>
	...

08004d3c <_printf_float>:
 8004d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d40:	b091      	sub	sp, #68	; 0x44
 8004d42:	460c      	mov	r4, r1
 8004d44:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004d48:	4616      	mov	r6, r2
 8004d4a:	461f      	mov	r7, r3
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	f001 fb3f 	bl	80063d0 <_localeconv_r>
 8004d52:	6803      	ldr	r3, [r0, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	9309      	str	r3, [sp, #36]	; 0x24
 8004d58:	f7fb f9fa 	bl	8000150 <strlen>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	930e      	str	r3, [sp, #56]	; 0x38
 8004d60:	f8d8 3000 	ldr.w	r3, [r8]
 8004d64:	900a      	str	r0, [sp, #40]	; 0x28
 8004d66:	3307      	adds	r3, #7
 8004d68:	f023 0307 	bic.w	r3, r3, #7
 8004d6c:	f103 0208 	add.w	r2, r3, #8
 8004d70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004d74:	f8d4 b000 	ldr.w	fp, [r4]
 8004d78:	f8c8 2000 	str.w	r2, [r8]
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d84:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004d88:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004d8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d92:	4640      	mov	r0, r8
 8004d94:	4b9c      	ldr	r3, [pc, #624]	; (8005008 <_printf_float+0x2cc>)
 8004d96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d98:	f7fb fe38 	bl	8000a0c <__aeabi_dcmpun>
 8004d9c:	bb70      	cbnz	r0, 8004dfc <_printf_float+0xc0>
 8004d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004da2:	4640      	mov	r0, r8
 8004da4:	4b98      	ldr	r3, [pc, #608]	; (8005008 <_printf_float+0x2cc>)
 8004da6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004da8:	f7fb fe12 	bl	80009d0 <__aeabi_dcmple>
 8004dac:	bb30      	cbnz	r0, 8004dfc <_printf_float+0xc0>
 8004dae:	2200      	movs	r2, #0
 8004db0:	2300      	movs	r3, #0
 8004db2:	4640      	mov	r0, r8
 8004db4:	4651      	mov	r1, sl
 8004db6:	f7fb fe01 	bl	80009bc <__aeabi_dcmplt>
 8004dba:	b110      	cbz	r0, 8004dc2 <_printf_float+0x86>
 8004dbc:	232d      	movs	r3, #45	; 0x2d
 8004dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dc2:	4b92      	ldr	r3, [pc, #584]	; (800500c <_printf_float+0x2d0>)
 8004dc4:	4892      	ldr	r0, [pc, #584]	; (8005010 <_printf_float+0x2d4>)
 8004dc6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004dca:	bf94      	ite	ls
 8004dcc:	4698      	movls	r8, r3
 8004dce:	4680      	movhi	r8, r0
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	f04f 0a00 	mov.w	sl, #0
 8004dd6:	6123      	str	r3, [r4, #16]
 8004dd8:	f02b 0304 	bic.w	r3, fp, #4
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	4633      	mov	r3, r6
 8004de0:	4621      	mov	r1, r4
 8004de2:	4628      	mov	r0, r5
 8004de4:	9700      	str	r7, [sp, #0]
 8004de6:	aa0f      	add	r2, sp, #60	; 0x3c
 8004de8:	f000 f9d4 	bl	8005194 <_printf_common>
 8004dec:	3001      	adds	r0, #1
 8004dee:	f040 8090 	bne.w	8004f12 <_printf_float+0x1d6>
 8004df2:	f04f 30ff 	mov.w	r0, #4294967295
 8004df6:	b011      	add	sp, #68	; 0x44
 8004df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	4653      	mov	r3, sl
 8004e00:	4640      	mov	r0, r8
 8004e02:	4651      	mov	r1, sl
 8004e04:	f7fb fe02 	bl	8000a0c <__aeabi_dcmpun>
 8004e08:	b148      	cbz	r0, 8004e1e <_printf_float+0xe2>
 8004e0a:	f1ba 0f00 	cmp.w	sl, #0
 8004e0e:	bfb8      	it	lt
 8004e10:	232d      	movlt	r3, #45	; 0x2d
 8004e12:	4880      	ldr	r0, [pc, #512]	; (8005014 <_printf_float+0x2d8>)
 8004e14:	bfb8      	it	lt
 8004e16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e1a:	4b7f      	ldr	r3, [pc, #508]	; (8005018 <_printf_float+0x2dc>)
 8004e1c:	e7d3      	b.n	8004dc6 <_printf_float+0x8a>
 8004e1e:	6863      	ldr	r3, [r4, #4]
 8004e20:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	d142      	bne.n	8004eae <_printf_float+0x172>
 8004e28:	2306      	movs	r3, #6
 8004e2a:	6063      	str	r3, [r4, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	9206      	str	r2, [sp, #24]
 8004e30:	aa0e      	add	r2, sp, #56	; 0x38
 8004e32:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004e36:	aa0d      	add	r2, sp, #52	; 0x34
 8004e38:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004e3c:	9203      	str	r2, [sp, #12]
 8004e3e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004e42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	6863      	ldr	r3, [r4, #4]
 8004e4a:	4642      	mov	r2, r8
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	4628      	mov	r0, r5
 8004e50:	4653      	mov	r3, sl
 8004e52:	910b      	str	r1, [sp, #44]	; 0x2c
 8004e54:	f7ff fed4 	bl	8004c00 <__cvt>
 8004e58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e5a:	4680      	mov	r8, r0
 8004e5c:	2947      	cmp	r1, #71	; 0x47
 8004e5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e60:	d108      	bne.n	8004e74 <_printf_float+0x138>
 8004e62:	1cc8      	adds	r0, r1, #3
 8004e64:	db02      	blt.n	8004e6c <_printf_float+0x130>
 8004e66:	6863      	ldr	r3, [r4, #4]
 8004e68:	4299      	cmp	r1, r3
 8004e6a:	dd40      	ble.n	8004eee <_printf_float+0x1b2>
 8004e6c:	f1a9 0902 	sub.w	r9, r9, #2
 8004e70:	fa5f f989 	uxtb.w	r9, r9
 8004e74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e78:	d81f      	bhi.n	8004eba <_printf_float+0x17e>
 8004e7a:	464a      	mov	r2, r9
 8004e7c:	3901      	subs	r1, #1
 8004e7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e82:	910d      	str	r1, [sp, #52]	; 0x34
 8004e84:	f7ff ff1b 	bl	8004cbe <__exponent>
 8004e88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e8a:	4682      	mov	sl, r0
 8004e8c:	1813      	adds	r3, r2, r0
 8004e8e:	2a01      	cmp	r2, #1
 8004e90:	6123      	str	r3, [r4, #16]
 8004e92:	dc02      	bgt.n	8004e9a <_printf_float+0x15e>
 8004e94:	6822      	ldr	r2, [r4, #0]
 8004e96:	07d2      	lsls	r2, r2, #31
 8004e98:	d501      	bpl.n	8004e9e <_printf_float+0x162>
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	6123      	str	r3, [r4, #16]
 8004e9e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d09b      	beq.n	8004dde <_printf_float+0xa2>
 8004ea6:	232d      	movs	r3, #45	; 0x2d
 8004ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eac:	e797      	b.n	8004dde <_printf_float+0xa2>
 8004eae:	2947      	cmp	r1, #71	; 0x47
 8004eb0:	d1bc      	bne.n	8004e2c <_printf_float+0xf0>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1ba      	bne.n	8004e2c <_printf_float+0xf0>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e7b7      	b.n	8004e2a <_printf_float+0xee>
 8004eba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004ebe:	d118      	bne.n	8004ef2 <_printf_float+0x1b6>
 8004ec0:	2900      	cmp	r1, #0
 8004ec2:	6863      	ldr	r3, [r4, #4]
 8004ec4:	dd0b      	ble.n	8004ede <_printf_float+0x1a2>
 8004ec6:	6121      	str	r1, [r4, #16]
 8004ec8:	b913      	cbnz	r3, 8004ed0 <_printf_float+0x194>
 8004eca:	6822      	ldr	r2, [r4, #0]
 8004ecc:	07d0      	lsls	r0, r2, #31
 8004ece:	d502      	bpl.n	8004ed6 <_printf_float+0x19a>
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	440b      	add	r3, r1
 8004ed4:	6123      	str	r3, [r4, #16]
 8004ed6:	f04f 0a00 	mov.w	sl, #0
 8004eda:	65a1      	str	r1, [r4, #88]	; 0x58
 8004edc:	e7df      	b.n	8004e9e <_printf_float+0x162>
 8004ede:	b913      	cbnz	r3, 8004ee6 <_printf_float+0x1aa>
 8004ee0:	6822      	ldr	r2, [r4, #0]
 8004ee2:	07d2      	lsls	r2, r2, #31
 8004ee4:	d501      	bpl.n	8004eea <_printf_float+0x1ae>
 8004ee6:	3302      	adds	r3, #2
 8004ee8:	e7f4      	b.n	8004ed4 <_printf_float+0x198>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e7f2      	b.n	8004ed4 <_printf_float+0x198>
 8004eee:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ef4:	4299      	cmp	r1, r3
 8004ef6:	db05      	blt.n	8004f04 <_printf_float+0x1c8>
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	6121      	str	r1, [r4, #16]
 8004efc:	07d8      	lsls	r0, r3, #31
 8004efe:	d5ea      	bpl.n	8004ed6 <_printf_float+0x19a>
 8004f00:	1c4b      	adds	r3, r1, #1
 8004f02:	e7e7      	b.n	8004ed4 <_printf_float+0x198>
 8004f04:	2900      	cmp	r1, #0
 8004f06:	bfcc      	ite	gt
 8004f08:	2201      	movgt	r2, #1
 8004f0a:	f1c1 0202 	rsble	r2, r1, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	e7e0      	b.n	8004ed4 <_printf_float+0x198>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	055a      	lsls	r2, r3, #21
 8004f16:	d407      	bmi.n	8004f28 <_printf_float+0x1ec>
 8004f18:	6923      	ldr	r3, [r4, #16]
 8004f1a:	4642      	mov	r2, r8
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4628      	mov	r0, r5
 8004f20:	47b8      	blx	r7
 8004f22:	3001      	adds	r0, #1
 8004f24:	d12b      	bne.n	8004f7e <_printf_float+0x242>
 8004f26:	e764      	b.n	8004df2 <_printf_float+0xb6>
 8004f28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f2c:	f240 80dd 	bls.w	80050ea <_printf_float+0x3ae>
 8004f30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f34:	2200      	movs	r2, #0
 8004f36:	2300      	movs	r3, #0
 8004f38:	f7fb fd36 	bl	80009a8 <__aeabi_dcmpeq>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d033      	beq.n	8004fa8 <_printf_float+0x26c>
 8004f40:	2301      	movs	r3, #1
 8004f42:	4631      	mov	r1, r6
 8004f44:	4628      	mov	r0, r5
 8004f46:	4a35      	ldr	r2, [pc, #212]	; (800501c <_printf_float+0x2e0>)
 8004f48:	47b8      	blx	r7
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	f43f af51 	beq.w	8004df2 <_printf_float+0xb6>
 8004f50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f54:	429a      	cmp	r2, r3
 8004f56:	db02      	blt.n	8004f5e <_printf_float+0x222>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	07d8      	lsls	r0, r3, #31
 8004f5c:	d50f      	bpl.n	8004f7e <_printf_float+0x242>
 8004f5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	f43f af42 	beq.w	8004df2 <_printf_float+0xb6>
 8004f6e:	f04f 0800 	mov.w	r8, #0
 8004f72:	f104 091a 	add.w	r9, r4, #26
 8004f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	4543      	cmp	r3, r8
 8004f7c:	dc09      	bgt.n	8004f92 <_printf_float+0x256>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	079b      	lsls	r3, r3, #30
 8004f82:	f100 8102 	bmi.w	800518a <_printf_float+0x44e>
 8004f86:	68e0      	ldr	r0, [r4, #12]
 8004f88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f8a:	4298      	cmp	r0, r3
 8004f8c:	bfb8      	it	lt
 8004f8e:	4618      	movlt	r0, r3
 8004f90:	e731      	b.n	8004df6 <_printf_float+0xba>
 8004f92:	2301      	movs	r3, #1
 8004f94:	464a      	mov	r2, r9
 8004f96:	4631      	mov	r1, r6
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b8      	blx	r7
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	f43f af28 	beq.w	8004df2 <_printf_float+0xb6>
 8004fa2:	f108 0801 	add.w	r8, r8, #1
 8004fa6:	e7e6      	b.n	8004f76 <_printf_float+0x23a>
 8004fa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	dc38      	bgt.n	8005020 <_printf_float+0x2e4>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	4a19      	ldr	r2, [pc, #100]	; (800501c <_printf_float+0x2e0>)
 8004fb6:	47b8      	blx	r7
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f43f af1a 	beq.w	8004df2 <_printf_float+0xb6>
 8004fbe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	d102      	bne.n	8004fcc <_printf_float+0x290>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	07d9      	lsls	r1, r3, #31
 8004fca:	d5d8      	bpl.n	8004f7e <_printf_float+0x242>
 8004fcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	47b8      	blx	r7
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	f43f af0b 	beq.w	8004df2 <_printf_float+0xb6>
 8004fdc:	f04f 0900 	mov.w	r9, #0
 8004fe0:	f104 0a1a 	add.w	sl, r4, #26
 8004fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fe6:	425b      	negs	r3, r3
 8004fe8:	454b      	cmp	r3, r9
 8004fea:	dc01      	bgt.n	8004ff0 <_printf_float+0x2b4>
 8004fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fee:	e794      	b.n	8004f1a <_printf_float+0x1de>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	4652      	mov	r2, sl
 8004ff4:	4631      	mov	r1, r6
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	47b8      	blx	r7
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	f43f aef9 	beq.w	8004df2 <_printf_float+0xb6>
 8005000:	f109 0901 	add.w	r9, r9, #1
 8005004:	e7ee      	b.n	8004fe4 <_printf_float+0x2a8>
 8005006:	bf00      	nop
 8005008:	7fefffff 	.word	0x7fefffff
 800500c:	08007734 	.word	0x08007734
 8005010:	08007738 	.word	0x08007738
 8005014:	08007740 	.word	0x08007740
 8005018:	0800773c 	.word	0x0800773c
 800501c:	08007744 	.word	0x08007744
 8005020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005022:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005024:	429a      	cmp	r2, r3
 8005026:	bfa8      	it	ge
 8005028:	461a      	movge	r2, r3
 800502a:	2a00      	cmp	r2, #0
 800502c:	4691      	mov	r9, r2
 800502e:	dc37      	bgt.n	80050a0 <_printf_float+0x364>
 8005030:	f04f 0b00 	mov.w	fp, #0
 8005034:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005038:	f104 021a 	add.w	r2, r4, #26
 800503c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005040:	ebaa 0309 	sub.w	r3, sl, r9
 8005044:	455b      	cmp	r3, fp
 8005046:	dc33      	bgt.n	80050b0 <_printf_float+0x374>
 8005048:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800504c:	429a      	cmp	r2, r3
 800504e:	db3b      	blt.n	80050c8 <_printf_float+0x38c>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	07da      	lsls	r2, r3, #31
 8005054:	d438      	bmi.n	80050c8 <_printf_float+0x38c>
 8005056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005058:	990d      	ldr	r1, [sp, #52]	; 0x34
 800505a:	eba3 020a 	sub.w	r2, r3, sl
 800505e:	eba3 0901 	sub.w	r9, r3, r1
 8005062:	4591      	cmp	r9, r2
 8005064:	bfa8      	it	ge
 8005066:	4691      	movge	r9, r2
 8005068:	f1b9 0f00 	cmp.w	r9, #0
 800506c:	dc34      	bgt.n	80050d8 <_printf_float+0x39c>
 800506e:	f04f 0800 	mov.w	r8, #0
 8005072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005076:	f104 0a1a 	add.w	sl, r4, #26
 800507a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	eba3 0309 	sub.w	r3, r3, r9
 8005084:	4543      	cmp	r3, r8
 8005086:	f77f af7a 	ble.w	8004f7e <_printf_float+0x242>
 800508a:	2301      	movs	r3, #1
 800508c:	4652      	mov	r2, sl
 800508e:	4631      	mov	r1, r6
 8005090:	4628      	mov	r0, r5
 8005092:	47b8      	blx	r7
 8005094:	3001      	adds	r0, #1
 8005096:	f43f aeac 	beq.w	8004df2 <_printf_float+0xb6>
 800509a:	f108 0801 	add.w	r8, r8, #1
 800509e:	e7ec      	b.n	800507a <_printf_float+0x33e>
 80050a0:	4613      	mov	r3, r2
 80050a2:	4631      	mov	r1, r6
 80050a4:	4642      	mov	r2, r8
 80050a6:	4628      	mov	r0, r5
 80050a8:	47b8      	blx	r7
 80050aa:	3001      	adds	r0, #1
 80050ac:	d1c0      	bne.n	8005030 <_printf_float+0x2f4>
 80050ae:	e6a0      	b.n	8004df2 <_printf_float+0xb6>
 80050b0:	2301      	movs	r3, #1
 80050b2:	4631      	mov	r1, r6
 80050b4:	4628      	mov	r0, r5
 80050b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80050b8:	47b8      	blx	r7
 80050ba:	3001      	adds	r0, #1
 80050bc:	f43f ae99 	beq.w	8004df2 <_printf_float+0xb6>
 80050c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050c2:	f10b 0b01 	add.w	fp, fp, #1
 80050c6:	e7b9      	b.n	800503c <_printf_float+0x300>
 80050c8:	4631      	mov	r1, r6
 80050ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050ce:	4628      	mov	r0, r5
 80050d0:	47b8      	blx	r7
 80050d2:	3001      	adds	r0, #1
 80050d4:	d1bf      	bne.n	8005056 <_printf_float+0x31a>
 80050d6:	e68c      	b.n	8004df2 <_printf_float+0xb6>
 80050d8:	464b      	mov	r3, r9
 80050da:	4631      	mov	r1, r6
 80050dc:	4628      	mov	r0, r5
 80050de:	eb08 020a 	add.w	r2, r8, sl
 80050e2:	47b8      	blx	r7
 80050e4:	3001      	adds	r0, #1
 80050e6:	d1c2      	bne.n	800506e <_printf_float+0x332>
 80050e8:	e683      	b.n	8004df2 <_printf_float+0xb6>
 80050ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050ec:	2a01      	cmp	r2, #1
 80050ee:	dc01      	bgt.n	80050f4 <_printf_float+0x3b8>
 80050f0:	07db      	lsls	r3, r3, #31
 80050f2:	d537      	bpl.n	8005164 <_printf_float+0x428>
 80050f4:	2301      	movs	r3, #1
 80050f6:	4642      	mov	r2, r8
 80050f8:	4631      	mov	r1, r6
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b8      	blx	r7
 80050fe:	3001      	adds	r0, #1
 8005100:	f43f ae77 	beq.w	8004df2 <_printf_float+0xb6>
 8005104:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005108:	4631      	mov	r1, r6
 800510a:	4628      	mov	r0, r5
 800510c:	47b8      	blx	r7
 800510e:	3001      	adds	r0, #1
 8005110:	f43f ae6f 	beq.w	8004df2 <_printf_float+0xb6>
 8005114:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005118:	2200      	movs	r2, #0
 800511a:	2300      	movs	r3, #0
 800511c:	f7fb fc44 	bl	80009a8 <__aeabi_dcmpeq>
 8005120:	b9d8      	cbnz	r0, 800515a <_printf_float+0x41e>
 8005122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005124:	f108 0201 	add.w	r2, r8, #1
 8005128:	3b01      	subs	r3, #1
 800512a:	4631      	mov	r1, r6
 800512c:	4628      	mov	r0, r5
 800512e:	47b8      	blx	r7
 8005130:	3001      	adds	r0, #1
 8005132:	d10e      	bne.n	8005152 <_printf_float+0x416>
 8005134:	e65d      	b.n	8004df2 <_printf_float+0xb6>
 8005136:	2301      	movs	r3, #1
 8005138:	464a      	mov	r2, r9
 800513a:	4631      	mov	r1, r6
 800513c:	4628      	mov	r0, r5
 800513e:	47b8      	blx	r7
 8005140:	3001      	adds	r0, #1
 8005142:	f43f ae56 	beq.w	8004df2 <_printf_float+0xb6>
 8005146:	f108 0801 	add.w	r8, r8, #1
 800514a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800514c:	3b01      	subs	r3, #1
 800514e:	4543      	cmp	r3, r8
 8005150:	dcf1      	bgt.n	8005136 <_printf_float+0x3fa>
 8005152:	4653      	mov	r3, sl
 8005154:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005158:	e6e0      	b.n	8004f1c <_printf_float+0x1e0>
 800515a:	f04f 0800 	mov.w	r8, #0
 800515e:	f104 091a 	add.w	r9, r4, #26
 8005162:	e7f2      	b.n	800514a <_printf_float+0x40e>
 8005164:	2301      	movs	r3, #1
 8005166:	4642      	mov	r2, r8
 8005168:	e7df      	b.n	800512a <_printf_float+0x3ee>
 800516a:	2301      	movs	r3, #1
 800516c:	464a      	mov	r2, r9
 800516e:	4631      	mov	r1, r6
 8005170:	4628      	mov	r0, r5
 8005172:	47b8      	blx	r7
 8005174:	3001      	adds	r0, #1
 8005176:	f43f ae3c 	beq.w	8004df2 <_printf_float+0xb6>
 800517a:	f108 0801 	add.w	r8, r8, #1
 800517e:	68e3      	ldr	r3, [r4, #12]
 8005180:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005182:	1a5b      	subs	r3, r3, r1
 8005184:	4543      	cmp	r3, r8
 8005186:	dcf0      	bgt.n	800516a <_printf_float+0x42e>
 8005188:	e6fd      	b.n	8004f86 <_printf_float+0x24a>
 800518a:	f04f 0800 	mov.w	r8, #0
 800518e:	f104 0919 	add.w	r9, r4, #25
 8005192:	e7f4      	b.n	800517e <_printf_float+0x442>

08005194 <_printf_common>:
 8005194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005198:	4616      	mov	r6, r2
 800519a:	4699      	mov	r9, r3
 800519c:	688a      	ldr	r2, [r1, #8]
 800519e:	690b      	ldr	r3, [r1, #16]
 80051a0:	4607      	mov	r7, r0
 80051a2:	4293      	cmp	r3, r2
 80051a4:	bfb8      	it	lt
 80051a6:	4613      	movlt	r3, r2
 80051a8:	6033      	str	r3, [r6, #0]
 80051aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051ae:	460c      	mov	r4, r1
 80051b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051b4:	b10a      	cbz	r2, 80051ba <_printf_common+0x26>
 80051b6:	3301      	adds	r3, #1
 80051b8:	6033      	str	r3, [r6, #0]
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	0699      	lsls	r1, r3, #26
 80051be:	bf42      	ittt	mi
 80051c0:	6833      	ldrmi	r3, [r6, #0]
 80051c2:	3302      	addmi	r3, #2
 80051c4:	6033      	strmi	r3, [r6, #0]
 80051c6:	6825      	ldr	r5, [r4, #0]
 80051c8:	f015 0506 	ands.w	r5, r5, #6
 80051cc:	d106      	bne.n	80051dc <_printf_common+0x48>
 80051ce:	f104 0a19 	add.w	sl, r4, #25
 80051d2:	68e3      	ldr	r3, [r4, #12]
 80051d4:	6832      	ldr	r2, [r6, #0]
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	42ab      	cmp	r3, r5
 80051da:	dc28      	bgt.n	800522e <_printf_common+0x9a>
 80051dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051e0:	1e13      	subs	r3, r2, #0
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	bf18      	it	ne
 80051e6:	2301      	movne	r3, #1
 80051e8:	0692      	lsls	r2, r2, #26
 80051ea:	d42d      	bmi.n	8005248 <_printf_common+0xb4>
 80051ec:	4649      	mov	r1, r9
 80051ee:	4638      	mov	r0, r7
 80051f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051f4:	47c0      	blx	r8
 80051f6:	3001      	adds	r0, #1
 80051f8:	d020      	beq.n	800523c <_printf_common+0xa8>
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	68e5      	ldr	r5, [r4, #12]
 80051fe:	f003 0306 	and.w	r3, r3, #6
 8005202:	2b04      	cmp	r3, #4
 8005204:	bf18      	it	ne
 8005206:	2500      	movne	r5, #0
 8005208:	6832      	ldr	r2, [r6, #0]
 800520a:	f04f 0600 	mov.w	r6, #0
 800520e:	68a3      	ldr	r3, [r4, #8]
 8005210:	bf08      	it	eq
 8005212:	1aad      	subeq	r5, r5, r2
 8005214:	6922      	ldr	r2, [r4, #16]
 8005216:	bf08      	it	eq
 8005218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800521c:	4293      	cmp	r3, r2
 800521e:	bfc4      	itt	gt
 8005220:	1a9b      	subgt	r3, r3, r2
 8005222:	18ed      	addgt	r5, r5, r3
 8005224:	341a      	adds	r4, #26
 8005226:	42b5      	cmp	r5, r6
 8005228:	d11a      	bne.n	8005260 <_printf_common+0xcc>
 800522a:	2000      	movs	r0, #0
 800522c:	e008      	b.n	8005240 <_printf_common+0xac>
 800522e:	2301      	movs	r3, #1
 8005230:	4652      	mov	r2, sl
 8005232:	4649      	mov	r1, r9
 8005234:	4638      	mov	r0, r7
 8005236:	47c0      	blx	r8
 8005238:	3001      	adds	r0, #1
 800523a:	d103      	bne.n	8005244 <_printf_common+0xb0>
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005244:	3501      	adds	r5, #1
 8005246:	e7c4      	b.n	80051d2 <_printf_common+0x3e>
 8005248:	2030      	movs	r0, #48	; 0x30
 800524a:	18e1      	adds	r1, r4, r3
 800524c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005256:	4422      	add	r2, r4
 8005258:	3302      	adds	r3, #2
 800525a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800525e:	e7c5      	b.n	80051ec <_printf_common+0x58>
 8005260:	2301      	movs	r3, #1
 8005262:	4622      	mov	r2, r4
 8005264:	4649      	mov	r1, r9
 8005266:	4638      	mov	r0, r7
 8005268:	47c0      	blx	r8
 800526a:	3001      	adds	r0, #1
 800526c:	d0e6      	beq.n	800523c <_printf_common+0xa8>
 800526e:	3601      	adds	r6, #1
 8005270:	e7d9      	b.n	8005226 <_printf_common+0x92>
	...

08005274 <_printf_i>:
 8005274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005278:	7e0f      	ldrb	r7, [r1, #24]
 800527a:	4691      	mov	r9, r2
 800527c:	2f78      	cmp	r7, #120	; 0x78
 800527e:	4680      	mov	r8, r0
 8005280:	460c      	mov	r4, r1
 8005282:	469a      	mov	sl, r3
 8005284:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005286:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800528a:	d807      	bhi.n	800529c <_printf_i+0x28>
 800528c:	2f62      	cmp	r7, #98	; 0x62
 800528e:	d80a      	bhi.n	80052a6 <_printf_i+0x32>
 8005290:	2f00      	cmp	r7, #0
 8005292:	f000 80d9 	beq.w	8005448 <_printf_i+0x1d4>
 8005296:	2f58      	cmp	r7, #88	; 0x58
 8005298:	f000 80a4 	beq.w	80053e4 <_printf_i+0x170>
 800529c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052a4:	e03a      	b.n	800531c <_printf_i+0xa8>
 80052a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052aa:	2b15      	cmp	r3, #21
 80052ac:	d8f6      	bhi.n	800529c <_printf_i+0x28>
 80052ae:	a101      	add	r1, pc, #4	; (adr r1, 80052b4 <_printf_i+0x40>)
 80052b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052b4:	0800530d 	.word	0x0800530d
 80052b8:	08005321 	.word	0x08005321
 80052bc:	0800529d 	.word	0x0800529d
 80052c0:	0800529d 	.word	0x0800529d
 80052c4:	0800529d 	.word	0x0800529d
 80052c8:	0800529d 	.word	0x0800529d
 80052cc:	08005321 	.word	0x08005321
 80052d0:	0800529d 	.word	0x0800529d
 80052d4:	0800529d 	.word	0x0800529d
 80052d8:	0800529d 	.word	0x0800529d
 80052dc:	0800529d 	.word	0x0800529d
 80052e0:	0800542f 	.word	0x0800542f
 80052e4:	08005351 	.word	0x08005351
 80052e8:	08005411 	.word	0x08005411
 80052ec:	0800529d 	.word	0x0800529d
 80052f0:	0800529d 	.word	0x0800529d
 80052f4:	08005451 	.word	0x08005451
 80052f8:	0800529d 	.word	0x0800529d
 80052fc:	08005351 	.word	0x08005351
 8005300:	0800529d 	.word	0x0800529d
 8005304:	0800529d 	.word	0x0800529d
 8005308:	08005419 	.word	0x08005419
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	1d1a      	adds	r2, r3, #4
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	602a      	str	r2, [r5, #0]
 8005314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800531c:	2301      	movs	r3, #1
 800531e:	e0a4      	b.n	800546a <_printf_i+0x1f6>
 8005320:	6820      	ldr	r0, [r4, #0]
 8005322:	6829      	ldr	r1, [r5, #0]
 8005324:	0606      	lsls	r6, r0, #24
 8005326:	f101 0304 	add.w	r3, r1, #4
 800532a:	d50a      	bpl.n	8005342 <_printf_i+0xce>
 800532c:	680e      	ldr	r6, [r1, #0]
 800532e:	602b      	str	r3, [r5, #0]
 8005330:	2e00      	cmp	r6, #0
 8005332:	da03      	bge.n	800533c <_printf_i+0xc8>
 8005334:	232d      	movs	r3, #45	; 0x2d
 8005336:	4276      	negs	r6, r6
 8005338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533c:	230a      	movs	r3, #10
 800533e:	485e      	ldr	r0, [pc, #376]	; (80054b8 <_printf_i+0x244>)
 8005340:	e019      	b.n	8005376 <_printf_i+0x102>
 8005342:	680e      	ldr	r6, [r1, #0]
 8005344:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005348:	602b      	str	r3, [r5, #0]
 800534a:	bf18      	it	ne
 800534c:	b236      	sxthne	r6, r6
 800534e:	e7ef      	b.n	8005330 <_printf_i+0xbc>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	6820      	ldr	r0, [r4, #0]
 8005354:	1d19      	adds	r1, r3, #4
 8005356:	6029      	str	r1, [r5, #0]
 8005358:	0601      	lsls	r1, r0, #24
 800535a:	d501      	bpl.n	8005360 <_printf_i+0xec>
 800535c:	681e      	ldr	r6, [r3, #0]
 800535e:	e002      	b.n	8005366 <_printf_i+0xf2>
 8005360:	0646      	lsls	r6, r0, #25
 8005362:	d5fb      	bpl.n	800535c <_printf_i+0xe8>
 8005364:	881e      	ldrh	r6, [r3, #0]
 8005366:	2f6f      	cmp	r7, #111	; 0x6f
 8005368:	bf0c      	ite	eq
 800536a:	2308      	moveq	r3, #8
 800536c:	230a      	movne	r3, #10
 800536e:	4852      	ldr	r0, [pc, #328]	; (80054b8 <_printf_i+0x244>)
 8005370:	2100      	movs	r1, #0
 8005372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005376:	6865      	ldr	r5, [r4, #4]
 8005378:	2d00      	cmp	r5, #0
 800537a:	bfa8      	it	ge
 800537c:	6821      	ldrge	r1, [r4, #0]
 800537e:	60a5      	str	r5, [r4, #8]
 8005380:	bfa4      	itt	ge
 8005382:	f021 0104 	bicge.w	r1, r1, #4
 8005386:	6021      	strge	r1, [r4, #0]
 8005388:	b90e      	cbnz	r6, 800538e <_printf_i+0x11a>
 800538a:	2d00      	cmp	r5, #0
 800538c:	d04d      	beq.n	800542a <_printf_i+0x1b6>
 800538e:	4615      	mov	r5, r2
 8005390:	fbb6 f1f3 	udiv	r1, r6, r3
 8005394:	fb03 6711 	mls	r7, r3, r1, r6
 8005398:	5dc7      	ldrb	r7, [r0, r7]
 800539a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800539e:	4637      	mov	r7, r6
 80053a0:	42bb      	cmp	r3, r7
 80053a2:	460e      	mov	r6, r1
 80053a4:	d9f4      	bls.n	8005390 <_printf_i+0x11c>
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d10b      	bne.n	80053c2 <_printf_i+0x14e>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	07de      	lsls	r6, r3, #31
 80053ae:	d508      	bpl.n	80053c2 <_printf_i+0x14e>
 80053b0:	6923      	ldr	r3, [r4, #16]
 80053b2:	6861      	ldr	r1, [r4, #4]
 80053b4:	4299      	cmp	r1, r3
 80053b6:	bfde      	ittt	le
 80053b8:	2330      	movle	r3, #48	; 0x30
 80053ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053c2:	1b52      	subs	r2, r2, r5
 80053c4:	6122      	str	r2, [r4, #16]
 80053c6:	464b      	mov	r3, r9
 80053c8:	4621      	mov	r1, r4
 80053ca:	4640      	mov	r0, r8
 80053cc:	f8cd a000 	str.w	sl, [sp]
 80053d0:	aa03      	add	r2, sp, #12
 80053d2:	f7ff fedf 	bl	8005194 <_printf_common>
 80053d6:	3001      	adds	r0, #1
 80053d8:	d14c      	bne.n	8005474 <_printf_i+0x200>
 80053da:	f04f 30ff 	mov.w	r0, #4294967295
 80053de:	b004      	add	sp, #16
 80053e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e4:	4834      	ldr	r0, [pc, #208]	; (80054b8 <_printf_i+0x244>)
 80053e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053ea:	6829      	ldr	r1, [r5, #0]
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80053f2:	6029      	str	r1, [r5, #0]
 80053f4:	061d      	lsls	r5, r3, #24
 80053f6:	d514      	bpl.n	8005422 <_printf_i+0x1ae>
 80053f8:	07df      	lsls	r7, r3, #31
 80053fa:	bf44      	itt	mi
 80053fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005400:	6023      	strmi	r3, [r4, #0]
 8005402:	b91e      	cbnz	r6, 800540c <_printf_i+0x198>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	f023 0320 	bic.w	r3, r3, #32
 800540a:	6023      	str	r3, [r4, #0]
 800540c:	2310      	movs	r3, #16
 800540e:	e7af      	b.n	8005370 <_printf_i+0xfc>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	f043 0320 	orr.w	r3, r3, #32
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	2378      	movs	r3, #120	; 0x78
 800541a:	4828      	ldr	r0, [pc, #160]	; (80054bc <_printf_i+0x248>)
 800541c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005420:	e7e3      	b.n	80053ea <_printf_i+0x176>
 8005422:	0659      	lsls	r1, r3, #25
 8005424:	bf48      	it	mi
 8005426:	b2b6      	uxthmi	r6, r6
 8005428:	e7e6      	b.n	80053f8 <_printf_i+0x184>
 800542a:	4615      	mov	r5, r2
 800542c:	e7bb      	b.n	80053a6 <_printf_i+0x132>
 800542e:	682b      	ldr	r3, [r5, #0]
 8005430:	6826      	ldr	r6, [r4, #0]
 8005432:	1d18      	adds	r0, r3, #4
 8005434:	6961      	ldr	r1, [r4, #20]
 8005436:	6028      	str	r0, [r5, #0]
 8005438:	0635      	lsls	r5, r6, #24
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	d501      	bpl.n	8005442 <_printf_i+0x1ce>
 800543e:	6019      	str	r1, [r3, #0]
 8005440:	e002      	b.n	8005448 <_printf_i+0x1d4>
 8005442:	0670      	lsls	r0, r6, #25
 8005444:	d5fb      	bpl.n	800543e <_printf_i+0x1ca>
 8005446:	8019      	strh	r1, [r3, #0]
 8005448:	2300      	movs	r3, #0
 800544a:	4615      	mov	r5, r2
 800544c:	6123      	str	r3, [r4, #16]
 800544e:	e7ba      	b.n	80053c6 <_printf_i+0x152>
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	2100      	movs	r1, #0
 8005454:	1d1a      	adds	r2, r3, #4
 8005456:	602a      	str	r2, [r5, #0]
 8005458:	681d      	ldr	r5, [r3, #0]
 800545a:	6862      	ldr	r2, [r4, #4]
 800545c:	4628      	mov	r0, r5
 800545e:	f000 ffc7 	bl	80063f0 <memchr>
 8005462:	b108      	cbz	r0, 8005468 <_printf_i+0x1f4>
 8005464:	1b40      	subs	r0, r0, r5
 8005466:	6060      	str	r0, [r4, #4]
 8005468:	6863      	ldr	r3, [r4, #4]
 800546a:	6123      	str	r3, [r4, #16]
 800546c:	2300      	movs	r3, #0
 800546e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005472:	e7a8      	b.n	80053c6 <_printf_i+0x152>
 8005474:	462a      	mov	r2, r5
 8005476:	4649      	mov	r1, r9
 8005478:	4640      	mov	r0, r8
 800547a:	6923      	ldr	r3, [r4, #16]
 800547c:	47d0      	blx	sl
 800547e:	3001      	adds	r0, #1
 8005480:	d0ab      	beq.n	80053da <_printf_i+0x166>
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	079b      	lsls	r3, r3, #30
 8005486:	d413      	bmi.n	80054b0 <_printf_i+0x23c>
 8005488:	68e0      	ldr	r0, [r4, #12]
 800548a:	9b03      	ldr	r3, [sp, #12]
 800548c:	4298      	cmp	r0, r3
 800548e:	bfb8      	it	lt
 8005490:	4618      	movlt	r0, r3
 8005492:	e7a4      	b.n	80053de <_printf_i+0x16a>
 8005494:	2301      	movs	r3, #1
 8005496:	4632      	mov	r2, r6
 8005498:	4649      	mov	r1, r9
 800549a:	4640      	mov	r0, r8
 800549c:	47d0      	blx	sl
 800549e:	3001      	adds	r0, #1
 80054a0:	d09b      	beq.n	80053da <_printf_i+0x166>
 80054a2:	3501      	adds	r5, #1
 80054a4:	68e3      	ldr	r3, [r4, #12]
 80054a6:	9903      	ldr	r1, [sp, #12]
 80054a8:	1a5b      	subs	r3, r3, r1
 80054aa:	42ab      	cmp	r3, r5
 80054ac:	dcf2      	bgt.n	8005494 <_printf_i+0x220>
 80054ae:	e7eb      	b.n	8005488 <_printf_i+0x214>
 80054b0:	2500      	movs	r5, #0
 80054b2:	f104 0619 	add.w	r6, r4, #25
 80054b6:	e7f5      	b.n	80054a4 <_printf_i+0x230>
 80054b8:	08007746 	.word	0x08007746
 80054bc:	08007757 	.word	0x08007757

080054c0 <iprintf>:
 80054c0:	b40f      	push	{r0, r1, r2, r3}
 80054c2:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <iprintf+0x2c>)
 80054c4:	b513      	push	{r0, r1, r4, lr}
 80054c6:	681c      	ldr	r4, [r3, #0]
 80054c8:	b124      	cbz	r4, 80054d4 <iprintf+0x14>
 80054ca:	69a3      	ldr	r3, [r4, #24]
 80054cc:	b913      	cbnz	r3, 80054d4 <iprintf+0x14>
 80054ce:	4620      	mov	r0, r4
 80054d0:	f000 fee0 	bl	8006294 <__sinit>
 80054d4:	ab05      	add	r3, sp, #20
 80054d6:	4620      	mov	r0, r4
 80054d8:	9a04      	ldr	r2, [sp, #16]
 80054da:	68a1      	ldr	r1, [r4, #8]
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	f001 fc3d 	bl	8006d5c <_vfiprintf_r>
 80054e2:	b002      	add	sp, #8
 80054e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054e8:	b004      	add	sp, #16
 80054ea:	4770      	bx	lr
 80054ec:	2000000c 	.word	0x2000000c

080054f0 <quorem>:
 80054f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f4:	6903      	ldr	r3, [r0, #16]
 80054f6:	690c      	ldr	r4, [r1, #16]
 80054f8:	4607      	mov	r7, r0
 80054fa:	42a3      	cmp	r3, r4
 80054fc:	f2c0 8082 	blt.w	8005604 <quorem+0x114>
 8005500:	3c01      	subs	r4, #1
 8005502:	f100 0514 	add.w	r5, r0, #20
 8005506:	f101 0814 	add.w	r8, r1, #20
 800550a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005514:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005518:	3301      	adds	r3, #1
 800551a:	429a      	cmp	r2, r3
 800551c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005520:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005524:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005528:	d331      	bcc.n	800558e <quorem+0x9e>
 800552a:	f04f 0e00 	mov.w	lr, #0
 800552e:	4640      	mov	r0, r8
 8005530:	46ac      	mov	ip, r5
 8005532:	46f2      	mov	sl, lr
 8005534:	f850 2b04 	ldr.w	r2, [r0], #4
 8005538:	b293      	uxth	r3, r2
 800553a:	fb06 e303 	mla	r3, r6, r3, lr
 800553e:	0c12      	lsrs	r2, r2, #16
 8005540:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005544:	b29b      	uxth	r3, r3
 8005546:	fb06 e202 	mla	r2, r6, r2, lr
 800554a:	ebaa 0303 	sub.w	r3, sl, r3
 800554e:	f8dc a000 	ldr.w	sl, [ip]
 8005552:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005556:	fa1f fa8a 	uxth.w	sl, sl
 800555a:	4453      	add	r3, sl
 800555c:	f8dc a000 	ldr.w	sl, [ip]
 8005560:	b292      	uxth	r2, r2
 8005562:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005566:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800556a:	b29b      	uxth	r3, r3
 800556c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005570:	4581      	cmp	r9, r0
 8005572:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005576:	f84c 3b04 	str.w	r3, [ip], #4
 800557a:	d2db      	bcs.n	8005534 <quorem+0x44>
 800557c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005580:	b92b      	cbnz	r3, 800558e <quorem+0x9e>
 8005582:	9b01      	ldr	r3, [sp, #4]
 8005584:	3b04      	subs	r3, #4
 8005586:	429d      	cmp	r5, r3
 8005588:	461a      	mov	r2, r3
 800558a:	d32f      	bcc.n	80055ec <quorem+0xfc>
 800558c:	613c      	str	r4, [r7, #16]
 800558e:	4638      	mov	r0, r7
 8005590:	f001 f9c8 	bl	8006924 <__mcmp>
 8005594:	2800      	cmp	r0, #0
 8005596:	db25      	blt.n	80055e4 <quorem+0xf4>
 8005598:	4628      	mov	r0, r5
 800559a:	f04f 0c00 	mov.w	ip, #0
 800559e:	3601      	adds	r6, #1
 80055a0:	f858 1b04 	ldr.w	r1, [r8], #4
 80055a4:	f8d0 e000 	ldr.w	lr, [r0]
 80055a8:	b28b      	uxth	r3, r1
 80055aa:	ebac 0303 	sub.w	r3, ip, r3
 80055ae:	fa1f f28e 	uxth.w	r2, lr
 80055b2:	4413      	add	r3, r2
 80055b4:	0c0a      	lsrs	r2, r1, #16
 80055b6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055be:	b29b      	uxth	r3, r3
 80055c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055c4:	45c1      	cmp	r9, r8
 80055c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055ca:	f840 3b04 	str.w	r3, [r0], #4
 80055ce:	d2e7      	bcs.n	80055a0 <quorem+0xb0>
 80055d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055d8:	b922      	cbnz	r2, 80055e4 <quorem+0xf4>
 80055da:	3b04      	subs	r3, #4
 80055dc:	429d      	cmp	r5, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	d30a      	bcc.n	80055f8 <quorem+0x108>
 80055e2:	613c      	str	r4, [r7, #16]
 80055e4:	4630      	mov	r0, r6
 80055e6:	b003      	add	sp, #12
 80055e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	3b04      	subs	r3, #4
 80055f0:	2a00      	cmp	r2, #0
 80055f2:	d1cb      	bne.n	800558c <quorem+0x9c>
 80055f4:	3c01      	subs	r4, #1
 80055f6:	e7c6      	b.n	8005586 <quorem+0x96>
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	3b04      	subs	r3, #4
 80055fc:	2a00      	cmp	r2, #0
 80055fe:	d1f0      	bne.n	80055e2 <quorem+0xf2>
 8005600:	3c01      	subs	r4, #1
 8005602:	e7eb      	b.n	80055dc <quorem+0xec>
 8005604:	2000      	movs	r0, #0
 8005606:	e7ee      	b.n	80055e6 <quorem+0xf6>

08005608 <_dtoa_r>:
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560c:	4616      	mov	r6, r2
 800560e:	461f      	mov	r7, r3
 8005610:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005612:	b099      	sub	sp, #100	; 0x64
 8005614:	4605      	mov	r5, r0
 8005616:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800561a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800561e:	b974      	cbnz	r4, 800563e <_dtoa_r+0x36>
 8005620:	2010      	movs	r0, #16
 8005622:	f000 fedd 	bl	80063e0 <malloc>
 8005626:	4602      	mov	r2, r0
 8005628:	6268      	str	r0, [r5, #36]	; 0x24
 800562a:	b920      	cbnz	r0, 8005636 <_dtoa_r+0x2e>
 800562c:	21ea      	movs	r1, #234	; 0xea
 800562e:	4ba8      	ldr	r3, [pc, #672]	; (80058d0 <_dtoa_r+0x2c8>)
 8005630:	48a8      	ldr	r0, [pc, #672]	; (80058d4 <_dtoa_r+0x2cc>)
 8005632:	f001 fde9 	bl	8007208 <__assert_func>
 8005636:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800563a:	6004      	str	r4, [r0, #0]
 800563c:	60c4      	str	r4, [r0, #12]
 800563e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005640:	6819      	ldr	r1, [r3, #0]
 8005642:	b151      	cbz	r1, 800565a <_dtoa_r+0x52>
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	2301      	movs	r3, #1
 8005648:	4093      	lsls	r3, r2
 800564a:	604a      	str	r2, [r1, #4]
 800564c:	608b      	str	r3, [r1, #8]
 800564e:	4628      	mov	r0, r5
 8005650:	f000 ff2a 	bl	80064a8 <_Bfree>
 8005654:	2200      	movs	r2, #0
 8005656:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	1e3b      	subs	r3, r7, #0
 800565c:	bfaf      	iteee	ge
 800565e:	2300      	movge	r3, #0
 8005660:	2201      	movlt	r2, #1
 8005662:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005666:	9305      	strlt	r3, [sp, #20]
 8005668:	bfa8      	it	ge
 800566a:	f8c8 3000 	strge.w	r3, [r8]
 800566e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005672:	4b99      	ldr	r3, [pc, #612]	; (80058d8 <_dtoa_r+0x2d0>)
 8005674:	bfb8      	it	lt
 8005676:	f8c8 2000 	strlt.w	r2, [r8]
 800567a:	ea33 0309 	bics.w	r3, r3, r9
 800567e:	d119      	bne.n	80056b4 <_dtoa_r+0xac>
 8005680:	f242 730f 	movw	r3, #9999	; 0x270f
 8005684:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800568c:	4333      	orrs	r3, r6
 800568e:	f000 857f 	beq.w	8006190 <_dtoa_r+0xb88>
 8005692:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005694:	b953      	cbnz	r3, 80056ac <_dtoa_r+0xa4>
 8005696:	4b91      	ldr	r3, [pc, #580]	; (80058dc <_dtoa_r+0x2d4>)
 8005698:	e022      	b.n	80056e0 <_dtoa_r+0xd8>
 800569a:	4b91      	ldr	r3, [pc, #580]	; (80058e0 <_dtoa_r+0x2d8>)
 800569c:	9303      	str	r3, [sp, #12]
 800569e:	3308      	adds	r3, #8
 80056a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	9803      	ldr	r0, [sp, #12]
 80056a6:	b019      	add	sp, #100	; 0x64
 80056a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ac:	4b8b      	ldr	r3, [pc, #556]	; (80058dc <_dtoa_r+0x2d4>)
 80056ae:	9303      	str	r3, [sp, #12]
 80056b0:	3303      	adds	r3, #3
 80056b2:	e7f5      	b.n	80056a0 <_dtoa_r+0x98>
 80056b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80056b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80056bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056c0:	2200      	movs	r2, #0
 80056c2:	2300      	movs	r3, #0
 80056c4:	f7fb f970 	bl	80009a8 <__aeabi_dcmpeq>
 80056c8:	4680      	mov	r8, r0
 80056ca:	b158      	cbz	r0, 80056e4 <_dtoa_r+0xdc>
 80056cc:	2301      	movs	r3, #1
 80056ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8558 	beq.w	800618a <_dtoa_r+0xb82>
 80056da:	4882      	ldr	r0, [pc, #520]	; (80058e4 <_dtoa_r+0x2dc>)
 80056dc:	6018      	str	r0, [r3, #0]
 80056de:	1e43      	subs	r3, r0, #1
 80056e0:	9303      	str	r3, [sp, #12]
 80056e2:	e7df      	b.n	80056a4 <_dtoa_r+0x9c>
 80056e4:	ab16      	add	r3, sp, #88	; 0x58
 80056e6:	9301      	str	r3, [sp, #4]
 80056e8:	ab17      	add	r3, sp, #92	; 0x5c
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	4628      	mov	r0, r5
 80056ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056f2:	f001 f9bf 	bl	8006a74 <__d2b>
 80056f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80056fa:	4683      	mov	fp, r0
 80056fc:	2c00      	cmp	r4, #0
 80056fe:	d07f      	beq.n	8005800 <_dtoa_r+0x1f8>
 8005700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005706:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800570a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800570e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005712:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005716:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800571a:	2200      	movs	r2, #0
 800571c:	4b72      	ldr	r3, [pc, #456]	; (80058e8 <_dtoa_r+0x2e0>)
 800571e:	f7fa fd23 	bl	8000168 <__aeabi_dsub>
 8005722:	a365      	add	r3, pc, #404	; (adr r3, 80058b8 <_dtoa_r+0x2b0>)
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f7fa fed6 	bl	80004d8 <__aeabi_dmul>
 800572c:	a364      	add	r3, pc, #400	; (adr r3, 80058c0 <_dtoa_r+0x2b8>)
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f7fa fd1b 	bl	800016c <__adddf3>
 8005736:	4606      	mov	r6, r0
 8005738:	4620      	mov	r0, r4
 800573a:	460f      	mov	r7, r1
 800573c:	f7fa fe62 	bl	8000404 <__aeabi_i2d>
 8005740:	a361      	add	r3, pc, #388	; (adr r3, 80058c8 <_dtoa_r+0x2c0>)
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f7fa fec7 	bl	80004d8 <__aeabi_dmul>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4630      	mov	r0, r6
 8005750:	4639      	mov	r1, r7
 8005752:	f7fa fd0b 	bl	800016c <__adddf3>
 8005756:	4606      	mov	r6, r0
 8005758:	460f      	mov	r7, r1
 800575a:	f7fb f96d 	bl	8000a38 <__aeabi_d2iz>
 800575e:	2200      	movs	r2, #0
 8005760:	4682      	mov	sl, r0
 8005762:	2300      	movs	r3, #0
 8005764:	4630      	mov	r0, r6
 8005766:	4639      	mov	r1, r7
 8005768:	f7fb f928 	bl	80009bc <__aeabi_dcmplt>
 800576c:	b148      	cbz	r0, 8005782 <_dtoa_r+0x17a>
 800576e:	4650      	mov	r0, sl
 8005770:	f7fa fe48 	bl	8000404 <__aeabi_i2d>
 8005774:	4632      	mov	r2, r6
 8005776:	463b      	mov	r3, r7
 8005778:	f7fb f916 	bl	80009a8 <__aeabi_dcmpeq>
 800577c:	b908      	cbnz	r0, 8005782 <_dtoa_r+0x17a>
 800577e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005782:	f1ba 0f16 	cmp.w	sl, #22
 8005786:	d858      	bhi.n	800583a <_dtoa_r+0x232>
 8005788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800578c:	4b57      	ldr	r3, [pc, #348]	; (80058ec <_dtoa_r+0x2e4>)
 800578e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fb f911 	bl	80009bc <__aeabi_dcmplt>
 800579a:	2800      	cmp	r0, #0
 800579c:	d04f      	beq.n	800583e <_dtoa_r+0x236>
 800579e:	2300      	movs	r3, #0
 80057a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80057a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80057a8:	1b1c      	subs	r4, r3, r4
 80057aa:	1e63      	subs	r3, r4, #1
 80057ac:	9309      	str	r3, [sp, #36]	; 0x24
 80057ae:	bf49      	itett	mi
 80057b0:	f1c4 0301 	rsbmi	r3, r4, #1
 80057b4:	2300      	movpl	r3, #0
 80057b6:	9306      	strmi	r3, [sp, #24]
 80057b8:	2300      	movmi	r3, #0
 80057ba:	bf54      	ite	pl
 80057bc:	9306      	strpl	r3, [sp, #24]
 80057be:	9309      	strmi	r3, [sp, #36]	; 0x24
 80057c0:	f1ba 0f00 	cmp.w	sl, #0
 80057c4:	db3d      	blt.n	8005842 <_dtoa_r+0x23a>
 80057c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80057cc:	4453      	add	r3, sl
 80057ce:	9309      	str	r3, [sp, #36]	; 0x24
 80057d0:	2300      	movs	r3, #0
 80057d2:	930a      	str	r3, [sp, #40]	; 0x28
 80057d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057d6:	2b09      	cmp	r3, #9
 80057d8:	f200 808c 	bhi.w	80058f4 <_dtoa_r+0x2ec>
 80057dc:	2b05      	cmp	r3, #5
 80057de:	bfc4      	itt	gt
 80057e0:	3b04      	subgt	r3, #4
 80057e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80057e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057e6:	bfc8      	it	gt
 80057e8:	2400      	movgt	r4, #0
 80057ea:	f1a3 0302 	sub.w	r3, r3, #2
 80057ee:	bfd8      	it	le
 80057f0:	2401      	movle	r4, #1
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	f200 808a 	bhi.w	800590c <_dtoa_r+0x304>
 80057f8:	e8df f003 	tbb	[pc, r3]
 80057fc:	5b4d4f2d 	.word	0x5b4d4f2d
 8005800:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005804:	441c      	add	r4, r3
 8005806:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800580a:	2b20      	cmp	r3, #32
 800580c:	bfc3      	ittte	gt
 800580e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005812:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005816:	fa09 f303 	lslgt.w	r3, r9, r3
 800581a:	f1c3 0320 	rsble	r3, r3, #32
 800581e:	bfc6      	itte	gt
 8005820:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005824:	4318      	orrgt	r0, r3
 8005826:	fa06 f003 	lslle.w	r0, r6, r3
 800582a:	f7fa fddb 	bl	80003e4 <__aeabi_ui2d>
 800582e:	2301      	movs	r3, #1
 8005830:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005834:	3c01      	subs	r4, #1
 8005836:	9313      	str	r3, [sp, #76]	; 0x4c
 8005838:	e76f      	b.n	800571a <_dtoa_r+0x112>
 800583a:	2301      	movs	r3, #1
 800583c:	e7b2      	b.n	80057a4 <_dtoa_r+0x19c>
 800583e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005840:	e7b1      	b.n	80057a6 <_dtoa_r+0x19e>
 8005842:	9b06      	ldr	r3, [sp, #24]
 8005844:	eba3 030a 	sub.w	r3, r3, sl
 8005848:	9306      	str	r3, [sp, #24]
 800584a:	f1ca 0300 	rsb	r3, sl, #0
 800584e:	930a      	str	r3, [sp, #40]	; 0x28
 8005850:	2300      	movs	r3, #0
 8005852:	930e      	str	r3, [sp, #56]	; 0x38
 8005854:	e7be      	b.n	80057d4 <_dtoa_r+0x1cc>
 8005856:	2300      	movs	r3, #0
 8005858:	930b      	str	r3, [sp, #44]	; 0x2c
 800585a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800585c:	2b00      	cmp	r3, #0
 800585e:	dc58      	bgt.n	8005912 <_dtoa_r+0x30a>
 8005860:	f04f 0901 	mov.w	r9, #1
 8005864:	464b      	mov	r3, r9
 8005866:	f8cd 9020 	str.w	r9, [sp, #32]
 800586a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800586e:	2200      	movs	r2, #0
 8005870:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005872:	6042      	str	r2, [r0, #4]
 8005874:	2204      	movs	r2, #4
 8005876:	f102 0614 	add.w	r6, r2, #20
 800587a:	429e      	cmp	r6, r3
 800587c:	6841      	ldr	r1, [r0, #4]
 800587e:	d94e      	bls.n	800591e <_dtoa_r+0x316>
 8005880:	4628      	mov	r0, r5
 8005882:	f000 fdd1 	bl	8006428 <_Balloc>
 8005886:	9003      	str	r0, [sp, #12]
 8005888:	2800      	cmp	r0, #0
 800588a:	d14c      	bne.n	8005926 <_dtoa_r+0x31e>
 800588c:	4602      	mov	r2, r0
 800588e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005892:	4b17      	ldr	r3, [pc, #92]	; (80058f0 <_dtoa_r+0x2e8>)
 8005894:	e6cc      	b.n	8005630 <_dtoa_r+0x28>
 8005896:	2301      	movs	r3, #1
 8005898:	e7de      	b.n	8005858 <_dtoa_r+0x250>
 800589a:	2300      	movs	r3, #0
 800589c:	930b      	str	r3, [sp, #44]	; 0x2c
 800589e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058a0:	eb0a 0903 	add.w	r9, sl, r3
 80058a4:	f109 0301 	add.w	r3, r9, #1
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	9308      	str	r3, [sp, #32]
 80058ac:	bfb8      	it	lt
 80058ae:	2301      	movlt	r3, #1
 80058b0:	e7dd      	b.n	800586e <_dtoa_r+0x266>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e7f2      	b.n	800589c <_dtoa_r+0x294>
 80058b6:	bf00      	nop
 80058b8:	636f4361 	.word	0x636f4361
 80058bc:	3fd287a7 	.word	0x3fd287a7
 80058c0:	8b60c8b3 	.word	0x8b60c8b3
 80058c4:	3fc68a28 	.word	0x3fc68a28
 80058c8:	509f79fb 	.word	0x509f79fb
 80058cc:	3fd34413 	.word	0x3fd34413
 80058d0:	08007775 	.word	0x08007775
 80058d4:	0800778c 	.word	0x0800778c
 80058d8:	7ff00000 	.word	0x7ff00000
 80058dc:	08007771 	.word	0x08007771
 80058e0:	08007768 	.word	0x08007768
 80058e4:	08007745 	.word	0x08007745
 80058e8:	3ff80000 	.word	0x3ff80000
 80058ec:	080078e0 	.word	0x080078e0
 80058f0:	080077e7 	.word	0x080077e7
 80058f4:	2401      	movs	r4, #1
 80058f6:	2300      	movs	r3, #0
 80058f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80058fa:	9322      	str	r3, [sp, #136]	; 0x88
 80058fc:	f04f 39ff 	mov.w	r9, #4294967295
 8005900:	2200      	movs	r2, #0
 8005902:	2312      	movs	r3, #18
 8005904:	f8cd 9020 	str.w	r9, [sp, #32]
 8005908:	9223      	str	r2, [sp, #140]	; 0x8c
 800590a:	e7b0      	b.n	800586e <_dtoa_r+0x266>
 800590c:	2301      	movs	r3, #1
 800590e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005910:	e7f4      	b.n	80058fc <_dtoa_r+0x2f4>
 8005912:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005916:	464b      	mov	r3, r9
 8005918:	f8cd 9020 	str.w	r9, [sp, #32]
 800591c:	e7a7      	b.n	800586e <_dtoa_r+0x266>
 800591e:	3101      	adds	r1, #1
 8005920:	6041      	str	r1, [r0, #4]
 8005922:	0052      	lsls	r2, r2, #1
 8005924:	e7a7      	b.n	8005876 <_dtoa_r+0x26e>
 8005926:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005928:	9a03      	ldr	r2, [sp, #12]
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	9b08      	ldr	r3, [sp, #32]
 800592e:	2b0e      	cmp	r3, #14
 8005930:	f200 80a8 	bhi.w	8005a84 <_dtoa_r+0x47c>
 8005934:	2c00      	cmp	r4, #0
 8005936:	f000 80a5 	beq.w	8005a84 <_dtoa_r+0x47c>
 800593a:	f1ba 0f00 	cmp.w	sl, #0
 800593e:	dd34      	ble.n	80059aa <_dtoa_r+0x3a2>
 8005940:	4a9a      	ldr	r2, [pc, #616]	; (8005bac <_dtoa_r+0x5a4>)
 8005942:	f00a 030f 	and.w	r3, sl, #15
 8005946:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800594a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800594e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005952:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005956:	ea4f 142a 	mov.w	r4, sl, asr #4
 800595a:	d016      	beq.n	800598a <_dtoa_r+0x382>
 800595c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005960:	4b93      	ldr	r3, [pc, #588]	; (8005bb0 <_dtoa_r+0x5a8>)
 8005962:	2703      	movs	r7, #3
 8005964:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005968:	f7fa fee0 	bl	800072c <__aeabi_ddiv>
 800596c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005970:	f004 040f 	and.w	r4, r4, #15
 8005974:	4e8e      	ldr	r6, [pc, #568]	; (8005bb0 <_dtoa_r+0x5a8>)
 8005976:	b954      	cbnz	r4, 800598e <_dtoa_r+0x386>
 8005978:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800597c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005980:	f7fa fed4 	bl	800072c <__aeabi_ddiv>
 8005984:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005988:	e029      	b.n	80059de <_dtoa_r+0x3d6>
 800598a:	2702      	movs	r7, #2
 800598c:	e7f2      	b.n	8005974 <_dtoa_r+0x36c>
 800598e:	07e1      	lsls	r1, r4, #31
 8005990:	d508      	bpl.n	80059a4 <_dtoa_r+0x39c>
 8005992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005996:	e9d6 2300 	ldrd	r2, r3, [r6]
 800599a:	f7fa fd9d 	bl	80004d8 <__aeabi_dmul>
 800599e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059a2:	3701      	adds	r7, #1
 80059a4:	1064      	asrs	r4, r4, #1
 80059a6:	3608      	adds	r6, #8
 80059a8:	e7e5      	b.n	8005976 <_dtoa_r+0x36e>
 80059aa:	f000 80a5 	beq.w	8005af8 <_dtoa_r+0x4f0>
 80059ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059b2:	f1ca 0400 	rsb	r4, sl, #0
 80059b6:	4b7d      	ldr	r3, [pc, #500]	; (8005bac <_dtoa_r+0x5a4>)
 80059b8:	f004 020f 	and.w	r2, r4, #15
 80059bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	f7fa fd88 	bl	80004d8 <__aeabi_dmul>
 80059c8:	2702      	movs	r7, #2
 80059ca:	2300      	movs	r3, #0
 80059cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059d0:	4e77      	ldr	r6, [pc, #476]	; (8005bb0 <_dtoa_r+0x5a8>)
 80059d2:	1124      	asrs	r4, r4, #4
 80059d4:	2c00      	cmp	r4, #0
 80059d6:	f040 8084 	bne.w	8005ae2 <_dtoa_r+0x4da>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1d2      	bne.n	8005984 <_dtoa_r+0x37c>
 80059de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 808b 	beq.w	8005afc <_dtoa_r+0x4f4>
 80059e6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80059ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80059ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059f2:	2200      	movs	r2, #0
 80059f4:	4b6f      	ldr	r3, [pc, #444]	; (8005bb4 <_dtoa_r+0x5ac>)
 80059f6:	f7fa ffe1 	bl	80009bc <__aeabi_dcmplt>
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d07e      	beq.n	8005afc <_dtoa_r+0x4f4>
 80059fe:	9b08      	ldr	r3, [sp, #32]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d07b      	beq.n	8005afc <_dtoa_r+0x4f4>
 8005a04:	f1b9 0f00 	cmp.w	r9, #0
 8005a08:	dd38      	ble.n	8005a7c <_dtoa_r+0x474>
 8005a0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a0e:	2200      	movs	r2, #0
 8005a10:	4b69      	ldr	r3, [pc, #420]	; (8005bb8 <_dtoa_r+0x5b0>)
 8005a12:	f7fa fd61 	bl	80004d8 <__aeabi_dmul>
 8005a16:	464c      	mov	r4, r9
 8005a18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a1c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005a20:	3701      	adds	r7, #1
 8005a22:	4638      	mov	r0, r7
 8005a24:	f7fa fcee 	bl	8000404 <__aeabi_i2d>
 8005a28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a2c:	f7fa fd54 	bl	80004d8 <__aeabi_dmul>
 8005a30:	2200      	movs	r2, #0
 8005a32:	4b62      	ldr	r3, [pc, #392]	; (8005bbc <_dtoa_r+0x5b4>)
 8005a34:	f7fa fb9a 	bl	800016c <__adddf3>
 8005a38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005a3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a40:	9611      	str	r6, [sp, #68]	; 0x44
 8005a42:	2c00      	cmp	r4, #0
 8005a44:	d15d      	bne.n	8005b02 <_dtoa_r+0x4fa>
 8005a46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	4b5c      	ldr	r3, [pc, #368]	; (8005bc0 <_dtoa_r+0x5b8>)
 8005a4e:	f7fa fb8b 	bl	8000168 <__aeabi_dsub>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a5a:	4633      	mov	r3, r6
 8005a5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a5e:	f7fa ffcb 	bl	80009f8 <__aeabi_dcmpgt>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f040 829c 	bne.w	8005fa0 <_dtoa_r+0x998>
 8005a68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a6e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005a72:	f7fa ffa3 	bl	80009bc <__aeabi_dcmplt>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	f040 8290 	bne.w	8005f9c <_dtoa_r+0x994>
 8005a7c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005a80:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f2c0 8152 	blt.w	8005d30 <_dtoa_r+0x728>
 8005a8c:	f1ba 0f0e 	cmp.w	sl, #14
 8005a90:	f300 814e 	bgt.w	8005d30 <_dtoa_r+0x728>
 8005a94:	4b45      	ldr	r3, [pc, #276]	; (8005bac <_dtoa_r+0x5a4>)
 8005a96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a9e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005aa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f280 80db 	bge.w	8005c60 <_dtoa_r+0x658>
 8005aaa:	9b08      	ldr	r3, [sp, #32]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f300 80d7 	bgt.w	8005c60 <_dtoa_r+0x658>
 8005ab2:	f040 8272 	bne.w	8005f9a <_dtoa_r+0x992>
 8005ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aba:	2200      	movs	r2, #0
 8005abc:	4b40      	ldr	r3, [pc, #256]	; (8005bc0 <_dtoa_r+0x5b8>)
 8005abe:	f7fa fd0b 	bl	80004d8 <__aeabi_dmul>
 8005ac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ac6:	f7fa ff8d 	bl	80009e4 <__aeabi_dcmpge>
 8005aca:	9c08      	ldr	r4, [sp, #32]
 8005acc:	4626      	mov	r6, r4
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	f040 8248 	bne.w	8005f64 <_dtoa_r+0x95c>
 8005ad4:	2331      	movs	r3, #49	; 0x31
 8005ad6:	9f03      	ldr	r7, [sp, #12]
 8005ad8:	f10a 0a01 	add.w	sl, sl, #1
 8005adc:	f807 3b01 	strb.w	r3, [r7], #1
 8005ae0:	e244      	b.n	8005f6c <_dtoa_r+0x964>
 8005ae2:	07e2      	lsls	r2, r4, #31
 8005ae4:	d505      	bpl.n	8005af2 <_dtoa_r+0x4ea>
 8005ae6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005aea:	f7fa fcf5 	bl	80004d8 <__aeabi_dmul>
 8005aee:	2301      	movs	r3, #1
 8005af0:	3701      	adds	r7, #1
 8005af2:	1064      	asrs	r4, r4, #1
 8005af4:	3608      	adds	r6, #8
 8005af6:	e76d      	b.n	80059d4 <_dtoa_r+0x3cc>
 8005af8:	2702      	movs	r7, #2
 8005afa:	e770      	b.n	80059de <_dtoa_r+0x3d6>
 8005afc:	46d0      	mov	r8, sl
 8005afe:	9c08      	ldr	r4, [sp, #32]
 8005b00:	e78f      	b.n	8005a22 <_dtoa_r+0x41a>
 8005b02:	9903      	ldr	r1, [sp, #12]
 8005b04:	4b29      	ldr	r3, [pc, #164]	; (8005bac <_dtoa_r+0x5a4>)
 8005b06:	4421      	add	r1, r4
 8005b08:	9112      	str	r1, [sp, #72]	; 0x48
 8005b0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b10:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005b14:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b18:	2900      	cmp	r1, #0
 8005b1a:	d055      	beq.n	8005bc8 <_dtoa_r+0x5c0>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	4929      	ldr	r1, [pc, #164]	; (8005bc4 <_dtoa_r+0x5bc>)
 8005b20:	f7fa fe04 	bl	800072c <__aeabi_ddiv>
 8005b24:	463b      	mov	r3, r7
 8005b26:	4632      	mov	r2, r6
 8005b28:	f7fa fb1e 	bl	8000168 <__aeabi_dsub>
 8005b2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b30:	9f03      	ldr	r7, [sp, #12]
 8005b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b36:	f7fa ff7f 	bl	8000a38 <__aeabi_d2iz>
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	f7fa fc62 	bl	8000404 <__aeabi_i2d>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b48:	f7fa fb0e 	bl	8000168 <__aeabi_dsub>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	3430      	adds	r4, #48	; 0x30
 8005b52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b5a:	f807 4b01 	strb.w	r4, [r7], #1
 8005b5e:	f7fa ff2d 	bl	80009bc <__aeabi_dcmplt>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	d174      	bne.n	8005c50 <_dtoa_r+0x648>
 8005b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	4911      	ldr	r1, [pc, #68]	; (8005bb4 <_dtoa_r+0x5ac>)
 8005b6e:	f7fa fafb 	bl	8000168 <__aeabi_dsub>
 8005b72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b76:	f7fa ff21 	bl	80009bc <__aeabi_dcmplt>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	f040 80b7 	bne.w	8005cee <_dtoa_r+0x6e6>
 8005b80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b82:	429f      	cmp	r7, r3
 8005b84:	f43f af7a 	beq.w	8005a7c <_dtoa_r+0x474>
 8005b88:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	4b0a      	ldr	r3, [pc, #40]	; (8005bb8 <_dtoa_r+0x5b0>)
 8005b90:	f7fa fca2 	bl	80004d8 <__aeabi_dmul>
 8005b94:	2200      	movs	r2, #0
 8005b96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b9e:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <_dtoa_r+0x5b0>)
 8005ba0:	f7fa fc9a 	bl	80004d8 <__aeabi_dmul>
 8005ba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ba8:	e7c3      	b.n	8005b32 <_dtoa_r+0x52a>
 8005baa:	bf00      	nop
 8005bac:	080078e0 	.word	0x080078e0
 8005bb0:	080078b8 	.word	0x080078b8
 8005bb4:	3ff00000 	.word	0x3ff00000
 8005bb8:	40240000 	.word	0x40240000
 8005bbc:	401c0000 	.word	0x401c0000
 8005bc0:	40140000 	.word	0x40140000
 8005bc4:	3fe00000 	.word	0x3fe00000
 8005bc8:	4630      	mov	r0, r6
 8005bca:	4639      	mov	r1, r7
 8005bcc:	f7fa fc84 	bl	80004d8 <__aeabi_dmul>
 8005bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bd6:	9c03      	ldr	r4, [sp, #12]
 8005bd8:	9314      	str	r3, [sp, #80]	; 0x50
 8005bda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bde:	f7fa ff2b 	bl	8000a38 <__aeabi_d2iz>
 8005be2:	9015      	str	r0, [sp, #84]	; 0x54
 8005be4:	f7fa fc0e 	bl	8000404 <__aeabi_i2d>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bf0:	f7fa faba 	bl	8000168 <__aeabi_dsub>
 8005bf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	3330      	adds	r3, #48	; 0x30
 8005bfa:	f804 3b01 	strb.w	r3, [r4], #1
 8005bfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c00:	460f      	mov	r7, r1
 8005c02:	429c      	cmp	r4, r3
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	d124      	bne.n	8005c54 <_dtoa_r+0x64c>
 8005c0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c0e:	4bb0      	ldr	r3, [pc, #704]	; (8005ed0 <_dtoa_r+0x8c8>)
 8005c10:	f7fa faac 	bl	800016c <__adddf3>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4630      	mov	r0, r6
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	f7fa feec 	bl	80009f8 <__aeabi_dcmpgt>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d163      	bne.n	8005cec <_dtoa_r+0x6e4>
 8005c24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c28:	2000      	movs	r0, #0
 8005c2a:	49a9      	ldr	r1, [pc, #676]	; (8005ed0 <_dtoa_r+0x8c8>)
 8005c2c:	f7fa fa9c 	bl	8000168 <__aeabi_dsub>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4630      	mov	r0, r6
 8005c36:	4639      	mov	r1, r7
 8005c38:	f7fa fec0 	bl	80009bc <__aeabi_dcmplt>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	f43f af1d 	beq.w	8005a7c <_dtoa_r+0x474>
 8005c42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005c44:	1e7b      	subs	r3, r7, #1
 8005c46:	9314      	str	r3, [sp, #80]	; 0x50
 8005c48:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005c4c:	2b30      	cmp	r3, #48	; 0x30
 8005c4e:	d0f8      	beq.n	8005c42 <_dtoa_r+0x63a>
 8005c50:	46c2      	mov	sl, r8
 8005c52:	e03b      	b.n	8005ccc <_dtoa_r+0x6c4>
 8005c54:	4b9f      	ldr	r3, [pc, #636]	; (8005ed4 <_dtoa_r+0x8cc>)
 8005c56:	f7fa fc3f 	bl	80004d8 <__aeabi_dmul>
 8005c5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c5e:	e7bc      	b.n	8005bda <_dtoa_r+0x5d2>
 8005c60:	9f03      	ldr	r7, [sp, #12]
 8005c62:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005c66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	f7fa fd5d 	bl	800072c <__aeabi_ddiv>
 8005c72:	f7fa fee1 	bl	8000a38 <__aeabi_d2iz>
 8005c76:	4604      	mov	r4, r0
 8005c78:	f7fa fbc4 	bl	8000404 <__aeabi_i2d>
 8005c7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c80:	f7fa fc2a 	bl	80004d8 <__aeabi_dmul>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4640      	mov	r0, r8
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	f7fa fa6c 	bl	8000168 <__aeabi_dsub>
 8005c90:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005c94:	f807 6b01 	strb.w	r6, [r7], #1
 8005c98:	9e03      	ldr	r6, [sp, #12]
 8005c9a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005c9e:	1bbe      	subs	r6, r7, r6
 8005ca0:	45b4      	cmp	ip, r6
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	d136      	bne.n	8005d16 <_dtoa_r+0x70e>
 8005ca8:	f7fa fa60 	bl	800016c <__adddf3>
 8005cac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cb0:	4680      	mov	r8, r0
 8005cb2:	4689      	mov	r9, r1
 8005cb4:	f7fa fea0 	bl	80009f8 <__aeabi_dcmpgt>
 8005cb8:	bb58      	cbnz	r0, 8005d12 <_dtoa_r+0x70a>
 8005cba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	4649      	mov	r1, r9
 8005cc2:	f7fa fe71 	bl	80009a8 <__aeabi_dcmpeq>
 8005cc6:	b108      	cbz	r0, 8005ccc <_dtoa_r+0x6c4>
 8005cc8:	07e1      	lsls	r1, r4, #31
 8005cca:	d422      	bmi.n	8005d12 <_dtoa_r+0x70a>
 8005ccc:	4628      	mov	r0, r5
 8005cce:	4659      	mov	r1, fp
 8005cd0:	f000 fbea 	bl	80064a8 <_Bfree>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	703b      	strb	r3, [r7, #0]
 8005cd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005cda:	f10a 0001 	add.w	r0, sl, #1
 8005cde:	6018      	str	r0, [r3, #0]
 8005ce0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f43f acde 	beq.w	80056a4 <_dtoa_r+0x9c>
 8005ce8:	601f      	str	r7, [r3, #0]
 8005cea:	e4db      	b.n	80056a4 <_dtoa_r+0x9c>
 8005cec:	4627      	mov	r7, r4
 8005cee:	463b      	mov	r3, r7
 8005cf0:	461f      	mov	r7, r3
 8005cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cf6:	2a39      	cmp	r2, #57	; 0x39
 8005cf8:	d107      	bne.n	8005d0a <_dtoa_r+0x702>
 8005cfa:	9a03      	ldr	r2, [sp, #12]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d1f7      	bne.n	8005cf0 <_dtoa_r+0x6e8>
 8005d00:	2230      	movs	r2, #48	; 0x30
 8005d02:	9903      	ldr	r1, [sp, #12]
 8005d04:	f108 0801 	add.w	r8, r8, #1
 8005d08:	700a      	strb	r2, [r1, #0]
 8005d0a:	781a      	ldrb	r2, [r3, #0]
 8005d0c:	3201      	adds	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e79e      	b.n	8005c50 <_dtoa_r+0x648>
 8005d12:	46d0      	mov	r8, sl
 8005d14:	e7eb      	b.n	8005cee <_dtoa_r+0x6e6>
 8005d16:	2200      	movs	r2, #0
 8005d18:	4b6e      	ldr	r3, [pc, #440]	; (8005ed4 <_dtoa_r+0x8cc>)
 8005d1a:	f7fa fbdd 	bl	80004d8 <__aeabi_dmul>
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2300      	movs	r3, #0
 8005d22:	4680      	mov	r8, r0
 8005d24:	4689      	mov	r9, r1
 8005d26:	f7fa fe3f 	bl	80009a8 <__aeabi_dcmpeq>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d09b      	beq.n	8005c66 <_dtoa_r+0x65e>
 8005d2e:	e7cd      	b.n	8005ccc <_dtoa_r+0x6c4>
 8005d30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d32:	2a00      	cmp	r2, #0
 8005d34:	f000 80d0 	beq.w	8005ed8 <_dtoa_r+0x8d0>
 8005d38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d3a:	2a01      	cmp	r2, #1
 8005d3c:	f300 80ae 	bgt.w	8005e9c <_dtoa_r+0x894>
 8005d40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d42:	2a00      	cmp	r2, #0
 8005d44:	f000 80a6 	beq.w	8005e94 <_dtoa_r+0x88c>
 8005d48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d4e:	9f06      	ldr	r7, [sp, #24]
 8005d50:	9a06      	ldr	r2, [sp, #24]
 8005d52:	2101      	movs	r1, #1
 8005d54:	441a      	add	r2, r3
 8005d56:	9206      	str	r2, [sp, #24]
 8005d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	441a      	add	r2, r3
 8005d5e:	9209      	str	r2, [sp, #36]	; 0x24
 8005d60:	f000 fc58 	bl	8006614 <__i2b>
 8005d64:	4606      	mov	r6, r0
 8005d66:	2f00      	cmp	r7, #0
 8005d68:	dd0c      	ble.n	8005d84 <_dtoa_r+0x77c>
 8005d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	dd09      	ble.n	8005d84 <_dtoa_r+0x77c>
 8005d70:	42bb      	cmp	r3, r7
 8005d72:	bfa8      	it	ge
 8005d74:	463b      	movge	r3, r7
 8005d76:	9a06      	ldr	r2, [sp, #24]
 8005d78:	1aff      	subs	r7, r7, r3
 8005d7a:	1ad2      	subs	r2, r2, r3
 8005d7c:	9206      	str	r2, [sp, #24]
 8005d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	9309      	str	r3, [sp, #36]	; 0x24
 8005d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d86:	b1f3      	cbz	r3, 8005dc6 <_dtoa_r+0x7be>
 8005d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 80a8 	beq.w	8005ee0 <_dtoa_r+0x8d8>
 8005d90:	2c00      	cmp	r4, #0
 8005d92:	dd10      	ble.n	8005db6 <_dtoa_r+0x7ae>
 8005d94:	4631      	mov	r1, r6
 8005d96:	4622      	mov	r2, r4
 8005d98:	4628      	mov	r0, r5
 8005d9a:	f000 fcf9 	bl	8006790 <__pow5mult>
 8005d9e:	465a      	mov	r2, fp
 8005da0:	4601      	mov	r1, r0
 8005da2:	4606      	mov	r6, r0
 8005da4:	4628      	mov	r0, r5
 8005da6:	f000 fc4b 	bl	8006640 <__multiply>
 8005daa:	4680      	mov	r8, r0
 8005dac:	4659      	mov	r1, fp
 8005dae:	4628      	mov	r0, r5
 8005db0:	f000 fb7a 	bl	80064a8 <_Bfree>
 8005db4:	46c3      	mov	fp, r8
 8005db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005db8:	1b1a      	subs	r2, r3, r4
 8005dba:	d004      	beq.n	8005dc6 <_dtoa_r+0x7be>
 8005dbc:	4659      	mov	r1, fp
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f000 fce6 	bl	8006790 <__pow5mult>
 8005dc4:	4683      	mov	fp, r0
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f000 fc23 	bl	8006614 <__i2b>
 8005dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f340 8086 	ble.w	8005ee4 <_dtoa_r+0x8dc>
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4601      	mov	r1, r0
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f000 fcd7 	bl	8006790 <__pow5mult>
 8005de2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005de4:	4604      	mov	r4, r0
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	dd7f      	ble.n	8005eea <_dtoa_r+0x8e2>
 8005dea:	f04f 0800 	mov.w	r8, #0
 8005dee:	6923      	ldr	r3, [r4, #16]
 8005df0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005df4:	6918      	ldr	r0, [r3, #16]
 8005df6:	f000 fbbf 	bl	8006578 <__hi0bits>
 8005dfa:	f1c0 0020 	rsb	r0, r0, #32
 8005dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e00:	4418      	add	r0, r3
 8005e02:	f010 001f 	ands.w	r0, r0, #31
 8005e06:	f000 8092 	beq.w	8005f2e <_dtoa_r+0x926>
 8005e0a:	f1c0 0320 	rsb	r3, r0, #32
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	f340 808a 	ble.w	8005f28 <_dtoa_r+0x920>
 8005e14:	f1c0 001c 	rsb	r0, r0, #28
 8005e18:	9b06      	ldr	r3, [sp, #24]
 8005e1a:	4407      	add	r7, r0
 8005e1c:	4403      	add	r3, r0
 8005e1e:	9306      	str	r3, [sp, #24]
 8005e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e22:	4403      	add	r3, r0
 8005e24:	9309      	str	r3, [sp, #36]	; 0x24
 8005e26:	9b06      	ldr	r3, [sp, #24]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	dd05      	ble.n	8005e38 <_dtoa_r+0x830>
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4628      	mov	r0, r5
 8005e32:	f000 fd07 	bl	8006844 <__lshift>
 8005e36:	4683      	mov	fp, r0
 8005e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	dd05      	ble.n	8005e4a <_dtoa_r+0x842>
 8005e3e:	4621      	mov	r1, r4
 8005e40:	461a      	mov	r2, r3
 8005e42:	4628      	mov	r0, r5
 8005e44:	f000 fcfe 	bl	8006844 <__lshift>
 8005e48:	4604      	mov	r4, r0
 8005e4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d070      	beq.n	8005f32 <_dtoa_r+0x92a>
 8005e50:	4621      	mov	r1, r4
 8005e52:	4658      	mov	r0, fp
 8005e54:	f000 fd66 	bl	8006924 <__mcmp>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	da6a      	bge.n	8005f32 <_dtoa_r+0x92a>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	4659      	mov	r1, fp
 8005e60:	220a      	movs	r2, #10
 8005e62:	4628      	mov	r0, r5
 8005e64:	f000 fb42 	bl	80064ec <__multadd>
 8005e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e6a:	4683      	mov	fp, r0
 8005e6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8194 	beq.w	800619e <_dtoa_r+0xb96>
 8005e76:	4631      	mov	r1, r6
 8005e78:	2300      	movs	r3, #0
 8005e7a:	220a      	movs	r2, #10
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 fb35 	bl	80064ec <__multadd>
 8005e82:	f1b9 0f00 	cmp.w	r9, #0
 8005e86:	4606      	mov	r6, r0
 8005e88:	f300 8093 	bgt.w	8005fb2 <_dtoa_r+0x9aa>
 8005e8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	dc57      	bgt.n	8005f42 <_dtoa_r+0x93a>
 8005e92:	e08e      	b.n	8005fb2 <_dtoa_r+0x9aa>
 8005e94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e9a:	e757      	b.n	8005d4c <_dtoa_r+0x744>
 8005e9c:	9b08      	ldr	r3, [sp, #32]
 8005e9e:	1e5c      	subs	r4, r3, #1
 8005ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea2:	42a3      	cmp	r3, r4
 8005ea4:	bfb7      	itett	lt
 8005ea6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ea8:	1b1c      	subge	r4, r3, r4
 8005eaa:	1ae2      	sublt	r2, r4, r3
 8005eac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005eae:	bfbe      	ittt	lt
 8005eb0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005eb2:	189b      	addlt	r3, r3, r2
 8005eb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005eb6:	9b08      	ldr	r3, [sp, #32]
 8005eb8:	bfb8      	it	lt
 8005eba:	2400      	movlt	r4, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bfbb      	ittet	lt
 8005ec0:	9b06      	ldrlt	r3, [sp, #24]
 8005ec2:	9a08      	ldrlt	r2, [sp, #32]
 8005ec4:	9f06      	ldrge	r7, [sp, #24]
 8005ec6:	1a9f      	sublt	r7, r3, r2
 8005ec8:	bfac      	ite	ge
 8005eca:	9b08      	ldrge	r3, [sp, #32]
 8005ecc:	2300      	movlt	r3, #0
 8005ece:	e73f      	b.n	8005d50 <_dtoa_r+0x748>
 8005ed0:	3fe00000 	.word	0x3fe00000
 8005ed4:	40240000 	.word	0x40240000
 8005ed8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005eda:	9f06      	ldr	r7, [sp, #24]
 8005edc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005ede:	e742      	b.n	8005d66 <_dtoa_r+0x75e>
 8005ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ee2:	e76b      	b.n	8005dbc <_dtoa_r+0x7b4>
 8005ee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	dc19      	bgt.n	8005f1e <_dtoa_r+0x916>
 8005eea:	9b04      	ldr	r3, [sp, #16]
 8005eec:	b9bb      	cbnz	r3, 8005f1e <_dtoa_r+0x916>
 8005eee:	9b05      	ldr	r3, [sp, #20]
 8005ef0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ef4:	b99b      	cbnz	r3, 8005f1e <_dtoa_r+0x916>
 8005ef6:	9b05      	ldr	r3, [sp, #20]
 8005ef8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005efc:	0d1b      	lsrs	r3, r3, #20
 8005efe:	051b      	lsls	r3, r3, #20
 8005f00:	b183      	cbz	r3, 8005f24 <_dtoa_r+0x91c>
 8005f02:	f04f 0801 	mov.w	r8, #1
 8005f06:	9b06      	ldr	r3, [sp, #24]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	9306      	str	r3, [sp, #24]
 8005f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f0e:	3301      	adds	r3, #1
 8005f10:	9309      	str	r3, [sp, #36]	; 0x24
 8005f12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f47f af6a 	bne.w	8005dee <_dtoa_r+0x7e6>
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	e76f      	b.n	8005dfe <_dtoa_r+0x7f6>
 8005f1e:	f04f 0800 	mov.w	r8, #0
 8005f22:	e7f6      	b.n	8005f12 <_dtoa_r+0x90a>
 8005f24:	4698      	mov	r8, r3
 8005f26:	e7f4      	b.n	8005f12 <_dtoa_r+0x90a>
 8005f28:	f43f af7d 	beq.w	8005e26 <_dtoa_r+0x81e>
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	301c      	adds	r0, #28
 8005f30:	e772      	b.n	8005e18 <_dtoa_r+0x810>
 8005f32:	9b08      	ldr	r3, [sp, #32]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	dc36      	bgt.n	8005fa6 <_dtoa_r+0x99e>
 8005f38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	dd33      	ble.n	8005fa6 <_dtoa_r+0x99e>
 8005f3e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f42:	f1b9 0f00 	cmp.w	r9, #0
 8005f46:	d10d      	bne.n	8005f64 <_dtoa_r+0x95c>
 8005f48:	4621      	mov	r1, r4
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	2205      	movs	r2, #5
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f000 facc 	bl	80064ec <__multadd>
 8005f54:	4601      	mov	r1, r0
 8005f56:	4604      	mov	r4, r0
 8005f58:	4658      	mov	r0, fp
 8005f5a:	f000 fce3 	bl	8006924 <__mcmp>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	f73f adb8 	bgt.w	8005ad4 <_dtoa_r+0x4cc>
 8005f64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f66:	9f03      	ldr	r7, [sp, #12]
 8005f68:	ea6f 0a03 	mvn.w	sl, r3
 8005f6c:	f04f 0800 	mov.w	r8, #0
 8005f70:	4621      	mov	r1, r4
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 fa98 	bl	80064a8 <_Bfree>
 8005f78:	2e00      	cmp	r6, #0
 8005f7a:	f43f aea7 	beq.w	8005ccc <_dtoa_r+0x6c4>
 8005f7e:	f1b8 0f00 	cmp.w	r8, #0
 8005f82:	d005      	beq.n	8005f90 <_dtoa_r+0x988>
 8005f84:	45b0      	cmp	r8, r6
 8005f86:	d003      	beq.n	8005f90 <_dtoa_r+0x988>
 8005f88:	4641      	mov	r1, r8
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f000 fa8c 	bl	80064a8 <_Bfree>
 8005f90:	4631      	mov	r1, r6
 8005f92:	4628      	mov	r0, r5
 8005f94:	f000 fa88 	bl	80064a8 <_Bfree>
 8005f98:	e698      	b.n	8005ccc <_dtoa_r+0x6c4>
 8005f9a:	2400      	movs	r4, #0
 8005f9c:	4626      	mov	r6, r4
 8005f9e:	e7e1      	b.n	8005f64 <_dtoa_r+0x95c>
 8005fa0:	46c2      	mov	sl, r8
 8005fa2:	4626      	mov	r6, r4
 8005fa4:	e596      	b.n	8005ad4 <_dtoa_r+0x4cc>
 8005fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80fd 	beq.w	80061ac <_dtoa_r+0xba4>
 8005fb2:	2f00      	cmp	r7, #0
 8005fb4:	dd05      	ble.n	8005fc2 <_dtoa_r+0x9ba>
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	463a      	mov	r2, r7
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 fc42 	bl	8006844 <__lshift>
 8005fc0:	4606      	mov	r6, r0
 8005fc2:	f1b8 0f00 	cmp.w	r8, #0
 8005fc6:	d05c      	beq.n	8006082 <_dtoa_r+0xa7a>
 8005fc8:	4628      	mov	r0, r5
 8005fca:	6871      	ldr	r1, [r6, #4]
 8005fcc:	f000 fa2c 	bl	8006428 <_Balloc>
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	b928      	cbnz	r0, 8005fe0 <_dtoa_r+0x9d8>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005fda:	4b7f      	ldr	r3, [pc, #508]	; (80061d8 <_dtoa_r+0xbd0>)
 8005fdc:	f7ff bb28 	b.w	8005630 <_dtoa_r+0x28>
 8005fe0:	6932      	ldr	r2, [r6, #16]
 8005fe2:	f106 010c 	add.w	r1, r6, #12
 8005fe6:	3202      	adds	r2, #2
 8005fe8:	0092      	lsls	r2, r2, #2
 8005fea:	300c      	adds	r0, #12
 8005fec:	f000 fa0e 	bl	800640c <memcpy>
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 fc25 	bl	8006844 <__lshift>
 8005ffa:	46b0      	mov	r8, r6
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	9b03      	ldr	r3, [sp, #12]
 8006000:	3301      	adds	r3, #1
 8006002:	9308      	str	r3, [sp, #32]
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	444b      	add	r3, r9
 8006008:	930a      	str	r3, [sp, #40]	; 0x28
 800600a:	9b04      	ldr	r3, [sp, #16]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	9309      	str	r3, [sp, #36]	; 0x24
 8006012:	9b08      	ldr	r3, [sp, #32]
 8006014:	4621      	mov	r1, r4
 8006016:	3b01      	subs	r3, #1
 8006018:	4658      	mov	r0, fp
 800601a:	9304      	str	r3, [sp, #16]
 800601c:	f7ff fa68 	bl	80054f0 <quorem>
 8006020:	4603      	mov	r3, r0
 8006022:	4641      	mov	r1, r8
 8006024:	3330      	adds	r3, #48	; 0x30
 8006026:	9006      	str	r0, [sp, #24]
 8006028:	4658      	mov	r0, fp
 800602a:	930b      	str	r3, [sp, #44]	; 0x2c
 800602c:	f000 fc7a 	bl	8006924 <__mcmp>
 8006030:	4632      	mov	r2, r6
 8006032:	4681      	mov	r9, r0
 8006034:	4621      	mov	r1, r4
 8006036:	4628      	mov	r0, r5
 8006038:	f000 fc90 	bl	800695c <__mdiff>
 800603c:	68c2      	ldr	r2, [r0, #12]
 800603e:	4607      	mov	r7, r0
 8006040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006042:	bb02      	cbnz	r2, 8006086 <_dtoa_r+0xa7e>
 8006044:	4601      	mov	r1, r0
 8006046:	4658      	mov	r0, fp
 8006048:	f000 fc6c 	bl	8006924 <__mcmp>
 800604c:	4602      	mov	r2, r0
 800604e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006050:	4639      	mov	r1, r7
 8006052:	4628      	mov	r0, r5
 8006054:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006058:	f000 fa26 	bl	80064a8 <_Bfree>
 800605c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800605e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006060:	9f08      	ldr	r7, [sp, #32]
 8006062:	ea43 0102 	orr.w	r1, r3, r2
 8006066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006068:	430b      	orrs	r3, r1
 800606a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800606c:	d10d      	bne.n	800608a <_dtoa_r+0xa82>
 800606e:	2b39      	cmp	r3, #57	; 0x39
 8006070:	d029      	beq.n	80060c6 <_dtoa_r+0xabe>
 8006072:	f1b9 0f00 	cmp.w	r9, #0
 8006076:	dd01      	ble.n	800607c <_dtoa_r+0xa74>
 8006078:	9b06      	ldr	r3, [sp, #24]
 800607a:	3331      	adds	r3, #49	; 0x31
 800607c:	9a04      	ldr	r2, [sp, #16]
 800607e:	7013      	strb	r3, [r2, #0]
 8006080:	e776      	b.n	8005f70 <_dtoa_r+0x968>
 8006082:	4630      	mov	r0, r6
 8006084:	e7b9      	b.n	8005ffa <_dtoa_r+0x9f2>
 8006086:	2201      	movs	r2, #1
 8006088:	e7e2      	b.n	8006050 <_dtoa_r+0xa48>
 800608a:	f1b9 0f00 	cmp.w	r9, #0
 800608e:	db06      	blt.n	800609e <_dtoa_r+0xa96>
 8006090:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006092:	ea41 0909 	orr.w	r9, r1, r9
 8006096:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006098:	ea59 0101 	orrs.w	r1, r9, r1
 800609c:	d120      	bne.n	80060e0 <_dtoa_r+0xad8>
 800609e:	2a00      	cmp	r2, #0
 80060a0:	ddec      	ble.n	800607c <_dtoa_r+0xa74>
 80060a2:	4659      	mov	r1, fp
 80060a4:	2201      	movs	r2, #1
 80060a6:	4628      	mov	r0, r5
 80060a8:	9308      	str	r3, [sp, #32]
 80060aa:	f000 fbcb 	bl	8006844 <__lshift>
 80060ae:	4621      	mov	r1, r4
 80060b0:	4683      	mov	fp, r0
 80060b2:	f000 fc37 	bl	8006924 <__mcmp>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	9b08      	ldr	r3, [sp, #32]
 80060ba:	dc02      	bgt.n	80060c2 <_dtoa_r+0xaba>
 80060bc:	d1de      	bne.n	800607c <_dtoa_r+0xa74>
 80060be:	07da      	lsls	r2, r3, #31
 80060c0:	d5dc      	bpl.n	800607c <_dtoa_r+0xa74>
 80060c2:	2b39      	cmp	r3, #57	; 0x39
 80060c4:	d1d8      	bne.n	8006078 <_dtoa_r+0xa70>
 80060c6:	2339      	movs	r3, #57	; 0x39
 80060c8:	9a04      	ldr	r2, [sp, #16]
 80060ca:	7013      	strb	r3, [r2, #0]
 80060cc:	463b      	mov	r3, r7
 80060ce:	461f      	mov	r7, r3
 80060d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	2a39      	cmp	r2, #57	; 0x39
 80060d8:	d050      	beq.n	800617c <_dtoa_r+0xb74>
 80060da:	3201      	adds	r2, #1
 80060dc:	701a      	strb	r2, [r3, #0]
 80060de:	e747      	b.n	8005f70 <_dtoa_r+0x968>
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	dd03      	ble.n	80060ec <_dtoa_r+0xae4>
 80060e4:	2b39      	cmp	r3, #57	; 0x39
 80060e6:	d0ee      	beq.n	80060c6 <_dtoa_r+0xabe>
 80060e8:	3301      	adds	r3, #1
 80060ea:	e7c7      	b.n	800607c <_dtoa_r+0xa74>
 80060ec:	9a08      	ldr	r2, [sp, #32]
 80060ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060f4:	428a      	cmp	r2, r1
 80060f6:	d02a      	beq.n	800614e <_dtoa_r+0xb46>
 80060f8:	4659      	mov	r1, fp
 80060fa:	2300      	movs	r3, #0
 80060fc:	220a      	movs	r2, #10
 80060fe:	4628      	mov	r0, r5
 8006100:	f000 f9f4 	bl	80064ec <__multadd>
 8006104:	45b0      	cmp	r8, r6
 8006106:	4683      	mov	fp, r0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	f04f 020a 	mov.w	r2, #10
 8006110:	4641      	mov	r1, r8
 8006112:	4628      	mov	r0, r5
 8006114:	d107      	bne.n	8006126 <_dtoa_r+0xb1e>
 8006116:	f000 f9e9 	bl	80064ec <__multadd>
 800611a:	4680      	mov	r8, r0
 800611c:	4606      	mov	r6, r0
 800611e:	9b08      	ldr	r3, [sp, #32]
 8006120:	3301      	adds	r3, #1
 8006122:	9308      	str	r3, [sp, #32]
 8006124:	e775      	b.n	8006012 <_dtoa_r+0xa0a>
 8006126:	f000 f9e1 	bl	80064ec <__multadd>
 800612a:	4631      	mov	r1, r6
 800612c:	4680      	mov	r8, r0
 800612e:	2300      	movs	r3, #0
 8006130:	220a      	movs	r2, #10
 8006132:	4628      	mov	r0, r5
 8006134:	f000 f9da 	bl	80064ec <__multadd>
 8006138:	4606      	mov	r6, r0
 800613a:	e7f0      	b.n	800611e <_dtoa_r+0xb16>
 800613c:	f1b9 0f00 	cmp.w	r9, #0
 8006140:	bfcc      	ite	gt
 8006142:	464f      	movgt	r7, r9
 8006144:	2701      	movle	r7, #1
 8006146:	f04f 0800 	mov.w	r8, #0
 800614a:	9a03      	ldr	r2, [sp, #12]
 800614c:	4417      	add	r7, r2
 800614e:	4659      	mov	r1, fp
 8006150:	2201      	movs	r2, #1
 8006152:	4628      	mov	r0, r5
 8006154:	9308      	str	r3, [sp, #32]
 8006156:	f000 fb75 	bl	8006844 <__lshift>
 800615a:	4621      	mov	r1, r4
 800615c:	4683      	mov	fp, r0
 800615e:	f000 fbe1 	bl	8006924 <__mcmp>
 8006162:	2800      	cmp	r0, #0
 8006164:	dcb2      	bgt.n	80060cc <_dtoa_r+0xac4>
 8006166:	d102      	bne.n	800616e <_dtoa_r+0xb66>
 8006168:	9b08      	ldr	r3, [sp, #32]
 800616a:	07db      	lsls	r3, r3, #31
 800616c:	d4ae      	bmi.n	80060cc <_dtoa_r+0xac4>
 800616e:	463b      	mov	r3, r7
 8006170:	461f      	mov	r7, r3
 8006172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006176:	2a30      	cmp	r2, #48	; 0x30
 8006178:	d0fa      	beq.n	8006170 <_dtoa_r+0xb68>
 800617a:	e6f9      	b.n	8005f70 <_dtoa_r+0x968>
 800617c:	9a03      	ldr	r2, [sp, #12]
 800617e:	429a      	cmp	r2, r3
 8006180:	d1a5      	bne.n	80060ce <_dtoa_r+0xac6>
 8006182:	2331      	movs	r3, #49	; 0x31
 8006184:	f10a 0a01 	add.w	sl, sl, #1
 8006188:	e779      	b.n	800607e <_dtoa_r+0xa76>
 800618a:	4b14      	ldr	r3, [pc, #80]	; (80061dc <_dtoa_r+0xbd4>)
 800618c:	f7ff baa8 	b.w	80056e0 <_dtoa_r+0xd8>
 8006190:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006192:	2b00      	cmp	r3, #0
 8006194:	f47f aa81 	bne.w	800569a <_dtoa_r+0x92>
 8006198:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <_dtoa_r+0xbd8>)
 800619a:	f7ff baa1 	b.w	80056e0 <_dtoa_r+0xd8>
 800619e:	f1b9 0f00 	cmp.w	r9, #0
 80061a2:	dc03      	bgt.n	80061ac <_dtoa_r+0xba4>
 80061a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	f73f aecb 	bgt.w	8005f42 <_dtoa_r+0x93a>
 80061ac:	9f03      	ldr	r7, [sp, #12]
 80061ae:	4621      	mov	r1, r4
 80061b0:	4658      	mov	r0, fp
 80061b2:	f7ff f99d 	bl	80054f0 <quorem>
 80061b6:	9a03      	ldr	r2, [sp, #12]
 80061b8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80061bc:	f807 3b01 	strb.w	r3, [r7], #1
 80061c0:	1aba      	subs	r2, r7, r2
 80061c2:	4591      	cmp	r9, r2
 80061c4:	ddba      	ble.n	800613c <_dtoa_r+0xb34>
 80061c6:	4659      	mov	r1, fp
 80061c8:	2300      	movs	r3, #0
 80061ca:	220a      	movs	r2, #10
 80061cc:	4628      	mov	r0, r5
 80061ce:	f000 f98d 	bl	80064ec <__multadd>
 80061d2:	4683      	mov	fp, r0
 80061d4:	e7eb      	b.n	80061ae <_dtoa_r+0xba6>
 80061d6:	bf00      	nop
 80061d8:	080077e7 	.word	0x080077e7
 80061dc:	08007744 	.word	0x08007744
 80061e0:	08007768 	.word	0x08007768

080061e4 <std>:
 80061e4:	2300      	movs	r3, #0
 80061e6:	b510      	push	{r4, lr}
 80061e8:	4604      	mov	r4, r0
 80061ea:	e9c0 3300 	strd	r3, r3, [r0]
 80061ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061f2:	6083      	str	r3, [r0, #8]
 80061f4:	8181      	strh	r1, [r0, #12]
 80061f6:	6643      	str	r3, [r0, #100]	; 0x64
 80061f8:	81c2      	strh	r2, [r0, #14]
 80061fa:	6183      	str	r3, [r0, #24]
 80061fc:	4619      	mov	r1, r3
 80061fe:	2208      	movs	r2, #8
 8006200:	305c      	adds	r0, #92	; 0x5c
 8006202:	f7fe fcf5 	bl	8004bf0 <memset>
 8006206:	4b05      	ldr	r3, [pc, #20]	; (800621c <std+0x38>)
 8006208:	6224      	str	r4, [r4, #32]
 800620a:	6263      	str	r3, [r4, #36]	; 0x24
 800620c:	4b04      	ldr	r3, [pc, #16]	; (8006220 <std+0x3c>)
 800620e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <std+0x40>)
 8006212:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006214:	4b04      	ldr	r3, [pc, #16]	; (8006228 <std+0x44>)
 8006216:	6323      	str	r3, [r4, #48]	; 0x30
 8006218:	bd10      	pop	{r4, pc}
 800621a:	bf00      	nop
 800621c:	08006fdd 	.word	0x08006fdd
 8006220:	08006fff 	.word	0x08006fff
 8006224:	08007037 	.word	0x08007037
 8006228:	0800705b 	.word	0x0800705b

0800622c <_cleanup_r>:
 800622c:	4901      	ldr	r1, [pc, #4]	; (8006234 <_cleanup_r+0x8>)
 800622e:	f000 b8af 	b.w	8006390 <_fwalk_reent>
 8006232:	bf00      	nop
 8006234:	08007369 	.word	0x08007369

08006238 <__sfmoreglue>:
 8006238:	2268      	movs	r2, #104	; 0x68
 800623a:	b570      	push	{r4, r5, r6, lr}
 800623c:	1e4d      	subs	r5, r1, #1
 800623e:	4355      	muls	r5, r2
 8006240:	460e      	mov	r6, r1
 8006242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006246:	f000 fced 	bl	8006c24 <_malloc_r>
 800624a:	4604      	mov	r4, r0
 800624c:	b140      	cbz	r0, 8006260 <__sfmoreglue+0x28>
 800624e:	2100      	movs	r1, #0
 8006250:	e9c0 1600 	strd	r1, r6, [r0]
 8006254:	300c      	adds	r0, #12
 8006256:	60a0      	str	r0, [r4, #8]
 8006258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800625c:	f7fe fcc8 	bl	8004bf0 <memset>
 8006260:	4620      	mov	r0, r4
 8006262:	bd70      	pop	{r4, r5, r6, pc}

08006264 <__sfp_lock_acquire>:
 8006264:	4801      	ldr	r0, [pc, #4]	; (800626c <__sfp_lock_acquire+0x8>)
 8006266:	f000 b8b8 	b.w	80063da <__retarget_lock_acquire_recursive>
 800626a:	bf00      	nop
 800626c:	20000f85 	.word	0x20000f85

08006270 <__sfp_lock_release>:
 8006270:	4801      	ldr	r0, [pc, #4]	; (8006278 <__sfp_lock_release+0x8>)
 8006272:	f000 b8b3 	b.w	80063dc <__retarget_lock_release_recursive>
 8006276:	bf00      	nop
 8006278:	20000f85 	.word	0x20000f85

0800627c <__sinit_lock_acquire>:
 800627c:	4801      	ldr	r0, [pc, #4]	; (8006284 <__sinit_lock_acquire+0x8>)
 800627e:	f000 b8ac 	b.w	80063da <__retarget_lock_acquire_recursive>
 8006282:	bf00      	nop
 8006284:	20000f86 	.word	0x20000f86

08006288 <__sinit_lock_release>:
 8006288:	4801      	ldr	r0, [pc, #4]	; (8006290 <__sinit_lock_release+0x8>)
 800628a:	f000 b8a7 	b.w	80063dc <__retarget_lock_release_recursive>
 800628e:	bf00      	nop
 8006290:	20000f86 	.word	0x20000f86

08006294 <__sinit>:
 8006294:	b510      	push	{r4, lr}
 8006296:	4604      	mov	r4, r0
 8006298:	f7ff fff0 	bl	800627c <__sinit_lock_acquire>
 800629c:	69a3      	ldr	r3, [r4, #24]
 800629e:	b11b      	cbz	r3, 80062a8 <__sinit+0x14>
 80062a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062a4:	f7ff bff0 	b.w	8006288 <__sinit_lock_release>
 80062a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062ac:	6523      	str	r3, [r4, #80]	; 0x50
 80062ae:	4b13      	ldr	r3, [pc, #76]	; (80062fc <__sinit+0x68>)
 80062b0:	4a13      	ldr	r2, [pc, #76]	; (8006300 <__sinit+0x6c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80062b6:	42a3      	cmp	r3, r4
 80062b8:	bf08      	it	eq
 80062ba:	2301      	moveq	r3, #1
 80062bc:	4620      	mov	r0, r4
 80062be:	bf08      	it	eq
 80062c0:	61a3      	streq	r3, [r4, #24]
 80062c2:	f000 f81f 	bl	8006304 <__sfp>
 80062c6:	6060      	str	r0, [r4, #4]
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 f81b 	bl	8006304 <__sfp>
 80062ce:	60a0      	str	r0, [r4, #8]
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 f817 	bl	8006304 <__sfp>
 80062d6:	2200      	movs	r2, #0
 80062d8:	2104      	movs	r1, #4
 80062da:	60e0      	str	r0, [r4, #12]
 80062dc:	6860      	ldr	r0, [r4, #4]
 80062de:	f7ff ff81 	bl	80061e4 <std>
 80062e2:	2201      	movs	r2, #1
 80062e4:	2109      	movs	r1, #9
 80062e6:	68a0      	ldr	r0, [r4, #8]
 80062e8:	f7ff ff7c 	bl	80061e4 <std>
 80062ec:	2202      	movs	r2, #2
 80062ee:	2112      	movs	r1, #18
 80062f0:	68e0      	ldr	r0, [r4, #12]
 80062f2:	f7ff ff77 	bl	80061e4 <std>
 80062f6:	2301      	movs	r3, #1
 80062f8:	61a3      	str	r3, [r4, #24]
 80062fa:	e7d1      	b.n	80062a0 <__sinit+0xc>
 80062fc:	08007730 	.word	0x08007730
 8006300:	0800622d 	.word	0x0800622d

08006304 <__sfp>:
 8006304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006306:	4607      	mov	r7, r0
 8006308:	f7ff ffac 	bl	8006264 <__sfp_lock_acquire>
 800630c:	4b1e      	ldr	r3, [pc, #120]	; (8006388 <__sfp+0x84>)
 800630e:	681e      	ldr	r6, [r3, #0]
 8006310:	69b3      	ldr	r3, [r6, #24]
 8006312:	b913      	cbnz	r3, 800631a <__sfp+0x16>
 8006314:	4630      	mov	r0, r6
 8006316:	f7ff ffbd 	bl	8006294 <__sinit>
 800631a:	3648      	adds	r6, #72	; 0x48
 800631c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006320:	3b01      	subs	r3, #1
 8006322:	d503      	bpl.n	800632c <__sfp+0x28>
 8006324:	6833      	ldr	r3, [r6, #0]
 8006326:	b30b      	cbz	r3, 800636c <__sfp+0x68>
 8006328:	6836      	ldr	r6, [r6, #0]
 800632a:	e7f7      	b.n	800631c <__sfp+0x18>
 800632c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006330:	b9d5      	cbnz	r5, 8006368 <__sfp+0x64>
 8006332:	4b16      	ldr	r3, [pc, #88]	; (800638c <__sfp+0x88>)
 8006334:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006338:	60e3      	str	r3, [r4, #12]
 800633a:	6665      	str	r5, [r4, #100]	; 0x64
 800633c:	f000 f84c 	bl	80063d8 <__retarget_lock_init_recursive>
 8006340:	f7ff ff96 	bl	8006270 <__sfp_lock_release>
 8006344:	2208      	movs	r2, #8
 8006346:	4629      	mov	r1, r5
 8006348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800634c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006350:	6025      	str	r5, [r4, #0]
 8006352:	61a5      	str	r5, [r4, #24]
 8006354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006358:	f7fe fc4a 	bl	8004bf0 <memset>
 800635c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006364:	4620      	mov	r0, r4
 8006366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006368:	3468      	adds	r4, #104	; 0x68
 800636a:	e7d9      	b.n	8006320 <__sfp+0x1c>
 800636c:	2104      	movs	r1, #4
 800636e:	4638      	mov	r0, r7
 8006370:	f7ff ff62 	bl	8006238 <__sfmoreglue>
 8006374:	4604      	mov	r4, r0
 8006376:	6030      	str	r0, [r6, #0]
 8006378:	2800      	cmp	r0, #0
 800637a:	d1d5      	bne.n	8006328 <__sfp+0x24>
 800637c:	f7ff ff78 	bl	8006270 <__sfp_lock_release>
 8006380:	230c      	movs	r3, #12
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	e7ee      	b.n	8006364 <__sfp+0x60>
 8006386:	bf00      	nop
 8006388:	08007730 	.word	0x08007730
 800638c:	ffff0001 	.word	0xffff0001

08006390 <_fwalk_reent>:
 8006390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006394:	4606      	mov	r6, r0
 8006396:	4688      	mov	r8, r1
 8006398:	2700      	movs	r7, #0
 800639a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800639e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063a2:	f1b9 0901 	subs.w	r9, r9, #1
 80063a6:	d505      	bpl.n	80063b4 <_fwalk_reent+0x24>
 80063a8:	6824      	ldr	r4, [r4, #0]
 80063aa:	2c00      	cmp	r4, #0
 80063ac:	d1f7      	bne.n	800639e <_fwalk_reent+0xe>
 80063ae:	4638      	mov	r0, r7
 80063b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063b4:	89ab      	ldrh	r3, [r5, #12]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d907      	bls.n	80063ca <_fwalk_reent+0x3a>
 80063ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063be:	3301      	adds	r3, #1
 80063c0:	d003      	beq.n	80063ca <_fwalk_reent+0x3a>
 80063c2:	4629      	mov	r1, r5
 80063c4:	4630      	mov	r0, r6
 80063c6:	47c0      	blx	r8
 80063c8:	4307      	orrs	r7, r0
 80063ca:	3568      	adds	r5, #104	; 0x68
 80063cc:	e7e9      	b.n	80063a2 <_fwalk_reent+0x12>
	...

080063d0 <_localeconv_r>:
 80063d0:	4800      	ldr	r0, [pc, #0]	; (80063d4 <_localeconv_r+0x4>)
 80063d2:	4770      	bx	lr
 80063d4:	20000160 	.word	0x20000160

080063d8 <__retarget_lock_init_recursive>:
 80063d8:	4770      	bx	lr

080063da <__retarget_lock_acquire_recursive>:
 80063da:	4770      	bx	lr

080063dc <__retarget_lock_release_recursive>:
 80063dc:	4770      	bx	lr
	...

080063e0 <malloc>:
 80063e0:	4b02      	ldr	r3, [pc, #8]	; (80063ec <malloc+0xc>)
 80063e2:	4601      	mov	r1, r0
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	f000 bc1d 	b.w	8006c24 <_malloc_r>
 80063ea:	bf00      	nop
 80063ec:	2000000c 	.word	0x2000000c

080063f0 <memchr>:
 80063f0:	4603      	mov	r3, r0
 80063f2:	b510      	push	{r4, lr}
 80063f4:	b2c9      	uxtb	r1, r1
 80063f6:	4402      	add	r2, r0
 80063f8:	4293      	cmp	r3, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	d101      	bne.n	8006402 <memchr+0x12>
 80063fe:	2000      	movs	r0, #0
 8006400:	e003      	b.n	800640a <memchr+0x1a>
 8006402:	7804      	ldrb	r4, [r0, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	428c      	cmp	r4, r1
 8006408:	d1f6      	bne.n	80063f8 <memchr+0x8>
 800640a:	bd10      	pop	{r4, pc}

0800640c <memcpy>:
 800640c:	440a      	add	r2, r1
 800640e:	4291      	cmp	r1, r2
 8006410:	f100 33ff 	add.w	r3, r0, #4294967295
 8006414:	d100      	bne.n	8006418 <memcpy+0xc>
 8006416:	4770      	bx	lr
 8006418:	b510      	push	{r4, lr}
 800641a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800641e:	4291      	cmp	r1, r2
 8006420:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006424:	d1f9      	bne.n	800641a <memcpy+0xe>
 8006426:	bd10      	pop	{r4, pc}

08006428 <_Balloc>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800642c:	4604      	mov	r4, r0
 800642e:	460d      	mov	r5, r1
 8006430:	b976      	cbnz	r6, 8006450 <_Balloc+0x28>
 8006432:	2010      	movs	r0, #16
 8006434:	f7ff ffd4 	bl	80063e0 <malloc>
 8006438:	4602      	mov	r2, r0
 800643a:	6260      	str	r0, [r4, #36]	; 0x24
 800643c:	b920      	cbnz	r0, 8006448 <_Balloc+0x20>
 800643e:	2166      	movs	r1, #102	; 0x66
 8006440:	4b17      	ldr	r3, [pc, #92]	; (80064a0 <_Balloc+0x78>)
 8006442:	4818      	ldr	r0, [pc, #96]	; (80064a4 <_Balloc+0x7c>)
 8006444:	f000 fee0 	bl	8007208 <__assert_func>
 8006448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800644c:	6006      	str	r6, [r0, #0]
 800644e:	60c6      	str	r6, [r0, #12]
 8006450:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006452:	68f3      	ldr	r3, [r6, #12]
 8006454:	b183      	cbz	r3, 8006478 <_Balloc+0x50>
 8006456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800645e:	b9b8      	cbnz	r0, 8006490 <_Balloc+0x68>
 8006460:	2101      	movs	r1, #1
 8006462:	fa01 f605 	lsl.w	r6, r1, r5
 8006466:	1d72      	adds	r2, r6, #5
 8006468:	4620      	mov	r0, r4
 800646a:	0092      	lsls	r2, r2, #2
 800646c:	f000 fb5e 	bl	8006b2c <_calloc_r>
 8006470:	b160      	cbz	r0, 800648c <_Balloc+0x64>
 8006472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006476:	e00e      	b.n	8006496 <_Balloc+0x6e>
 8006478:	2221      	movs	r2, #33	; 0x21
 800647a:	2104      	movs	r1, #4
 800647c:	4620      	mov	r0, r4
 800647e:	f000 fb55 	bl	8006b2c <_calloc_r>
 8006482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006484:	60f0      	str	r0, [r6, #12]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e4      	bne.n	8006456 <_Balloc+0x2e>
 800648c:	2000      	movs	r0, #0
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	6802      	ldr	r2, [r0, #0]
 8006492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006496:	2300      	movs	r3, #0
 8006498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800649c:	e7f7      	b.n	800648e <_Balloc+0x66>
 800649e:	bf00      	nop
 80064a0:	08007775 	.word	0x08007775
 80064a4:	08007858 	.word	0x08007858

080064a8 <_Bfree>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064ac:	4605      	mov	r5, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	b976      	cbnz	r6, 80064d0 <_Bfree+0x28>
 80064b2:	2010      	movs	r0, #16
 80064b4:	f7ff ff94 	bl	80063e0 <malloc>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6268      	str	r0, [r5, #36]	; 0x24
 80064bc:	b920      	cbnz	r0, 80064c8 <_Bfree+0x20>
 80064be:	218a      	movs	r1, #138	; 0x8a
 80064c0:	4b08      	ldr	r3, [pc, #32]	; (80064e4 <_Bfree+0x3c>)
 80064c2:	4809      	ldr	r0, [pc, #36]	; (80064e8 <_Bfree+0x40>)
 80064c4:	f000 fea0 	bl	8007208 <__assert_func>
 80064c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064cc:	6006      	str	r6, [r0, #0]
 80064ce:	60c6      	str	r6, [r0, #12]
 80064d0:	b13c      	cbz	r4, 80064e2 <_Bfree+0x3a>
 80064d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064d4:	6862      	ldr	r2, [r4, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064dc:	6021      	str	r1, [r4, #0]
 80064de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	08007775 	.word	0x08007775
 80064e8:	08007858 	.word	0x08007858

080064ec <__multadd>:
 80064ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f0:	4607      	mov	r7, r0
 80064f2:	460c      	mov	r4, r1
 80064f4:	461e      	mov	r6, r3
 80064f6:	2000      	movs	r0, #0
 80064f8:	690d      	ldr	r5, [r1, #16]
 80064fa:	f101 0c14 	add.w	ip, r1, #20
 80064fe:	f8dc 3000 	ldr.w	r3, [ip]
 8006502:	3001      	adds	r0, #1
 8006504:	b299      	uxth	r1, r3
 8006506:	fb02 6101 	mla	r1, r2, r1, r6
 800650a:	0c1e      	lsrs	r6, r3, #16
 800650c:	0c0b      	lsrs	r3, r1, #16
 800650e:	fb02 3306 	mla	r3, r2, r6, r3
 8006512:	b289      	uxth	r1, r1
 8006514:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006518:	4285      	cmp	r5, r0
 800651a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800651e:	f84c 1b04 	str.w	r1, [ip], #4
 8006522:	dcec      	bgt.n	80064fe <__multadd+0x12>
 8006524:	b30e      	cbz	r6, 800656a <__multadd+0x7e>
 8006526:	68a3      	ldr	r3, [r4, #8]
 8006528:	42ab      	cmp	r3, r5
 800652a:	dc19      	bgt.n	8006560 <__multadd+0x74>
 800652c:	6861      	ldr	r1, [r4, #4]
 800652e:	4638      	mov	r0, r7
 8006530:	3101      	adds	r1, #1
 8006532:	f7ff ff79 	bl	8006428 <_Balloc>
 8006536:	4680      	mov	r8, r0
 8006538:	b928      	cbnz	r0, 8006546 <__multadd+0x5a>
 800653a:	4602      	mov	r2, r0
 800653c:	21b5      	movs	r1, #181	; 0xb5
 800653e:	4b0c      	ldr	r3, [pc, #48]	; (8006570 <__multadd+0x84>)
 8006540:	480c      	ldr	r0, [pc, #48]	; (8006574 <__multadd+0x88>)
 8006542:	f000 fe61 	bl	8007208 <__assert_func>
 8006546:	6922      	ldr	r2, [r4, #16]
 8006548:	f104 010c 	add.w	r1, r4, #12
 800654c:	3202      	adds	r2, #2
 800654e:	0092      	lsls	r2, r2, #2
 8006550:	300c      	adds	r0, #12
 8006552:	f7ff ff5b 	bl	800640c <memcpy>
 8006556:	4621      	mov	r1, r4
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff ffa5 	bl	80064a8 <_Bfree>
 800655e:	4644      	mov	r4, r8
 8006560:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006564:	3501      	adds	r5, #1
 8006566:	615e      	str	r6, [r3, #20]
 8006568:	6125      	str	r5, [r4, #16]
 800656a:	4620      	mov	r0, r4
 800656c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006570:	080077e7 	.word	0x080077e7
 8006574:	08007858 	.word	0x08007858

08006578 <__hi0bits>:
 8006578:	0c02      	lsrs	r2, r0, #16
 800657a:	0412      	lsls	r2, r2, #16
 800657c:	4603      	mov	r3, r0
 800657e:	b9ca      	cbnz	r2, 80065b4 <__hi0bits+0x3c>
 8006580:	0403      	lsls	r3, r0, #16
 8006582:	2010      	movs	r0, #16
 8006584:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006588:	bf04      	itt	eq
 800658a:	021b      	lsleq	r3, r3, #8
 800658c:	3008      	addeq	r0, #8
 800658e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006592:	bf04      	itt	eq
 8006594:	011b      	lsleq	r3, r3, #4
 8006596:	3004      	addeq	r0, #4
 8006598:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800659c:	bf04      	itt	eq
 800659e:	009b      	lsleq	r3, r3, #2
 80065a0:	3002      	addeq	r0, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	db05      	blt.n	80065b2 <__hi0bits+0x3a>
 80065a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80065aa:	f100 0001 	add.w	r0, r0, #1
 80065ae:	bf08      	it	eq
 80065b0:	2020      	moveq	r0, #32
 80065b2:	4770      	bx	lr
 80065b4:	2000      	movs	r0, #0
 80065b6:	e7e5      	b.n	8006584 <__hi0bits+0xc>

080065b8 <__lo0bits>:
 80065b8:	6803      	ldr	r3, [r0, #0]
 80065ba:	4602      	mov	r2, r0
 80065bc:	f013 0007 	ands.w	r0, r3, #7
 80065c0:	d00b      	beq.n	80065da <__lo0bits+0x22>
 80065c2:	07d9      	lsls	r1, r3, #31
 80065c4:	d421      	bmi.n	800660a <__lo0bits+0x52>
 80065c6:	0798      	lsls	r0, r3, #30
 80065c8:	bf49      	itett	mi
 80065ca:	085b      	lsrmi	r3, r3, #1
 80065cc:	089b      	lsrpl	r3, r3, #2
 80065ce:	2001      	movmi	r0, #1
 80065d0:	6013      	strmi	r3, [r2, #0]
 80065d2:	bf5c      	itt	pl
 80065d4:	2002      	movpl	r0, #2
 80065d6:	6013      	strpl	r3, [r2, #0]
 80065d8:	4770      	bx	lr
 80065da:	b299      	uxth	r1, r3
 80065dc:	b909      	cbnz	r1, 80065e2 <__lo0bits+0x2a>
 80065de:	2010      	movs	r0, #16
 80065e0:	0c1b      	lsrs	r3, r3, #16
 80065e2:	b2d9      	uxtb	r1, r3
 80065e4:	b909      	cbnz	r1, 80065ea <__lo0bits+0x32>
 80065e6:	3008      	adds	r0, #8
 80065e8:	0a1b      	lsrs	r3, r3, #8
 80065ea:	0719      	lsls	r1, r3, #28
 80065ec:	bf04      	itt	eq
 80065ee:	091b      	lsreq	r3, r3, #4
 80065f0:	3004      	addeq	r0, #4
 80065f2:	0799      	lsls	r1, r3, #30
 80065f4:	bf04      	itt	eq
 80065f6:	089b      	lsreq	r3, r3, #2
 80065f8:	3002      	addeq	r0, #2
 80065fa:	07d9      	lsls	r1, r3, #31
 80065fc:	d403      	bmi.n	8006606 <__lo0bits+0x4e>
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	f100 0001 	add.w	r0, r0, #1
 8006604:	d003      	beq.n	800660e <__lo0bits+0x56>
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	4770      	bx	lr
 800660a:	2000      	movs	r0, #0
 800660c:	4770      	bx	lr
 800660e:	2020      	movs	r0, #32
 8006610:	4770      	bx	lr
	...

08006614 <__i2b>:
 8006614:	b510      	push	{r4, lr}
 8006616:	460c      	mov	r4, r1
 8006618:	2101      	movs	r1, #1
 800661a:	f7ff ff05 	bl	8006428 <_Balloc>
 800661e:	4602      	mov	r2, r0
 8006620:	b928      	cbnz	r0, 800662e <__i2b+0x1a>
 8006622:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006626:	4b04      	ldr	r3, [pc, #16]	; (8006638 <__i2b+0x24>)
 8006628:	4804      	ldr	r0, [pc, #16]	; (800663c <__i2b+0x28>)
 800662a:	f000 fded 	bl	8007208 <__assert_func>
 800662e:	2301      	movs	r3, #1
 8006630:	6144      	str	r4, [r0, #20]
 8006632:	6103      	str	r3, [r0, #16]
 8006634:	bd10      	pop	{r4, pc}
 8006636:	bf00      	nop
 8006638:	080077e7 	.word	0x080077e7
 800663c:	08007858 	.word	0x08007858

08006640 <__multiply>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	4691      	mov	r9, r2
 8006646:	690a      	ldr	r2, [r1, #16]
 8006648:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800664c:	460c      	mov	r4, r1
 800664e:	429a      	cmp	r2, r3
 8006650:	bfbe      	ittt	lt
 8006652:	460b      	movlt	r3, r1
 8006654:	464c      	movlt	r4, r9
 8006656:	4699      	movlt	r9, r3
 8006658:	6927      	ldr	r7, [r4, #16]
 800665a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800665e:	68a3      	ldr	r3, [r4, #8]
 8006660:	6861      	ldr	r1, [r4, #4]
 8006662:	eb07 060a 	add.w	r6, r7, sl
 8006666:	42b3      	cmp	r3, r6
 8006668:	b085      	sub	sp, #20
 800666a:	bfb8      	it	lt
 800666c:	3101      	addlt	r1, #1
 800666e:	f7ff fedb 	bl	8006428 <_Balloc>
 8006672:	b930      	cbnz	r0, 8006682 <__multiply+0x42>
 8006674:	4602      	mov	r2, r0
 8006676:	f240 115d 	movw	r1, #349	; 0x15d
 800667a:	4b43      	ldr	r3, [pc, #268]	; (8006788 <__multiply+0x148>)
 800667c:	4843      	ldr	r0, [pc, #268]	; (800678c <__multiply+0x14c>)
 800667e:	f000 fdc3 	bl	8007208 <__assert_func>
 8006682:	f100 0514 	add.w	r5, r0, #20
 8006686:	462b      	mov	r3, r5
 8006688:	2200      	movs	r2, #0
 800668a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800668e:	4543      	cmp	r3, r8
 8006690:	d321      	bcc.n	80066d6 <__multiply+0x96>
 8006692:	f104 0314 	add.w	r3, r4, #20
 8006696:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800669a:	f109 0314 	add.w	r3, r9, #20
 800669e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066a2:	9202      	str	r2, [sp, #8]
 80066a4:	1b3a      	subs	r2, r7, r4
 80066a6:	3a15      	subs	r2, #21
 80066a8:	f022 0203 	bic.w	r2, r2, #3
 80066ac:	3204      	adds	r2, #4
 80066ae:	f104 0115 	add.w	r1, r4, #21
 80066b2:	428f      	cmp	r7, r1
 80066b4:	bf38      	it	cc
 80066b6:	2204      	movcc	r2, #4
 80066b8:	9201      	str	r2, [sp, #4]
 80066ba:	9a02      	ldr	r2, [sp, #8]
 80066bc:	9303      	str	r3, [sp, #12]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d80c      	bhi.n	80066dc <__multiply+0x9c>
 80066c2:	2e00      	cmp	r6, #0
 80066c4:	dd03      	ble.n	80066ce <__multiply+0x8e>
 80066c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d059      	beq.n	8006782 <__multiply+0x142>
 80066ce:	6106      	str	r6, [r0, #16]
 80066d0:	b005      	add	sp, #20
 80066d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d6:	f843 2b04 	str.w	r2, [r3], #4
 80066da:	e7d8      	b.n	800668e <__multiply+0x4e>
 80066dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80066e0:	f1ba 0f00 	cmp.w	sl, #0
 80066e4:	d023      	beq.n	800672e <__multiply+0xee>
 80066e6:	46a9      	mov	r9, r5
 80066e8:	f04f 0c00 	mov.w	ip, #0
 80066ec:	f104 0e14 	add.w	lr, r4, #20
 80066f0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80066f4:	f8d9 1000 	ldr.w	r1, [r9]
 80066f8:	fa1f fb82 	uxth.w	fp, r2
 80066fc:	b289      	uxth	r1, r1
 80066fe:	fb0a 110b 	mla	r1, sl, fp, r1
 8006702:	4461      	add	r1, ip
 8006704:	f8d9 c000 	ldr.w	ip, [r9]
 8006708:	0c12      	lsrs	r2, r2, #16
 800670a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800670e:	fb0a c202 	mla	r2, sl, r2, ip
 8006712:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006716:	b289      	uxth	r1, r1
 8006718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800671c:	4577      	cmp	r7, lr
 800671e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006722:	f849 1b04 	str.w	r1, [r9], #4
 8006726:	d8e3      	bhi.n	80066f0 <__multiply+0xb0>
 8006728:	9a01      	ldr	r2, [sp, #4]
 800672a:	f845 c002 	str.w	ip, [r5, r2]
 800672e:	9a03      	ldr	r2, [sp, #12]
 8006730:	3304      	adds	r3, #4
 8006732:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006736:	f1b9 0f00 	cmp.w	r9, #0
 800673a:	d020      	beq.n	800677e <__multiply+0x13e>
 800673c:	46ae      	mov	lr, r5
 800673e:	f04f 0a00 	mov.w	sl, #0
 8006742:	6829      	ldr	r1, [r5, #0]
 8006744:	f104 0c14 	add.w	ip, r4, #20
 8006748:	f8bc b000 	ldrh.w	fp, [ip]
 800674c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006750:	b289      	uxth	r1, r1
 8006752:	fb09 220b 	mla	r2, r9, fp, r2
 8006756:	4492      	add	sl, r2
 8006758:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800675c:	f84e 1b04 	str.w	r1, [lr], #4
 8006760:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006764:	f8be 1000 	ldrh.w	r1, [lr]
 8006768:	0c12      	lsrs	r2, r2, #16
 800676a:	fb09 1102 	mla	r1, r9, r2, r1
 800676e:	4567      	cmp	r7, ip
 8006770:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006774:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006778:	d8e6      	bhi.n	8006748 <__multiply+0x108>
 800677a:	9a01      	ldr	r2, [sp, #4]
 800677c:	50a9      	str	r1, [r5, r2]
 800677e:	3504      	adds	r5, #4
 8006780:	e79b      	b.n	80066ba <__multiply+0x7a>
 8006782:	3e01      	subs	r6, #1
 8006784:	e79d      	b.n	80066c2 <__multiply+0x82>
 8006786:	bf00      	nop
 8006788:	080077e7 	.word	0x080077e7
 800678c:	08007858 	.word	0x08007858

08006790 <__pow5mult>:
 8006790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006794:	4615      	mov	r5, r2
 8006796:	f012 0203 	ands.w	r2, r2, #3
 800679a:	4606      	mov	r6, r0
 800679c:	460f      	mov	r7, r1
 800679e:	d007      	beq.n	80067b0 <__pow5mult+0x20>
 80067a0:	4c25      	ldr	r4, [pc, #148]	; (8006838 <__pow5mult+0xa8>)
 80067a2:	3a01      	subs	r2, #1
 80067a4:	2300      	movs	r3, #0
 80067a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067aa:	f7ff fe9f 	bl	80064ec <__multadd>
 80067ae:	4607      	mov	r7, r0
 80067b0:	10ad      	asrs	r5, r5, #2
 80067b2:	d03d      	beq.n	8006830 <__pow5mult+0xa0>
 80067b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80067b6:	b97c      	cbnz	r4, 80067d8 <__pow5mult+0x48>
 80067b8:	2010      	movs	r0, #16
 80067ba:	f7ff fe11 	bl	80063e0 <malloc>
 80067be:	4602      	mov	r2, r0
 80067c0:	6270      	str	r0, [r6, #36]	; 0x24
 80067c2:	b928      	cbnz	r0, 80067d0 <__pow5mult+0x40>
 80067c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80067c8:	4b1c      	ldr	r3, [pc, #112]	; (800683c <__pow5mult+0xac>)
 80067ca:	481d      	ldr	r0, [pc, #116]	; (8006840 <__pow5mult+0xb0>)
 80067cc:	f000 fd1c 	bl	8007208 <__assert_func>
 80067d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067d4:	6004      	str	r4, [r0, #0]
 80067d6:	60c4      	str	r4, [r0, #12]
 80067d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067e0:	b94c      	cbnz	r4, 80067f6 <__pow5mult+0x66>
 80067e2:	f240 2171 	movw	r1, #625	; 0x271
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7ff ff14 	bl	8006614 <__i2b>
 80067ec:	2300      	movs	r3, #0
 80067ee:	4604      	mov	r4, r0
 80067f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80067f4:	6003      	str	r3, [r0, #0]
 80067f6:	f04f 0900 	mov.w	r9, #0
 80067fa:	07eb      	lsls	r3, r5, #31
 80067fc:	d50a      	bpl.n	8006814 <__pow5mult+0x84>
 80067fe:	4639      	mov	r1, r7
 8006800:	4622      	mov	r2, r4
 8006802:	4630      	mov	r0, r6
 8006804:	f7ff ff1c 	bl	8006640 <__multiply>
 8006808:	4680      	mov	r8, r0
 800680a:	4639      	mov	r1, r7
 800680c:	4630      	mov	r0, r6
 800680e:	f7ff fe4b 	bl	80064a8 <_Bfree>
 8006812:	4647      	mov	r7, r8
 8006814:	106d      	asrs	r5, r5, #1
 8006816:	d00b      	beq.n	8006830 <__pow5mult+0xa0>
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	b938      	cbnz	r0, 800682c <__pow5mult+0x9c>
 800681c:	4622      	mov	r2, r4
 800681e:	4621      	mov	r1, r4
 8006820:	4630      	mov	r0, r6
 8006822:	f7ff ff0d 	bl	8006640 <__multiply>
 8006826:	6020      	str	r0, [r4, #0]
 8006828:	f8c0 9000 	str.w	r9, [r0]
 800682c:	4604      	mov	r4, r0
 800682e:	e7e4      	b.n	80067fa <__pow5mult+0x6a>
 8006830:	4638      	mov	r0, r7
 8006832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006836:	bf00      	nop
 8006838:	080079a8 	.word	0x080079a8
 800683c:	08007775 	.word	0x08007775
 8006840:	08007858 	.word	0x08007858

08006844 <__lshift>:
 8006844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	460c      	mov	r4, r1
 800684a:	4607      	mov	r7, r0
 800684c:	4691      	mov	r9, r2
 800684e:	6923      	ldr	r3, [r4, #16]
 8006850:	6849      	ldr	r1, [r1, #4]
 8006852:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006856:	68a3      	ldr	r3, [r4, #8]
 8006858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800685c:	f108 0601 	add.w	r6, r8, #1
 8006860:	42b3      	cmp	r3, r6
 8006862:	db0b      	blt.n	800687c <__lshift+0x38>
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff fddf 	bl	8006428 <_Balloc>
 800686a:	4605      	mov	r5, r0
 800686c:	b948      	cbnz	r0, 8006882 <__lshift+0x3e>
 800686e:	4602      	mov	r2, r0
 8006870:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006874:	4b29      	ldr	r3, [pc, #164]	; (800691c <__lshift+0xd8>)
 8006876:	482a      	ldr	r0, [pc, #168]	; (8006920 <__lshift+0xdc>)
 8006878:	f000 fcc6 	bl	8007208 <__assert_func>
 800687c:	3101      	adds	r1, #1
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	e7ee      	b.n	8006860 <__lshift+0x1c>
 8006882:	2300      	movs	r3, #0
 8006884:	f100 0114 	add.w	r1, r0, #20
 8006888:	f100 0210 	add.w	r2, r0, #16
 800688c:	4618      	mov	r0, r3
 800688e:	4553      	cmp	r3, sl
 8006890:	db37      	blt.n	8006902 <__lshift+0xbe>
 8006892:	6920      	ldr	r0, [r4, #16]
 8006894:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006898:	f104 0314 	add.w	r3, r4, #20
 800689c:	f019 091f 	ands.w	r9, r9, #31
 80068a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80068a8:	d02f      	beq.n	800690a <__lshift+0xc6>
 80068aa:	468a      	mov	sl, r1
 80068ac:	f04f 0c00 	mov.w	ip, #0
 80068b0:	f1c9 0e20 	rsb	lr, r9, #32
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	fa02 f209 	lsl.w	r2, r2, r9
 80068ba:	ea42 020c 	orr.w	r2, r2, ip
 80068be:	f84a 2b04 	str.w	r2, [sl], #4
 80068c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c6:	4298      	cmp	r0, r3
 80068c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80068cc:	d8f2      	bhi.n	80068b4 <__lshift+0x70>
 80068ce:	1b03      	subs	r3, r0, r4
 80068d0:	3b15      	subs	r3, #21
 80068d2:	f023 0303 	bic.w	r3, r3, #3
 80068d6:	3304      	adds	r3, #4
 80068d8:	f104 0215 	add.w	r2, r4, #21
 80068dc:	4290      	cmp	r0, r2
 80068de:	bf38      	it	cc
 80068e0:	2304      	movcc	r3, #4
 80068e2:	f841 c003 	str.w	ip, [r1, r3]
 80068e6:	f1bc 0f00 	cmp.w	ip, #0
 80068ea:	d001      	beq.n	80068f0 <__lshift+0xac>
 80068ec:	f108 0602 	add.w	r6, r8, #2
 80068f0:	3e01      	subs	r6, #1
 80068f2:	4638      	mov	r0, r7
 80068f4:	4621      	mov	r1, r4
 80068f6:	612e      	str	r6, [r5, #16]
 80068f8:	f7ff fdd6 	bl	80064a8 <_Bfree>
 80068fc:	4628      	mov	r0, r5
 80068fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006902:	f842 0f04 	str.w	r0, [r2, #4]!
 8006906:	3301      	adds	r3, #1
 8006908:	e7c1      	b.n	800688e <__lshift+0x4a>
 800690a:	3904      	subs	r1, #4
 800690c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006910:	4298      	cmp	r0, r3
 8006912:	f841 2f04 	str.w	r2, [r1, #4]!
 8006916:	d8f9      	bhi.n	800690c <__lshift+0xc8>
 8006918:	e7ea      	b.n	80068f0 <__lshift+0xac>
 800691a:	bf00      	nop
 800691c:	080077e7 	.word	0x080077e7
 8006920:	08007858 	.word	0x08007858

08006924 <__mcmp>:
 8006924:	4603      	mov	r3, r0
 8006926:	690a      	ldr	r2, [r1, #16]
 8006928:	6900      	ldr	r0, [r0, #16]
 800692a:	b530      	push	{r4, r5, lr}
 800692c:	1a80      	subs	r0, r0, r2
 800692e:	d10d      	bne.n	800694c <__mcmp+0x28>
 8006930:	3314      	adds	r3, #20
 8006932:	3114      	adds	r1, #20
 8006934:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006938:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800693c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006940:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006944:	4295      	cmp	r5, r2
 8006946:	d002      	beq.n	800694e <__mcmp+0x2a>
 8006948:	d304      	bcc.n	8006954 <__mcmp+0x30>
 800694a:	2001      	movs	r0, #1
 800694c:	bd30      	pop	{r4, r5, pc}
 800694e:	42a3      	cmp	r3, r4
 8006950:	d3f4      	bcc.n	800693c <__mcmp+0x18>
 8006952:	e7fb      	b.n	800694c <__mcmp+0x28>
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	e7f8      	b.n	800694c <__mcmp+0x28>
	...

0800695c <__mdiff>:
 800695c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006960:	460d      	mov	r5, r1
 8006962:	4607      	mov	r7, r0
 8006964:	4611      	mov	r1, r2
 8006966:	4628      	mov	r0, r5
 8006968:	4614      	mov	r4, r2
 800696a:	f7ff ffdb 	bl	8006924 <__mcmp>
 800696e:	1e06      	subs	r6, r0, #0
 8006970:	d111      	bne.n	8006996 <__mdiff+0x3a>
 8006972:	4631      	mov	r1, r6
 8006974:	4638      	mov	r0, r7
 8006976:	f7ff fd57 	bl	8006428 <_Balloc>
 800697a:	4602      	mov	r2, r0
 800697c:	b928      	cbnz	r0, 800698a <__mdiff+0x2e>
 800697e:	f240 2132 	movw	r1, #562	; 0x232
 8006982:	4b3a      	ldr	r3, [pc, #232]	; (8006a6c <__mdiff+0x110>)
 8006984:	483a      	ldr	r0, [pc, #232]	; (8006a70 <__mdiff+0x114>)
 8006986:	f000 fc3f 	bl	8007208 <__assert_func>
 800698a:	2301      	movs	r3, #1
 800698c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006990:	4610      	mov	r0, r2
 8006992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006996:	bfa4      	itt	ge
 8006998:	4623      	movge	r3, r4
 800699a:	462c      	movge	r4, r5
 800699c:	4638      	mov	r0, r7
 800699e:	6861      	ldr	r1, [r4, #4]
 80069a0:	bfa6      	itte	ge
 80069a2:	461d      	movge	r5, r3
 80069a4:	2600      	movge	r6, #0
 80069a6:	2601      	movlt	r6, #1
 80069a8:	f7ff fd3e 	bl	8006428 <_Balloc>
 80069ac:	4602      	mov	r2, r0
 80069ae:	b918      	cbnz	r0, 80069b8 <__mdiff+0x5c>
 80069b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80069b4:	4b2d      	ldr	r3, [pc, #180]	; (8006a6c <__mdiff+0x110>)
 80069b6:	e7e5      	b.n	8006984 <__mdiff+0x28>
 80069b8:	f102 0814 	add.w	r8, r2, #20
 80069bc:	46c2      	mov	sl, r8
 80069be:	f04f 0c00 	mov.w	ip, #0
 80069c2:	6927      	ldr	r7, [r4, #16]
 80069c4:	60c6      	str	r6, [r0, #12]
 80069c6:	692e      	ldr	r6, [r5, #16]
 80069c8:	f104 0014 	add.w	r0, r4, #20
 80069cc:	f105 0914 	add.w	r9, r5, #20
 80069d0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80069d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80069d8:	3410      	adds	r4, #16
 80069da:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80069de:	f859 3b04 	ldr.w	r3, [r9], #4
 80069e2:	fa1f f18b 	uxth.w	r1, fp
 80069e6:	448c      	add	ip, r1
 80069e8:	b299      	uxth	r1, r3
 80069ea:	0c1b      	lsrs	r3, r3, #16
 80069ec:	ebac 0101 	sub.w	r1, ip, r1
 80069f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80069f4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80069f8:	b289      	uxth	r1, r1
 80069fa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80069fe:	454e      	cmp	r6, r9
 8006a00:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006a04:	f84a 3b04 	str.w	r3, [sl], #4
 8006a08:	d8e7      	bhi.n	80069da <__mdiff+0x7e>
 8006a0a:	1b73      	subs	r3, r6, r5
 8006a0c:	3b15      	subs	r3, #21
 8006a0e:	f023 0303 	bic.w	r3, r3, #3
 8006a12:	3515      	adds	r5, #21
 8006a14:	3304      	adds	r3, #4
 8006a16:	42ae      	cmp	r6, r5
 8006a18:	bf38      	it	cc
 8006a1a:	2304      	movcc	r3, #4
 8006a1c:	4418      	add	r0, r3
 8006a1e:	4443      	add	r3, r8
 8006a20:	461e      	mov	r6, r3
 8006a22:	4605      	mov	r5, r0
 8006a24:	4575      	cmp	r5, lr
 8006a26:	d30e      	bcc.n	8006a46 <__mdiff+0xea>
 8006a28:	f10e 0103 	add.w	r1, lr, #3
 8006a2c:	1a09      	subs	r1, r1, r0
 8006a2e:	f021 0103 	bic.w	r1, r1, #3
 8006a32:	3803      	subs	r0, #3
 8006a34:	4586      	cmp	lr, r0
 8006a36:	bf38      	it	cc
 8006a38:	2100      	movcc	r1, #0
 8006a3a:	4419      	add	r1, r3
 8006a3c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006a40:	b18b      	cbz	r3, 8006a66 <__mdiff+0x10a>
 8006a42:	6117      	str	r7, [r2, #16]
 8006a44:	e7a4      	b.n	8006990 <__mdiff+0x34>
 8006a46:	f855 8b04 	ldr.w	r8, [r5], #4
 8006a4a:	fa1f f188 	uxth.w	r1, r8
 8006a4e:	4461      	add	r1, ip
 8006a50:	140c      	asrs	r4, r1, #16
 8006a52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a56:	b289      	uxth	r1, r1
 8006a58:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006a5c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006a60:	f846 1b04 	str.w	r1, [r6], #4
 8006a64:	e7de      	b.n	8006a24 <__mdiff+0xc8>
 8006a66:	3f01      	subs	r7, #1
 8006a68:	e7e8      	b.n	8006a3c <__mdiff+0xe0>
 8006a6a:	bf00      	nop
 8006a6c:	080077e7 	.word	0x080077e7
 8006a70:	08007858 	.word	0x08007858

08006a74 <__d2b>:
 8006a74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a78:	2101      	movs	r1, #1
 8006a7a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006a7e:	4690      	mov	r8, r2
 8006a80:	461d      	mov	r5, r3
 8006a82:	f7ff fcd1 	bl	8006428 <_Balloc>
 8006a86:	4604      	mov	r4, r0
 8006a88:	b930      	cbnz	r0, 8006a98 <__d2b+0x24>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	f240 310a 	movw	r1, #778	; 0x30a
 8006a90:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <__d2b+0xb0>)
 8006a92:	4825      	ldr	r0, [pc, #148]	; (8006b28 <__d2b+0xb4>)
 8006a94:	f000 fbb8 	bl	8007208 <__assert_func>
 8006a98:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006a9c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006aa0:	bb2d      	cbnz	r5, 8006aee <__d2b+0x7a>
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	f1b8 0300 	subs.w	r3, r8, #0
 8006aa8:	d026      	beq.n	8006af8 <__d2b+0x84>
 8006aaa:	4668      	mov	r0, sp
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	f7ff fd83 	bl	80065b8 <__lo0bits>
 8006ab2:	9900      	ldr	r1, [sp, #0]
 8006ab4:	b1f0      	cbz	r0, 8006af4 <__d2b+0x80>
 8006ab6:	9a01      	ldr	r2, [sp, #4]
 8006ab8:	f1c0 0320 	rsb	r3, r0, #32
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	40c2      	lsrs	r2, r0
 8006ac4:	6163      	str	r3, [r4, #20]
 8006ac6:	9201      	str	r2, [sp, #4]
 8006ac8:	9b01      	ldr	r3, [sp, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	bf14      	ite	ne
 8006ace:	2102      	movne	r1, #2
 8006ad0:	2101      	moveq	r1, #1
 8006ad2:	61a3      	str	r3, [r4, #24]
 8006ad4:	6121      	str	r1, [r4, #16]
 8006ad6:	b1c5      	cbz	r5, 8006b0a <__d2b+0x96>
 8006ad8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006adc:	4405      	add	r5, r0
 8006ade:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ae2:	603d      	str	r5, [r7, #0]
 8006ae4:	6030      	str	r0, [r6, #0]
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	b002      	add	sp, #8
 8006aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006af2:	e7d6      	b.n	8006aa2 <__d2b+0x2e>
 8006af4:	6161      	str	r1, [r4, #20]
 8006af6:	e7e7      	b.n	8006ac8 <__d2b+0x54>
 8006af8:	a801      	add	r0, sp, #4
 8006afa:	f7ff fd5d 	bl	80065b8 <__lo0bits>
 8006afe:	2101      	movs	r1, #1
 8006b00:	9b01      	ldr	r3, [sp, #4]
 8006b02:	6121      	str	r1, [r4, #16]
 8006b04:	6163      	str	r3, [r4, #20]
 8006b06:	3020      	adds	r0, #32
 8006b08:	e7e5      	b.n	8006ad6 <__d2b+0x62>
 8006b0a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006b0e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b12:	6038      	str	r0, [r7, #0]
 8006b14:	6918      	ldr	r0, [r3, #16]
 8006b16:	f7ff fd2f 	bl	8006578 <__hi0bits>
 8006b1a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006b1e:	6031      	str	r1, [r6, #0]
 8006b20:	e7e1      	b.n	8006ae6 <__d2b+0x72>
 8006b22:	bf00      	nop
 8006b24:	080077e7 	.word	0x080077e7
 8006b28:	08007858 	.word	0x08007858

08006b2c <_calloc_r>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	fba1 5402 	umull	r5, r4, r1, r2
 8006b32:	b934      	cbnz	r4, 8006b42 <_calloc_r+0x16>
 8006b34:	4629      	mov	r1, r5
 8006b36:	f000 f875 	bl	8006c24 <_malloc_r>
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	b928      	cbnz	r0, 8006b4a <_calloc_r+0x1e>
 8006b3e:	4630      	mov	r0, r6
 8006b40:	bd70      	pop	{r4, r5, r6, pc}
 8006b42:	220c      	movs	r2, #12
 8006b44:	2600      	movs	r6, #0
 8006b46:	6002      	str	r2, [r0, #0]
 8006b48:	e7f9      	b.n	8006b3e <_calloc_r+0x12>
 8006b4a:	462a      	mov	r2, r5
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	f7fe f84f 	bl	8004bf0 <memset>
 8006b52:	e7f4      	b.n	8006b3e <_calloc_r+0x12>

08006b54 <_free_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4605      	mov	r5, r0
 8006b58:	2900      	cmp	r1, #0
 8006b5a:	d040      	beq.n	8006bde <_free_r+0x8a>
 8006b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b60:	1f0c      	subs	r4, r1, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	bfb8      	it	lt
 8006b66:	18e4      	addlt	r4, r4, r3
 8006b68:	f000 fcd6 	bl	8007518 <__malloc_lock>
 8006b6c:	4a1c      	ldr	r2, [pc, #112]	; (8006be0 <_free_r+0x8c>)
 8006b6e:	6813      	ldr	r3, [r2, #0]
 8006b70:	b933      	cbnz	r3, 8006b80 <_free_r+0x2c>
 8006b72:	6063      	str	r3, [r4, #4]
 8006b74:	6014      	str	r4, [r2, #0]
 8006b76:	4628      	mov	r0, r5
 8006b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b7c:	f000 bcd2 	b.w	8007524 <__malloc_unlock>
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	d908      	bls.n	8006b96 <_free_r+0x42>
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	1821      	adds	r1, r4, r0
 8006b88:	428b      	cmp	r3, r1
 8006b8a:	bf01      	itttt	eq
 8006b8c:	6819      	ldreq	r1, [r3, #0]
 8006b8e:	685b      	ldreq	r3, [r3, #4]
 8006b90:	1809      	addeq	r1, r1, r0
 8006b92:	6021      	streq	r1, [r4, #0]
 8006b94:	e7ed      	b.n	8006b72 <_free_r+0x1e>
 8006b96:	461a      	mov	r2, r3
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	b10b      	cbz	r3, 8006ba0 <_free_r+0x4c>
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d9fa      	bls.n	8006b96 <_free_r+0x42>
 8006ba0:	6811      	ldr	r1, [r2, #0]
 8006ba2:	1850      	adds	r0, r2, r1
 8006ba4:	42a0      	cmp	r0, r4
 8006ba6:	d10b      	bne.n	8006bc0 <_free_r+0x6c>
 8006ba8:	6820      	ldr	r0, [r4, #0]
 8006baa:	4401      	add	r1, r0
 8006bac:	1850      	adds	r0, r2, r1
 8006bae:	4283      	cmp	r3, r0
 8006bb0:	6011      	str	r1, [r2, #0]
 8006bb2:	d1e0      	bne.n	8006b76 <_free_r+0x22>
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	4401      	add	r1, r0
 8006bba:	6011      	str	r1, [r2, #0]
 8006bbc:	6053      	str	r3, [r2, #4]
 8006bbe:	e7da      	b.n	8006b76 <_free_r+0x22>
 8006bc0:	d902      	bls.n	8006bc8 <_free_r+0x74>
 8006bc2:	230c      	movs	r3, #12
 8006bc4:	602b      	str	r3, [r5, #0]
 8006bc6:	e7d6      	b.n	8006b76 <_free_r+0x22>
 8006bc8:	6820      	ldr	r0, [r4, #0]
 8006bca:	1821      	adds	r1, r4, r0
 8006bcc:	428b      	cmp	r3, r1
 8006bce:	bf01      	itttt	eq
 8006bd0:	6819      	ldreq	r1, [r3, #0]
 8006bd2:	685b      	ldreq	r3, [r3, #4]
 8006bd4:	1809      	addeq	r1, r1, r0
 8006bd6:	6021      	streq	r1, [r4, #0]
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	6054      	str	r4, [r2, #4]
 8006bdc:	e7cb      	b.n	8006b76 <_free_r+0x22>
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	20000f88 	.word	0x20000f88

08006be4 <sbrk_aligned>:
 8006be4:	b570      	push	{r4, r5, r6, lr}
 8006be6:	4e0e      	ldr	r6, [pc, #56]	; (8006c20 <sbrk_aligned+0x3c>)
 8006be8:	460c      	mov	r4, r1
 8006bea:	6831      	ldr	r1, [r6, #0]
 8006bec:	4605      	mov	r5, r0
 8006bee:	b911      	cbnz	r1, 8006bf6 <sbrk_aligned+0x12>
 8006bf0:	f000 f9e4 	bl	8006fbc <_sbrk_r>
 8006bf4:	6030      	str	r0, [r6, #0]
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 f9df 	bl	8006fbc <_sbrk_r>
 8006bfe:	1c43      	adds	r3, r0, #1
 8006c00:	d00a      	beq.n	8006c18 <sbrk_aligned+0x34>
 8006c02:	1cc4      	adds	r4, r0, #3
 8006c04:	f024 0403 	bic.w	r4, r4, #3
 8006c08:	42a0      	cmp	r0, r4
 8006c0a:	d007      	beq.n	8006c1c <sbrk_aligned+0x38>
 8006c0c:	1a21      	subs	r1, r4, r0
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 f9d4 	bl	8006fbc <_sbrk_r>
 8006c14:	3001      	adds	r0, #1
 8006c16:	d101      	bne.n	8006c1c <sbrk_aligned+0x38>
 8006c18:	f04f 34ff 	mov.w	r4, #4294967295
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}
 8006c20:	20000f8c 	.word	0x20000f8c

08006c24 <_malloc_r>:
 8006c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c28:	1ccd      	adds	r5, r1, #3
 8006c2a:	f025 0503 	bic.w	r5, r5, #3
 8006c2e:	3508      	adds	r5, #8
 8006c30:	2d0c      	cmp	r5, #12
 8006c32:	bf38      	it	cc
 8006c34:	250c      	movcc	r5, #12
 8006c36:	2d00      	cmp	r5, #0
 8006c38:	4607      	mov	r7, r0
 8006c3a:	db01      	blt.n	8006c40 <_malloc_r+0x1c>
 8006c3c:	42a9      	cmp	r1, r5
 8006c3e:	d905      	bls.n	8006c4c <_malloc_r+0x28>
 8006c40:	230c      	movs	r3, #12
 8006c42:	2600      	movs	r6, #0
 8006c44:	603b      	str	r3, [r7, #0]
 8006c46:	4630      	mov	r0, r6
 8006c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c4c:	4e2e      	ldr	r6, [pc, #184]	; (8006d08 <_malloc_r+0xe4>)
 8006c4e:	f000 fc63 	bl	8007518 <__malloc_lock>
 8006c52:	6833      	ldr	r3, [r6, #0]
 8006c54:	461c      	mov	r4, r3
 8006c56:	bb34      	cbnz	r4, 8006ca6 <_malloc_r+0x82>
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	f7ff ffc2 	bl	8006be4 <sbrk_aligned>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	4604      	mov	r4, r0
 8006c64:	d14d      	bne.n	8006d02 <_malloc_r+0xde>
 8006c66:	6834      	ldr	r4, [r6, #0]
 8006c68:	4626      	mov	r6, r4
 8006c6a:	2e00      	cmp	r6, #0
 8006c6c:	d140      	bne.n	8006cf0 <_malloc_r+0xcc>
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	4631      	mov	r1, r6
 8006c72:	4638      	mov	r0, r7
 8006c74:	eb04 0803 	add.w	r8, r4, r3
 8006c78:	f000 f9a0 	bl	8006fbc <_sbrk_r>
 8006c7c:	4580      	cmp	r8, r0
 8006c7e:	d13a      	bne.n	8006cf6 <_malloc_r+0xd2>
 8006c80:	6821      	ldr	r1, [r4, #0]
 8006c82:	3503      	adds	r5, #3
 8006c84:	1a6d      	subs	r5, r5, r1
 8006c86:	f025 0503 	bic.w	r5, r5, #3
 8006c8a:	3508      	adds	r5, #8
 8006c8c:	2d0c      	cmp	r5, #12
 8006c8e:	bf38      	it	cc
 8006c90:	250c      	movcc	r5, #12
 8006c92:	4638      	mov	r0, r7
 8006c94:	4629      	mov	r1, r5
 8006c96:	f7ff ffa5 	bl	8006be4 <sbrk_aligned>
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	d02b      	beq.n	8006cf6 <_malloc_r+0xd2>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	442b      	add	r3, r5
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	e00e      	b.n	8006cc4 <_malloc_r+0xa0>
 8006ca6:	6822      	ldr	r2, [r4, #0]
 8006ca8:	1b52      	subs	r2, r2, r5
 8006caa:	d41e      	bmi.n	8006cea <_malloc_r+0xc6>
 8006cac:	2a0b      	cmp	r2, #11
 8006cae:	d916      	bls.n	8006cde <_malloc_r+0xba>
 8006cb0:	1961      	adds	r1, r4, r5
 8006cb2:	42a3      	cmp	r3, r4
 8006cb4:	6025      	str	r5, [r4, #0]
 8006cb6:	bf18      	it	ne
 8006cb8:	6059      	strne	r1, [r3, #4]
 8006cba:	6863      	ldr	r3, [r4, #4]
 8006cbc:	bf08      	it	eq
 8006cbe:	6031      	streq	r1, [r6, #0]
 8006cc0:	5162      	str	r2, [r4, r5]
 8006cc2:	604b      	str	r3, [r1, #4]
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f104 060b 	add.w	r6, r4, #11
 8006cca:	f000 fc2b 	bl	8007524 <__malloc_unlock>
 8006cce:	f026 0607 	bic.w	r6, r6, #7
 8006cd2:	1d23      	adds	r3, r4, #4
 8006cd4:	1af2      	subs	r2, r6, r3
 8006cd6:	d0b6      	beq.n	8006c46 <_malloc_r+0x22>
 8006cd8:	1b9b      	subs	r3, r3, r6
 8006cda:	50a3      	str	r3, [r4, r2]
 8006cdc:	e7b3      	b.n	8006c46 <_malloc_r+0x22>
 8006cde:	6862      	ldr	r2, [r4, #4]
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	bf0c      	ite	eq
 8006ce4:	6032      	streq	r2, [r6, #0]
 8006ce6:	605a      	strne	r2, [r3, #4]
 8006ce8:	e7ec      	b.n	8006cc4 <_malloc_r+0xa0>
 8006cea:	4623      	mov	r3, r4
 8006cec:	6864      	ldr	r4, [r4, #4]
 8006cee:	e7b2      	b.n	8006c56 <_malloc_r+0x32>
 8006cf0:	4634      	mov	r4, r6
 8006cf2:	6876      	ldr	r6, [r6, #4]
 8006cf4:	e7b9      	b.n	8006c6a <_malloc_r+0x46>
 8006cf6:	230c      	movs	r3, #12
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	f000 fc12 	bl	8007524 <__malloc_unlock>
 8006d00:	e7a1      	b.n	8006c46 <_malloc_r+0x22>
 8006d02:	6025      	str	r5, [r4, #0]
 8006d04:	e7de      	b.n	8006cc4 <_malloc_r+0xa0>
 8006d06:	bf00      	nop
 8006d08:	20000f88 	.word	0x20000f88

08006d0c <__sfputc_r>:
 8006d0c:	6893      	ldr	r3, [r2, #8]
 8006d0e:	b410      	push	{r4}
 8006d10:	3b01      	subs	r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	6093      	str	r3, [r2, #8]
 8006d16:	da07      	bge.n	8006d28 <__sfputc_r+0x1c>
 8006d18:	6994      	ldr	r4, [r2, #24]
 8006d1a:	42a3      	cmp	r3, r4
 8006d1c:	db01      	blt.n	8006d22 <__sfputc_r+0x16>
 8006d1e:	290a      	cmp	r1, #10
 8006d20:	d102      	bne.n	8006d28 <__sfputc_r+0x1c>
 8006d22:	bc10      	pop	{r4}
 8006d24:	f000 b99e 	b.w	8007064 <__swbuf_r>
 8006d28:	6813      	ldr	r3, [r2, #0]
 8006d2a:	1c58      	adds	r0, r3, #1
 8006d2c:	6010      	str	r0, [r2, #0]
 8006d2e:	7019      	strb	r1, [r3, #0]
 8006d30:	4608      	mov	r0, r1
 8006d32:	bc10      	pop	{r4}
 8006d34:	4770      	bx	lr

08006d36 <__sfputs_r>:
 8006d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d38:	4606      	mov	r6, r0
 8006d3a:	460f      	mov	r7, r1
 8006d3c:	4614      	mov	r4, r2
 8006d3e:	18d5      	adds	r5, r2, r3
 8006d40:	42ac      	cmp	r4, r5
 8006d42:	d101      	bne.n	8006d48 <__sfputs_r+0x12>
 8006d44:	2000      	movs	r0, #0
 8006d46:	e007      	b.n	8006d58 <__sfputs_r+0x22>
 8006d48:	463a      	mov	r2, r7
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d50:	f7ff ffdc 	bl	8006d0c <__sfputc_r>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d1f3      	bne.n	8006d40 <__sfputs_r+0xa>
 8006d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d5c <_vfiprintf_r>:
 8006d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d60:	460d      	mov	r5, r1
 8006d62:	4614      	mov	r4, r2
 8006d64:	4698      	mov	r8, r3
 8006d66:	4606      	mov	r6, r0
 8006d68:	b09d      	sub	sp, #116	; 0x74
 8006d6a:	b118      	cbz	r0, 8006d74 <_vfiprintf_r+0x18>
 8006d6c:	6983      	ldr	r3, [r0, #24]
 8006d6e:	b90b      	cbnz	r3, 8006d74 <_vfiprintf_r+0x18>
 8006d70:	f7ff fa90 	bl	8006294 <__sinit>
 8006d74:	4b89      	ldr	r3, [pc, #548]	; (8006f9c <_vfiprintf_r+0x240>)
 8006d76:	429d      	cmp	r5, r3
 8006d78:	d11b      	bne.n	8006db2 <_vfiprintf_r+0x56>
 8006d7a:	6875      	ldr	r5, [r6, #4]
 8006d7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d7e:	07d9      	lsls	r1, r3, #31
 8006d80:	d405      	bmi.n	8006d8e <_vfiprintf_r+0x32>
 8006d82:	89ab      	ldrh	r3, [r5, #12]
 8006d84:	059a      	lsls	r2, r3, #22
 8006d86:	d402      	bmi.n	8006d8e <_vfiprintf_r+0x32>
 8006d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d8a:	f7ff fb26 	bl	80063da <__retarget_lock_acquire_recursive>
 8006d8e:	89ab      	ldrh	r3, [r5, #12]
 8006d90:	071b      	lsls	r3, r3, #28
 8006d92:	d501      	bpl.n	8006d98 <_vfiprintf_r+0x3c>
 8006d94:	692b      	ldr	r3, [r5, #16]
 8006d96:	b9eb      	cbnz	r3, 8006dd4 <_vfiprintf_r+0x78>
 8006d98:	4629      	mov	r1, r5
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f000 f9c6 	bl	800712c <__swsetup_r>
 8006da0:	b1c0      	cbz	r0, 8006dd4 <_vfiprintf_r+0x78>
 8006da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006da4:	07dc      	lsls	r4, r3, #31
 8006da6:	d50e      	bpl.n	8006dc6 <_vfiprintf_r+0x6a>
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	b01d      	add	sp, #116	; 0x74
 8006dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db2:	4b7b      	ldr	r3, [pc, #492]	; (8006fa0 <_vfiprintf_r+0x244>)
 8006db4:	429d      	cmp	r5, r3
 8006db6:	d101      	bne.n	8006dbc <_vfiprintf_r+0x60>
 8006db8:	68b5      	ldr	r5, [r6, #8]
 8006dba:	e7df      	b.n	8006d7c <_vfiprintf_r+0x20>
 8006dbc:	4b79      	ldr	r3, [pc, #484]	; (8006fa4 <_vfiprintf_r+0x248>)
 8006dbe:	429d      	cmp	r5, r3
 8006dc0:	bf08      	it	eq
 8006dc2:	68f5      	ldreq	r5, [r6, #12]
 8006dc4:	e7da      	b.n	8006d7c <_vfiprintf_r+0x20>
 8006dc6:	89ab      	ldrh	r3, [r5, #12]
 8006dc8:	0598      	lsls	r0, r3, #22
 8006dca:	d4ed      	bmi.n	8006da8 <_vfiprintf_r+0x4c>
 8006dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dce:	f7ff fb05 	bl	80063dc <__retarget_lock_release_recursive>
 8006dd2:	e7e9      	b.n	8006da8 <_vfiprintf_r+0x4c>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd8:	2320      	movs	r3, #32
 8006dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dde:	2330      	movs	r3, #48	; 0x30
 8006de0:	f04f 0901 	mov.w	r9, #1
 8006de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006de8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006fa8 <_vfiprintf_r+0x24c>
 8006dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006df0:	4623      	mov	r3, r4
 8006df2:	469a      	mov	sl, r3
 8006df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006df8:	b10a      	cbz	r2, 8006dfe <_vfiprintf_r+0xa2>
 8006dfa:	2a25      	cmp	r2, #37	; 0x25
 8006dfc:	d1f9      	bne.n	8006df2 <_vfiprintf_r+0x96>
 8006dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8006e02:	d00b      	beq.n	8006e1c <_vfiprintf_r+0xc0>
 8006e04:	465b      	mov	r3, fp
 8006e06:	4622      	mov	r2, r4
 8006e08:	4629      	mov	r1, r5
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f7ff ff93 	bl	8006d36 <__sfputs_r>
 8006e10:	3001      	adds	r0, #1
 8006e12:	f000 80aa 	beq.w	8006f6a <_vfiprintf_r+0x20e>
 8006e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e18:	445a      	add	r2, fp
 8006e1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 80a2 	beq.w	8006f6a <_vfiprintf_r+0x20e>
 8006e26:	2300      	movs	r3, #0
 8006e28:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e30:	f10a 0a01 	add.w	sl, sl, #1
 8006e34:	9304      	str	r3, [sp, #16]
 8006e36:	9307      	str	r3, [sp, #28]
 8006e38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e3c:	931a      	str	r3, [sp, #104]	; 0x68
 8006e3e:	4654      	mov	r4, sl
 8006e40:	2205      	movs	r2, #5
 8006e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e46:	4858      	ldr	r0, [pc, #352]	; (8006fa8 <_vfiprintf_r+0x24c>)
 8006e48:	f7ff fad2 	bl	80063f0 <memchr>
 8006e4c:	9a04      	ldr	r2, [sp, #16]
 8006e4e:	b9d8      	cbnz	r0, 8006e88 <_vfiprintf_r+0x12c>
 8006e50:	06d1      	lsls	r1, r2, #27
 8006e52:	bf44      	itt	mi
 8006e54:	2320      	movmi	r3, #32
 8006e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e5a:	0713      	lsls	r3, r2, #28
 8006e5c:	bf44      	itt	mi
 8006e5e:	232b      	movmi	r3, #43	; 0x2b
 8006e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e64:	f89a 3000 	ldrb.w	r3, [sl]
 8006e68:	2b2a      	cmp	r3, #42	; 0x2a
 8006e6a:	d015      	beq.n	8006e98 <_vfiprintf_r+0x13c>
 8006e6c:	4654      	mov	r4, sl
 8006e6e:	2000      	movs	r0, #0
 8006e70:	f04f 0c0a 	mov.w	ip, #10
 8006e74:	9a07      	ldr	r2, [sp, #28]
 8006e76:	4621      	mov	r1, r4
 8006e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e7c:	3b30      	subs	r3, #48	; 0x30
 8006e7e:	2b09      	cmp	r3, #9
 8006e80:	d94e      	bls.n	8006f20 <_vfiprintf_r+0x1c4>
 8006e82:	b1b0      	cbz	r0, 8006eb2 <_vfiprintf_r+0x156>
 8006e84:	9207      	str	r2, [sp, #28]
 8006e86:	e014      	b.n	8006eb2 <_vfiprintf_r+0x156>
 8006e88:	eba0 0308 	sub.w	r3, r0, r8
 8006e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8006e90:	4313      	orrs	r3, r2
 8006e92:	46a2      	mov	sl, r4
 8006e94:	9304      	str	r3, [sp, #16]
 8006e96:	e7d2      	b.n	8006e3e <_vfiprintf_r+0xe2>
 8006e98:	9b03      	ldr	r3, [sp, #12]
 8006e9a:	1d19      	adds	r1, r3, #4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	9103      	str	r1, [sp, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	bfbb      	ittet	lt
 8006ea4:	425b      	neglt	r3, r3
 8006ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8006eaa:	9307      	strge	r3, [sp, #28]
 8006eac:	9307      	strlt	r3, [sp, #28]
 8006eae:	bfb8      	it	lt
 8006eb0:	9204      	strlt	r2, [sp, #16]
 8006eb2:	7823      	ldrb	r3, [r4, #0]
 8006eb4:	2b2e      	cmp	r3, #46	; 0x2e
 8006eb6:	d10c      	bne.n	8006ed2 <_vfiprintf_r+0x176>
 8006eb8:	7863      	ldrb	r3, [r4, #1]
 8006eba:	2b2a      	cmp	r3, #42	; 0x2a
 8006ebc:	d135      	bne.n	8006f2a <_vfiprintf_r+0x1ce>
 8006ebe:	9b03      	ldr	r3, [sp, #12]
 8006ec0:	3402      	adds	r4, #2
 8006ec2:	1d1a      	adds	r2, r3, #4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	9203      	str	r2, [sp, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bfb8      	it	lt
 8006ecc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ed0:	9305      	str	r3, [sp, #20]
 8006ed2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006fac <_vfiprintf_r+0x250>
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	4650      	mov	r0, sl
 8006eda:	7821      	ldrb	r1, [r4, #0]
 8006edc:	f7ff fa88 	bl	80063f0 <memchr>
 8006ee0:	b140      	cbz	r0, 8006ef4 <_vfiprintf_r+0x198>
 8006ee2:	2340      	movs	r3, #64	; 0x40
 8006ee4:	eba0 000a 	sub.w	r0, r0, sl
 8006ee8:	fa03 f000 	lsl.w	r0, r3, r0
 8006eec:	9b04      	ldr	r3, [sp, #16]
 8006eee:	3401      	adds	r4, #1
 8006ef0:	4303      	orrs	r3, r0
 8006ef2:	9304      	str	r3, [sp, #16]
 8006ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef8:	2206      	movs	r2, #6
 8006efa:	482d      	ldr	r0, [pc, #180]	; (8006fb0 <_vfiprintf_r+0x254>)
 8006efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f00:	f7ff fa76 	bl	80063f0 <memchr>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	d03f      	beq.n	8006f88 <_vfiprintf_r+0x22c>
 8006f08:	4b2a      	ldr	r3, [pc, #168]	; (8006fb4 <_vfiprintf_r+0x258>)
 8006f0a:	bb1b      	cbnz	r3, 8006f54 <_vfiprintf_r+0x1f8>
 8006f0c:	9b03      	ldr	r3, [sp, #12]
 8006f0e:	3307      	adds	r3, #7
 8006f10:	f023 0307 	bic.w	r3, r3, #7
 8006f14:	3308      	adds	r3, #8
 8006f16:	9303      	str	r3, [sp, #12]
 8006f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f1a:	443b      	add	r3, r7
 8006f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f1e:	e767      	b.n	8006df0 <_vfiprintf_r+0x94>
 8006f20:	460c      	mov	r4, r1
 8006f22:	2001      	movs	r0, #1
 8006f24:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f28:	e7a5      	b.n	8006e76 <_vfiprintf_r+0x11a>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f04f 0c0a 	mov.w	ip, #10
 8006f30:	4619      	mov	r1, r3
 8006f32:	3401      	adds	r4, #1
 8006f34:	9305      	str	r3, [sp, #20]
 8006f36:	4620      	mov	r0, r4
 8006f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f3c:	3a30      	subs	r2, #48	; 0x30
 8006f3e:	2a09      	cmp	r2, #9
 8006f40:	d903      	bls.n	8006f4a <_vfiprintf_r+0x1ee>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0c5      	beq.n	8006ed2 <_vfiprintf_r+0x176>
 8006f46:	9105      	str	r1, [sp, #20]
 8006f48:	e7c3      	b.n	8006ed2 <_vfiprintf_r+0x176>
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f52:	e7f0      	b.n	8006f36 <_vfiprintf_r+0x1da>
 8006f54:	ab03      	add	r3, sp, #12
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	462a      	mov	r2, r5
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	4b16      	ldr	r3, [pc, #88]	; (8006fb8 <_vfiprintf_r+0x25c>)
 8006f5e:	a904      	add	r1, sp, #16
 8006f60:	f7fd feec 	bl	8004d3c <_printf_float>
 8006f64:	4607      	mov	r7, r0
 8006f66:	1c78      	adds	r0, r7, #1
 8006f68:	d1d6      	bne.n	8006f18 <_vfiprintf_r+0x1bc>
 8006f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f6c:	07d9      	lsls	r1, r3, #31
 8006f6e:	d405      	bmi.n	8006f7c <_vfiprintf_r+0x220>
 8006f70:	89ab      	ldrh	r3, [r5, #12]
 8006f72:	059a      	lsls	r2, r3, #22
 8006f74:	d402      	bmi.n	8006f7c <_vfiprintf_r+0x220>
 8006f76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f78:	f7ff fa30 	bl	80063dc <__retarget_lock_release_recursive>
 8006f7c:	89ab      	ldrh	r3, [r5, #12]
 8006f7e:	065b      	lsls	r3, r3, #25
 8006f80:	f53f af12 	bmi.w	8006da8 <_vfiprintf_r+0x4c>
 8006f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f86:	e711      	b.n	8006dac <_vfiprintf_r+0x50>
 8006f88:	ab03      	add	r3, sp, #12
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	462a      	mov	r2, r5
 8006f8e:	4630      	mov	r0, r6
 8006f90:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <_vfiprintf_r+0x25c>)
 8006f92:	a904      	add	r1, sp, #16
 8006f94:	f7fe f96e 	bl	8005274 <_printf_i>
 8006f98:	e7e4      	b.n	8006f64 <_vfiprintf_r+0x208>
 8006f9a:	bf00      	nop
 8006f9c:	08007818 	.word	0x08007818
 8006fa0:	08007838 	.word	0x08007838
 8006fa4:	080077f8 	.word	0x080077f8
 8006fa8:	080079b4 	.word	0x080079b4
 8006fac:	080079ba 	.word	0x080079ba
 8006fb0:	080079be 	.word	0x080079be
 8006fb4:	08004d3d 	.word	0x08004d3d
 8006fb8:	08006d37 	.word	0x08006d37

08006fbc <_sbrk_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	4d05      	ldr	r5, [pc, #20]	; (8006fd8 <_sbrk_r+0x1c>)
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	f7fa fab6 	bl	8001538 <_sbrk>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_sbrk_r+0x1a>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_sbrk_r+0x1a>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	20000f90 	.word	0x20000f90

08006fdc <__sread>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	460c      	mov	r4, r1
 8006fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe4:	f000 faa4 	bl	8007530 <_read_r>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	bfab      	itete	ge
 8006fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fee:	89a3      	ldrhlt	r3, [r4, #12]
 8006ff0:	181b      	addge	r3, r3, r0
 8006ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ff6:	bfac      	ite	ge
 8006ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ffa:	81a3      	strhlt	r3, [r4, #12]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__swrite>:
 8006ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007002:	461f      	mov	r7, r3
 8007004:	898b      	ldrh	r3, [r1, #12]
 8007006:	4605      	mov	r5, r0
 8007008:	05db      	lsls	r3, r3, #23
 800700a:	460c      	mov	r4, r1
 800700c:	4616      	mov	r6, r2
 800700e:	d505      	bpl.n	800701c <__swrite+0x1e>
 8007010:	2302      	movs	r3, #2
 8007012:	2200      	movs	r2, #0
 8007014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007018:	f000 f9f4 	bl	8007404 <_lseek_r>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	4632      	mov	r2, r6
 8007020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007024:	81a3      	strh	r3, [r4, #12]
 8007026:	4628      	mov	r0, r5
 8007028:	463b      	mov	r3, r7
 800702a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800702e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007032:	f000 b869 	b.w	8007108 <_write_r>

08007036 <__sseek>:
 8007036:	b510      	push	{r4, lr}
 8007038:	460c      	mov	r4, r1
 800703a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703e:	f000 f9e1 	bl	8007404 <_lseek_r>
 8007042:	1c43      	adds	r3, r0, #1
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	bf15      	itete	ne
 8007048:	6560      	strne	r0, [r4, #84]	; 0x54
 800704a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800704e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007052:	81a3      	strheq	r3, [r4, #12]
 8007054:	bf18      	it	ne
 8007056:	81a3      	strhne	r3, [r4, #12]
 8007058:	bd10      	pop	{r4, pc}

0800705a <__sclose>:
 800705a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705e:	f000 b8f1 	b.w	8007244 <_close_r>
	...

08007064 <__swbuf_r>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	460e      	mov	r6, r1
 8007068:	4614      	mov	r4, r2
 800706a:	4605      	mov	r5, r0
 800706c:	b118      	cbz	r0, 8007076 <__swbuf_r+0x12>
 800706e:	6983      	ldr	r3, [r0, #24]
 8007070:	b90b      	cbnz	r3, 8007076 <__swbuf_r+0x12>
 8007072:	f7ff f90f 	bl	8006294 <__sinit>
 8007076:	4b21      	ldr	r3, [pc, #132]	; (80070fc <__swbuf_r+0x98>)
 8007078:	429c      	cmp	r4, r3
 800707a:	d12b      	bne.n	80070d4 <__swbuf_r+0x70>
 800707c:	686c      	ldr	r4, [r5, #4]
 800707e:	69a3      	ldr	r3, [r4, #24]
 8007080:	60a3      	str	r3, [r4, #8]
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	071a      	lsls	r2, r3, #28
 8007086:	d52f      	bpl.n	80070e8 <__swbuf_r+0x84>
 8007088:	6923      	ldr	r3, [r4, #16]
 800708a:	b36b      	cbz	r3, 80070e8 <__swbuf_r+0x84>
 800708c:	6923      	ldr	r3, [r4, #16]
 800708e:	6820      	ldr	r0, [r4, #0]
 8007090:	b2f6      	uxtb	r6, r6
 8007092:	1ac0      	subs	r0, r0, r3
 8007094:	6963      	ldr	r3, [r4, #20]
 8007096:	4637      	mov	r7, r6
 8007098:	4283      	cmp	r3, r0
 800709a:	dc04      	bgt.n	80070a6 <__swbuf_r+0x42>
 800709c:	4621      	mov	r1, r4
 800709e:	4628      	mov	r0, r5
 80070a0:	f000 f962 	bl	8007368 <_fflush_r>
 80070a4:	bb30      	cbnz	r0, 80070f4 <__swbuf_r+0x90>
 80070a6:	68a3      	ldr	r3, [r4, #8]
 80070a8:	3001      	adds	r0, #1
 80070aa:	3b01      	subs	r3, #1
 80070ac:	60a3      	str	r3, [r4, #8]
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	6022      	str	r2, [r4, #0]
 80070b4:	701e      	strb	r6, [r3, #0]
 80070b6:	6963      	ldr	r3, [r4, #20]
 80070b8:	4283      	cmp	r3, r0
 80070ba:	d004      	beq.n	80070c6 <__swbuf_r+0x62>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	07db      	lsls	r3, r3, #31
 80070c0:	d506      	bpl.n	80070d0 <__swbuf_r+0x6c>
 80070c2:	2e0a      	cmp	r6, #10
 80070c4:	d104      	bne.n	80070d0 <__swbuf_r+0x6c>
 80070c6:	4621      	mov	r1, r4
 80070c8:	4628      	mov	r0, r5
 80070ca:	f000 f94d 	bl	8007368 <_fflush_r>
 80070ce:	b988      	cbnz	r0, 80070f4 <__swbuf_r+0x90>
 80070d0:	4638      	mov	r0, r7
 80070d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d4:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <__swbuf_r+0x9c>)
 80070d6:	429c      	cmp	r4, r3
 80070d8:	d101      	bne.n	80070de <__swbuf_r+0x7a>
 80070da:	68ac      	ldr	r4, [r5, #8]
 80070dc:	e7cf      	b.n	800707e <__swbuf_r+0x1a>
 80070de:	4b09      	ldr	r3, [pc, #36]	; (8007104 <__swbuf_r+0xa0>)
 80070e0:	429c      	cmp	r4, r3
 80070e2:	bf08      	it	eq
 80070e4:	68ec      	ldreq	r4, [r5, #12]
 80070e6:	e7ca      	b.n	800707e <__swbuf_r+0x1a>
 80070e8:	4621      	mov	r1, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 f81e 	bl	800712c <__swsetup_r>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d0cb      	beq.n	800708c <__swbuf_r+0x28>
 80070f4:	f04f 37ff 	mov.w	r7, #4294967295
 80070f8:	e7ea      	b.n	80070d0 <__swbuf_r+0x6c>
 80070fa:	bf00      	nop
 80070fc:	08007818 	.word	0x08007818
 8007100:	08007838 	.word	0x08007838
 8007104:	080077f8 	.word	0x080077f8

08007108 <_write_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4604      	mov	r4, r0
 800710c:	4608      	mov	r0, r1
 800710e:	4611      	mov	r1, r2
 8007110:	2200      	movs	r2, #0
 8007112:	4d05      	ldr	r5, [pc, #20]	; (8007128 <_write_r+0x20>)
 8007114:	602a      	str	r2, [r5, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	f7fa f9c1 	bl	800149e <_write>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_write_r+0x1e>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_write_r+0x1e>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	20000f90 	.word	0x20000f90

0800712c <__swsetup_r>:
 800712c:	4b32      	ldr	r3, [pc, #200]	; (80071f8 <__swsetup_r+0xcc>)
 800712e:	b570      	push	{r4, r5, r6, lr}
 8007130:	681d      	ldr	r5, [r3, #0]
 8007132:	4606      	mov	r6, r0
 8007134:	460c      	mov	r4, r1
 8007136:	b125      	cbz	r5, 8007142 <__swsetup_r+0x16>
 8007138:	69ab      	ldr	r3, [r5, #24]
 800713a:	b913      	cbnz	r3, 8007142 <__swsetup_r+0x16>
 800713c:	4628      	mov	r0, r5
 800713e:	f7ff f8a9 	bl	8006294 <__sinit>
 8007142:	4b2e      	ldr	r3, [pc, #184]	; (80071fc <__swsetup_r+0xd0>)
 8007144:	429c      	cmp	r4, r3
 8007146:	d10f      	bne.n	8007168 <__swsetup_r+0x3c>
 8007148:	686c      	ldr	r4, [r5, #4]
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007150:	0719      	lsls	r1, r3, #28
 8007152:	d42c      	bmi.n	80071ae <__swsetup_r+0x82>
 8007154:	06dd      	lsls	r5, r3, #27
 8007156:	d411      	bmi.n	800717c <__swsetup_r+0x50>
 8007158:	2309      	movs	r3, #9
 800715a:	6033      	str	r3, [r6, #0]
 800715c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
 8007164:	81a3      	strh	r3, [r4, #12]
 8007166:	e03e      	b.n	80071e6 <__swsetup_r+0xba>
 8007168:	4b25      	ldr	r3, [pc, #148]	; (8007200 <__swsetup_r+0xd4>)
 800716a:	429c      	cmp	r4, r3
 800716c:	d101      	bne.n	8007172 <__swsetup_r+0x46>
 800716e:	68ac      	ldr	r4, [r5, #8]
 8007170:	e7eb      	b.n	800714a <__swsetup_r+0x1e>
 8007172:	4b24      	ldr	r3, [pc, #144]	; (8007204 <__swsetup_r+0xd8>)
 8007174:	429c      	cmp	r4, r3
 8007176:	bf08      	it	eq
 8007178:	68ec      	ldreq	r4, [r5, #12]
 800717a:	e7e6      	b.n	800714a <__swsetup_r+0x1e>
 800717c:	0758      	lsls	r0, r3, #29
 800717e:	d512      	bpl.n	80071a6 <__swsetup_r+0x7a>
 8007180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007182:	b141      	cbz	r1, 8007196 <__swsetup_r+0x6a>
 8007184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007188:	4299      	cmp	r1, r3
 800718a:	d002      	beq.n	8007192 <__swsetup_r+0x66>
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff fce1 	bl	8006b54 <_free_r>
 8007192:	2300      	movs	r3, #0
 8007194:	6363      	str	r3, [r4, #52]	; 0x34
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800719c:	81a3      	strh	r3, [r4, #12]
 800719e:	2300      	movs	r3, #0
 80071a0:	6063      	str	r3, [r4, #4]
 80071a2:	6923      	ldr	r3, [r4, #16]
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f043 0308 	orr.w	r3, r3, #8
 80071ac:	81a3      	strh	r3, [r4, #12]
 80071ae:	6923      	ldr	r3, [r4, #16]
 80071b0:	b94b      	cbnz	r3, 80071c6 <__swsetup_r+0x9a>
 80071b2:	89a3      	ldrh	r3, [r4, #12]
 80071b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071bc:	d003      	beq.n	80071c6 <__swsetup_r+0x9a>
 80071be:	4621      	mov	r1, r4
 80071c0:	4630      	mov	r0, r6
 80071c2:	f000 f957 	bl	8007474 <__smakebuf_r>
 80071c6:	89a0      	ldrh	r0, [r4, #12]
 80071c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071cc:	f010 0301 	ands.w	r3, r0, #1
 80071d0:	d00a      	beq.n	80071e8 <__swsetup_r+0xbc>
 80071d2:	2300      	movs	r3, #0
 80071d4:	60a3      	str	r3, [r4, #8]
 80071d6:	6963      	ldr	r3, [r4, #20]
 80071d8:	425b      	negs	r3, r3
 80071da:	61a3      	str	r3, [r4, #24]
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	b943      	cbnz	r3, 80071f2 <__swsetup_r+0xc6>
 80071e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071e4:	d1ba      	bne.n	800715c <__swsetup_r+0x30>
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	0781      	lsls	r1, r0, #30
 80071ea:	bf58      	it	pl
 80071ec:	6963      	ldrpl	r3, [r4, #20]
 80071ee:	60a3      	str	r3, [r4, #8]
 80071f0:	e7f4      	b.n	80071dc <__swsetup_r+0xb0>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e7f7      	b.n	80071e6 <__swsetup_r+0xba>
 80071f6:	bf00      	nop
 80071f8:	2000000c 	.word	0x2000000c
 80071fc:	08007818 	.word	0x08007818
 8007200:	08007838 	.word	0x08007838
 8007204:	080077f8 	.word	0x080077f8

08007208 <__assert_func>:
 8007208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800720a:	4614      	mov	r4, r2
 800720c:	461a      	mov	r2, r3
 800720e:	4b09      	ldr	r3, [pc, #36]	; (8007234 <__assert_func+0x2c>)
 8007210:	4605      	mov	r5, r0
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68d8      	ldr	r0, [r3, #12]
 8007216:	b14c      	cbz	r4, 800722c <__assert_func+0x24>
 8007218:	4b07      	ldr	r3, [pc, #28]	; (8007238 <__assert_func+0x30>)
 800721a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800721e:	9100      	str	r1, [sp, #0]
 8007220:	462b      	mov	r3, r5
 8007222:	4906      	ldr	r1, [pc, #24]	; (800723c <__assert_func+0x34>)
 8007224:	f000 f8dc 	bl	80073e0 <fiprintf>
 8007228:	f000 f9a1 	bl	800756e <abort>
 800722c:	4b04      	ldr	r3, [pc, #16]	; (8007240 <__assert_func+0x38>)
 800722e:	461c      	mov	r4, r3
 8007230:	e7f3      	b.n	800721a <__assert_func+0x12>
 8007232:	bf00      	nop
 8007234:	2000000c 	.word	0x2000000c
 8007238:	080079c5 	.word	0x080079c5
 800723c:	080079d2 	.word	0x080079d2
 8007240:	08007a00 	.word	0x08007a00

08007244 <_close_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	2300      	movs	r3, #0
 8007248:	4d05      	ldr	r5, [pc, #20]	; (8007260 <_close_r+0x1c>)
 800724a:	4604      	mov	r4, r0
 800724c:	4608      	mov	r0, r1
 800724e:	602b      	str	r3, [r5, #0]
 8007250:	f7fa f941 	bl	80014d6 <_close>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_close_r+0x1a>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_close_r+0x1a>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	20000f90 	.word	0x20000f90

08007264 <__sflush_r>:
 8007264:	898a      	ldrh	r2, [r1, #12]
 8007266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007268:	4605      	mov	r5, r0
 800726a:	0710      	lsls	r0, r2, #28
 800726c:	460c      	mov	r4, r1
 800726e:	d457      	bmi.n	8007320 <__sflush_r+0xbc>
 8007270:	684b      	ldr	r3, [r1, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	dc04      	bgt.n	8007280 <__sflush_r+0x1c>
 8007276:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007278:	2b00      	cmp	r3, #0
 800727a:	dc01      	bgt.n	8007280 <__sflush_r+0x1c>
 800727c:	2000      	movs	r0, #0
 800727e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007282:	2e00      	cmp	r6, #0
 8007284:	d0fa      	beq.n	800727c <__sflush_r+0x18>
 8007286:	2300      	movs	r3, #0
 8007288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800728c:	682f      	ldr	r7, [r5, #0]
 800728e:	602b      	str	r3, [r5, #0]
 8007290:	d032      	beq.n	80072f8 <__sflush_r+0x94>
 8007292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	075a      	lsls	r2, r3, #29
 8007298:	d505      	bpl.n	80072a6 <__sflush_r+0x42>
 800729a:	6863      	ldr	r3, [r4, #4]
 800729c:	1ac0      	subs	r0, r0, r3
 800729e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072a0:	b10b      	cbz	r3, 80072a6 <__sflush_r+0x42>
 80072a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072a4:	1ac0      	subs	r0, r0, r3
 80072a6:	2300      	movs	r3, #0
 80072a8:	4602      	mov	r2, r0
 80072aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ac:	4628      	mov	r0, r5
 80072ae:	6a21      	ldr	r1, [r4, #32]
 80072b0:	47b0      	blx	r6
 80072b2:	1c43      	adds	r3, r0, #1
 80072b4:	89a3      	ldrh	r3, [r4, #12]
 80072b6:	d106      	bne.n	80072c6 <__sflush_r+0x62>
 80072b8:	6829      	ldr	r1, [r5, #0]
 80072ba:	291d      	cmp	r1, #29
 80072bc:	d82c      	bhi.n	8007318 <__sflush_r+0xb4>
 80072be:	4a29      	ldr	r2, [pc, #164]	; (8007364 <__sflush_r+0x100>)
 80072c0:	40ca      	lsrs	r2, r1
 80072c2:	07d6      	lsls	r6, r2, #31
 80072c4:	d528      	bpl.n	8007318 <__sflush_r+0xb4>
 80072c6:	2200      	movs	r2, #0
 80072c8:	6062      	str	r2, [r4, #4]
 80072ca:	6922      	ldr	r2, [r4, #16]
 80072cc:	04d9      	lsls	r1, r3, #19
 80072ce:	6022      	str	r2, [r4, #0]
 80072d0:	d504      	bpl.n	80072dc <__sflush_r+0x78>
 80072d2:	1c42      	adds	r2, r0, #1
 80072d4:	d101      	bne.n	80072da <__sflush_r+0x76>
 80072d6:	682b      	ldr	r3, [r5, #0]
 80072d8:	b903      	cbnz	r3, 80072dc <__sflush_r+0x78>
 80072da:	6560      	str	r0, [r4, #84]	; 0x54
 80072dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072de:	602f      	str	r7, [r5, #0]
 80072e0:	2900      	cmp	r1, #0
 80072e2:	d0cb      	beq.n	800727c <__sflush_r+0x18>
 80072e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072e8:	4299      	cmp	r1, r3
 80072ea:	d002      	beq.n	80072f2 <__sflush_r+0x8e>
 80072ec:	4628      	mov	r0, r5
 80072ee:	f7ff fc31 	bl	8006b54 <_free_r>
 80072f2:	2000      	movs	r0, #0
 80072f4:	6360      	str	r0, [r4, #52]	; 0x34
 80072f6:	e7c2      	b.n	800727e <__sflush_r+0x1a>
 80072f8:	6a21      	ldr	r1, [r4, #32]
 80072fa:	2301      	movs	r3, #1
 80072fc:	4628      	mov	r0, r5
 80072fe:	47b0      	blx	r6
 8007300:	1c41      	adds	r1, r0, #1
 8007302:	d1c7      	bne.n	8007294 <__sflush_r+0x30>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d0c4      	beq.n	8007294 <__sflush_r+0x30>
 800730a:	2b1d      	cmp	r3, #29
 800730c:	d001      	beq.n	8007312 <__sflush_r+0xae>
 800730e:	2b16      	cmp	r3, #22
 8007310:	d101      	bne.n	8007316 <__sflush_r+0xb2>
 8007312:	602f      	str	r7, [r5, #0]
 8007314:	e7b2      	b.n	800727c <__sflush_r+0x18>
 8007316:	89a3      	ldrh	r3, [r4, #12]
 8007318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	e7ae      	b.n	800727e <__sflush_r+0x1a>
 8007320:	690f      	ldr	r7, [r1, #16]
 8007322:	2f00      	cmp	r7, #0
 8007324:	d0aa      	beq.n	800727c <__sflush_r+0x18>
 8007326:	0793      	lsls	r3, r2, #30
 8007328:	bf18      	it	ne
 800732a:	2300      	movne	r3, #0
 800732c:	680e      	ldr	r6, [r1, #0]
 800732e:	bf08      	it	eq
 8007330:	694b      	ldreq	r3, [r1, #20]
 8007332:	1bf6      	subs	r6, r6, r7
 8007334:	600f      	str	r7, [r1, #0]
 8007336:	608b      	str	r3, [r1, #8]
 8007338:	2e00      	cmp	r6, #0
 800733a:	dd9f      	ble.n	800727c <__sflush_r+0x18>
 800733c:	4633      	mov	r3, r6
 800733e:	463a      	mov	r2, r7
 8007340:	4628      	mov	r0, r5
 8007342:	6a21      	ldr	r1, [r4, #32]
 8007344:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007348:	47e0      	blx	ip
 800734a:	2800      	cmp	r0, #0
 800734c:	dc06      	bgt.n	800735c <__sflush_r+0xf8>
 800734e:	89a3      	ldrh	r3, [r4, #12]
 8007350:	f04f 30ff 	mov.w	r0, #4294967295
 8007354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007358:	81a3      	strh	r3, [r4, #12]
 800735a:	e790      	b.n	800727e <__sflush_r+0x1a>
 800735c:	4407      	add	r7, r0
 800735e:	1a36      	subs	r6, r6, r0
 8007360:	e7ea      	b.n	8007338 <__sflush_r+0xd4>
 8007362:	bf00      	nop
 8007364:	20400001 	.word	0x20400001

08007368 <_fflush_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	690b      	ldr	r3, [r1, #16]
 800736c:	4605      	mov	r5, r0
 800736e:	460c      	mov	r4, r1
 8007370:	b913      	cbnz	r3, 8007378 <_fflush_r+0x10>
 8007372:	2500      	movs	r5, #0
 8007374:	4628      	mov	r0, r5
 8007376:	bd38      	pop	{r3, r4, r5, pc}
 8007378:	b118      	cbz	r0, 8007382 <_fflush_r+0x1a>
 800737a:	6983      	ldr	r3, [r0, #24]
 800737c:	b90b      	cbnz	r3, 8007382 <_fflush_r+0x1a>
 800737e:	f7fe ff89 	bl	8006294 <__sinit>
 8007382:	4b14      	ldr	r3, [pc, #80]	; (80073d4 <_fflush_r+0x6c>)
 8007384:	429c      	cmp	r4, r3
 8007386:	d11b      	bne.n	80073c0 <_fflush_r+0x58>
 8007388:	686c      	ldr	r4, [r5, #4]
 800738a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0ef      	beq.n	8007372 <_fflush_r+0xa>
 8007392:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007394:	07d0      	lsls	r0, r2, #31
 8007396:	d404      	bmi.n	80073a2 <_fflush_r+0x3a>
 8007398:	0599      	lsls	r1, r3, #22
 800739a:	d402      	bmi.n	80073a2 <_fflush_r+0x3a>
 800739c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800739e:	f7ff f81c 	bl	80063da <__retarget_lock_acquire_recursive>
 80073a2:	4628      	mov	r0, r5
 80073a4:	4621      	mov	r1, r4
 80073a6:	f7ff ff5d 	bl	8007264 <__sflush_r>
 80073aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073ac:	4605      	mov	r5, r0
 80073ae:	07da      	lsls	r2, r3, #31
 80073b0:	d4e0      	bmi.n	8007374 <_fflush_r+0xc>
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	059b      	lsls	r3, r3, #22
 80073b6:	d4dd      	bmi.n	8007374 <_fflush_r+0xc>
 80073b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ba:	f7ff f80f 	bl	80063dc <__retarget_lock_release_recursive>
 80073be:	e7d9      	b.n	8007374 <_fflush_r+0xc>
 80073c0:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <_fflush_r+0x70>)
 80073c2:	429c      	cmp	r4, r3
 80073c4:	d101      	bne.n	80073ca <_fflush_r+0x62>
 80073c6:	68ac      	ldr	r4, [r5, #8]
 80073c8:	e7df      	b.n	800738a <_fflush_r+0x22>
 80073ca:	4b04      	ldr	r3, [pc, #16]	; (80073dc <_fflush_r+0x74>)
 80073cc:	429c      	cmp	r4, r3
 80073ce:	bf08      	it	eq
 80073d0:	68ec      	ldreq	r4, [r5, #12]
 80073d2:	e7da      	b.n	800738a <_fflush_r+0x22>
 80073d4:	08007818 	.word	0x08007818
 80073d8:	08007838 	.word	0x08007838
 80073dc:	080077f8 	.word	0x080077f8

080073e0 <fiprintf>:
 80073e0:	b40e      	push	{r1, r2, r3}
 80073e2:	b503      	push	{r0, r1, lr}
 80073e4:	4601      	mov	r1, r0
 80073e6:	ab03      	add	r3, sp, #12
 80073e8:	4805      	ldr	r0, [pc, #20]	; (8007400 <fiprintf+0x20>)
 80073ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ee:	6800      	ldr	r0, [r0, #0]
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	f7ff fcb3 	bl	8006d5c <_vfiprintf_r>
 80073f6:	b002      	add	sp, #8
 80073f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073fc:	b003      	add	sp, #12
 80073fe:	4770      	bx	lr
 8007400:	2000000c 	.word	0x2000000c

08007404 <_lseek_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4604      	mov	r4, r0
 8007408:	4608      	mov	r0, r1
 800740a:	4611      	mov	r1, r2
 800740c:	2200      	movs	r2, #0
 800740e:	4d05      	ldr	r5, [pc, #20]	; (8007424 <_lseek_r+0x20>)
 8007410:	602a      	str	r2, [r5, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	f7fa f883 	bl	800151e <_lseek>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d102      	bne.n	8007422 <_lseek_r+0x1e>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	b103      	cbz	r3, 8007422 <_lseek_r+0x1e>
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	20000f90 	.word	0x20000f90

08007428 <__swhatbuf_r>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	460e      	mov	r6, r1
 800742c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007430:	4614      	mov	r4, r2
 8007432:	2900      	cmp	r1, #0
 8007434:	461d      	mov	r5, r3
 8007436:	b096      	sub	sp, #88	; 0x58
 8007438:	da08      	bge.n	800744c <__swhatbuf_r+0x24>
 800743a:	2200      	movs	r2, #0
 800743c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007440:	602a      	str	r2, [r5, #0]
 8007442:	061a      	lsls	r2, r3, #24
 8007444:	d410      	bmi.n	8007468 <__swhatbuf_r+0x40>
 8007446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800744a:	e00e      	b.n	800746a <__swhatbuf_r+0x42>
 800744c:	466a      	mov	r2, sp
 800744e:	f000 f895 	bl	800757c <_fstat_r>
 8007452:	2800      	cmp	r0, #0
 8007454:	dbf1      	blt.n	800743a <__swhatbuf_r+0x12>
 8007456:	9a01      	ldr	r2, [sp, #4]
 8007458:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800745c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007460:	425a      	negs	r2, r3
 8007462:	415a      	adcs	r2, r3
 8007464:	602a      	str	r2, [r5, #0]
 8007466:	e7ee      	b.n	8007446 <__swhatbuf_r+0x1e>
 8007468:	2340      	movs	r3, #64	; 0x40
 800746a:	2000      	movs	r0, #0
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	b016      	add	sp, #88	; 0x58
 8007470:	bd70      	pop	{r4, r5, r6, pc}
	...

08007474 <__smakebuf_r>:
 8007474:	898b      	ldrh	r3, [r1, #12]
 8007476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007478:	079d      	lsls	r5, r3, #30
 800747a:	4606      	mov	r6, r0
 800747c:	460c      	mov	r4, r1
 800747e:	d507      	bpl.n	8007490 <__smakebuf_r+0x1c>
 8007480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	6123      	str	r3, [r4, #16]
 8007488:	2301      	movs	r3, #1
 800748a:	6163      	str	r3, [r4, #20]
 800748c:	b002      	add	sp, #8
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	466a      	mov	r2, sp
 8007492:	ab01      	add	r3, sp, #4
 8007494:	f7ff ffc8 	bl	8007428 <__swhatbuf_r>
 8007498:	9900      	ldr	r1, [sp, #0]
 800749a:	4605      	mov	r5, r0
 800749c:	4630      	mov	r0, r6
 800749e:	f7ff fbc1 	bl	8006c24 <_malloc_r>
 80074a2:	b948      	cbnz	r0, 80074b8 <__smakebuf_r+0x44>
 80074a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a8:	059a      	lsls	r2, r3, #22
 80074aa:	d4ef      	bmi.n	800748c <__smakebuf_r+0x18>
 80074ac:	f023 0303 	bic.w	r3, r3, #3
 80074b0:	f043 0302 	orr.w	r3, r3, #2
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	e7e3      	b.n	8007480 <__smakebuf_r+0xc>
 80074b8:	4b0d      	ldr	r3, [pc, #52]	; (80074f0 <__smakebuf_r+0x7c>)
 80074ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	6020      	str	r0, [r4, #0]
 80074c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	9b00      	ldr	r3, [sp, #0]
 80074c8:	6120      	str	r0, [r4, #16]
 80074ca:	6163      	str	r3, [r4, #20]
 80074cc:	9b01      	ldr	r3, [sp, #4]
 80074ce:	b15b      	cbz	r3, 80074e8 <__smakebuf_r+0x74>
 80074d0:	4630      	mov	r0, r6
 80074d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074d6:	f000 f863 	bl	80075a0 <_isatty_r>
 80074da:	b128      	cbz	r0, 80074e8 <__smakebuf_r+0x74>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	f023 0303 	bic.w	r3, r3, #3
 80074e2:	f043 0301 	orr.w	r3, r3, #1
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	89a0      	ldrh	r0, [r4, #12]
 80074ea:	4305      	orrs	r5, r0
 80074ec:	81a5      	strh	r5, [r4, #12]
 80074ee:	e7cd      	b.n	800748c <__smakebuf_r+0x18>
 80074f0:	0800622d 	.word	0x0800622d

080074f4 <__ascii_mbtowc>:
 80074f4:	b082      	sub	sp, #8
 80074f6:	b901      	cbnz	r1, 80074fa <__ascii_mbtowc+0x6>
 80074f8:	a901      	add	r1, sp, #4
 80074fa:	b142      	cbz	r2, 800750e <__ascii_mbtowc+0x1a>
 80074fc:	b14b      	cbz	r3, 8007512 <__ascii_mbtowc+0x1e>
 80074fe:	7813      	ldrb	r3, [r2, #0]
 8007500:	600b      	str	r3, [r1, #0]
 8007502:	7812      	ldrb	r2, [r2, #0]
 8007504:	1e10      	subs	r0, r2, #0
 8007506:	bf18      	it	ne
 8007508:	2001      	movne	r0, #1
 800750a:	b002      	add	sp, #8
 800750c:	4770      	bx	lr
 800750e:	4610      	mov	r0, r2
 8007510:	e7fb      	b.n	800750a <__ascii_mbtowc+0x16>
 8007512:	f06f 0001 	mvn.w	r0, #1
 8007516:	e7f8      	b.n	800750a <__ascii_mbtowc+0x16>

08007518 <__malloc_lock>:
 8007518:	4801      	ldr	r0, [pc, #4]	; (8007520 <__malloc_lock+0x8>)
 800751a:	f7fe bf5e 	b.w	80063da <__retarget_lock_acquire_recursive>
 800751e:	bf00      	nop
 8007520:	20000f84 	.word	0x20000f84

08007524 <__malloc_unlock>:
 8007524:	4801      	ldr	r0, [pc, #4]	; (800752c <__malloc_unlock+0x8>)
 8007526:	f7fe bf59 	b.w	80063dc <__retarget_lock_release_recursive>
 800752a:	bf00      	nop
 800752c:	20000f84 	.word	0x20000f84

08007530 <_read_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4604      	mov	r4, r0
 8007534:	4608      	mov	r0, r1
 8007536:	4611      	mov	r1, r2
 8007538:	2200      	movs	r2, #0
 800753a:	4d05      	ldr	r5, [pc, #20]	; (8007550 <_read_r+0x20>)
 800753c:	602a      	str	r2, [r5, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	f7f9 ff90 	bl	8001464 <_read>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d102      	bne.n	800754e <_read_r+0x1e>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	b103      	cbz	r3, 800754e <_read_r+0x1e>
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	20000f90 	.word	0x20000f90

08007554 <__ascii_wctomb>:
 8007554:	4603      	mov	r3, r0
 8007556:	4608      	mov	r0, r1
 8007558:	b141      	cbz	r1, 800756c <__ascii_wctomb+0x18>
 800755a:	2aff      	cmp	r2, #255	; 0xff
 800755c:	d904      	bls.n	8007568 <__ascii_wctomb+0x14>
 800755e:	228a      	movs	r2, #138	; 0x8a
 8007560:	f04f 30ff 	mov.w	r0, #4294967295
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	4770      	bx	lr
 8007568:	2001      	movs	r0, #1
 800756a:	700a      	strb	r2, [r1, #0]
 800756c:	4770      	bx	lr

0800756e <abort>:
 800756e:	2006      	movs	r0, #6
 8007570:	b508      	push	{r3, lr}
 8007572:	f000 f84d 	bl	8007610 <raise>
 8007576:	2001      	movs	r0, #1
 8007578:	f7f9 ff6a 	bl	8001450 <_exit>

0800757c <_fstat_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	2300      	movs	r3, #0
 8007580:	4d06      	ldr	r5, [pc, #24]	; (800759c <_fstat_r+0x20>)
 8007582:	4604      	mov	r4, r0
 8007584:	4608      	mov	r0, r1
 8007586:	4611      	mov	r1, r2
 8007588:	602b      	str	r3, [r5, #0]
 800758a:	f7f9 ffaf 	bl	80014ec <_fstat>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	d102      	bne.n	8007598 <_fstat_r+0x1c>
 8007592:	682b      	ldr	r3, [r5, #0]
 8007594:	b103      	cbz	r3, 8007598 <_fstat_r+0x1c>
 8007596:	6023      	str	r3, [r4, #0]
 8007598:	bd38      	pop	{r3, r4, r5, pc}
 800759a:	bf00      	nop
 800759c:	20000f90 	.word	0x20000f90

080075a0 <_isatty_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	2300      	movs	r3, #0
 80075a4:	4d05      	ldr	r5, [pc, #20]	; (80075bc <_isatty_r+0x1c>)
 80075a6:	4604      	mov	r4, r0
 80075a8:	4608      	mov	r0, r1
 80075aa:	602b      	str	r3, [r5, #0]
 80075ac:	f7f9 ffad 	bl	800150a <_isatty>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_isatty_r+0x1a>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_isatty_r+0x1a>
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	20000f90 	.word	0x20000f90

080075c0 <_raise_r>:
 80075c0:	291f      	cmp	r1, #31
 80075c2:	b538      	push	{r3, r4, r5, lr}
 80075c4:	4604      	mov	r4, r0
 80075c6:	460d      	mov	r5, r1
 80075c8:	d904      	bls.n	80075d4 <_raise_r+0x14>
 80075ca:	2316      	movs	r3, #22
 80075cc:	6003      	str	r3, [r0, #0]
 80075ce:	f04f 30ff 	mov.w	r0, #4294967295
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80075d6:	b112      	cbz	r2, 80075de <_raise_r+0x1e>
 80075d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075dc:	b94b      	cbnz	r3, 80075f2 <_raise_r+0x32>
 80075de:	4620      	mov	r0, r4
 80075e0:	f000 f830 	bl	8007644 <_getpid_r>
 80075e4:	462a      	mov	r2, r5
 80075e6:	4601      	mov	r1, r0
 80075e8:	4620      	mov	r0, r4
 80075ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075ee:	f000 b817 	b.w	8007620 <_kill_r>
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d00a      	beq.n	800760c <_raise_r+0x4c>
 80075f6:	1c59      	adds	r1, r3, #1
 80075f8:	d103      	bne.n	8007602 <_raise_r+0x42>
 80075fa:	2316      	movs	r3, #22
 80075fc:	6003      	str	r3, [r0, #0]
 80075fe:	2001      	movs	r0, #1
 8007600:	e7e7      	b.n	80075d2 <_raise_r+0x12>
 8007602:	2400      	movs	r4, #0
 8007604:	4628      	mov	r0, r5
 8007606:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800760a:	4798      	blx	r3
 800760c:	2000      	movs	r0, #0
 800760e:	e7e0      	b.n	80075d2 <_raise_r+0x12>

08007610 <raise>:
 8007610:	4b02      	ldr	r3, [pc, #8]	; (800761c <raise+0xc>)
 8007612:	4601      	mov	r1, r0
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	f7ff bfd3 	b.w	80075c0 <_raise_r>
 800761a:	bf00      	nop
 800761c:	2000000c 	.word	0x2000000c

08007620 <_kill_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	2300      	movs	r3, #0
 8007624:	4d06      	ldr	r5, [pc, #24]	; (8007640 <_kill_r+0x20>)
 8007626:	4604      	mov	r4, r0
 8007628:	4608      	mov	r0, r1
 800762a:	4611      	mov	r1, r2
 800762c:	602b      	str	r3, [r5, #0]
 800762e:	f7f9 feff 	bl	8001430 <_kill>
 8007632:	1c43      	adds	r3, r0, #1
 8007634:	d102      	bne.n	800763c <_kill_r+0x1c>
 8007636:	682b      	ldr	r3, [r5, #0]
 8007638:	b103      	cbz	r3, 800763c <_kill_r+0x1c>
 800763a:	6023      	str	r3, [r4, #0]
 800763c:	bd38      	pop	{r3, r4, r5, pc}
 800763e:	bf00      	nop
 8007640:	20000f90 	.word	0x20000f90

08007644 <_getpid_r>:
 8007644:	f7f9 beed 	b.w	8001422 <_getpid>

08007648 <_init>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	bf00      	nop
 800764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764e:	bc08      	pop	{r3}
 8007650:	469e      	mov	lr, r3
 8007652:	4770      	bx	lr

08007654 <_fini>:
 8007654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007656:	bf00      	nop
 8007658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765a:	bc08      	pop	{r3}
 800765c:	469e      	mov	lr, r3
 800765e:	4770      	bx	lr
