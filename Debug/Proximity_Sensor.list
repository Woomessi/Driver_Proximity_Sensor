
Proximity_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005088  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005194  08005194  00015194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052ec  080052ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080052ec  080052ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052ec  080052ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052f0  080052f0  000152f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db8  20000070  08005364  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e28  08005364  00020e28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098da  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5f  00000000  00000000  00029973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019442  00000000  00000000  0002cb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa59  00000000  00000000  00045f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008941e  00000000  00000000  000509cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9de9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000315c  00000000  00000000  000d9e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800517c 	.word	0x0800517c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800517c 	.word	0x0800517c

0800014c <I2C_Delay>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
static void I2C_Delay(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
		ѭ������Ϊ7ʱ��SCLƵ�� = 347KHz�� SCL�ߵ�ƽʱ��1.5us��SCL�͵�ƽʱ��2.87us 
	 	ѭ������Ϊ5ʱ��SCLƵ�� = 421KHz�� SCL�ߵ�ƽʱ��1.25us��SCL�͵�ƽʱ��2.375us 
        
    IAR���̱���Ч�ʸߣ���������Ϊ7
	*/
	for (i = 0; i < 29; i++);
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e002      	b.n	800015e <I2C_Delay+0x12>
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	3301      	adds	r3, #1
 800015c:	71fb      	strb	r3, [r7, #7]
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	2b1c      	cmp	r3, #28
 8000162:	d9f9      	bls.n	8000158 <I2C_Delay+0xc>
}
 8000164:	bf00      	nop
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr

08000170 <I2C_Start>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Start(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C���������ź� */
	I2C_SDA_HIGH();
 8000174:	2201      	movs	r2, #1
 8000176:	2140      	movs	r1, #64	; 0x40
 8000178:	480c      	ldr	r0, [pc, #48]	; (80001ac <I2C_Start+0x3c>)
 800017a:	f003 f9ac 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 800017e:	2201      	movs	r2, #1
 8000180:	2180      	movs	r1, #128	; 0x80
 8000182:	480a      	ldr	r0, [pc, #40]	; (80001ac <I2C_Start+0x3c>)
 8000184:	f003 f9a7 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000188:	f7ff ffe0 	bl	800014c <I2C_Delay>
	I2C_SDA_LOW();
 800018c:	2200      	movs	r2, #0
 800018e:	2140      	movs	r1, #64	; 0x40
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <I2C_Start+0x3c>)
 8000192:	f003 f9a0 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000196:	f7ff ffd9 	bl	800014c <I2C_Delay>
	I2C_SCL_LOW();
 800019a:	2200      	movs	r2, #0
 800019c:	2180      	movs	r1, #128	; 0x80
 800019e:	4803      	ldr	r0, [pc, #12]	; (80001ac <I2C_Start+0x3c>)
 80001a0:	f003 f999 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay();
 80001a4:	f7ff ffd2 	bl	800014c <I2C_Delay>
}
 80001a8:	bf00      	nop
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <I2C_Stop>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Stop(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C����ֹͣ�ź� */
	I2C_SDA_LOW();
 80001b4:	2200      	movs	r2, #0
 80001b6:	2140      	movs	r1, #64	; 0x40
 80001b8:	4808      	ldr	r0, [pc, #32]	; (80001dc <I2C_Stop+0x2c>)
 80001ba:	f003 f98c 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 80001be:	2201      	movs	r2, #1
 80001c0:	2180      	movs	r1, #128	; 0x80
 80001c2:	4806      	ldr	r0, [pc, #24]	; (80001dc <I2C_Stop+0x2c>)
 80001c4:	f003 f987 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay();
 80001c8:	f7ff ffc0 	bl	800014c <I2C_Delay>
	I2C_SDA_HIGH();
 80001cc:	2201      	movs	r2, #1
 80001ce:	2140      	movs	r1, #64	; 0x40
 80001d0:	4802      	ldr	r0, [pc, #8]	; (80001dc <I2C_Stop+0x2c>)
 80001d2:	f003 f980 	bl	80034d6 <HAL_GPIO_WritePin>
}
 80001d6:	bf00      	nop
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	40010c00 	.word	0x40010c00

080001e0 <I2C_SendByte>:
  * �������: Byte �� �ȴ����͵��ֽ�
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_SendByte(uint8_t Byte)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	/* �ȷ����ֽڵĸ�λbit7 */
	for (i = 0; i < 8; i++)
 80001ea:	2300      	movs	r3, #0
 80001ec:	73fb      	strb	r3, [r7, #15]
 80001ee:	e02c      	b.n	800024a <I2C_SendByte+0x6a>
	{		
		if (Byte & 0x80)//提取当前字节最高有效位
 80001f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	da05      	bge.n	8000204 <I2C_SendByte+0x24>
		{
			I2C_SDA_HIGH();
 80001f8:	2201      	movs	r2, #1
 80001fa:	2140      	movs	r1, #64	; 0x40
 80001fc:	4817      	ldr	r0, [pc, #92]	; (800025c <I2C_SendByte+0x7c>)
 80001fe:	f003 f96a 	bl	80034d6 <HAL_GPIO_WritePin>
 8000202:	e004      	b.n	800020e <I2C_SendByte+0x2e>
		}
		else
		{
			I2C_SDA_LOW();
 8000204:	2200      	movs	r2, #0
 8000206:	2140      	movs	r1, #64	; 0x40
 8000208:	4814      	ldr	r0, [pc, #80]	; (800025c <I2C_SendByte+0x7c>)
 800020a:	f003 f964 	bl	80034d6 <HAL_GPIO_WritePin>
		}
		I2C_Delay();
 800020e:	f7ff ff9d 	bl	800014c <I2C_Delay>
		I2C_SCL_HIGH();
 8000212:	2201      	movs	r2, #1
 8000214:	2180      	movs	r1, #128	; 0x80
 8000216:	4811      	ldr	r0, [pc, #68]	; (800025c <I2C_SendByte+0x7c>)
 8000218:	f003 f95d 	bl	80034d6 <HAL_GPIO_WritePin>
		I2C_Delay();	
 800021c:	f7ff ff96 	bl	800014c <I2C_Delay>
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 8000220:	2200      	movs	r2, #0
 8000222:	2180      	movs	r1, #128	; 0x80
 8000224:	480d      	ldr	r0, [pc, #52]	; (800025c <I2C_SendByte+0x7c>)
 8000226:	f003 f956 	bl	80034d6 <HAL_GPIO_WritePin>
		if (i == 7)
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	2b07      	cmp	r3, #7
 800022e:	d104      	bne.n	800023a <I2C_SendByte+0x5a>
		{
			I2C_SDA_HIGH(); //
 8000230:	2201      	movs	r2, #1
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	4809      	ldr	r0, [pc, #36]	; (800025c <I2C_SendByte+0x7c>)
 8000236:	f003 f94e 	bl	80034d6 <HAL_GPIO_WritePin>
		}
		Byte <<= 1;//左移一位，以读取下一位
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	71fb      	strb	r3, [r7, #7]
		I2C_Delay();
 8000240:	f7ff ff84 	bl	800014c <I2C_Delay>
	for (i = 0; i < 8; i++)
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	3301      	adds	r3, #1
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	2b07      	cmp	r3, #7
 800024e:	d9cf      	bls.n	80001f0 <I2C_SendByte+0x10>
	}
}
 8000250:	bf00      	nop
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40010c00 	.word	0x40010c00

08000260 <I2C_ReadByte>:
  * �������: ��
  * �� �� ֵ: ����������
  * ˵    ������
  */
uint8_t I2C_ReadByte(uint8_t ack)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t value;//读取值

	value = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < 8; i++)
 800026e:	2300      	movs	r3, #0
 8000270:	73fb      	strb	r3, [r7, #15]
 8000272:	e01d      	b.n	80002b0 <I2C_ReadByte+0x50>
	{
		value <<= 1;
 8000274:	7bbb      	ldrb	r3, [r7, #14]
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	73bb      	strb	r3, [r7, #14]
		I2C_SCL_HIGH();
 800027a:	2201      	movs	r2, #1
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	4814      	ldr	r0, [pc, #80]	; (80002d0 <I2C_ReadByte+0x70>)
 8000280:	f003 f929 	bl	80034d6 <HAL_GPIO_WritePin>
		I2C_Delay();
 8000284:	f7ff ff62 	bl	800014c <I2C_Delay>
		if (I2C_SDA_READ())
 8000288:	2140      	movs	r1, #64	; 0x40
 800028a:	4811      	ldr	r0, [pc, #68]	; (80002d0 <I2C_ReadByte+0x70>)
 800028c:	f003 f90c 	bl	80034a8 <HAL_GPIO_ReadPin>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d002      	beq.n	800029c <I2C_ReadByte+0x3c>
		{
			value++;
 8000296:	7bbb      	ldrb	r3, [r7, #14]
 8000298:	3301      	adds	r3, #1
 800029a:	73bb      	strb	r3, [r7, #14]
		}
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 800029c:	2200      	movs	r2, #0
 800029e:	2180      	movs	r1, #128	; 0x80
 80002a0:	480b      	ldr	r0, [pc, #44]	; (80002d0 <I2C_ReadByte+0x70>)
 80002a2:	f003 f918 	bl	80034d6 <HAL_GPIO_WritePin>
		I2C_Delay();
 80002a6:	f7ff ff51 	bl	800014c <I2C_Delay>
	for (i = 0; i < 8; i++)
 80002aa:	7bfb      	ldrb	r3, [r7, #15]
 80002ac:	3301      	adds	r3, #1
 80002ae:	73fb      	strb	r3, [r7, #15]
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
 80002b2:	2b07      	cmp	r3, #7
 80002b4:	d9de      	bls.n	8000274 <I2C_ReadByte+0x14>
	}
  if(ack==0)
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d102      	bne.n	80002c2 <I2C_ReadByte+0x62>
		I2C_NAck();
 80002bc:	f000 f856 	bl	800036c <I2C_NAck>
 80002c0:	e001      	b.n	80002c6 <I2C_ReadByte+0x66>
	else
		I2C_Ack();
 80002c2:	f000 f833 	bl	800032c <I2C_Ack>
	return value;
 80002c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40010c00 	.word	0x40010c00

080002d4 <I2C_WaitAck>:
  * �������: ��
  * �� �� ֵ: ����0��ʾ��ȷӦ��1��ʾ��������Ӧ
  * ˵    ������
  */
uint8_t I2C_WaitAck(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 80002da:	2201      	movs	r2, #1
 80002dc:	2140      	movs	r1, #64	; 0x40
 80002de:	4812      	ldr	r0, [pc, #72]	; (8000328 <I2C_WaitAck+0x54>)
 80002e0:	f003 f8f9 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay();
 80002e4:	f7ff ff32 	bl	800014c <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����SCL = 1, ��ʱ�����᷵��ACKӦ�� */
 80002e8:	2201      	movs	r2, #1
 80002ea:	2180      	movs	r1, #128	; 0x80
 80002ec:	480e      	ldr	r0, [pc, #56]	; (8000328 <I2C_WaitAck+0x54>)
 80002ee:	f003 f8f2 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay();
 80002f2:	f7ff ff2b 	bl	800014c <I2C_Delay>
	if (I2C_SDA_READ())	/* CPU��ȡSDA����״̬ */
 80002f6:	2140      	movs	r1, #64	; 0x40
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <I2C_WaitAck+0x54>)
 80002fa:	f003 f8d5 	bl	80034a8 <HAL_GPIO_ReadPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d002      	beq.n	800030a <I2C_WaitAck+0x36>
	{
		re = 1;
 8000304:	2301      	movs	r3, #1
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	e001      	b.n	800030e <I2C_WaitAck+0x3a>
	}
	else
	{
		re = 0;
 800030a:	2300      	movs	r3, #0
 800030c:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_LOW();
 800030e:	2200      	movs	r2, #0
 8000310:	2180      	movs	r1, #128	; 0x80
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <I2C_WaitAck+0x54>)
 8000314:	f003 f8df 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000318:	f7ff ff18 	bl	800014c <I2C_Delay>
	return re;
 800031c:	79fb      	ldrb	r3, [r7, #7]
}
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010c00 	.word	0x40010c00

0800032c <I2C_Ack>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Ack(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	I2C_SDA_LOW();	/* CPU����SDA = 0 */
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <I2C_Ack+0x3c>)
 8000336:	f003 f8ce 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay();
 800033a:	f7ff ff07 	bl	800014c <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����1��ʱ�� */
 800033e:	2201      	movs	r2, #1
 8000340:	2180      	movs	r1, #128	; 0x80
 8000342:	4809      	ldr	r0, [pc, #36]	; (8000368 <I2C_Ack+0x3c>)
 8000344:	f003 f8c7 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000348:	f7ff ff00 	bl	800014c <I2C_Delay>
	I2C_SCL_LOW();
 800034c:	2200      	movs	r2, #0
 800034e:	2180      	movs	r1, #128	; 0x80
 8000350:	4805      	ldr	r0, [pc, #20]	; (8000368 <I2C_Ack+0x3c>)
 8000352:	f003 f8c0 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000356:	f7ff fef9 	bl	800014c <I2C_Delay>
	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 800035a:	2201      	movs	r2, #1
 800035c:	2140      	movs	r1, #64	; 0x40
 800035e:	4802      	ldr	r0, [pc, #8]	; (8000368 <I2C_Ack+0x3c>)
 8000360:	f003 f8b9 	bl	80034d6 <HAL_GPIO_WritePin>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40010c00 	.word	0x40010c00

0800036c <I2C_NAck>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_NAck(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	I2C_SDA_HIGH();	/* CPU����SDA = 1 */
 8000370:	2201      	movs	r2, #1
 8000372:	2140      	movs	r1, #64	; 0x40
 8000374:	480a      	ldr	r0, [pc, #40]	; (80003a0 <I2C_NAck+0x34>)
 8000376:	f003 f8ae 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay();
 800037a:	f7ff fee7 	bl	800014c <I2C_Delay>
	I2C_SCL_HIGH();	/* CPU����1��ʱ�� */
 800037e:	2201      	movs	r2, #1
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	4807      	ldr	r0, [pc, #28]	; (80003a0 <I2C_NAck+0x34>)
 8000384:	f003 f8a7 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay();
 8000388:	f7ff fee0 	bl	800014c <I2C_Delay>
	I2C_SCL_LOW();
 800038c:	2200      	movs	r2, #0
 800038e:	2180      	movs	r1, #128	; 0x80
 8000390:	4803      	ldr	r0, [pc, #12]	; (80003a0 <I2C_NAck+0x34>)
 8000392:	f003 f8a0 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay();	
 8000396:	f7ff fed9 	bl	800014c <I2C_Delay>
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40010c00 	.word	0x40010c00

080003a4 <I2C_Delay2>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
static void I2C_Delay2(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
		ѭ������Ϊ7ʱ��SCLƵ�� = 347KHz�� SCL�ߵ�ƽʱ��1.5us��SCL�͵�ƽʱ��2.87us 
	 	ѭ������Ϊ5ʱ��SCLƵ�� = 421KHz�� SCL�ߵ�ƽʱ��1.25us��SCL�͵�ƽʱ��2.375us 
        
    IAR���̱���Ч�ʸߣ���������Ϊ7
	*/
	for (i = 0; i < 29; i++);
 80003aa:	2300      	movs	r3, #0
 80003ac:	71fb      	strb	r3, [r7, #7]
 80003ae:	e002      	b.n	80003b6 <I2C_Delay2+0x12>
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	3301      	adds	r3, #1
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2b1c      	cmp	r3, #28
 80003ba:	d9f9      	bls.n	80003b0 <I2C_Delay2+0xc>
}
 80003bc:	bf00      	nop
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <I2C_Start2>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Start2(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C���������ź� */
	I2C_SDA_HIGH();
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d2:	480e      	ldr	r0, [pc, #56]	; (800040c <I2C_Start2+0x44>)
 80003d4:	f003 f87f 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003de:	480b      	ldr	r0, [pc, #44]	; (800040c <I2C_Start2+0x44>)
 80003e0:	f003 f879 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay2();
 80003e4:	f7ff ffde 	bl	80003a4 <I2C_Delay2>
	I2C_SDA_LOW();
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ee:	4807      	ldr	r0, [pc, #28]	; (800040c <I2C_Start2+0x44>)
 80003f0:	f003 f871 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay2();
 80003f4:	f7ff ffd6 	bl	80003a4 <I2C_Delay2>
	I2C_SCL_LOW();
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fe:	4803      	ldr	r0, [pc, #12]	; (800040c <I2C_Start2+0x44>)
 8000400:	f003 f869 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000404:	f7ff ffce 	bl	80003a4 <I2C_Delay2>
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40010c00 	.word	0x40010c00

08000410 <I2C_Stop2>:
  * �������: ��
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_Stop2(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	/* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾI2C����ֹͣ�ź� */
	I2C_SDA_LOW();
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041a:	4809      	ldr	r0, [pc, #36]	; (8000440 <I2C_Stop2+0x30>)
 800041c:	f003 f85b 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_SCL_HIGH();
 8000420:	2201      	movs	r2, #1
 8000422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <I2C_Stop2+0x30>)
 8000428:	f003 f855 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay2();
 800042c:	f7ff ffba 	bl	80003a4 <I2C_Delay2>
	I2C_SDA_HIGH();
 8000430:	2201      	movs	r2, #1
 8000432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000436:	4802      	ldr	r0, [pc, #8]	; (8000440 <I2C_Stop2+0x30>)
 8000438:	f003 f84d 	bl	80034d6 <HAL_GPIO_WritePin>
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40010c00 	.word	0x40010c00

08000444 <I2C_SendByte2>:
  * �������: Byte �� �ȴ����͵��ֽ�
  * �� �� ֵ: ��
  * ˵    ������
  */
void I2C_SendByte2(uint8_t Byte)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	/* �ȷ����ֽڵĸ�λbit7 */
	for (i = 0; i < 8; i++)
 800044e:	2300      	movs	r3, #0
 8000450:	73fb      	strb	r3, [r7, #15]
 8000452:	e031      	b.n	80004b8 <I2C_SendByte2+0x74>
	{		
		if (Byte & 0x80)//提取当前字节最高有效位
 8000454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000458:	2b00      	cmp	r3, #0
 800045a:	da06      	bge.n	800046a <I2C_SendByte2+0x26>
		{
			I2C_SDA_HIGH();
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000462:	4819      	ldr	r0, [pc, #100]	; (80004c8 <I2C_SendByte2+0x84>)
 8000464:	f003 f837 	bl	80034d6 <HAL_GPIO_WritePin>
 8000468:	e005      	b.n	8000476 <I2C_SendByte2+0x32>
		}
		else
		{
			I2C_SDA_LOW();
 800046a:	2200      	movs	r2, #0
 800046c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000470:	4815      	ldr	r0, [pc, #84]	; (80004c8 <I2C_SendByte2+0x84>)
 8000472:	f003 f830 	bl	80034d6 <HAL_GPIO_WritePin>
		}
		I2C_Delay2();
 8000476:	f7ff ff95 	bl	80003a4 <I2C_Delay2>
		I2C_SCL_HIGH();
 800047a:	2201      	movs	r2, #1
 800047c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000480:	4811      	ldr	r0, [pc, #68]	; (80004c8 <I2C_SendByte2+0x84>)
 8000482:	f003 f828 	bl	80034d6 <HAL_GPIO_WritePin>
		I2C_Delay2();
 8000486:	f7ff ff8d 	bl	80003a4 <I2C_Delay2>
		I2C_SCL_LOW();//仅能在SCL为低电平时改变SDA的电平
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000490:	480d      	ldr	r0, [pc, #52]	; (80004c8 <I2C_SendByte2+0x84>)
 8000492:	f003 f820 	bl	80034d6 <HAL_GPIO_WritePin>
		if (i == 7)
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	2b07      	cmp	r3, #7
 800049a:	d105      	bne.n	80004a8 <I2C_SendByte2+0x64>
		{
			I2C_SDA_HIGH(); //
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a2:	4809      	ldr	r0, [pc, #36]	; (80004c8 <I2C_SendByte2+0x84>)
 80004a4:	f003 f817 	bl	80034d6 <HAL_GPIO_WritePin>
		}
		Byte <<= 1;//左移一位，以读取下一位
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	71fb      	strb	r3, [r7, #7]
		I2C_Delay2();
 80004ae:	f7ff ff79 	bl	80003a4 <I2C_Delay2>
	for (i = 0; i < 8; i++)
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	3301      	adds	r3, #1
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
 80004ba:	2b07      	cmp	r3, #7
 80004bc:	d9ca      	bls.n	8000454 <I2C_SendByte2+0x10>
	}
}
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40010c00 	.word	0x40010c00

080004cc <I2C_WaitAck2>:
  * �������: ��
  * �� �� ֵ: ����0��ʾ��ȷӦ��1��ʾ��������Ӧ
  * ˵    ������
  */
uint8_t I2C_WaitAck2(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_HIGH();	/* CPU�ͷ�SDA���� */
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d8:	4813      	ldr	r0, [pc, #76]	; (8000528 <I2C_WaitAck2+0x5c>)
 80004da:	f002 fffc 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay2();
 80004de:	f7ff ff61 	bl	80003a4 <I2C_Delay2>
	I2C_SCL_HIGH();	/* CPU����SCL = 1, ��ʱ�����᷵��ACKӦ�� */
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e8:	480f      	ldr	r0, [pc, #60]	; (8000528 <I2C_WaitAck2+0x5c>)
 80004ea:	f002 fff4 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay2();
 80004ee:	f7ff ff59 	bl	80003a4 <I2C_Delay2>
	if (I2C_SDA_READ())	/* CPU��ȡSDA����״̬ */
 80004f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f6:	480c      	ldr	r0, [pc, #48]	; (8000528 <I2C_WaitAck2+0x5c>)
 80004f8:	f002 ffd6 	bl	80034a8 <HAL_GPIO_ReadPin>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <I2C_WaitAck2+0x3c>
	{
		re = 1;
 8000502:	2301      	movs	r3, #1
 8000504:	71fb      	strb	r3, [r7, #7]
 8000506:	e001      	b.n	800050c <I2C_WaitAck2+0x40>
	}
	else
	{
		re = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_LOW();
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <I2C_WaitAck2+0x5c>)
 8000514:	f002 ffdf 	bl	80034d6 <HAL_GPIO_WritePin>
	I2C_Delay2();
 8000518:	f7ff ff44 	bl	80003a4 <I2C_Delay2>
	return re;
 800051c:	79fb      	ldrb	r3, [r7, #7]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40010c00 	.word	0x40010c00

0800052c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000534:	1d39      	adds	r1, r7, #4
 8000536:	f04f 33ff 	mov.w	r3, #4294967295
 800053a:	2201      	movs	r2, #1
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <__io_putchar+0x20>)
 800053e:	f003 fc4a 	bl	8003dd6 <HAL_UART_Transmit>
  return ch;
 8000542:	687b      	ldr	r3, [r7, #4]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	2000008c 	.word	0x2000008c

08000550 <__io_getchar>:
#else
#define PUTCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

GETCHAR_PROTOTYPE
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  uint8_t ch;
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000556:	1df9      	adds	r1, r7, #7
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
 800055c:	2201      	movs	r2, #1
 800055e:	4804      	ldr	r0, [pc, #16]	; (8000570 <__io_getchar+0x20>)
 8000560:	f003 fccb 	bl	8003efa <HAL_UART_Receive>
  return ch;
 8000564:	79fb      	ldrb	r3, [r7, #7]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000008c 	.word	0x2000008c

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init(); //初始化HAL库
 800057a:	f002 fca7 	bl	8002ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config(); //初始化时钟树
 800057e:	f000 f86b 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init(); //初始化GPIO端口
 8000582:	f000 f8d5 	bl	8000730 <MX_GPIO_Init>
  MX_USART1_UART_Init();//初始化串口1
 8000586:	f000 f8a9 	bl	80006dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /*基于TCA9535端口扩展器，拉低VL6180X的GPIO0端口，复位所有的TOF传感器，使其设备地址恢复为初始地址0x52*/
  TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_CONFIG_PORT0_REG, 0x00);//设置TCA9535端口扩展器Port0为输出模式
 800058a:	2200      	movs	r2, #0
 800058c:	2106      	movs	r1, #6
 800058e:	2040      	movs	r0, #64	; 0x40
 8000590:	f000 fb38 	bl	8000c04 <TCA9535_WrByte>
  TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_CONFIG_PORT1_REG, 0x00);//设置TCA9535端口扩展器Port1为输出模式
 8000594:	2200      	movs	r2, #0
 8000596:	2107      	movs	r1, #7
 8000598:	2040      	movs	r0, #64	; 0x40
 800059a:	f000 fb33 	bl	8000c04 <TCA9535_WrByte>

  TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT0_REG, 0x00);//复位TCA9535端口扩展器Port0所有引脚
 800059e:	2200      	movs	r2, #0
 80005a0:	2102      	movs	r1, #2
 80005a2:	2040      	movs	r0, #64	; 0x40
 80005a4:	f000 fb2e 	bl	8000c04 <TCA9535_WrByte>
  TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT1_REG, 0x00);//复位TCA9535端口扩展器Port1所有引脚
 80005a8:	2200      	movs	r2, #0
 80005aa:	2103      	movs	r1, #3
 80005ac:	2040      	movs	r0, #64	; 0x40
 80005ae:	f000 fb29 	bl	8000c04 <TCA9535_WrByte>

  int i, id, FinalI2cAddr, status, enabled_port0_pin, enabled_port1_pin;
//  id = 0;//给id赋初值，保证其地址的正确
  enabled_port0_pin = 0x00;//表达Port0中要置位的8个引脚，向其8位二进制数中某一位写1，以置位相应引脚
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
  enabled_port1_pin = 0x00;//表达Port1中要置位的8个引脚，向其8位二进制数中某一位写1，以置位相应引脚
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]

  //逐一更新各传感器的地址
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	e042      	b.n	8000646 <main+0xd2>
  {
	if(i < 8)//当前端口为Port0
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	2b07      	cmp	r3, #7
 80005c4:	dc0b      	bgt.n	80005de <main+0x6a>
	{
		/*
		 * 从Port0第一个引脚P00开始，逐一置位下一个引脚，并保持上一个引脚的置位。
		 * enabled_port0_pin二进制值与要置位的引脚的关系为2*enabled_port0_pin+1
		 */
		enabled_port0_pin = 2*enabled_port0_pin + 1;
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	3301      	adds	r3, #1
 80005cc:	613b      	str	r3, [r7, #16]
		TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT0_REG, enabled_port0_pin);//向相应寄存器写入enabled_port0_pin，使能当前TOF传感器
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	461a      	mov	r2, r3
 80005d4:	2102      	movs	r1, #2
 80005d6:	2040      	movs	r0, #64	; 0x40
 80005d8:	f000 fb14 	bl	8000c04 <TCA9535_WrByte>
 80005dc:	e00a      	b.n	80005f4 <main+0x80>
	}
	else//当前端口为Port1,其它操作同Port0
	{
		enabled_port1_pin = 2*enabled_port1_pin + 1;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	3301      	adds	r3, #1
 80005e4:	60fb      	str	r3, [r7, #12]
		TCA9535_WrByte(EXPANDER_ADDRESS, TCA9535_OUTPUT_PORT1_REG, enabled_port1_pin);
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	461a      	mov	r2, r3
 80005ec:	2103      	movs	r1, #3
 80005ee:	2040      	movs	r0, #64	; 0x40
 80005f0:	f000 fb08 	bl	8000c04 <TCA9535_WrByte>
	}
    HAL_Delay(2);//延时以保证使能成功
 80005f4:	2002      	movs	r0, #2
 80005f6:	f002 fccb 	bl	8002f90 <HAL_Delay>
    Devs[i].i2c_dev_addr = 0x52;//刚刚使能的TOF传感器，保存访问地址为默认地址0x52
 80005fa:	4a16      	ldr	r2, [pc, #88]	; (8000654 <main+0xe0>)
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	21d4      	movs	r1, #212	; 0xd4
 8000600:	fb01 f303 	mul.w	r3, r1, r3
 8000604:	4413      	add	r3, r2
 8000606:	33d0      	adds	r3, #208	; 0xd0
 8000608:	2252      	movs	r2, #82	; 0x52
 800060a:	601a      	str	r2, [r3, #0]
    FinalI2cAddr = 0x52 + ((i + 1) * 2);//获取修改后的地址（独一无二，不同于0x52）
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	332a      	adds	r3, #42	; 0x2a
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
    status = VL6180x_SetI2CAddress(&Devs[i], FinalI2cAddr); //将修改后的地址写入TOF传感器保存设备地址的寄存器
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	22d4      	movs	r2, #212	; 0xd4
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <main+0xe0>)
 800061e:	4413      	add	r3, r2
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	b2d2      	uxtb	r2, r2
 8000624:	4611      	mov	r1, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fbd8 	bl	8000ddc <VL6180x_SetI2CAddress>
 800062c:	6078      	str	r0, [r7, #4]
    Devs[i].i2c_dev_addr = FinalI2cAddr;//记录修改后的地址
 800062e:	4a09      	ldr	r2, [pc, #36]	; (8000654 <main+0xe0>)
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	21d4      	movs	r1, #212	; 0xd4
 8000634:	fb01 f303 	mul.w	r3, r1, r3
 8000638:	4413      	add	r3, r2
 800063a:	33d0      	adds	r3, #208	; 0xd0
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	3301      	adds	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	ddb9      	ble.n	80005c0 <main+0x4c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	Sample_SimpleRanging();//TOF传感器VL6180X的测距函数
 800064c:	f000 f8e2 	bl	8000814 <Sample_SimpleRanging>
  {
 8000650:	e7fc      	b.n	800064c <main+0xd8>
 8000652:	bf00      	nop
 8000654:	200000d0 	.word	0x200000d0

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	; 0x40
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	2228      	movs	r2, #40	; 0x28
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fdec 	bl	8004244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067a:	2302      	movs	r3, #2
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067e:	2301      	movs	r3, #1
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000682:	2310      	movs	r3, #16
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800068a:	2300      	movs	r3, #0
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800068e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0318 	add.w	r3, r7, #24
 8000698:	4618      	mov	r0, r3
 800069a:	f002 ff35 	bl	8003508 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006a4:	f000 f95e 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2101      	movs	r1, #1
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 f9a2 	bl	8003a0c <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006ce:	f000 f949 	bl	8000964 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3740      	adds	r7, #64	; 0x40
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART1_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 8000714:	f003 fb12 	bl	8003d3c <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f921 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000008c 	.word	0x2000008c
 800072c:	40013800 	.word	0x40013800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000744:	4b30      	ldr	r3, [pc, #192]	; (8000808 <MX_GPIO_Init+0xd8>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a2f      	ldr	r2, [pc, #188]	; (8000808 <MX_GPIO_Init+0xd8>)
 800074a:	f043 0320 	orr.w	r3, r3, #32
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <MX_GPIO_Init+0xd8>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0320 	and.w	r3, r3, #32
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <MX_GPIO_Init+0xd8>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a29      	ldr	r2, [pc, #164]	; (8000808 <MX_GPIO_Init+0xd8>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <MX_GPIO_Init+0xd8>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0304 	and.w	r3, r3, #4
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <MX_GPIO_Init+0xd8>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a23      	ldr	r2, [pc, #140]	; (8000808 <MX_GPIO_Init+0xd8>)
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <MX_GPIO_Init+0xd8>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000792:	481e      	ldr	r0, [pc, #120]	; (800080c <MX_GPIO_Init+0xdc>)
 8000794:	f002 fe9f 	bl	80034d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|CAP_SCL_Pin
 8000798:	2200      	movs	r2, #0
 800079a:	f64f 71c7 	movw	r1, #65479	; 0xffc7
 800079e:	481c      	ldr	r0, [pc, #112]	; (8000810 <MX_GPIO_Init+0xe0>)
 80007a0:	f002 fe99 	bl	80034d6 <HAL_GPIO_WritePin>
                          |CAP_SDA_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|TOF_SDA_Pin|TOF_SCL_Pin|EXP_SDA_Pin
                          |EXP_SCL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80007a4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	4619      	mov	r1, r3
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <MX_GPIO_Init+0xdc>)
 80007be:	f002 fcef 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80007c2:	f24f 0307 	movw	r3, #61447	; 0xf007
 80007c6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	4619      	mov	r1, r3
 80007da:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_GPIO_Init+0xe0>)
 80007dc:	f002 fce0 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAP_SCL_Pin CAP_SDA_Pin TOF_SDA_Pin TOF_SCL_Pin
                           EXP_SDA_Pin EXP_SCL_Pin */
  GPIO_InitStruct.Pin = CAP_SCL_Pin|CAP_SDA_Pin|TOF_SDA_Pin|TOF_SCL_Pin
 80007e0:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 80007e4:	613b      	str	r3, [r7, #16]
                          |EXP_SDA_Pin|EXP_SCL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007e6:	2311      	movs	r3, #17
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_GPIO_Init+0xe0>)
 80007fa:	f002 fcd1 	bl	80031a0 <HAL_GPIO_Init>

}
 80007fe:	bf00      	nop
 8000800:	3720      	adds	r7, #32
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	40010800 	.word	0x40010800
 8000810:	40010c00 	.word	0x40010c00

08000814 <Sample_SimpleRanging>:

/* USER CODE BEGIN 4 */
void Sample_SimpleRanging(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800081a:	af00      	add	r7, sp, #0
  VL6180x_RangeData_t Range[DEVICE_NUMBER];//存储各设备测距值

  int i;
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8000822:	e08c      	b.n	800093e <Sample_SimpleRanging+0x12a>
  {
    VL6180x_InitData(&Devs[i]);
 8000824:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000828:	22d4      	movs	r2, #212	; 0xd4
 800082a:	fb02 f303 	mul.w	r3, r2, r3
 800082e:	4a49      	ldr	r2, [pc, #292]	; (8000954 <Sample_SimpleRanging+0x140>)
 8000830:	4413      	add	r3, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f000 fa48 	bl	8000cc8 <VL6180x_InitData>
    VL6180x_Prepare(&Devs[i]);
 8000838:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800083c:	22d4      	movs	r2, #212	; 0xd4
 800083e:	fb02 f303 	mul.w	r3, r2, r3
 8000842:	4a44      	ldr	r2, [pc, #272]	; (8000954 <Sample_SimpleRanging+0x140>)
 8000844:	4413      	add	r3, r2
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fb38 	bl	8000ebc <VL6180x_Prepare>
    ///* 调整测量范围
    VL6180x_SetGroupParamHold(&Devs[i], 1);
 800084c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000850:	22d4      	movs	r2, #212	; 0xd4
 8000852:	fb02 f303 	mul.w	r3, r2, r3
 8000856:	4a3f      	ldr	r2, [pc, #252]	; (8000954 <Sample_SimpleRanging+0x140>)
 8000858:	4413      	add	r3, r2
 800085a:	2101      	movs	r1, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fb14 	bl	8000e8a <VL6180x_SetGroupParamHold>
    VL6180x_RangeGetThresholds(&Devs[i], NULL, NULL);
 8000862:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000866:	22d4      	movs	r2, #212	; 0xd4
 8000868:	fb02 f303 	mul.w	r3, r2, r3
 800086c:	4a39      	ldr	r2, [pc, #228]	; (8000954 <Sample_SimpleRanging+0x140>)
 800086e:	4413      	add	r3, r2
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f000 fe35 	bl	80014e4 <VL6180x_RangeGetThresholds>
    VL6180x_UpscaleSetScaling(&Devs[i], 3);//三倍测量范围
 800087a:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800087e:	22d4      	movs	r2, #212	; 0xd4
 8000880:	fb02 f303 	mul.w	r3, r2, r3
 8000884:	4a33      	ldr	r2, [pc, #204]	; (8000954 <Sample_SimpleRanging+0x140>)
 8000886:	4413      	add	r3, r2
 8000888:	2103      	movs	r1, #3
 800088a:	4618      	mov	r0, r3
 800088c:	f000 ff86 	bl	800179c <VL6180x_UpscaleSetScaling>
    VL6180x_RangeSetThresholds(&Devs[i], 0, 600, 0);
 8000890:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000894:	22d4      	movs	r2, #212	; 0xd4
 8000896:	fb02 f303 	mul.w	r3, r2, r3
 800089a:	4a2e      	ldr	r2, [pc, #184]	; (8000954 <Sample_SimpleRanging+0x140>)
 800089c:	1898      	adds	r0, r3, r2
 800089e:	2300      	movs	r3, #0
 80008a0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80008a4:	2100      	movs	r1, #0
 80008a6:	f000 fdd1 	bl	800144c <VL6180x_RangeSetThresholds>
    VL6180x_SetGroupParamHold(&Devs[i], 0);
 80008aa:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80008ae:	22d4      	movs	r2, #212	; 0xd4
 80008b0:	fb02 f303 	mul.w	r3, r2, r3
 80008b4:	4a27      	ldr	r2, [pc, #156]	; (8000954 <Sample_SimpleRanging+0x140>)
 80008b6:	4413      	add	r3, r2
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fae5 	bl	8000e8a <VL6180x_SetGroupParamHold>
    //*/
    VL6180x_RangePollMeasurement(&Devs[i], &Range[i]);//测距操作
 80008c0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80008c4:	22d4      	movs	r2, #212	; 0xd4
 80008c6:	fb02 f303 	mul.w	r3, r2, r3
 80008ca:	4a22      	ldr	r2, [pc, #136]	; (8000954 <Sample_SimpleRanging+0x140>)
 80008cc:	1898      	adds	r0, r3, r2
 80008ce:	1d39      	adds	r1, r7, #4
 80008d0:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	440b      	add	r3, r1
 80008de:	4619      	mov	r1, r3
 80008e0:	f000 fbff 	bl	80010e2 <VL6180x_RangePollMeasurement>
    if (Range[i].errorStatus == 0)//串口输出
 80008e4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80008e8:	f5a3 7121 	sub.w	r1, r3, #644	; 0x284
 80008ec:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 80008f0:	4613      	mov	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	4413      	add	r3, r2
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	440b      	add	r3, r1
 80008fa:	3308      	adds	r3, #8
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d114      	bne.n	800092c <Sample_SimpleRanging+0x118>
    {
      printf("range %d: %ld mm\r\n", i + 1, Range[i].range_mm);
 8000902:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000906:	1c58      	adds	r0, r3, #1
 8000908:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800090c:	f5a3 7121 	sub.w	r1, r3, #644	; 0x284
 8000910:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8000914:	4613      	mov	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	440b      	add	r3, r1
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4601      	mov	r1, r0
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <Sample_SimpleRanging+0x144>)
 8000926:	f003 fc95 	bl	8004254 <iprintf>
 800092a:	e003      	b.n	8000934 <Sample_SimpleRanging+0x120>
//      HAL_Delay(250);
    }
    else
    {
      printf("%s\r\n", "error");
 800092c:	490b      	ldr	r1, [pc, #44]	; (800095c <Sample_SimpleRanging+0x148>)
 800092e:	480c      	ldr	r0, [pc, #48]	; (8000960 <Sample_SimpleRanging+0x14c>)
 8000930:	f003 fc90 	bl	8004254 <iprintf>
  for (i = 0; i <= DEVICE_NUMBER - 1; i++)
 8000934:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000938:	3301      	adds	r3, #1
 800093a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800093e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000942:	2b0f      	cmp	r3, #15
 8000944:	f77f af6e 	ble.w	8000824 <Sample_SimpleRanging+0x10>
//      HAL_Delay(250);
    }
  }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	f507 7722 	add.w	r7, r7, #648	; 0x288
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000d0 	.word	0x200000d0
 8000958:	08005194 	.word	0x08005194
 800095c:	080051a8 	.word	0x080051a8
 8000960:	080051b0 	.word	0x080051b0

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <HAL_MspInit+0x5c>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	4a14      	ldr	r2, [pc, #80]	; (80009cc <HAL_MspInit+0x5c>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6193      	str	r3, [r2, #24]
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_MspInit+0x5c>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x5c>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_MspInit+0x5c>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	61d3      	str	r3, [r2, #28]
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x5c>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_MspInit+0x60>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <HAL_MspInit+0x60>)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010000 	.word	0x40010000

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a1c      	ldr	r2, [pc, #112]	; (8000a60 <HAL_UART_MspInit+0x8c>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d131      	bne.n	8000a58 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <HAL_UART_MspInit+0x90>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <HAL_UART_MspInit+0x90>)
 80009fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_UART_MspInit+0x90>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <HAL_UART_MspInit+0x90>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <HAL_UART_MspInit+0x90>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_UART_MspInit+0x90>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	4619      	mov	r1, r3
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <HAL_UART_MspInit+0x94>)
 8000a3a:	f002 fbb1 	bl	80031a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	4619      	mov	r1, r3
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <HAL_UART_MspInit+0x94>)
 8000a54:	f002 fba4 	bl	80031a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a58:	bf00      	nop
 8000a5a:	3720      	adds	r7, #32
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40013800 	.word	0x40013800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40010800 	.word	0x40010800

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab2:	f002 fa51 	bl	8002f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	e00a      	b.n	8000ae2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000acc:	f7ff fd40 	bl	8000550 <__io_getchar>
 8000ad0:	4601      	mov	r1, r0
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	60ba      	str	r2, [r7, #8]
 8000ad8:	b2ca      	uxtb	r2, r1
 8000ada:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	dbf0      	blt.n	8000acc <_read+0x12>
	}

return len;
 8000aea:	687b      	ldr	r3, [r7, #4]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e009      	b.n	8000b1a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	60ba      	str	r2, [r7, #8]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fd0c 	bl	800052c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	3301      	adds	r3, #1
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	dbf1      	blt.n	8000b06 <_write+0x12>
	}
	return len;
 8000b22:	687b      	ldr	r3, [r7, #4]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <_close>:

int _close(int file)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	return -1;
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b52:	605a      	str	r2, [r3, #4]
	return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <_isatty>:

int _isatty(int file)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	return 1;
 8000b68:	2301      	movs	r3, #1
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f003 fb18 	bl	80041f0 <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20005000 	.word	0x20005000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	20000e10 	.word	0x20000e10
 8000bf4:	20000e28 	.word	0x20000e28

08000bf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <TCA9535_WrByte>:
#include "tca9535.h"

int TCA9535_WrByte(uint8_t dev, uint8_t index, uint8_t data){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	71bb      	strb	r3, [r7, #6]
 8000c12:	4613      	mov	r3, r2
 8000c14:	717b      	strb	r3, [r7, #5]
    int status;
    int a = 5;
 8000c16:	2305      	movs	r3, #5
 8000c18:	60fb      	str	r3, [r7, #12]
    uint8_t *buffer = &a;//初始化指针
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	617b      	str	r3, [r7, #20]

    buffer[0] = index;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	79ba      	ldrb	r2, [r7, #6]
 8000c24:	701a      	strb	r2, [r3, #0]
    buffer[1] = data;
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	797a      	ldrb	r2, [r7, #5]
 8000c2c:	701a      	strb	r2, [r3, #0]

    status = I2C2Write(dev, buffer,(uint8_t)2);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2202      	movs	r2, #2
 8000c32:	6979      	ldr	r1, [r7, #20]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f806 	bl	8000c46 <I2C2Write>
 8000c3a:	6138      	str	r0, [r7, #16]
    return status;
 8000c3c:	693b      	ldr	r3, [r7, #16]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <I2C2Write>:
}

//I2C底层通讯函数选择
/* VL6180X底层驱动函数：写 */
int I2C2Write(uint8_t addr, uint8_t *buff, uint8_t len)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	6039      	str	r1, [r7, #0]
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	4613      	mov	r3, r2
 8000c54:	71bb      	strb	r3, [r7, #6]
  int status, i;
  I2C_Start2();//开启I2C总线
 8000c56:	f7ff fbb7 	bl	80003c8 <I2C_Start2>
  I2C_SendByte2(addr | 0);//发送8位设备地址及LSB的写方向位，实现写功能
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fbf1 	bl	8000444 <I2C_SendByte2>
  if (I2C_WaitAck2())//如果从机没有应答
 8000c62:	f7ff fc33 	bl	80004cc <I2C_WaitAck2>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d003      	beq.n	8000c74 <I2C2Write+0x2e>
  {
    I2C_Stop2();//关闭I2C总线
 8000c6c:	f7ff fbd0 	bl	8000410 <I2C_Stop2>
    return 1;//返回报错标志
 8000c70:	2301      	movs	r3, #1
 8000c72:	e025      	b.n	8000cc0 <I2C2Write+0x7a>
  }
  for (i = 0; i < len; i++)
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	e01b      	b.n	8000cb2 <I2C2Write+0x6c>
  {
    I2C_SendByte2(buff[i]);//发送buff中的各字节
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fbde 	bl	8000444 <I2C_SendByte2>
    if (i == len - 1)//在发送最后一个字节的数据时
 8000c88:	79bb      	ldrb	r3, [r7, #6]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	68ba      	ldr	r2, [r7, #8]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d109      	bne.n	8000ca6 <I2C2Write+0x60>
    {
      if (I2C_WaitAck2())//等待从机应答
 8000c92:	f7ff fc1b 	bl	80004cc <I2C_WaitAck2>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d007      	beq.n	8000cac <I2C2Write+0x66>
      {
        I2C_Stop2();//关闭I2C总线
 8000c9c:	f7ff fbb8 	bl	8000410 <I2C_Stop2>
        status = 1;//返回报错标志
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	e002      	b.n	8000cac <I2C2Write+0x66>
      }
    }
    else
    {
      status = I2C_WaitAck2();//返回报错标志
 8000ca6:	f7ff fc11 	bl	80004cc <I2C_WaitAck2>
 8000caa:	60f8      	str	r0, [r7, #12]
  for (i = 0; i < len; i++)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	dbdf      	blt.n	8000c7a <I2C2Write+0x34>
    }
  }
  I2C_Stop2();//关闭I2C总线
 8000cba:	f7ff fba9 	bl	8000410 <I2C_Stop2>
  return status;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <VL6180x_InitData>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_InitData(VL6180xDev_t dev)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	uint16_t u16;
	uint32_t XTalkCompRate_KCps;

	LOG_FUNCTION_START("");

	VL6180xDevDataSet(dev, EceFactorM, DEF_ECE_FACTOR_M);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2255      	movs	r2, #85	; 0x55
 8000cd4:	811a      	strh	r2, [r3, #8]
	VL6180xDevDataSet(dev, EceFactorD, DEF_ECE_FACTOR_D);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2264      	movs	r2, #100	; 0x64
 8000cda:	815a      	strh	r2, [r3, #10]

	VL6180xDevDataSet(dev, RangeIgnore.Enabled, 0);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	741a      	strb	r2, [r3, #16]

#ifdef VL6180x_HAVE_UPSCALE_DATA
	VL6180xDevDataSet(dev, UpscaleFactor,  DEF_UPSCALE);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	761a      	strb	r2, [r3, #24]
#endif

#ifdef VL6180x_HAVE_ALS_DATA
	VL6180xDevDataSet(dev, IntegrationPeriod, DEF_INT_PEFRIOD);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2264      	movs	r2, #100	; 0x64
 8000cec:	825a      	strh	r2, [r3, #18]
	VL6180xDevDataSet(dev, AlsGainCode, DEF_ALS_GAIN);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	829a      	strh	r2, [r3, #20]
	VL6180xDevDataSet(dev, AlsScaler, DEF_ALS_SCALER);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	82da      	strh	r2, [r3, #22]
#endif

#ifdef VL6180x_HAVE_WRAP_AROUND_DATA
	VL6180xDevDataSet(dev, WrapAroundFilterActive, (VL6180x_WRAP_AROUND_FILTER_SUPPORT > 0));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	765a      	strb	r2, [r3, #25]
	VL6180xDevDataSet(dev, DMaxEnable, DEF_DMAX_ENABLE);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2201      	movs	r2, #1
 8000d04:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
#endif

	_DMax_OneTimeInit(dev);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f001 fd3d 	bl	8002788 <_DMax_OneTimeInit>
	do {

		/* backup offset initial value from nvm these must be done prior any over call that use offset */
		status = VL6180x_RdByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, (uint8_t *)&offset);
 8000d0e:	f107 0313 	add.w	r3, r7, #19
 8000d12:	461a      	mov	r2, r3
 8000d14:	2124      	movs	r1, #36	; 0x24
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f001 ff5d 	bl	8002bd6 <VL6180x_RdByte>
 8000d1c:	61f8      	str	r0, [r7, #28]
		if (status) {
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14a      	bne.n	8000dba <VL6180x_InitData+0xf2>
			VL6180x_ErrLog("SYSRANGE_PART_TO_PART_RANGE_OFFSET rd fail");
			break;
		}
		VL6180xDevDataSet(dev, Part2PartOffsetNVM, offset);
 8000d24:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

		status = VL6180x_RdDWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &CalValue);
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	461a      	mov	r2, r3
 8000d34:	2126      	movs	r1, #38	; 0x26
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f001 ffb6 	bl	8002ca8 <VL6180x_RdDWord>
 8000d3c:	61f8      	str	r0, [r7, #28]
		if (status) {
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d13c      	bne.n	8000dbe <VL6180x_InitData+0xf6>
			VL6180x_ErrLog("Part2PartAmbNVM rd fail");
			break;
		}
		if ((CalValue&0xFFFF0000) == 0) {
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	0c1b      	lsrs	r3, r3, #16
 8000d48:	041b      	lsls	r3, r3, #16
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <VL6180x_InitData+0x8a>
			CalValue = 0x00CE03F8;
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <VL6180x_InitData+0x110>)
 8000d50:	60fb      	str	r3, [r7, #12]
		}
		VL6180xDevDataSet(dev, Part2PartAmbNVM, CalValue);
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	601a      	str	r2, [r3, #0]

		status = VL6180x_RdWord(dev, SYSRANGE_CROSSTALK_COMPENSATION_RATE , &u16);
 8000d58:	f107 030a 	add.w	r3, r7, #10
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	211e      	movs	r1, #30
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f001 ff68 	bl	8002c36 <VL6180x_RdWord>
 8000d66:	61f8      	str	r0, [r7, #28]
		if (status) {
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d129      	bne.n	8000dc2 <VL6180x_InitData+0xfa>
			VL6180x_ErrLog("SYSRANGE_CROSSTALK_COMPENSATION_RATE rd fail ");
			break;
		}
		XTalkCompRate_KCps = Fix7_2_KCPs(u16);
 8000d6e:	897b      	ldrh	r3, [r7, #10]
 8000d70:	461a      	mov	r2, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fb02 f303 	mul.w	r3, r2, r3
 8000d7a:	09db      	lsrs	r3, r3, #7
 8000d7c:	61bb      	str	r3, [r7, #24]
		VL6180xDevDataSet(dev, XTalkCompRate_KCps, XTalkCompRate_KCps);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	605a      	str	r2, [r3, #4]

		dmax_status = _DMax_InitData(dev);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f001 fd59 	bl	800283c <_DMax_InitData>
 8000d8a:	6178      	str	r0, [r7, #20]
		if (dmax_status < 0) {
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db19      	blt.n	8000dc6 <VL6180x_InitData+0xfe>
			VL6180x_ErrLog("DMax init failure");
			break;
		}

		/* Read or wait for fresh out of reset  */
		status = VL6180x_RdByte(dev, SYSTEM_FRESH_OUT_OF_RESET, &FreshOutReset);
 8000d92:	f107 0312 	add.w	r3, r7, #18
 8000d96:	461a      	mov	r2, r3
 8000d98:	2116      	movs	r1, #22
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f001 ff1b 	bl	8002bd6 <VL6180x_RdByte>
 8000da0:	61f8      	str	r0, [r7, #28]
		if (status) {
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d110      	bne.n	8000dca <VL6180x_InitData+0x102>
			VL6180x_ErrLog("SYSTEM_FRESH_OUT_OF_RESET rd fail");
			break;
		}
		if (FreshOutReset != 1 || dmax_status)
 8000da8:	7cbb      	ldrb	r3, [r7, #18]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d102      	bne.n	8000db4 <VL6180x_InitData+0xec>
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d00b      	beq.n	8000dcc <VL6180x_InitData+0x104>
			status = CALIBRATION_WARNING;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	e008      	b.n	8000dcc <VL6180x_InitData+0x104>
			break;
 8000dba:	bf00      	nop
 8000dbc:	e006      	b.n	8000dcc <VL6180x_InitData+0x104>
			break;
 8000dbe:	bf00      	nop
 8000dc0:	e004      	b.n	8000dcc <VL6180x_InitData+0x104>
			break;
 8000dc2:	bf00      	nop
 8000dc4:	e002      	b.n	8000dcc <VL6180x_InitData+0x104>
			break;
 8000dc6:	bf00      	nop
 8000dc8:	e000      	b.n	8000dcc <VL6180x_InitData+0x104>
			break;
 8000dca:	bf00      	nop

	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 8000dcc:	69fb      	ldr	r3, [r7, #28]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	00ce03f8 	.word	0x00ce03f8

08000ddc <VL6180x_SetI2CAddress>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_SetI2CAddress(VL6180xDev_t dev, uint8_t NewAddress)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
	int status;
	LOG_FUNCTION_START("");

	status = VL6180x_WrByte(dev, I2C_SLAVE_DEVICE_ADDRESS, NewAddress / 2);
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	085b      	lsrs	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	461a      	mov	r2, r3
 8000df0:	f240 2112 	movw	r1, #530	; 0x212
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f001 fe1f 	bl	8002a38 <VL6180x_WrByte>
 8000dfa:	60f8      	str	r0, [r7, #12]
	if (status) {
		VL6180x_ErrLog("new i2c addr Wr fail");
	}
	LOG_FUNCTION_END(status);
	return status;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <VL6180x_StaticInit>:
}



int VL6180x_StaticInit(VL6180xDev_t dev)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
	int status = 0, init_status;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
	/* TODO doc When using configurable scaling but using 1x as start condition
	 * load tunning upscale  or not ??? */
	if (_GetUpscale(dev) == 1 && !(VL6180x_UPSCALE_SUPPORT < 0))
		init_status = VL6180x_RangeStaticInit(dev);
	else
		init_status = VL6180x_UpscaleStaticInit(dev);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 fd3c 	bl	8001890 <VL6180x_UpscaleStaticInit>
 8000e18:	6138      	str	r0, [r7, #16]

	if (init_status < 0) {
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db2c      	blt.n	8000e7a <VL6180x_StaticInit+0x74>
	#if REFRESH_CACHED_DATA_AFTER_INIT
	#ifdef VL6180x_HAVE_ALS_DATA
	/* update cached value after tuning applied */
	do {
		uint8_t data;
		status =  VL6180x_RdByte(dev, FW_ALS_RESULT_SCALER, &data);
 8000e20:	f107 030f 	add.w	r3, r7, #15
 8000e24:	461a      	mov	r2, r3
 8000e26:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f001 fed3 	bl	8002bd6 <VL6180x_RdByte>
 8000e30:	6178      	str	r0, [r7, #20]
		if (status)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d114      	bne.n	8000e62 <VL6180x_StaticInit+0x5c>
			break;
		VL6180xDevDataSet(dev, AlsScaler, data);
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	82da      	strh	r2, [r3, #22]

		status =  VL6180x_RdByte(dev, SYSALS_ANALOGUE_GAIN, &data);
 8000e40:	f107 030f 	add.w	r3, r7, #15
 8000e44:	461a      	mov	r2, r3
 8000e46:	213f      	movs	r1, #63	; 0x3f
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f001 fec4 	bl	8002bd6 <VL6180x_RdByte>
 8000e4e:	6178      	str	r0, [r7, #20]
		if (status)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d107      	bne.n	8000e66 <VL6180x_StaticInit+0x60>
			break;
		VL6180x_AlsSetAnalogueGain(dev, data);
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f8c9 	bl	8000ff2 <VL6180x_AlsSetAnalogueGain>
 8000e60:	e002      	b.n	8000e68 <VL6180x_StaticInit+0x62>
			break;
 8000e62:	bf00      	nop
 8000e64:	e000      	b.n	8000e68 <VL6180x_StaticInit+0x62>
			break;
 8000e66:	bf00      	nop
	#endif
	#endif /* REFRESH_CACHED_DATA_AFTER_INIT */
	if (status < 0) {
		VL6180x_ErrLog("StaticInit fail");
	}
	if (!status && init_status) {
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d107      	bne.n	8000e7e <VL6180x_StaticInit+0x78>
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <VL6180x_StaticInit+0x78>
		status = init_status;
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	e002      	b.n	8000e80 <VL6180x_StaticInit+0x7a>
		goto error;
 8000e7a:	bf00      	nop
 8000e7c:	e000      	b.n	8000e80 <VL6180x_StaticInit+0x7a>
	}
error:
 8000e7e:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8000e80:	697b      	ldr	r3, [r7, #20]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <VL6180x_SetGroupParamHold>:


int VL6180x_SetGroupParamHold(VL6180xDev_t dev, int Hold)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t value;

	LOG_FUNCTION_START("%d", Hold);
	if (Hold)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <VL6180x_SetGroupParamHold+0x16>
		value = 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e001      	b.n	8000ea4 <VL6180x_SetGroupParamHold+0x1a>
	else
		value = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
	status = VL6180x_WrByte(dev, SYSTEM_GROUPED_PARAMETER_HOLD, value);
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	2117      	movs	r1, #23
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f001 fdc4 	bl	8002a38 <VL6180x_WrByte>
 8000eb0:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(status);
	return status;
 8000eb2:	68bb      	ldr	r3, [r7, #8]

}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <VL6180x_Prepare>:

int VL6180x_Prepare(VL6180xDev_t dev)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	int status;
	LOG_FUNCTION_START("");

	do {
		status = VL6180x_StaticInit(dev);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff9e 	bl	8000e06 <VL6180x_StaticInit>
 8000eca:	60f8      	str	r0, [r7, #12]
		if (status < 0)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db42      	blt.n	8000f58 <VL6180x_Prepare+0x9c>
			break;

		/* set range InterruptMode to new sample */
		status = VL6180x_RangeConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 fcf9 	bl	80018cc <VL6180x_RangeConfigInterrupt>
 8000eda:	60f8      	str	r0, [r7, #12]
		if (status)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d13c      	bne.n	8000f5c <VL6180x_Prepare+0xa0>
			break;

		/* set default threshold */
		status = VL6180x_RangeSetRawThresholds(dev, 10, 200);
 8000ee2:	22c8      	movs	r2, #200	; 0xc8
 8000ee4:	210a      	movs	r1, #10
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 fa92 	bl	8001410 <VL6180x_RangeSetRawThresholds>
 8000eec:	60f8      	str	r0, [r7, #12]
		if (status) {
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d135      	bne.n	8000f60 <VL6180x_Prepare+0xa4>
			VL6180x_ErrLog("VL6180x_RangeSetRawThresholds fail");
			break;
		}
	#if VL6180x_ALS_SUPPORT
		status = VL6180x_AlsSetIntegrationPeriod(dev, 100);
 8000ef4:	2164      	movs	r1, #100	; 0x64
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 f8c4 	bl	8001084 <VL6180x_AlsSetIntegrationPeriod>
 8000efc:	60f8      	str	r0, [r7, #12]
		if (status)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d12f      	bne.n	8000f64 <VL6180x_Prepare+0xa8>
			break;
		status = VL6180x_AlsSetInterMeasurementPeriod(dev,  200);
 8000f04:	21c8      	movs	r1, #200	; 0xc8
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 f89a 	bl	8001040 <VL6180x_AlsSetInterMeasurementPeriod>
 8000f0c:	60f8      	str	r0, [r7, #12]
		if (status)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d129      	bne.n	8000f68 <VL6180x_Prepare+0xac>
			break;
		status = VL6180x_AlsSetAnalogueGain(dev,  0);
 8000f14:	2100      	movs	r1, #0
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f86b 	bl	8000ff2 <VL6180x_AlsSetAnalogueGain>
 8000f1c:	60f8      	str	r0, [r7, #12]
		if (status)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d123      	bne.n	8000f6c <VL6180x_Prepare+0xb0>
			break;
		status = VL6180x_AlsSetThresholds(dev, 0, 0xFF);
 8000f24:	22ff      	movs	r2, #255	; 0xff
 8000f26:	2100      	movs	r1, #0
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 f844 	bl	8000fb6 <VL6180x_AlsSetThresholds>
 8000f2e:	60f8      	str	r0, [r7, #12]
		if (status)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d11c      	bne.n	8000f70 <VL6180x_Prepare+0xb4>
			break;
		/* set Als InterruptMode to new sample */
		status = VL6180x_AlsConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 8000f36:	2104      	movs	r1, #4
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f821 	bl	8000f80 <VL6180x_AlsConfigInterrupt>
 8000f3e:	60f8      	str	r0, [r7, #12]
		if (status) {
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d116      	bne.n	8000f74 <VL6180x_Prepare+0xb8>
			VL6180x_ErrLog("VL6180x_AlsConfigInterrupt fail");
			break;
		}
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
		_filter_Init(dev);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 fdd7 	bl	8001afa <_filter_Init>
	#endif
		/* make sure to reset any left previous condition that can hangs first poll */
		status = VL6180x_ClearAllInterrupt(dev);
 8000f4c:	2107      	movs	r1, #7
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fb22 	bl	8001598 <VL6180x_ClearInterrupt>
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	e00e      	b.n	8000f76 <VL6180x_Prepare+0xba>
			break;
 8000f58:	bf00      	nop
 8000f5a:	e00c      	b.n	8000f76 <VL6180x_Prepare+0xba>
			break;
 8000f5c:	bf00      	nop
 8000f5e:	e00a      	b.n	8000f76 <VL6180x_Prepare+0xba>
			break;
 8000f60:	bf00      	nop
 8000f62:	e008      	b.n	8000f76 <VL6180x_Prepare+0xba>
			break;
 8000f64:	bf00      	nop
 8000f66:	e006      	b.n	8000f76 <VL6180x_Prepare+0xba>
			break;
 8000f68:	bf00      	nop
 8000f6a:	e004      	b.n	8000f76 <VL6180x_Prepare+0xba>
			break;
 8000f6c:	bf00      	nop
 8000f6e:	e002      	b.n	8000f76 <VL6180x_Prepare+0xba>
			break;
 8000f70:	bf00      	nop
 8000f72:	e000      	b.n	8000f76 <VL6180x_Prepare+0xba>
			break;
 8000f74:	bf00      	nop
	} while (0);
	LOG_FUNCTION_END(status);

	return status;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <VL6180x_AlsConfigInterrupt>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_AlsConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d809      	bhi.n	8000fa6 <VL6180x_AlsConfigInterrupt+0x26>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO, (uint8_t)(~CONFIG_GPIO_ALS_MASK), (ConfigGpioInt << 3));
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	22c7      	movs	r2, #199	; 0xc7
 8000f9a:	2114      	movs	r1, #20
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f001 fdd4 	bl	8002b4a <VL6180x_UpdateByte>
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	e002      	b.n	8000fac <VL6180x_AlsConfigInterrupt+0x2c>
	} else {
		VL6180x_ErrLog("Invalid config mode param %d", (int)ConfigGpioInt);
		status = INVALID_PARAMS;
 8000fa6:	f06f 0301 	mvn.w	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8000fac:	68fb      	ldr	r3, [r7, #12]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <VL6180x_AlsSetThresholds>:



int VL6180x_AlsSetThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	70fb      	strb	r3, [r7, #3]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	70bb      	strb	r3, [r7, #2]
	int status;

	LOG_FUNCTION_START("%d %d", (int)low, (int)high);

	status = VL6180x_WrByte(dev, SYSALS_THRESH_LOW, low);
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	213c      	movs	r1, #60	; 0x3c
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f001 fd33 	bl	8002a38 <VL6180x_WrByte>
 8000fd2:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d106      	bne.n	8000fe8 <VL6180x_AlsSetThresholds+0x32>
		status = VL6180x_WrByte(dev, SYSALS_THRESH_HIGH, high);
 8000fda:	78bb      	ldrb	r3, [r7, #2]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	213a      	movs	r1, #58	; 0x3a
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f001 fd29 	bl	8002a38 <VL6180x_WrByte>
 8000fe6:	60f8      	str	r0, [r7, #12]
	}

	LOG_FUNCTION_END(status) ;
	return status;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <VL6180x_AlsSetAnalogueGain>:


int VL6180x_AlsSetAnalogueGain(VL6180xDev_t dev, uint8_t gain)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	70fb      	strb	r3, [r7, #3]
	int status;
	uint8_t GainTotal;

	LOG_FUNCTION_START("%d", (int)gain);
	gain &= ~0x40;
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001004:	70fb      	strb	r3, [r7, #3]
	if (gain > 7) {
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	2b07      	cmp	r3, #7
 800100a:	d901      	bls.n	8001010 <VL6180x_AlsSetAnalogueGain+0x1e>
		gain = 7;
 800100c:	2307      	movs	r3, #7
 800100e:	70fb      	strb	r3, [r7, #3]
	}
	GainTotal = gain | 0x40;
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001016:	73fb      	strb	r3, [r7, #15]

	status = VL6180x_WrByte(dev, SYSALS_ANALOGUE_GAIN, GainTotal);
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	461a      	mov	r2, r3
 800101c:	213f      	movs	r1, #63	; 0x3f
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f001 fd0a 	bl	8002a38 <VL6180x_WrByte>
 8001024:	60b8      	str	r0, [r7, #8]
	if (!status) {
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d103      	bne.n	8001034 <VL6180x_AlsSetAnalogueGain+0x42>
		VL6180xDevDataSet(dev, AlsGainCode, gain);
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	b29a      	uxth	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	829a      	strh	r2, [r3, #20]
	}

	LOG_FUNCTION_END_FMT(status, "%d %d", (int)gain, (int)GainTotal);
	return status;
 8001034:	68bb      	ldr	r3, [r7, #8]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <VL6180x_AlsSetInterMeasurementPeriod>:

int VL6180x_AlsSetInterMeasurementPeriod(VL6180xDev_t dev,  uint16_t intermeasurement_period_ms)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
	int status;

	LOG_FUNCTION_START("%d", (int)intermeasurement_period_ms);
	/* clipping: range is 0-2550ms */
	if (intermeasurement_period_ms >= 255 * 10)
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	f640 12f5 	movw	r2, #2549	; 0x9f5
 8001052:	4293      	cmp	r3, r2
 8001054:	d902      	bls.n	800105c <VL6180x_AlsSetInterMeasurementPeriod+0x1c>
		intermeasurement_period_ms = 255 * 10;
 8001056:	f640 13f6 	movw	r3, #2550	; 0x9f6
 800105a:	807b      	strh	r3, [r7, #2]
	status = VL6180x_WrByte(dev, SYSALS_INTERMEASUREMENT_PERIOD, (uint8_t)(intermeasurement_period_ms / 10));
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <VL6180x_AlsSetInterMeasurementPeriod+0x40>)
 8001060:	fba2 2303 	umull	r2, r3, r2, r3
 8001064:	08db      	lsrs	r3, r3, #3
 8001066:	b29b      	uxth	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	461a      	mov	r2, r3
 800106c:	213e      	movs	r1, #62	; 0x3e
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f001 fce2 	bl	8002a38 <VL6180x_WrByte>
 8001074:	60f8      	str	r0, [r7, #12]

	LOG_FUNCTION_END_FMT(status, "%d", (int)intermeasurement_period_ms);
	return status;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	cccccccd 	.word	0xcccccccd

08001084 <VL6180x_AlsSetIntegrationPeriod>:


int VL6180x_AlsSetIntegrationPeriod(VL6180xDev_t dev, uint16_t period_ms)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]
	int status;
	uint16_t SetIntegrationPeriod;

	LOG_FUNCTION_START("%d", (int)period_ms);

	if (period_ms >= 1)
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <VL6180x_AlsSetIntegrationPeriod+0x1a>
		SetIntegrationPeriod = period_ms - 1;
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	3b01      	subs	r3, #1
 800109a:	81fb      	strh	r3, [r7, #14]
 800109c:	e001      	b.n	80010a2 <VL6180x_AlsSetIntegrationPeriod+0x1e>
	else
		SetIntegrationPeriod = period_ms;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	81fb      	strh	r3, [r7, #14]

	if (SetIntegrationPeriod > 464) {
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 80010a8:	d903      	bls.n	80010b2 <VL6180x_AlsSetIntegrationPeriod+0x2e>
		SetIntegrationPeriod = 464;
 80010aa:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 80010ae:	81fb      	strh	r3, [r7, #14]
 80010b0:	e005      	b.n	80010be <VL6180x_AlsSetIntegrationPeriod+0x3a>
	} else if (SetIntegrationPeriod == 255)   {
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	2bff      	cmp	r3, #255	; 0xff
 80010b6:	d102      	bne.n	80010be <VL6180x_AlsSetIntegrationPeriod+0x3a>
		SetIntegrationPeriod++; /* can't write 255 since this causes the device to lock out.*/
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	3301      	adds	r3, #1
 80010bc:	81fb      	strh	r3, [r7, #14]
	}

	status = VL6180x_WrWord(dev, SYSALS_INTEGRATION_PERIOD, SetIntegrationPeriod);
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	461a      	mov	r2, r3
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f001 fcdc 	bl	8002a82 <VL6180x_WrWord>
 80010ca:	60b8      	str	r0, [r7, #8]
	if (!status) {
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d102      	bne.n	80010d8 <VL6180x_AlsSetIntegrationPeriod+0x54>
		VL6180xDevDataSet(dev, IntegrationPeriod, SetIntegrationPeriod) ;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	89fa      	ldrh	r2, [r7, #14]
 80010d6:	825a      	strh	r2, [r3, #18]
	}
	LOG_FUNCTION_END_FMT(status, "%d", (int)SetIntegrationPeriod);
	return status;
 80010d8:	68bb      	ldr	r3, [r7, #8]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <VL6180x_RangePollMeasurement>:

#endif /* HAVE_ALS_SUPPORT */


int VL6180x_RangePollMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
		VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		goto done;
	}
	#endif
	/* //![single_shot_snipet] */
	status = VL6180x_RangeSetSystemMode(dev, MODE_START_STOP | MODE_SINGLESHOT);
 80010ec:	2101      	movs	r1, #1
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 fc44 	bl	800197c <VL6180x_RangeSetSystemMode>
 80010f4:	6178      	str	r0, [r7, #20]
	if (status) {
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d12d      	bne.n	8001158 <VL6180x_RangePollMeasurement+0x76>
	}


	/* poll for new sample ready */
	while (1) {
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 fa30 	bl	8001568 <VL6180x_RangeGetInterruptStatus>
 8001108:	6178      	str	r0, [r7, #20]
		if (status) {
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10c      	bne.n	800112a <VL6180x_RangePollMeasurement+0x48>
			break;
		}
		if (IntStatus.status.Range == RES_INT_STAT_GPIO_NEW_SAMPLE_READY || IntStatus.status.Error != 0) {
 8001110:	7b3b      	ldrb	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b04      	cmp	r3, #4
 800111a:	d007      	beq.n	800112c <VL6180x_RangePollMeasurement+0x4a>
 800111c:	7b3b      	ldrb	r3, [r7, #12]
 800111e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <VL6180x_RangePollMeasurement+0x4a>
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 8001128:	e7e8      	b.n	80010fc <VL6180x_RangePollMeasurement+0x1a>
			break;
 800112a:	bf00      	nop

		VL6180x_PollDelay(dev);
	}
	/* //![single_shot_snipet] */

	if (!status) {
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d104      	bne.n	800113c <VL6180x_RangePollMeasurement+0x5a>
		status = VL6180x_RangeGetMeasurement(dev, pRangeData);
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f8df 	bl	80012f8 <VL6180x_RangeGetMeasurement>
 800113a:	6178      	str	r0, [r7, #20]
	}

	/*  clear range interrupt source */
	ClrStatus = VL6180x_RangeClearInterrupt(dev);
 800113c:	2101      	movs	r1, #1
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 fa2a 	bl	8001598 <VL6180x_ClearInterrupt>
 8001144:	6138      	str	r0, [r7, #16]
	if (ClrStatus) {
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <VL6180x_RangePollMeasurement+0x7a>
		VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		/*  leave initial status if already in error  */
		if (!status) {
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d104      	bne.n	800115c <VL6180x_RangePollMeasurement+0x7a>
			status = ClrStatus;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	e002      	b.n	800115e <VL6180x_RangePollMeasurement+0x7c>
		goto done;
 8001158:	bf00      	nop
 800115a:	e000      	b.n	800115e <VL6180x_RangePollMeasurement+0x7c>
		}
	}
done:
 800115c:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800115e:	697b      	ldr	r3, [r7, #20]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <VL6180x_GetCachedDWord>:


#if VL6180x_CACHED_REG

int VL6180x_GetCachedDWord(VL6180xDev_t dev, uint16_t  index, uint32_t *pValue)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	460b      	mov	r3, r1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	817b      	strh	r3, [r7, #10]
	int status;
	uint32_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800117c:	2b00      	cmp	r3, #0
 800117e:	d024      	beq.n	80011ca <VL6180x_GetCachedDWord+0x62>
 8001180:	897b      	ldrh	r3, [r7, #10]
 8001182:	2b4c      	cmp	r3, #76	; 0x4c
 8001184:	d921      	bls.n	80011ca <VL6180x_GetCachedDWord+0x62>
		index >= VL6180x_FIRST_CACHED_INDEX  &&
 8001186:	897b      	ldrh	r3, [r7, #10]
 8001188:	2b81      	cmp	r3, #129	; 0x81
 800118a:	d81e      	bhi.n	80011ca <VL6180x_GetCachedDWord+0x62>
		index <= (VL6180x_LAST_CACHED_INDEX - 3)) {
		uint8_t *pBytes = &VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 800118c:	897b      	ldrh	r3, [r7, #10]
 800118e:	3b4d      	subs	r3, #77	; 0x4d
 8001190:	3380      	adds	r3, #128	; 0x80
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4413      	add	r3, r2
 8001196:	3301      	adds	r3, #1
 8001198:	61bb      	str	r3, [r7, #24]
		Value = ((uint32_t)pBytes[0] << 24) |
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	061a      	lsls	r2, r3, #24
				((uint32_t)pBytes[1] << 16) |
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	3301      	adds	r3, #1
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	041b      	lsls	r3, r3, #16
		Value = ((uint32_t)pBytes[0] << 24) |
 80011a8:	431a      	orrs	r2, r3
				((uint32_t)pBytes[2] << 8) |
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	3302      	adds	r3, #2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	021b      	lsls	r3, r3, #8
				((uint32_t)pBytes[1] << 16) |
 80011b2:	4313      	orrs	r3, r2
				(uint32_t)pBytes[3];
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	3203      	adds	r2, #3
 80011b8:	7812      	ldrb	r2, [r2, #0]
		Value = ((uint32_t)pBytes[0] << 24) |
 80011ba:	4313      	orrs	r3, r2
 80011bc:	617b      	str	r3, [r7, #20]
		*pValue = Value;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	601a      	str	r2, [r3, #0]
		status = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
		index <= (VL6180x_LAST_CACHED_INDEX - 3)) {
 80011c8:	e006      	b.n	80011d8 <VL6180x_GetCachedDWord+0x70>
	} else {
		status =  VL6180x_RdDWord(dev, index, pValue);
 80011ca:	897b      	ldrh	r3, [r7, #10]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4619      	mov	r1, r3
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f001 fd69 	bl	8002ca8 <VL6180x_RdDWord>
 80011d6:	61f8      	str	r0, [r7, #28]
	}
	return status;
 80011d8:	69fb      	ldr	r3, [r7, #28]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <VL6180x_GetCachedWord>:

int VL6180x_GetCachedWord(VL6180xDev_t dev, uint16_t  index, uint16_t *pValue)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b088      	sub	sp, #32
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	460b      	mov	r3, r1
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	817b      	strh	r3, [r7, #10]
	int status;
	uint32_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d01b      	beq.n	8001232 <VL6180x_GetCachedWord+0x50>
 80011fa:	897b      	ldrh	r3, [r7, #10]
 80011fc:	2b4c      	cmp	r3, #76	; 0x4c
 80011fe:	d918      	bls.n	8001232 <VL6180x_GetCachedWord+0x50>
		index >= VL6180x_FIRST_CACHED_INDEX  &&
 8001200:	897b      	ldrh	r3, [r7, #10]
 8001202:	2b83      	cmp	r3, #131	; 0x83
 8001204:	d815      	bhi.n	8001232 <VL6180x_GetCachedWord+0x50>
		index <= (VL6180x_LAST_CACHED_INDEX - 1)) {
		uint8_t *pBytes = &VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8001206:	897b      	ldrh	r3, [r7, #10]
 8001208:	3b4d      	subs	r3, #77	; 0x4d
 800120a:	3380      	adds	r3, #128	; 0x80
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	3301      	adds	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
		Value = ((uint32_t)pBytes[0] << 8) | (uint32_t)pBytes[1];
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	3201      	adds	r2, #1
 800121e:	7812      	ldrb	r2, [r2, #0]
 8001220:	4313      	orrs	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
		*pValue = Value;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	b29a      	uxth	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	801a      	strh	r2, [r3, #0]
		status = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
		index <= (VL6180x_LAST_CACHED_INDEX - 1)) {
 8001230:	e006      	b.n	8001240 <VL6180x_GetCachedWord+0x5e>
	} else {
		status =  VL6180x_RdWord(dev, index, pValue);
 8001232:	897b      	ldrh	r3, [r7, #10]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4619      	mov	r1, r3
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f001 fcfc 	bl	8002c36 <VL6180x_RdWord>
 800123e:	61f8      	str	r0, [r7, #28]
	}
	return status;
 8001240:	69fb      	ldr	r3, [r7, #28]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <VL6180x_GetCachedByte>:

int VL6180x_GetCachedByte(VL6180xDev_t dev, uint16_t  index, uint8_t *pValue)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	460b      	mov	r3, r1
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	817b      	strh	r3, [r7, #10]
	int status;
	uint8_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800125e:	2b00      	cmp	r3, #0
 8001260:	d012      	beq.n	8001288 <VL6180x_GetCachedByte+0x3e>
 8001262:	897b      	ldrh	r3, [r7, #10]
 8001264:	2b4c      	cmp	r3, #76	; 0x4c
 8001266:	d90f      	bls.n	8001288 <VL6180x_GetCachedByte+0x3e>
		index >= VL6180x_FIRST_CACHED_INDEX &&
 8001268:	897b      	ldrh	r3, [r7, #10]
 800126a:	2b84      	cmp	r3, #132	; 0x84
 800126c:	d80c      	bhi.n	8001288 <VL6180x_GetCachedByte+0x3e>
		index <= VL6180x_LAST_CACHED_INDEX) {
		Value = VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 800126e:	897b      	ldrh	r3, [r7, #10]
 8001270:	3b4d      	subs	r3, #77	; 0x4d
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4413      	add	r3, r2
 8001276:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800127a:	74fb      	strb	r3, [r7, #19]
		*pValue = Value;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7cfa      	ldrb	r2, [r7, #19]
 8001280:	701a      	strb	r2, [r3, #0]
		status = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e006      	b.n	8001296 <VL6180x_GetCachedByte+0x4c>
	} else {
		status =  VL6180x_RdByte(dev, index, pValue);
 8001288:	897b      	ldrh	r3, [r7, #10]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4619      	mov	r1, r3
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f001 fca1 	bl	8002bd6 <VL6180x_RdByte>
 8001294:	6178      	str	r0, [r7, #20]
	}
	return status;
 8001296:	697b      	ldr	r3, [r7, #20]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_CachedRegs_Fetch>:


int _CachedRegs_Fetch(VL6180xDev_t dev)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	int status;
	uint8_t *Buffer;
	if (VL6180xDevDataGet(dev, CacheFilled) == 0) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10e      	bne.n	80012d0 <_CachedRegs_Fetch+0x30>
		VL6180xDevDataSet(dev, CacheFilled, 1);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		Buffer = &VL6180xDevDataGet(dev, CachedRegs[0]);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3381      	adds	r3, #129	; 0x81
 80012be:	60bb      	str	r3, [r7, #8]
		status = VL6180x_RdMulti(dev, VL6180x_FIRST_CACHED_INDEX, Buffer, VL6180x_CACHED_REG_CNT);
 80012c0:	2338      	movs	r3, #56	; 0x38
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	214d      	movs	r1, #77	; 0x4d
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f001 fd2d 	bl	8002d26 <VL6180x_RdMulti>
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	e001      	b.n	80012d4 <_CachedRegs_Fetch+0x34>
	} else {
		status = 0 ;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
	}
	return status;
 80012d4:	68fb      	ldr	r3, [r7, #12]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_CachedRegs_Flush>:

void _CachedRegs_Flush(VL6180xDev_t dev)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
	VL6180xDevDataSet(dev, CacheFilled, 0);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <VL6180x_RangeGetMeasurement>:
#endif /* VL6180x_CACHED_REG */



int VL6180x_RangeGetMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	uint16_t RawRate;
	uint8_t RawStatus;

	LOG_FUNCTION_START("");

	status = _CachedRegs_Fetch(dev);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffcc 	bl	80012a0 <_CachedRegs_Fetch>
 8001308:	60f8      	str	r0, [r7, #12]
	if (status) {
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d153      	bne.n	80013b8 <VL6180x_RangeGetMeasurement+0xc0>
		VL6180x_ErrLog("Cache register read fail");
		goto error;
	}
	status = VL6180x_RangeGetResult(dev, &pRangeData->range_mm);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	4619      	mov	r1, r3
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f85c 	bl	80013d2 <VL6180x_RangeGetResult>
 800131a:	60f8      	str	r0, [r7, #12]
	if (!status) {
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d14c      	bne.n	80013bc <VL6180x_RangeGetMeasurement+0xc4>
		status = VL6180x_GetCachedWord(dev, RESULT_RANGE_SIGNAL_RATE, &RawRate);
 8001322:	f107 030a 	add.w	r3, r7, #10
 8001326:	461a      	mov	r2, r3
 8001328:	2166      	movs	r1, #102	; 0x66
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ff59 	bl	80011e2 <VL6180x_GetCachedWord>
 8001330:	60f8      	str	r0, [r7, #12]
		if (!status) {
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d144      	bne.n	80013c2 <VL6180x_RangeGetMeasurement+0xca>
			pRangeData->signalRate_mcps = VL6180x_9to7Conv(RawRate);
 8001338:	897b      	ldrh	r3, [r7, #10]
 800133a:	461a      	mov	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	605a      	str	r2, [r3, #4]
			status = VL6180x_GetCachedByte(dev, RESULT_RANGE_STATUS, &RawStatus);
 8001340:	f107 0309 	add.w	r3, r7, #9
 8001344:	461a      	mov	r2, r3
 8001346:	214d      	movs	r1, #77	; 0x4d
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff7e 	bl	800124a <VL6180x_GetCachedByte>
 800134e:	60f8      	str	r0, [r7, #12]
			if (!status) {
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d105      	bne.n	8001362 <VL6180x_RangeGetMeasurement+0x6a>
				pRangeData->errorStatus = RawStatus >> 4;
 8001356:	7a7b      	ldrb	r3, [r7, #9]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	609a      	str	r2, [r3, #8]
			} else {
				VL6180x_ErrLog("Rd RESULT_RANGE_STATUS fail");
			}
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT || VL6180x_HAVE_DMAX_RANGING
			status = _GetRateResult(dev, pRangeData);
 8001362:	6839      	ldr	r1, [r7, #0]
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f001 f956 	bl	8002616 <_GetRateResult>
 800136a:	60f8      	str	r0, [r7, #12]
			if (status)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d126      	bne.n	80013c0 <VL6180x_RangeGetMeasurement+0xc8>
				goto error;
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
			/* if enabled run filter */
			if (_IsWrapArroundActive(dev)) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7e5b      	ldrb	r3, [r3, #25]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d014      	beq.n	80013a4 <VL6180x_RangeGetMeasurement+0xac>
				status = _filter_GetResult(dev, pRangeData);
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f001 f8fb 	bl	8002578 <_filter_GetResult>
 8001382:	60f8      	str	r0, [r7, #12]
				if (!status) {
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10c      	bne.n	80013a4 <VL6180x_RangeGetMeasurement+0xac>
					/* patch the range status and measure if it is filtered */
					if(pRangeData->FilteredData.filterError != NoError) {
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	2b00      	cmp	r3, #0
 8001390:	d008      	beq.n	80013a4 <VL6180x_RangeGetMeasurement+0xac>
						pRangeData->errorStatus = pRangeData->FilteredData.filterError;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	609a      	str	r2, [r3, #8]
						pRangeData->range_mm = pRangeData->FilteredData.range_mm;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	8c1b      	ldrh	r3, [r3, #32]
 800139e:	461a      	mov	r2, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	601a      	str	r2, [r3, #0]
				}
			}
	#endif

	#if VL6180x_HAVE_DMAX_RANGING
			if (_IsDMaxActive(dev)) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d009      	beq.n	80013c2 <VL6180x_RangeGetMeasurement+0xca>
				_DMax_Compute(dev, pRangeData);
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f001 fb01 	bl	80029b8 <_DMax_Compute>
 80013b6:	e004      	b.n	80013c2 <VL6180x_RangeGetMeasurement+0xca>
		goto error;
 80013b8:	bf00      	nop
 80013ba:	e002      	b.n	80013c2 <VL6180x_RangeGetMeasurement+0xca>
		    VL6180x_ErrLog("Rd RESULT_RANGE_SIGNAL_RATE fail");
		}
	} else {
		VL6180x_ErrLog("VL6180x_GetRangeResult fail");
	}
error:
 80013bc:	bf00      	nop
 80013be:	e000      	b.n	80013c2 <VL6180x_RangeGetMeasurement+0xca>
				goto error;
 80013c0:	bf00      	nop
	_CachedRegs_Flush(dev);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ff8b 	bl	80012de <_CachedRegs_Flush>
	LOG_FUNCTION_END_FMT(status, "%d %d %d", (int)pRangeData->range_mm, (int)pRangeData->signalRate_mcps,  (int)pRangeData->errorStatus) ;
	return status;
 80013c8:	68fb      	ldr	r3, [r7, #12]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <VL6180x_RangeGetResult>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeGetResult(VL6180xDev_t dev, int32_t *pRange_mm)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
	uint8_t RawRange;
	int32_t Upscale;

	LOG_FUNCTION_START("%p", pRange_mm);

	status = VL6180x_GetCachedByte(dev, RESULT_RANGE_VAL, &RawRange);
 80013dc:	f107 030f 	add.w	r3, r7, #15
 80013e0:	461a      	mov	r2, r3
 80013e2:	2162      	movs	r1, #98	; 0x62
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff30 	bl	800124a <VL6180x_GetCachedByte>
 80013ea:	6178      	str	r0, [r7, #20]
	if (!status) {
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <VL6180x_RangeGetResult+0x34>
		Upscale = _GetUpscale(dev);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7e1b      	ldrb	r3, [r3, #24]
 80013f6:	613b      	str	r3, [r7, #16]
		*pRange_mm = Upscale * (int32_t)RawRange;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	461a      	mov	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	fb03 f202 	mul.w	r2, r3, r2
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	601a      	str	r2, [r3, #0]
	}
	LOG_FUNCTION_END_FMT(status, "%d", (int)*pRange_mm);
	return status;
 8001406:	697b      	ldr	r3, [r7, #20]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <VL6180x_RangeSetRawThresholds>:

int VL6180x_RangeSetRawThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	70fb      	strb	r3, [r7, #3]
 800141c:	4613      	mov	r3, r2
 800141e:	70bb      	strb	r3, [r7, #2]
	int status;
	LOG_FUNCTION_START("%d %d", (int) low, (int)high);
	/* TODO we can optimize here grouping high/low in a word but that's cpu endianness dependent */
	status = VL6180x_WrByte(dev, SYSRANGE_THRESH_HIGH, high);
 8001420:	78bb      	ldrb	r3, [r7, #2]
 8001422:	461a      	mov	r2, r3
 8001424:	2119      	movs	r1, #25
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f001 fb06 	bl	8002a38 <VL6180x_WrByte>
 800142c:	60f8      	str	r0, [r7, #12]
	if (!status) {
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d106      	bne.n	8001442 <VL6180x_RangeSetRawThresholds+0x32>
		status = VL6180x_WrByte(dev, SYSRANGE_THRESH_LOW, low);
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	461a      	mov	r2, r3
 8001438:	211a      	movs	r1, #26
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f001 fafc 	bl	8002a38 <VL6180x_WrByte>
 8001440:	60f8      	str	r0, [r7, #12]
	}

	LOG_FUNCTION_END(status);
	return status;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <VL6180x_RangeSetThresholds>:

int VL6180x_RangeSetThresholds(VL6180xDev_t dev, uint16_t low, uint16_t high, int UseSafeParamHold)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	817b      	strh	r3, [r7, #10]
 800145a:	4613      	mov	r3, r2
 800145c:	813b      	strh	r3, [r7, #8]
	int status;
	int scale;
	LOG_FUNCTION_START("%d %d", (int) low, (int)high);
	scale = _GetUpscale(dev, UpscaleFactor);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	7e1b      	ldrb	r3, [r3, #24]
 8001462:	61bb      	str	r3, [r7, #24]
	if (low > scale * 255 || high > scale * 255) {
 8001464:	8979      	ldrh	r1, [r7, #10]
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4613      	mov	r3, r2
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	4299      	cmp	r1, r3
 8001470:	dc06      	bgt.n	8001480 <VL6180x_RangeSetThresholds+0x34>
 8001472:	8939      	ldrh	r1, [r7, #8]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4613      	mov	r3, r2
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	4299      	cmp	r1, r3
 800147e:	dd03      	ble.n	8001488 <VL6180x_RangeSetThresholds+0x3c>
		status = INVALID_PARAMS;
 8001480:	f06f 0301 	mvn.w	r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	e028      	b.n	80014da <VL6180x_RangeSetThresholds+0x8e>
	} else {
		do {
			if (UseSafeParamHold) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <VL6180x_RangeSetThresholds+0x52>
				status = VL6180x_SetGroupParamHold(dev, 1);
 800148e:	2101      	movs	r1, #1
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7ff fcfa 	bl	8000e8a <VL6180x_SetGroupParamHold>
 8001496:	61f8      	str	r0, [r7, #28]
				if (status)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d11c      	bne.n	80014d8 <VL6180x_RangeSetThresholds+0x8c>
					break;
		    }
		    status = VL6180x_RangeSetRawThresholds(dev, (uint8_t)(low / scale), (uint8_t)(high / scale));
 800149e:	897a      	ldrh	r2, [r7, #10]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80014a6:	b2d9      	uxtb	r1, r3
 80014a8:	893a      	ldrh	r2, [r7, #8]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f7ff ffab 	bl	8001410 <VL6180x_RangeSetRawThresholds>
 80014ba:	61f8      	str	r0, [r7, #28]
		    if (status) {
				VL6180x_ErrLog("VL6180x_RangeSetRawThresholds fail");
		    }
		    if (UseSafeParamHold) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <VL6180x_RangeSetThresholds+0x8e>
				int HoldStatus;
				/* tryt to unset param hold vene if previous fail */
				HoldStatus = VL6180x_SetGroupParamHold(dev, 0);
 80014c2:	2100      	movs	r1, #0
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f7ff fce0 	bl	8000e8a <VL6180x_SetGroupParamHold>
 80014ca:	6178      	str	r0, [r7, #20]
				if (!status)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d103      	bne.n	80014da <VL6180x_RangeSetThresholds+0x8e>
					status = HoldStatus;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	e000      	b.n	80014da <VL6180x_RangeSetThresholds+0x8e>
					break;
 80014d8:	bf00      	nop
		    }
		} while (0);
	}

	LOG_FUNCTION_END(status);
	return status;
 80014da:	69fb      	ldr	r3, [r7, #28]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3720      	adds	r7, #32
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <VL6180x_RangeGetThresholds>:


int VL6180x_RangeGetThresholds(VL6180xDev_t dev, uint16_t *low, uint16_t *high)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	int status = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
	uint8_t RawLow, RawHigh;
	int scale;

	LOG_FUNCTION_START("%p %p", low , high);

	scale = _GetUpscale(dev, UpscaleFactor);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	7e1b      	ldrb	r3, [r3, #24]
 80014f8:	61bb      	str	r3, [r7, #24]
	do {
		if (high != NULL) {
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d013      	beq.n	8001528 <VL6180x_RangeGetThresholds+0x44>
			status = VL6180x_RdByte(dev, SYSRANGE_THRESH_HIGH, &RawHigh);
 8001500:	f107 0316 	add.w	r3, r7, #22
 8001504:	461a      	mov	r2, r3
 8001506:	2119      	movs	r1, #25
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f001 fb64 	bl	8002bd6 <VL6180x_RdByte>
 800150e:	61f8      	str	r0, [r7, #28]
			if (status) {
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d120      	bne.n	8001558 <VL6180x_RangeGetThresholds+0x74>
				VL6180x_ErrLog("rd SYSRANGE_THRESH_HIGH fail");
				break;
			}
			*high = (uint16_t)RawHigh * scale;
 8001516:	7dbb      	ldrb	r3, [r7, #22]
 8001518:	b29b      	uxth	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	b292      	uxth	r2, r2
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	b29a      	uxth	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	801a      	strh	r2, [r3, #0]
		}
		if (low != NULL) {
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d017      	beq.n	800155e <VL6180x_RangeGetThresholds+0x7a>
		    status = VL6180x_RdByte(dev, SYSRANGE_THRESH_LOW, &RawLow);
 800152e:	f107 0317 	add.w	r3, r7, #23
 8001532:	461a      	mov	r2, r3
 8001534:	211a      	movs	r1, #26
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f001 fb4d 	bl	8002bd6 <VL6180x_RdByte>
 800153c:	61f8      	str	r0, [r7, #28]
			if (status) {
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10b      	bne.n	800155c <VL6180x_RangeGetThresholds+0x78>
				VL6180x_ErrLog("rd SYSRANGE_THRESH_LOW fail");
				break;
		    }
		    *low = (uint16_t)RawLow * scale;
 8001544:	7dfb      	ldrb	r3, [r7, #23]
 8001546:	b29b      	uxth	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	b292      	uxth	r2, r2
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	b29a      	uxth	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	801a      	strh	r2, [r3, #0]
 8001556:	e002      	b.n	800155e <VL6180x_RangeGetThresholds+0x7a>
				break;
 8001558:	bf00      	nop
 800155a:	e000      	b.n	800155e <VL6180x_RangeGetThresholds+0x7a>
				break;
 800155c:	bf00      	nop
		}
	} while (0);
	LOG_FUNCTION_END_FMT(status, "%d %d", (int)*low , (int)*high);
	return status;
 800155e:	69fb      	ldr	r3, [r7, #28]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <VL6180x_RangeGetInterruptStatus>:


int VL6180x_RangeGetInterruptStatus(VL6180xDev_t dev, uint8_t *pIntStatus)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t IntStatus;
	LOG_FUNCTION_START("%p", pIntStatus);
	/* FIXME we are grouping "error" with over status the user must check implicitly for it
	 * not just new sample or over status , that will nevr show up in case of error*/
	status = VL6180x_GetCachedByte(dev, RESULT_INTERRUPT_STATUS_GPIO, &IntStatus);
 8001572:	f107 030b 	add.w	r3, r7, #11
 8001576:	461a      	mov	r2, r3
 8001578:	214f      	movs	r1, #79	; 0x4f
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fe65 	bl	800124a <VL6180x_GetCachedByte>
 8001580:	60f8      	str	r0, [r7, #12]
	*pIntStatus = IntStatus & 0xC7;
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001588:	b2da      	uxtb	r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END_FMT(status, "%d", (int)*pIntStatus);
	return status;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <VL6180x_ClearInterrupt>:
	LOG_FUNCTION_END_FMT(status, "%d", (int)*IntStatus);
	return status;
}

int VL6180x_ClearInterrupt(VL6180xDev_t dev, uint8_t IntClear)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	70fb      	strb	r3, [r7, #3]
	int status;
	LOG_FUNCTION_START("%d", (int)IntClear);
	if (IntClear <= 7) {
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	2b07      	cmp	r3, #7
 80015a8:	d807      	bhi.n	80015ba <VL6180x_ClearInterrupt+0x22>
		status = VL6180x_WrByte(dev, SYSTEM_INTERRUPT_CLEAR, IntClear);
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	461a      	mov	r2, r3
 80015ae:	2115      	movs	r1, #21
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f001 fa41 	bl	8002a38 <VL6180x_WrByte>
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	e002      	b.n	80015c0 <VL6180x_ClearInterrupt+0x28>
	} else {
		status = INVALID_PARAMS;
 80015ba:	f06f 0301 	mvn.w	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 80015c0:	68fb      	ldr	r3, [r7, #12]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_UpscaleInitPatch0>:
}

#if VL6180x_UPSCALE_SUPPORT != 1

static int _UpscaleInitPatch0(VL6180xDev_t dev)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
	int status;
	uint32_t CalValue = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
	CalValue = VL6180xDevDataGet(dev, Part2PartAmbNVM);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]
	status = VL6180x_WrDWord(dev, 0xDA, CalValue);
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	21da      	movs	r1, #218	; 0xda
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f001 fa7b 	bl	8002adc <VL6180x_WrDWord>
 80015e6:	60b8      	str	r0, [r7, #8]
	return status;
 80015e8:	68bb      	ldr	r3, [r7, #8]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <VL6180x_UpscaleRegInit>:

/* only include up-scaling register setting when up-scale support is configured in */
int VL6180x_UpscaleRegInit(VL6180xDev_t dev)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
	/*  apply REGISTER_TUNING_ER02_100614_CustomerView.txt */
	VL6180x_WrByte(dev, 0x0207, 0x01);
 80015fa:	2201      	movs	r2, #1
 80015fc:	f240 2107 	movw	r1, #519	; 0x207
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f001 fa19 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0208, 0x01);
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 7102 	mov.w	r1, #520	; 0x208
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f001 fa13 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0096, 0x00);
 8001612:	2200      	movs	r2, #0
 8001614:	2196      	movs	r1, #150	; 0x96
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f001 fa0e 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0097, 0x54);
 800161c:	2254      	movs	r2, #84	; 0x54
 800161e:	2197      	movs	r1, #151	; 0x97
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f001 fa09 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e3, 0x01);
 8001626:	2201      	movs	r2, #1
 8001628:	21e3      	movs	r1, #227	; 0xe3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f001 fa04 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e4, 0x03);
 8001630:	2203      	movs	r2, #3
 8001632:	21e4      	movs	r1, #228	; 0xe4
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f001 f9ff 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e5, 0x02);
 800163a:	2202      	movs	r2, #2
 800163c:	21e5      	movs	r1, #229	; 0xe5
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f001 f9fa 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e6, 0x01);
 8001644:	2201      	movs	r2, #1
 8001646:	21e6      	movs	r1, #230	; 0xe6
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f001 f9f5 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e7, 0x03);
 800164e:	2203      	movs	r2, #3
 8001650:	21e7      	movs	r1, #231	; 0xe7
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f001 f9f0 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00f5, 0x02);
 8001658:	2202      	movs	r2, #2
 800165a:	21f5      	movs	r1, #245	; 0xf5
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f001 f9eb 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00d9, 0x05);
 8001662:	2205      	movs	r2, #5
 8001664:	21d9      	movs	r1, #217	; 0xd9
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f001 f9e6 	bl	8002a38 <VL6180x_WrByte>

	_UpscaleInitPatch0(dev);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ffac 	bl	80015ca <_UpscaleInitPatch0>

	VL6180x_WrByte(dev, 0x009f, 0x00);
 8001672:	2200      	movs	r2, #0
 8001674:	219f      	movs	r1, #159	; 0x9f
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f001 f9de 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00a3, 0x28);
 800167c:	2228      	movs	r2, #40	; 0x28
 800167e:	21a3      	movs	r1, #163	; 0xa3
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f001 f9d9 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b7, 0x00);
 8001686:	2200      	movs	r2, #0
 8001688:	21b7      	movs	r1, #183	; 0xb7
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f001 f9d4 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00bb, 0x28);
 8001690:	2228      	movs	r2, #40	; 0x28
 8001692:	21bb      	movs	r1, #187	; 0xbb
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f001 f9cf 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b2, 0x09);
 800169a:	2209      	movs	r2, #9
 800169c:	21b2      	movs	r1, #178	; 0xb2
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f001 f9ca 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ca, 0x09);
 80016a4:	2209      	movs	r2, #9
 80016a6:	21ca      	movs	r1, #202	; 0xca
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f001 f9c5 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0198, 0x01);
 80016ae:	2201      	movs	r2, #1
 80016b0:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f001 f9bf 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01b0, 0x17);
 80016ba:	2217      	movs	r2, #23
 80016bc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f001 f9b9 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ad, 0x00);
 80016c6:	2200      	movs	r2, #0
 80016c8:	f240 11ad 	movw	r1, #429	; 0x1ad
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f001 f9b3 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ff, 0x05);
 80016d2:	2205      	movs	r2, #5
 80016d4:	21ff      	movs	r1, #255	; 0xff
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f001 f9ae 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0100, 0x05);
 80016dc:	2205      	movs	r2, #5
 80016de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f001 f9a8 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0199, 0x05);
 80016e8:	2205      	movs	r2, #5
 80016ea:	f240 1199 	movw	r1, #409	; 0x199
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f001 f9a2 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a6, 0x1b);
 80016f4:	221b      	movs	r2, #27
 80016f6:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f001 f99c 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ac, 0x3e);
 8001700:	223e      	movs	r2, #62	; 0x3e
 8001702:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f001 f996 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a7, 0x1f);
 800170c:	221f      	movs	r2, #31
 800170e:	f240 11a7 	movw	r1, #423	; 0x1a7
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f001 f990 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0030, 0x00);
 8001718:	2200      	movs	r2, #0
 800171a:	2130      	movs	r1, #48	; 0x30
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f001 f98b 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0011, 0x10);
 8001722:	2210      	movs	r2, #16
 8001724:	2111      	movs	r1, #17
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f001 f986 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x010a, 0x30);
 800172c:	2230      	movs	r2, #48	; 0x30
 800172e:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f001 f980 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003f, 0x46);
 8001738:	2246      	movs	r2, #70	; 0x46
 800173a:	213f      	movs	r1, #63	; 0x3f
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f001 f97b 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0031, 0xFF);
 8001742:	22ff      	movs	r2, #255	; 0xff
 8001744:	2131      	movs	r1, #49	; 0x31
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f001 f976 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0040, 0x63);
 800174c:	2263      	movs	r2, #99	; 0x63
 800174e:	2140      	movs	r1, #64	; 0x40
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f001 f971 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002e, 0x01);
 8001756:	2201      	movs	r2, #1
 8001758:	212e      	movs	r1, #46	; 0x2e
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f001 f96c 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002c, 0xff);
 8001760:	22ff      	movs	r2, #255	; 0xff
 8001762:	212c      	movs	r1, #44	; 0x2c
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f001 f967 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x001b, 0x09);
 800176a:	2209      	movs	r2, #9
 800176c:	211b      	movs	r1, #27
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f001 f962 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003e, 0x31);
 8001774:	2231      	movs	r2, #49	; 0x31
 8001776:	213e      	movs	r1, #62	; 0x3e
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f001 f95d 	bl	8002a38 <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0014, 0x24);
 800177e:	2224      	movs	r2, #36	; 0x24
 8001780:	2114      	movs	r1, #20
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f001 f958 	bl	8002a38 <VL6180x_WrByte>
#if VL6180x_EXTENDED_RANGE
	VL6180x_RangeSetMaxConvergenceTime(dev, 63);
#else
	VL6180x_RangeSetMaxConvergenceTime(dev, 50);
 8001788:	2132      	movs	r1, #50	; 0x32
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f8d0 	bl	8001930 <VL6180x_RangeSetMaxConvergenceTime>
#endif
	return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <VL6180x_UpscaleSetScaling>:
#else
#define VL6180x_UpscaleRegInit(...) -1
#endif

int VL6180x_UpscaleSetScaling(VL6180xDev_t dev, uint8_t scaling)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	70fb      	strb	r3, [r7, #3]
	/* we are in fixed config so only allow configured factor */
	#define min_scaling VL6180x_UPSCALE_SUPPORT
	#define max_scaling VL6180x_UPSCALE_SUPPORT
#endif

	if (scaling >= min_scaling  && scaling <= max_scaling) {
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <VL6180x_UpscaleSetScaling+0xda>
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d860      	bhi.n	8001876 <VL6180x_UpscaleSetScaling+0xda>

		Scaler = ScalerLookUP[scaling - 1];
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	4a34      	ldr	r2, [pc, #208]	; (800188c <VL6180x_UpscaleSetScaling+0xf0>)
 80017ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017be:	823b      	strh	r3, [r7, #16]
		status = VL6180x_WrWord(dev, RANGE_SCALER, Scaler);
 80017c0:	8a3b      	ldrh	r3, [r7, #16]
 80017c2:	461a      	mov	r2, r3
 80017c4:	2196      	movs	r1, #150	; 0x96
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f001 f95b 	bl	8002a82 <VL6180x_WrWord>
 80017cc:	6178      	str	r0, [r7, #20]
		_SetUpscale(dev, scaling);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	761a      	strb	r2, [r3, #24]

		/* Apply scaling on  part-2-part offset */
		Offset = VL6180xDevDataGet(dev, Part2PartOffsetNVM) / scaling;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 80017da:	461a      	mov	r2, r3
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	fb92 f3f3 	sdiv	r3, r2, r3
 80017e2:	73fb      	strb	r3, [r7, #15]
		status = VL6180x_WrByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, Offset);
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	461a      	mov	r2, r3
 80017e8:	2124      	movs	r1, #36	; 0x24
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f001 f924 	bl	8002a38 <VL6180x_WrByte>
 80017f0:	6178      	str	r0, [r7, #20]

		/* Apply scaling on CrossTalkValidHeight */
		if (status == 0) {
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10a      	bne.n	800180e <VL6180x_UpscaleSetScaling+0x72>
			status = VL6180x_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
									DEF_CROSS_TALK_VALID_HEIGHT_VALUE /  scaling);
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	2214      	movs	r2, #20
 80017fc:	fb92 f3f3 	sdiv	r3, r2, r3
			status = VL6180x_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
 8001800:	b2db      	uxtb	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	2121      	movs	r1, #33	; 0x21
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f001 f916 	bl	8002a38 <VL6180x_WrByte>
 800180c:	6178      	str	r0, [r7, #20]
		}
		/* Apply scaling on RangeIgnore ValidHeight if enabled */
		if( status == 0){
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d119      	bne.n	8001848 <VL6180x_UpscaleSetScaling+0xac>
			if(  VL6180xDevDataGet(dev, RangeIgnore.Enabled) !=0 ){
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7c1b      	ldrb	r3, [r3, #16]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d015      	beq.n	8001848 <VL6180x_UpscaleSetScaling+0xac>
				ValidHeight = VL6180xDevDataGet(dev, RangeIgnore.ValidHeight);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	899b      	ldrh	r3, [r3, #12]
 8001820:	827b      	strh	r3, [r7, #18]
				ValidHeight  /= _GetUpscale(dev);
 8001822:	8a7b      	ldrh	r3, [r7, #18]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	7e12      	ldrb	r2, [r2, #24]
 8001828:	fb93 f3f2 	sdiv	r3, r3, r2
 800182c:	827b      	strh	r3, [r7, #18]
				if( ValidHeight > 255 )
 800182e:	8a7b      	ldrh	r3, [r7, #18]
 8001830:	2bff      	cmp	r3, #255	; 0xff
 8001832:	d901      	bls.n	8001838 <VL6180x_UpscaleSetScaling+0x9c>
					ValidHeight = 255;
 8001834:	23ff      	movs	r3, #255	; 0xff
 8001836:	827b      	strh	r3, [r7, #18]

				status = VL6180x_WrByte(dev, SYSRANGE_RANGE_IGNORE_VALID_HEIGHT,
 8001838:	8a7b      	ldrh	r3, [r7, #18]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	2125      	movs	r1, #37	; 0x25
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f001 f8f9 	bl	8002a38 <VL6180x_WrByte>
 8001846:	6178      	str	r0, [r7, #20]
							ValidHeight );
			}
		}

#if !VL6180x_EXTENDED_RANGE
		if (status == 0) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10a      	bne.n	8001864 <VL6180x_UpscaleSetScaling+0xc8>
			status = VL6180x_RangeSetEceState(dev, scaling == 1); /* enable ece only at 1x scaling */
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	2b01      	cmp	r3, #1
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	4619      	mov	r1, r3
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f84e 	bl	80018fe <VL6180x_RangeSetEceState>
 8001862:	6178      	str	r0, [r7, #20]
		}
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <VL6180x_UpscaleSetScaling+0xe2>
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d006      	beq.n	800187e <VL6180x_UpscaleSetScaling+0xe2>
			status = NOT_GUARANTEED ;
 8001870:	2303      	movs	r3, #3
 8001872:	617b      	str	r3, [r7, #20]
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 8001874:	e003      	b.n	800187e <VL6180x_UpscaleSetScaling+0xe2>
		}
#endif
	} else {
		status = INVALID_PARAMS;
 8001876:	f06f 0301 	mvn.w	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e000      	b.n	8001880 <VL6180x_UpscaleSetScaling+0xe4>
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 800187e:	bf00      	nop
	}
#undef min_scaling
#undef max_scaling
	LOG_FUNCTION_END(status);
	return status;
 8001880:	697b      	ldr	r3, [r7, #20]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	080051e0 	.word	0x080051e0

08001890 <VL6180x_UpscaleStaticInit>:
	return status;
}


static int  VL6180x_UpscaleStaticInit(VL6180xDev_t dev)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	/* todo make these a fail macro in case only 1x is suppoted */
	int status;

	LOG_FUNCTION_START("");
	do {
		status = VL6180x_UpscaleRegInit(dev);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff feaa 	bl	80015f2 <VL6180x_UpscaleRegInit>
 800189e:	60f8      	str	r0, [r7, #12]
		if (status) {
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
			VL6180x_ErrLog("VL6180x_RangeSetEceState fail");
			break;
		}
#endif
	} while (0);
	if (!status) {
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10b      	bne.n	80018c2 <VL6180x_UpscaleStaticInit+0x32>
		/*  must write the scaler at least once to the device to ensure the scaler is in a known state. */
		status = VL6180x_UpscaleSetScaling(dev, _GetUpscale(dev));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7e1b      	ldrb	r3, [r3, #24]
 80018ae:	4619      	mov	r1, r3
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff73 	bl	800179c <VL6180x_UpscaleSetScaling>
 80018b6:	60f8      	str	r0, [r7, #12]
		VL6180x_WrByte(dev, 0x016, 0x00); /* change fresh out of set status to 0 */
 80018b8:	2200      	movs	r2, #0
 80018ba:	2116      	movs	r1, #22
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f001 f8bb 	bl	8002a38 <VL6180x_WrByte>
	}
	LOG_FUNCTION_END(status);
	return status;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <VL6180x_RangeConfigInterrupt>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d807      	bhi.n	80018ee <VL6180x_RangeConfigInterrupt+0x22>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO,
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	22f8      	movs	r2, #248	; 0xf8
 80018e2:	2114      	movs	r1, #20
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f001 f930 	bl	8002b4a <VL6180x_UpdateByte>
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	e002      	b.n	80018f4 <VL6180x_RangeConfigInterrupt+0x28>
									(uint8_t)(~CONFIG_GPIO_RANGE_MASK),
									ConfigGpioInt);
	} else {
		VL6180x_ErrLog("Invalid config mode param %d", (int)ConfigGpioInt);
		status = INVALID_PARAMS;
 80018ee:	f06f 0301 	mvn.w	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 80018f4:	68fb      	ldr	r3, [r7, #12]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <VL6180x_RangeSetEceState>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeSetEceState(VL6180xDev_t dev, int enable)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
	int status;
	uint8_t or_mask;

	LOG_FUNCTION_START("%d", (int)enable);
	if (enable)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <VL6180x_RangeSetEceState+0x16>
		or_mask = RANGE_CHECK_ECE_ENABLE_MASK;
 800190e:	2301      	movs	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e001      	b.n	8001918 <VL6180x_RangeSetEceState+0x1a>
	else
		or_mask = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]

	status = VL6180x_UpdateByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, ~RANGE_CHECK_ECE_ENABLE_MASK, or_mask);
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	22fe      	movs	r2, #254	; 0xfe
 800191c:	212d      	movs	r1, #45	; 0x2d
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f001 f913 	bl	8002b4a <VL6180x_UpdateByte>
 8001924:	60b8      	str	r0, [r7, #8]
	LOG_FUNCTION_END(status);
	return status;
 8001926:	68bb      	ldr	r3, [r7, #8]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <VL6180x_RangeSetMaxConvergenceTime>:


int VL6180x_RangeSetMaxConvergenceTime(VL6180xDev_t dev, uint8_t  MaxConTime_msec)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
	int status = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
	LOG_FUNCTION_START("%d", (int)MaxConTime_msec);
	do {
		status = VL6180x_WrByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, MaxConTime_msec);
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	461a      	mov	r2, r3
 8001944:	211c      	movs	r1, #28
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f001 f876 	bl	8002a38 <VL6180x_WrByte>
 800194c:	60f8      	str	r0, [r7, #12]
		if (status) {
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10b      	bne.n	800196c <VL6180x_RangeSetMaxConvergenceTime+0x3c>
			break;
		}
		status = VL6180x_RangeSetEarlyConvergenceEestimateThreshold(dev);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f82a 	bl	80019ae <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>
 800195a:	60f8      	str	r0, [r7, #12]
		if (status) {
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d106      	bne.n	8001970 <VL6180x_RangeSetMaxConvergenceTime+0x40>
			break;
		}
		status = _DMax_InitData(dev);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 ff6a 	bl	800283c <_DMax_InitData>
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	e002      	b.n	8001972 <VL6180x_RangeSetMaxConvergenceTime+0x42>
			break;
 800196c:	bf00      	nop
 800196e:	e000      	b.n	8001972 <VL6180x_RangeSetMaxConvergenceTime+0x42>
			break;
 8001970:	bf00      	nop
	} while (0);
	LOG_FUNCTION_END(status);
	return status;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <VL6180x_RangeSetSystemMode>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeSetSystemMode(VL6180xDev_t dev, uint8_t  mode)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("%d", (int)mode);
	/* FIXME we are not checking device is ready via @a VL6180x_RangeWaitDeviceReady
	 * so if called back to back real fast we are not checking
	 * if previous mode "set" got absorbed => bit 0 must be 0 so that it work
	 */
	if (mode <= 3) {
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d807      	bhi.n	800199e <VL6180x_RangeSetSystemMode+0x22>
		status = VL6180x_WrByte(dev, SYSRANGE_START, mode);
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	461a      	mov	r2, r3
 8001992:	2118      	movs	r1, #24
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f001 f84f 	bl	8002a38 <VL6180x_WrByte>
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	e002      	b.n	80019a4 <VL6180x_RangeSetSystemMode+0x28>
		if (status) {
		    VL6180x_ErrLog("SYSRANGE_START wr fail");
		}
	} else {
		status = INVALID_PARAMS;
 800199e:	f06f 0301 	mvn.w	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 80019a4:	68fb      	ldr	r3, [r7, #12]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>:
	return status;
}


static int VL6180x_RangeSetEarlyConvergenceEestimateThreshold(VL6180xDev_t dev)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b08e      	sub	sp, #56	; 0x38
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
	int status;

	const uint32_t cMicroSecPerMilliSec  = 1000;
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
	const uint32_t cEceSampleTime_us     = 500;
 80019bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ece_factor_m          = VL6180xDevDataGet(dev, EceFactorM);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	891b      	ldrh	r3, [r3, #8]
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ece_factor_d          = VL6180xDevDataGet(dev, EceFactorD);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	895b      	ldrh	r3, [r3, #10]
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t AveTime;

	LOG_FUNCTION_START("");

	do {
		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &u8);
 80019ce:	f107 030f 	add.w	r3, r7, #15
 80019d2:	461a      	mov	r2, r3
 80019d4:	211c      	movs	r1, #28
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f001 f8fd 	bl	8002bd6 <VL6180x_RdByte>
 80019dc:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 80019de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d138      	bne.n	8001a56 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xa8>
			VL6180x_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail");
			break;
		}
		maxConv_ms = u8;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	623b      	str	r3, [r7, #32]
		AveTime = _GetAveTotalTime(dev);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f83c 	bl	8001a66 <_GetAveTotalTime>
 80019ee:	61f8      	str	r0, [r7, #28]
		if (AveTime < 0) {
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da03      	bge.n	80019fe <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0x50>
			status = -1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 80019fc:	e02e      	b.n	8001a5c <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
		}

		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a02:	fb03 f202 	mul.w	r2, r3, r2
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	61bb      	str	r3, [r7, #24]
		status = VL6180x_RdDWord(dev, 0xB8, &fineThresh);
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	461a      	mov	r2, r3
 8001a12:	21b8      	movs	r1, #184	; 0xb8
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f001 f947 	bl	8002ca8 <VL6180x_RdDWord>
 8001a1a:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 8001a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d11b      	bne.n	8001a5a <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xac>
			VL6180x_ErrLog("reg 0xB8 rd fail");
			break;
		}
		fineThresh *= 256;
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	613b      	str	r3, [r7, #16]
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 8001a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a2c:	fb02 f303 	mul.w	r3, r2, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	fb03 f202 	mul.w	r2, r3, r2
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	617b      	str	r3, [r7, #20]

		status = VL6180x_WrWord(dev, SYSRANGE_EARLY_CONVERGENCE_ESTIMATE, (uint16_t)eceThresh);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2122      	movs	r1, #34	; 0x22
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f001 f818 	bl	8002a82 <VL6180x_WrWord>
 8001a52:	6378      	str	r0, [r7, #52]	; 0x34
 8001a54:	e002      	b.n	8001a5c <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
			break;
 8001a56:	bf00      	nop
 8001a58:	e000      	b.n	8001a5c <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xae>
			break;
 8001a5a:	bf00      	nop
	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3738      	adds	r7, #56	; 0x38
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_GetAveTotalTime>:
/*
 * Return >0 = time
 *       <0 1 if fail to get read data from device to compute time
 */
static int32_t _GetAveTotalTime(VL6180xDev_t dev)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b08c      	sub	sp, #48	; 0x30
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
	uint32_t cFwOverhead_us = 24;
 8001a6e:	2318      	movs	r3, #24
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t cVcpSetupTime_us = 70;
 8001a72:	2346      	movs	r3, #70	; 0x46
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t cPLL2_StartupDelay_us = 200;
 8001a76:	23c8      	movs	r3, #200	; 0xc8
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t cMeasMask = 0x07;
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t u8;
	int status;

	LOG_FUNCTION_START("");

	status = VL6180x_RdByte(dev, 0x109, &u8);
 8001a80:	f107 030b 	add.w	r3, r7, #11
 8001a84:	461a      	mov	r2, r3
 8001a86:	f240 1109 	movw	r1, #265	; 0x109
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f001 f8a3 	bl	8002bd6 <VL6180x_RdByte>
 8001a90:	61f8      	str	r0, [r7, #28]
	if (status) {
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <_GetAveTotalTime+0x38>
		VL6180x_ErrLog("rd 0x109 fail");
		return -1;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	e029      	b.n	8001af2 <_GetAveTotalTime+0x8c>
	}
	Samples = u8 & cMeasMask;
 8001a9e:	7afa      	ldrb	r2, [r7, #11]
 8001aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	61bb      	str	r3, [r7, #24]
	status = VL6180x_RdByte(dev, READOUT_AVERAGING_SAMPLE_PERIOD, &u8);
 8001aaa:	f107 030b 	add.w	r3, r7, #11
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f001 f88e 	bl	8002bd6 <VL6180x_RdByte>
 8001aba:	61f8      	str	r0, [r7, #28]
	if (status) {
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <_GetAveTotalTime+0x62>
		VL6180x_ErrLog("i2c READOUT_AVERAGING_SAMPLE_PERIOD fail");
		return -1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e014      	b.n	8001af2 <_GetAveTotalTime+0x8c>
	}
	SamplePeriod = u8;
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	617b      	str	r3, [r7, #20]
	SingleTime_us = cFwOverhead_us + cVcpSetupTime_us + (SamplePeriod * 10);
 8001acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad0:	18d1      	adds	r1, r2, r3
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	440b      	add	r3, r1
 8001ade:	613b      	str	r3, [r7, #16]
	TotalAveTime_us = (Samples + 1) * SingleTime_us + cPLL2_StartupDelay_us;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	fb03 f202 	mul.w	r2, r3, r2
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	4413      	add	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_END(TotalAveTime_us);
	return TotalAveTime_us;
 8001af0:	68fb      	ldr	r3, [r7, #12]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3730      	adds	r7, #48	; 0x30
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_filter_Init>:
#define _FilterData(field) VL6180xDevDataGet(dev, FilterData.field)
/*
 * One time init
 */
int _filter_Init(VL6180xDev_t dev)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
	int i;
	_FilterData(MeasurementIndex) = 0;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]

	_FilterData(Default_ZeroVal) = 0;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	665a      	str	r2, [r3, #100]	; 0x64
	_FilterData(Default_VAVGVal) = 0;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	669a      	str	r2, [r3, #104]	; 0x68
	_FilterData(NoDelay_ZeroVal) = 0;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	66da      	str	r2, [r3, #108]	; 0x6c
	_FilterData(NoDelay_VAVGVal) = 0;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	671a      	str	r2, [r3, #112]	; 0x70
	_FilterData(Previous_VAVGDiff) = 0;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	675a      	str	r2, [r3, #116]	; 0x74

	_FilterData(StdFilteredReads) = 0;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	_FilterData(FilteringOnGoingConsecutiveStates) = 0;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	679a      	str	r2, [r3, #120]	; 0x78

	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e011      	b.n	8001b5e <_filter_Init+0x64>
		_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3310      	adds	r3, #16
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b48:	809a      	strh	r2, [r3, #4]
		_FilterData(LastReturnRates)[i] = 0;
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	330c      	adds	r3, #12
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b09      	cmp	r3, #9
 8001b62:	ddea      	ble.n	8001b3a <_filter_Init+0x40>
	}
	_FilterData(MeasurementsSinceLastFlush)=0;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	621a      	str	r2, [r3, #32]
	return 0;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <_filter_StdDevDamper>:
									uint32_t SignalRate,
									const uint32_t StdDevLimitLowLight,
									const uint32_t StdDevLimitLowLightSNR,
									const uint32_t StdDevLimitHighLight,
									const uint32_t StdDevLimitHighLightSNR)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b087      	sub	sp, #28
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	603b      	str	r3, [r7, #0]
	uint32_t newStdDev;
	uint16_t SNR;

	if (AmbientRate > 0)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d008      	beq.n	8001b9c <_filter_StdDevDamper+0x26>
		SNR = (uint16_t) ((100 * SignalRate) / AmbientRate);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2264      	movs	r2, #100	; 0x64
 8001b8e:	fb03 f202 	mul.w	r2, r3, r2
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	827b      	strh	r3, [r7, #18]
 8001b9a:	e002      	b.n	8001ba2 <_filter_StdDevDamper+0x2c>
	else
		SNR = 9999;
 8001b9c:	f242 730f 	movw	r3, #9999	; 0x270f
 8001ba0:	827b      	strh	r3, [r7, #18]

	if (SNR >= StdDevLimitLowLightSNR) {
 8001ba2:	8a7b      	ldrh	r3, [r7, #18]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d802      	bhi.n	8001bb0 <_filter_StdDevDamper+0x3a>
		newStdDev = StdDevLimitLowLight;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e016      	b.n	8001bde <_filter_StdDevDamper+0x68>
	} else {
		if (SNR <= StdDevLimitHighLightSNR)
 8001bb0:	8a7b      	ldrh	r3, [r7, #18]
 8001bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d302      	bcc.n	8001bbe <_filter_StdDevDamper+0x48>
			newStdDev = StdDevLimitHighLight;
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	e00f      	b.n	8001bde <_filter_StdDevDamper+0x68>
		else {
			newStdDev = (uint32_t)(StdDevLimitHighLight -
									(SNR - StdDevLimitHighLightSNR) *
 8001bbe:	8a7a      	ldrh	r2, [r7, #18]
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	1ad3      	subs	r3, r2, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8001bc4:	6a39      	ldr	r1, [r7, #32]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	1a8a      	subs	r2, r1, r2
									(SNR - StdDevLimitHighLightSNR) *
 8001bca:	fb03 f202 	mul.w	r2, r3, r2
									(StdDevLimitLowLightSNR - StdDevLimitHighLightSNR));
 8001bce:	6839      	ldr	r1, [r7, #0]
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	1acb      	subs	r3, r1, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
			newStdDev = (uint32_t)(StdDevLimitHighLight -
 8001bd8:	6a3a      	ldr	r2, [r7, #32]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	617b      	str	r3, [r7, #20]
		}
	}

	return newStdDev;
 8001bde:	697b      	ldr	r3, [r7, #20]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
	...

08001bec <_filter_Start>:
								uint16_t m_trueRange_mm,
								uint16_t m_rawRange_mm,
								uint32_t m_rtnSignalRate,
								uint32_t m_rtnAmbientRate,
								uint16_t errorCode)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0aa      	sub	sp, #168	; 0xa8
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	817b      	strh	r3, [r7, #10]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	813b      	strh	r3, [r7, #8]
	int status;
	uint16_t m_newTrueRange_mm = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	#if VL6180x_HAVE_MULTI_READ
	uint8_t MultiReadBuf[8];
	#endif
	uint16_t i;
	uint16_t bypassFilter = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t resetVAVGData = 1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	uint16_t filterErrorCode = NoError;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t filterErrorCodeOnRangingErrorCode = NoError;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	uint16_t registerValue;

	uint32_t register32BitsValue1;
	uint32_t register32BitsValue2;

	uint16_t ValidDistance = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	uint16_t SuspicuousRangingZone = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

	uint16_t WrapAroundFlag = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t NoWrapAroundFlag = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t NoWrapAroundHighConfidenceFlag = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	uint16_t FlushFilter = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	uint32_t RateChange = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	uint16_t StdDevSamplesMinNeeded = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	uint16_t StdDevSamples = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	uint32_t StdDevDistanceSum = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t StdDevDistanceMean = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t StdDevDistance = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t StdDevRateSum = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t StdDevRateMean = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t StdDevRate = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t StdDevLimitWithTargetMove = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t WrapAroundLowReturnRateLimit;
	uint32_t WrapAroundLowReturnRateLimit2;
	uint32_t WrapAroundLowReturnRateFilterLimit;
	uint32_t WrapAroundHighReturnRateFilterLimit;

	uint32_t MAX_VAVGDiff = 1800;
 8001c6e:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001c72:	657b      	str	r3, [r7, #84]	; 0x54

	uint8_t u8;//, u8_2;
	uint32_t XTalkCompRate_KCps;
	uint32_t StdDevLimit = 300;
 8001c74:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001c78:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t MaxOrInvalidDistance =   255*_GetUpscale(dev);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	7e1b      	ldrb	r3, [r3, #24]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4613      	mov	r3, r2
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* #define MaxOrInvalidDistance  (uint16_t) (255 * 3) */

	/* Check if distance is Valid or not */
	switch (errorCode) {
 8001c88:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001c8c:	3b0c      	subs	r3, #12
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d825      	bhi.n	8001cde <_filter_Start+0xf2>
 8001c92:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <_filter_Start+0xac>)
 8001c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	08001cb7 	.word	0x08001cb7
 8001ca0:	08001ca9 	.word	0x08001ca9
 8001ca4:	08001cb7 	.word	0x08001cb7
	case Raw_Ranging_Algo_Underflow:
	case Ranging_Algo_Underflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 8001ca8:	2310      	movs	r3, #16
 8001caa:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		ValidDistance = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8001cb4:	e022      	b.n	8001cfc <_filter_Start+0x110>
	case Raw_Ranging_Algo_Overflow:
	case Ranging_Algo_Overflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		//m_trueRange_mm = MaxOrInvalidDistance;
		m_trueRange_mm = 200*_GetUpscale(dev);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	7e1b      	ldrb	r3, [r3, #24]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	0092      	lsls	r2, r2, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	0091      	lsls	r1, r2, #2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	817b      	strh	r3, [r7, #10]
		ValidDistance = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8001cdc:	e00e      	b.n	8001cfc <_filter_Start+0x110>
	default:
		if (m_rawRange_mm >= MaxOrInvalidDistance) {
 8001cde:	893b      	ldrh	r3, [r7, #8]
 8001ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d806      	bhi.n	8001cf4 <_filter_Start+0x108>
			ValidDistance = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
			bypassFilter = 1; /* Bypass the filter in this case as produced distance is not usable (and also the VAVGVal and ZeroVal values) */
 8001cec:	2301      	movs	r3, #1
 8001cee:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
		} else {
			ValidDistance = 1;
		}
		break;
 8001cf2:	e002      	b.n	8001cfa <_filter_Start+0x10e>
			ValidDistance = 1;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8001cfa:	bf00      	nop
	}
	m_newTrueRange_mm = m_trueRange_mm;
 8001cfc:	897b      	ldrh	r3, [r7, #10]
 8001cfe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	XTalkCompRate_KCps = VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Update signal rate limits depending on crosstalk */
	SignalRateDMax = (uint32_t)_GetDMaxDataRetSignalAt400mm(dev) ;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d0e:	647b      	str	r3, [r7, #68]	; 0x44
	WrapAroundLowReturnRateLimit = WrapAroundLowReturnRateLimit_ROM  + XTalkCompRate_KCps;
 8001d10:	4b90      	ldr	r3, [pc, #576]	; (8001f54 <_filter_Start+0x368>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d16:	4413      	add	r3, r2
 8001d18:	643b      	str	r3, [r7, #64]	; 0x40
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 8001d1a:	4b8f      	ldr	r3, [pc, #572]	; (8001f58 <_filter_Start+0x36c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) +
 8001d24:	08db      	lsrs	r3, r3, #3
 8001d26:	4a8d      	ldr	r2, [pc, #564]	; (8001f5c <_filter_Start+0x370>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 8001d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d30:	4413      	add	r3, r2
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
									XTalkCompRate_KCps;
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 8001d34:	4b8a      	ldr	r3, [pc, #552]	; (8001f60 <_filter_Start+0x374>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 8001d3e:	08db      	lsrs	r3, r3, #3
 8001d40:	4a86      	ldr	r2, [pc, #536]	; (8001f5c <_filter_Start+0x370>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 8001d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d4a:	4413      	add	r3, r2
 8001d4c:	63bb      	str	r3, [r7, #56]	; 0x38
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 8001d4e:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <_filter_Start+0x378>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d54:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 8001d58:	08db      	lsrs	r3, r3, #3
 8001d5a:	4a80      	ldr	r2, [pc, #512]	; (8001f5c <_filter_Start+0x370>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	089b      	lsrs	r3, r3, #2
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 8001d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d64:	4413      	add	r3, r2
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34


	/* Checks on low range data */
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit)) {
 8001d68:	4b7f      	ldr	r3, [pc, #508]	; (8001f68 <_filter_Start+0x37c>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	893a      	ldrh	r2, [r7, #8]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d209      	bcs.n	8001d86 <_filter_Start+0x19a>
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d205      	bcs.n	8001d86 <_filter_Start+0x19a>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 8001d7a:	2310      	movs	r3, #16
 8001d7c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		bypassFilter = 1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit2)) {
 8001d86:	4b79      	ldr	r3, [pc, #484]	; (8001f6c <_filter_Start+0x380>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	893a      	ldrh	r2, [r7, #8]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d209      	bcs.n	8001da4 <_filter_Start+0x1b8>
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d205      	bcs.n	8001da4 <_filter_Start+0x1b8>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 8001d98:	2310      	movs	r3, #16
 8001d9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		bypassFilter = 1;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < (WrapAroundLowReturnRateLimit2 + WrapAroundLowRawRangeLimit2SuspicuousAddedSignalRate))) {
 8001da4:	4b71      	ldr	r3, [pc, #452]	; (8001f6c <_filter_Start+0x380>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	893a      	ldrh	r2, [r7, #8]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d209      	bcs.n	8001dc2 <_filter_Start+0x1d6>
 8001dae:	4b70      	ldr	r3, [pc, #448]	; (8001f70 <_filter_Start+0x384>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db4:	4413      	add	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d202      	bcs.n	8001dc2 <_filter_Start+0x1d6>
		SuspicuousRangingZone = 1; /* On this area, we are in an highly suspicuous wraparound ares, filter parameter will be stengthen */
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	}


	/* Checks on Ambient rate level */
	if (m_rtnAmbientRate > WrapAroundMaximumAmbientRateFilterLimit) {
 8001dc2:	4b6c      	ldr	r3, [pc, #432]	; (8001f74 <_filter_Start+0x388>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d905      	bls.n	8001dda <_filter_Start+0x1ee>
		/* Too high ambient rate */
		FlushFilter = 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		bypassFilter = 1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
    
	/*  Checks on Filter flush */
	if (m_rtnSignalRate < MinReturnRateFilterFlush) {
 8001dda:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <_filter_Start+0x38c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d205      	bcs.n	8001df0 <_filter_Start+0x204>
		/* Completely lost target, so flush the filter */
		FlushFilter = 1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		bypassFilter = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if (_FilterData(LastReturnRates)[0] != 0) {
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d020      	beq.n	8001e3a <_filter_Start+0x24e>
		if (m_rtnSignalRate > _FilterData(LastReturnRates)[0])
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d90d      	bls.n	8001e1e <_filter_Start+0x232>
			RateChange = (100 *
						(m_rtnSignalRate - _FilterData(LastReturnRates)[0])) /
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 8001e0a:	2264      	movs	r2, #100	; 0x64
 8001e0c:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e1c:	e010      	b.n	8001e40 <_filter_Start+0x254>
		else
			RateChange = (100 *
						(_FilterData(LastReturnRates)[0] - m_rtnSignalRate)) /
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 8001e26:	2264      	movs	r2, #100	; 0x64
 8001e28:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e38:	e002      	b.n	8001e40 <_filter_Start+0x254>
	} else
		RateChange = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (RateChange > MaxReturnRateChangeFilterFlush) {
 8001e40:	4b4e      	ldr	r3, [pc, #312]	; (8001f7c <_filter_Start+0x390>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d902      	bls.n	8001e52 <_filter_Start+0x266>
		FlushFilter = 1;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	}
	/* TODO optimize filter  using circular buffer */
	if (FlushFilter == 1) {
 8001e52:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d124      	bne.n	8001ea4 <_filter_Start+0x2b8>
		_FilterData(MeasurementIndex) = 0;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	61da      	str	r2, [r3, #28]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001e66:	e015      	b.n	8001e94 <_filter_Start+0x2a8>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8001e68:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	3310      	adds	r3, #16
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e78:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 8001e7a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	330c      	adds	r3, #12
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001e8a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001e94:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001e98:	2b09      	cmp	r3, #9
 8001e9a:	d9e5      	bls.n	8001e68 <_filter_Start+0x27c>
		}
		_FilterData(MeasurementsSinceLastFlush)=0;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	621a      	str	r2, [r3, #32]
 8001ea2:	e02d      	b.n	8001f00 <_filter_Start+0x314>
	} else {
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 8001ea4:	2309      	movs	r3, #9
 8001ea6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001eaa:	e025      	b.n	8001ef8 <_filter_Start+0x30c>
			_FilterData(LastTrueRange)[i] = _FilterData(LastTrueRange)[i - 1];
 8001eac:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	3310      	adds	r3, #16
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	8898      	ldrh	r0, [r3, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	f101 0310 	add.w	r3, r1, #16
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	4602      	mov	r2, r0
 8001ecc:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = _FilterData(LastReturnRates)[i - 1];
 8001ece:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f8b7 009c 	ldrh.w	r0, [r7, #156]	; 0x9c
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	330c      	adds	r3, #12
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	68f9      	ldr	r1, [r7, #12]
 8001ee4:	f100 030c 	add.w	r3, r0, #12
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	609a      	str	r2, [r3, #8]
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 8001eee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001ef8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1d5      	bne.n	8001eac <_filter_Start+0x2c0>
		}
	}

	if (ValidDistance == 1)
 8001f00:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d103      	bne.n	8001f10 <_filter_Start+0x324>
		_FilterData(LastTrueRange)[0] = m_trueRange_mm;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	897a      	ldrh	r2, [r7, #10]
 8001f0c:	849a      	strh	r2, [r3, #36]	; 0x24
 8001f0e:	e003      	b.n	8001f18 <_filter_Start+0x32c>
	else
		_FilterData(LastTrueRange)[0] = FILTER_INVALID_DISTANCE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f16:	849a      	strh	r2, [r3, #36]	; 0x24
	_FilterData(LastReturnRates)[0] = m_rtnSignalRate;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
	_FilterData(MeasurementsSinceLastFlush)++;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	621a      	str	r2, [r3, #32]

	/* Check if we need to go through the filter or not */
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <_filter_Start+0x394>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	893a      	ldrh	r2, [r7, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d203      	bcs.n	8001f3a <_filter_Start+0x34e>
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d324      	bcc.n	8001f84 <_filter_Start+0x398>
		(m_rtnSignalRate < WrapAroundLowReturnRateFilterLimit)) ||
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <_filter_Start+0x394>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 8001f3e:	893a      	ldrh	r2, [r7, #8]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d303      	bcc.n	8001f4c <_filter_Start+0x360>
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d31b      	bcc.n	8001f84 <_filter_Start+0x398>
		(m_rtnSignalRate < WrapAroundHighReturnRateFilterLimit))))
		bypassFilter = 1;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8001f52:	e02d      	b.n	8001fb0 <_filter_Start+0x3c4>
 8001f54:	080051f0 	.word	0x080051f0
 8001f58:	080051f4 	.word	0x080051f4
 8001f5c:	1a41a41b 	.word	0x1a41a41b
 8001f60:	080051f8 	.word	0x080051f8
 8001f64:	080051fc 	.word	0x080051fc
 8001f68:	08005200 	.word	0x08005200
 8001f6c:	08005202 	.word	0x08005202
 8001f70:	08005204 	.word	0x08005204
 8001f74:	08005208 	.word	0x08005208
 8001f78:	0800520c 	.word	0x0800520c
 8001f7c:	08005210 	.word	0x08005210
 8001f80:	08005214 	.word	0x08005214
	else {
		/* if some wraparound filtering due to some ranging error code has been detected, update the filter status and bypass the filter */
		if(filterErrorCodeOnRangingErrorCode!=NoError){
 8001f84:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d011      	beq.n	8001fb0 <_filter_Start+0x3c4>
#ifndef PRESERVE_DEVICE_ERROR_CODE
			filterErrorCode = filterErrorCodeOnRangingErrorCode;
#else
			if((errorCode==Raw_Ranging_Algo_Underflow) || (errorCode==Ranging_Algo_Underflow)) {
 8001f8c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	d003      	beq.n	8001f9c <_filter_Start+0x3b0>
 8001f94:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001f98:	2b0e      	cmp	r3, #14
 8001f9a:	d103      	bne.n	8001fa4 <_filter_Start+0x3b8>
				/* Preserves the error codes except for Raw_Ranging_Algo_Underflow and Ranging_Algo_Underflow */
				filterErrorCode = filterErrorCodeOnRangingErrorCode;
 8001f9c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001fa0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
			}
#endif
			bypassFilter = 1;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			resetVAVGData = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
		}
	}

	/* Check which kind of measurement has been made */
	status = VL6180x_RdByte(dev, 0x01AC, &u8);
 8001fb0:	f107 0317 	add.w	r3, r7, #23
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fe0b 	bl	8002bd6 <VL6180x_RdByte>
 8001fc0:	6338      	str	r0, [r7, #48]	; 0x30
	if (status) {
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f040 82ba 	bne.w	800253e <_filter_Start+0x952>
		VL6180x_ErrLog("0x01AC rd fail");
		goto done_err;
	}
	registerValue = u8;
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Read data for filtering */
#if VL6180x_HAVE_MULTI_READ
	status = VL6180x_RdMulti(dev, 0x10C, MultiReadBuf, 8); /* read only 8 lsb bits */
 8001fce:	f107 0218 	add.w	r2, r7, #24
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fea4 	bl	8002d26 <VL6180x_RdMulti>
 8001fde:	6338      	str	r0, [r7, #48]	; 0x30
	if (status) {
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 82ad 	bne.w	8002542 <_filter_Start+0x956>
		VL6180x_ErrLog("0x10C multi rd fail");
		goto done_err;
	}
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 8001fe8:	7e3b      	ldrb	r3, [r7, #24]
 8001fea:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[1] << 16)
 8001fec:	7e7b      	ldrb	r3, [r7, #25]
 8001fee:	041b      	lsls	r3, r3, #16
 8001ff0:	441a      	add	r2, r3
			+ ((uint32_t) MultiReadBuf[2] << 8)
 8001ff2:	7ebb      	ldrb	r3, [r7, #26]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	4413      	add	r3, r2
			+ ((uint32_t) MultiReadBuf[3] << 0);
 8001ff8:	7efa      	ldrb	r2, [r7, #27]
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 8001ffa:	4413      	add	r3, r2
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 8001ffe:	7f3b      	ldrb	r3, [r7, #28]
 8002000:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[5] << 16)
 8002002:	7f7b      	ldrb	r3, [r7, #29]
 8002004:	041b      	lsls	r3, r3, #16
 8002006:	441a      	add	r2, r3
			+ ((uint32_t) MultiReadBuf[6] << 8)
 8002008:	7fbb      	ldrb	r3, [r7, #30]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	4413      	add	r3, r2
			+ ((uint32_t) MultiReadBuf[7] << 0);
 800200e:	7ffa      	ldrb	r2, [r7, #31]
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 8002010:	4413      	add	r3, r2
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
		goto done_err;
	}
#endif


	if ((FlushFilter == 1) || ((bypassFilter == 1) && (resetVAVGData == 1))) {
 8002014:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002018:	2b01      	cmp	r3, #1
 800201a:	d007      	beq.n	800202c <_filter_Start+0x440>
 800201c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002020:	2b01      	cmp	r3, #1
 8002022:	d121      	bne.n	8002068 <_filter_Start+0x47c>
 8002024:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002028:	2b01      	cmp	r3, #1
 800202a:	d11d      	bne.n	8002068 <_filter_Start+0x47c>
		if (registerValue != 0x3E) {
 800202c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800202e:	2b3e      	cmp	r3, #62	; 0x3e
 8002030:	d00a      	beq.n	8002048 <_filter_Start+0x45c>
			status = VL6180x_WrByte(dev, 0x1AC, 0x3E);
 8002032:	223e      	movs	r2, #62	; 0x3e
 8002034:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fcfd 	bl	8002a38 <VL6180x_WrByte>
 800203e:	6338      	str	r0, [r7, #48]	; 0x30
			if (status) {
 8002040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002042:	2b00      	cmp	r3, #0
 8002044:	f040 827f 	bne.w	8002546 <_filter_Start+0x95a>
			//	VL6180x_ErrLog("0x0F2 bypass wr fail");
			//	goto done_err;
			//}
		}
		/* Set both Default and NoDelay To same value */
		_FilterData(Default_ZeroVal) = register32BitsValue1;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800204c:	665a      	str	r2, [r3, #100]	; 0x64
		_FilterData(Default_VAVGVal) = register32BitsValue2;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002052:	669a      	str	r2, [r3, #104]	; 0x68
		_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002058:	66da      	str	r2, [r3, #108]	; 0x6c
		_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205e:	671a      	str	r2, [r3, #112]	; 0x70

		_FilterData(MeasurementIndex) = 0;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
 8002066:	e030      	b.n	80020ca <_filter_Start+0x4de>
	} else {
		if (registerValue == 0x3E) {
 8002068:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800206a:	2b3e      	cmp	r3, #62	; 0x3e
 800206c:	d106      	bne.n	800207c <_filter_Start+0x490>
			_FilterData(Default_ZeroVal) = register32BitsValue1;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002072:	665a      	str	r2, [r3, #100]	; 0x64
			_FilterData(Default_VAVGVal) = register32BitsValue2;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	669a      	str	r2, [r3, #104]	; 0x68
 800207a:	e005      	b.n	8002088 <_filter_Start+0x49c>
		} else {
			_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002080:	66da      	str	r2, [r3, #108]	; 0x6c
			_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002086:	671a      	str	r2, [r3, #112]	; 0x70
		}

		if (_FilterData(MeasurementIndex) % WrapAroundNoDelayCheckPeriod == 0) {
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	4a7f      	ldr	r2, [pc, #508]	; (800228c <_filter_Start+0x6a0>)
 800208e:	8812      	ldrh	r2, [r2, #0]
 8002090:	fbb3 f1f2 	udiv	r1, r3, r2
 8002094:	fb01 f202 	mul.w	r2, r1, r2
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <_filter_Start+0x4b8>
			u8 = 0x3C;
 800209e:	233c      	movs	r3, #60	; 0x3c
 80020a0:	75fb      	strb	r3, [r7, #23]
 80020a2:	e001      	b.n	80020a8 <_filter_Start+0x4bc>
			//u8_2 = 0x05;
		} else {
			u8 = 0x3E;
 80020a4:	233e      	movs	r3, #62	; 0x3e
 80020a6:	75fb      	strb	r3, [r7, #23]
			//u8_2 = 0x01;
		}
		status = VL6180x_WrByte(dev, 0x01AC, u8);
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	461a      	mov	r2, r3
 80020ac:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fcc1 	bl	8002a38 <VL6180x_WrByte>
 80020b6:	6338      	str	r0, [r7, #48]	; 0x30
		if (status) {
 80020b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 8245 	bne.w	800254a <_filter_Start+0x95e>
		//status = VL6180x_WrByte(dev, 0x0F2, u8_2);
		//if (status) {
		//	VL6180x_ErrLog("0x0F2  wr fail");
		//	goto done_err;
		//}
		_FilterData(MeasurementIndex)++;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	61da      	str	r2, [r3, #28]
	}

	if (bypassFilter == 1) {
 80020ca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d10d      	bne.n	80020ee <_filter_Start+0x502>
		/* Do not go through the filter */

		/* Update filter error code */
		_FilterData(filterError) = filterErrorCode;
 80020d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	67da      	str	r2, [r3, #124]	; 0x7c

		/* Update reported range */
		if(filterErrorCode==RangingFiltered)
 80020da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80020de:	2b10      	cmp	r3, #16
 80020e0:	d102      	bne.n	80020e8 <_filter_Start+0x4fc>
			m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 80020e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e4:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

		return m_newTrueRange_mm;
 80020e8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80020ec:	e230      	b.n	8002550 <_filter_Start+0x964>
	}

	/* Computes current VAVGDiff */
	if (_FilterData(Default_VAVGVal) > _FilterData(NoDelay_VAVGVal))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d906      	bls.n	8002108 <_filter_Start+0x51c>
		VAVGDiff = _FilterData(Default_VAVGVal) - _FilterData(NoDelay_VAVGVal);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	663b      	str	r3, [r7, #96]	; 0x60
 8002106:	e001      	b.n	800210c <_filter_Start+0x520>
	else
		VAVGDiff = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	663b      	str	r3, [r7, #96]	; 0x60
	_FilterData(Previous_VAVGDiff) = VAVGDiff;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002110:	675a      	str	r2, [r3, #116]	; 0x74

	if(SuspicuousRangingZone==0)
 8002112:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <_filter_Start+0x536>
		MAX_VAVGDiff = MAX_VAVGDiff_ROM;
 800211a:	4b5d      	ldr	r3, [pc, #372]	; (8002290 <_filter_Start+0x6a4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	657b      	str	r3, [r7, #84]	; 0x54
 8002120:	e006      	b.n	8002130 <_filter_Start+0x544>
	else
		/* In suspicuous area, strengthen the filter */
		MAX_VAVGDiff = MAX_VAVGDiff_ROM / SuspicuousMAX_VAVGDiffRatio;
 8002122:	4b5b      	ldr	r3, [pc, #364]	; (8002290 <_filter_Start+0x6a4>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b5b      	ldr	r3, [pc, #364]	; (8002294 <_filter_Start+0x6a8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check the VAVGDiff */
	if (_FilterData(Default_ZeroVal) > _FilterData(NoDelay_ZeroVal))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002138:	429a      	cmp	r2, r3
 800213a:	d906      	bls.n	800214a <_filter_Start+0x55e>
		IdealVAVGDiff = _FilterData(Default_ZeroVal) - _FilterData(NoDelay_ZeroVal);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002148:	e005      	b.n	8002156 <_filter_Start+0x56a>
	else
		IdealVAVGDiff = _FilterData(NoDelay_ZeroVal) - _FilterData(Default_ZeroVal);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (IdealVAVGDiff > MAX_VAVGDiff)
 8002156:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800215a:	429a      	cmp	r2, r3
 800215c:	d904      	bls.n	8002168 <_filter_Start+0x57c>
		MinVAVGDiff = IdealVAVGDiff - MAX_VAVGDiff;
 800215e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	65bb      	str	r3, [r7, #88]	; 0x58
 8002166:	e001      	b.n	800216c <_filter_Start+0x580>
	else
		MinVAVGDiff = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	65bb      	str	r3, [r7, #88]	; 0x58
	MaxVAVGDiff = IdealVAVGDiff + MAX_VAVGDiff;
 800216c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800216e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002170:	4413      	add	r3, r2
 8002172:	623b      	str	r3, [r7, #32]
	if (VAVGDiff < MinVAVGDiff || VAVGDiff > MaxVAVGDiff) {
 8002174:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002178:	429a      	cmp	r2, r3
 800217a:	d303      	bcc.n	8002184 <_filter_Start+0x598>
 800217c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	429a      	cmp	r2, r3
 8002182:	d906      	bls.n	8002192 <_filter_Start+0x5a6>
		WrapAroundFlag = 1;
 8002184:	2301      	movs	r3, #1
 8002186:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		filterErrorCode = RangingFiltered;
 800218a:	2310      	movs	r3, #16
 800218c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002190:	e149      	b.n	8002426 <_filter_Start+0x83a>
	} else {
		/* Go through filtering check */

		if(_FilterData(MeasurementIndex)<=1)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d803      	bhi.n	80021a2 <_filter_Start+0x5b6>
			/* On measurement after a bypass, uses an increase number of samples */
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES_AFTER_FLUSH_OR_BYPASS;
 800219a:	2305      	movs	r3, #5
 800219c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80021a0:	e002      	b.n	80021a8 <_filter_Start+0x5bc>
		else
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES;
 80021a2:	2303      	movs	r3, #3
 80021a4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

		/* StdDevLimit Damper on SNR */
		StdDevLimit = _filter_StdDevDamper(m_rtnAmbientRate, m_rtnSignalRate, StdDevLimitLowLight, StdDevLimitLowLightSNR, StdDevLimitHighLight, StdDevLimitHighLightSNR);
 80021a8:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <_filter_Start+0x6ac>)
 80021aa:	6819      	ldr	r1, [r3, #0]
 80021ac:	4b3b      	ldr	r3, [pc, #236]	; (800229c <_filter_Start+0x6b0>)
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <_filter_Start+0x6b4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a3b      	ldr	r2, [pc, #236]	; (80022a4 <_filter_Start+0x6b8>)
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	9201      	str	r2, [sp, #4]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	4603      	mov	r3, r0
 80021be:	460a      	mov	r2, r1
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80021c6:	f7ff fcd6 	bl	8001b76 <_filter_StdDevDamper>
 80021ca:	6538      	str	r0, [r7, #80]	; 0x50

		/* Standard deviations computations */
		StdDevSamples = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		StdDevDistanceSum = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevDistanceMean = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	67bb      	str	r3, [r7, #120]	; 0x78
		StdDevDistance = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	677b      	str	r3, [r7, #116]	; 0x74
		StdDevRateSum = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	673b      	str	r3, [r7, #112]	; 0x70
		StdDevRateMean = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	66fb      	str	r3, [r7, #108]	; 0x6c
		StdDevRate = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 80021ea:	2300      	movs	r3, #0
 80021ec:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80021f0:	e029      	b.n	8002246 <_filter_Start+0x65a>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 80021f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	3310      	adds	r3, #16
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	889b      	ldrh	r3, [r3, #4]
 8002200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002204:	4293      	cmp	r3, r2
 8002206:	d019      	beq.n	800223c <_filter_Start+0x650>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8002208:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800220c:	3301      	adds	r3, #1
 800220e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8002212:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	3310      	adds	r3, #16
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	889b      	ldrh	r3, [r3, #4]
 8002220:	461a      	mov	r2, r3
 8002222:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002224:	4413      	add	r3, r2
 8002226:	67fb      	str	r3, [r7, #124]	; 0x7c
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8002228:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	330c      	adds	r3, #12
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002238:	4413      	add	r3, r2
 800223a:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 800223c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002240:	3301      	adds	r3, #1
 8002242:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002246:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800224a:	2b09      	cmp	r3, #9
 800224c:	d803      	bhi.n	8002256 <_filter_Start+0x66a>
 800224e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002252:	2b05      	cmp	r3, #5
 8002254:	d9cd      	bls.n	80021f2 <_filter_Start+0x606>
			}
		}
		if (StdDevSamples > 0) {
 8002256:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <_filter_Start+0x68a>
			StdDevDistanceMean = (uint32_t) (StdDevDistanceSum / StdDevSamples);
 800225e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002262:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	67bb      	str	r3, [r7, #120]	; 0x78
			StdDevRateMean = (uint32_t) (StdDevRateSum / StdDevSamples);
 800226a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800226e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		/* TODO optimize shorten Std dev in aisngle loop computation using sum of x2 - (sum of x)2 */
		StdDevSamples = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		StdDevDistanceSum = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevRateSum = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002284:	2300      	movs	r3, #0
 8002286:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800228a:	e056      	b.n	800233a <_filter_Start+0x74e>
 800228c:	08005216 	.word	0x08005216
 8002290:	08005218 	.word	0x08005218
 8002294:	0800521c 	.word	0x0800521c
 8002298:	08005220 	.word	0x08005220
 800229c:	08005224 	.word	0x08005224
 80022a0:	08005228 	.word	0x08005228
 80022a4:	0800522c 	.word	0x0800522c
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 80022a8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	3310      	adds	r3, #16
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	889b      	ldrh	r3, [r3, #4]
 80022b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d038      	beq.n	8002330 <_filter_Start+0x744>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 80022be:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80022c2:	3301      	adds	r3, #1
 80022c4:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
									(int)(_FilterData(LastTrueRange)[i] -
 80022c8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	3310      	adds	r3, #16
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	889b      	ldrh	r3, [r3, #4]
 80022d6:	461a      	mov	r2, r3
 80022d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	4619      	mov	r1, r3
											StdDevDistanceMean) *
											(int) (_FilterData(LastTrueRange)[i] -
 80022de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	3310      	adds	r3, #16
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	889b      	ldrh	r3, [r3, #4]
 80022ec:	461a      	mov	r2, r3
 80022ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022f0:	1ad3      	subs	r3, r2, r3
											StdDevDistanceMean) *
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	461a      	mov	r2, r3
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 80022f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022fa:	4413      	add	r3, r2
 80022fc:	67fb      	str	r3, [r7, #124]	; 0x7c
													StdDevDistanceMean));
				StdDevRateSum = (uint32_t) (StdDevRateSum +
									(int) (_FilterData(LastReturnRates)[i] -
 80022fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	330c      	adds	r3, #12
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	4619      	mov	r1, r3
											StdDevRateMean) *
											(int) (_FilterData(LastReturnRates)[i] -
 8002312:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	330c      	adds	r3, #12
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002322:	1ad3      	subs	r3, r2, r3
											StdDevRateMean) *
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	461a      	mov	r2, r3
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 800232a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800232c:	4413      	add	r3, r2
 800232e:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8002330:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002334:	3301      	adds	r3, #1
 8002336:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800233a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800233e:	2b09      	cmp	r3, #9
 8002340:	d803      	bhi.n	800234a <_filter_Start+0x75e>
 8002342:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002346:	2b05      	cmp	r3, #5
 8002348:	d9ae      	bls.n	80022a8 <_filter_Start+0x6bc>
													StdDevRateMean));
			}
		}
		if (StdDevSamples >= StdDevSamplesMinNeeded) {
 800234a:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800234e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002352:	429a      	cmp	r2, r3
 8002354:	d30e      	bcc.n	8002374 <_filter_Start+0x788>
			StdDevDistance = (uint16_t) (StdDevDistanceSum / StdDevSamples);
 8002356:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800235a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	b29b      	uxth	r3, r3
 8002362:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = (uint16_t) (StdDevRateSum / StdDevSamples);
 8002364:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002368:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	b29b      	uxth	r3, r3
 8002370:	66bb      	str	r3, [r7, #104]	; 0x68
 8002372:	e003      	b.n	800237c <_filter_Start+0x790>
		} else {
			StdDevDistance = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		/* Check Return rate standard deviation */
		if (StdDevRate < StdDevMovingTargetStdDevLimit) {
 800237c:	4b76      	ldr	r3, [pc, #472]	; (8002558 <_filter_Start+0x96c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002382:	429a      	cmp	r2, r3
 8002384:	d249      	bcs.n	800241a <_filter_Start+0x82e>
			if (StdDevSamples < StdDevSamplesMinNeeded) {
 8002386:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800238a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800238e:	429a      	cmp	r2, r3
 8002390:	d203      	bcs.n	800239a <_filter_Start+0x7ae>
				//m_newTrueRange_mm = MaxOrInvalidDistance;
				filterErrorCode = RangingFiltered;
 8002392:	2310      	movs	r3, #16
 8002394:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002398:	e045      	b.n	8002426 <_filter_Start+0x83a>
			} else {
				/* Check distance standard deviation */
				if (StdDevRate < StdDevMovingTargetReturnRateLimit)
 800239a:	4b70      	ldr	r3, [pc, #448]	; (800255c <_filter_Start+0x970>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d20e      	bcs.n	80023c2 <_filter_Start+0x7d6>
					StdDevLimitWithTargetMove = StdDevLimit +
						(((StdDevMovingTargetStdDevForReturnRateLimit -
 80023a4:	4b6e      	ldr	r3, [pc, #440]	; (8002560 <_filter_Start+0x974>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023aa:	1ad3      	subs	r3, r2, r3
							StdDevLimit) * StdDevRate) /
 80023ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80023ae:	fb03 f202 	mul.w	r2, r3, r2
 80023b2:	4b6a      	ldr	r3, [pc, #424]	; (800255c <_filter_Start+0x970>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
					StdDevLimitWithTargetMove = StdDevLimit +
 80023ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80023bc:	4413      	add	r3, r2
 80023be:	667b      	str	r3, [r7, #100]	; 0x64
 80023c0:	e002      	b.n	80023c8 <_filter_Start+0x7dc>
							StdDevMovingTargetReturnRateLimit);
				else
					StdDevLimitWithTargetMove = StdDevMovingTargetStdDevForReturnRateLimit;
 80023c2:	4b67      	ldr	r3, [pc, #412]	; (8002560 <_filter_Start+0x974>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	667b      	str	r3, [r7, #100]	; 0x64

				if(_FilterData(filterError)==NoError){
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <_filter_Start+0x7f0>
					/* No wrapAround detected yet, so relax constraints on the std dev */
					StdDevLimitWithTargetMove = StdDevLimitWithTargetMove * StdDevNoWrapDetectedMultiplier;
 80023d0:	4b64      	ldr	r3, [pc, #400]	; (8002564 <_filter_Start+0x978>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023d6:	fb02 f303 	mul.w	r3, r2, r3
 80023da:	667b      	str	r3, [r7, #100]	; 0x64
				}

				if (((StdDevDistance * StdDevHighConfidenceSNRLimit) < StdDevLimit) && (StdDevSamples>=FILTER_STDDEV_SAMPLES)) {
 80023dc:	4b62      	ldr	r3, [pc, #392]	; (8002568 <_filter_Start+0x97c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d907      	bls.n	80023fc <_filter_Start+0x810>
 80023ec:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d903      	bls.n	80023fc <_filter_Start+0x810>
					NoWrapAroundHighConfidenceFlag = 1;
 80023f4:	2301      	movs	r3, #1
 80023f6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80023fa:	e014      	b.n	8002426 <_filter_Start+0x83a>
				} else {
					if (StdDevDistance < StdDevLimitWithTargetMove) {
 80023fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80023fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002400:	429a      	cmp	r2, r3
 8002402:	d203      	bcs.n	800240c <_filter_Start+0x820>
							NoWrapAroundFlag = 1;
 8002404:	2301      	movs	r3, #1
 8002406:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800240a:	e00c      	b.n	8002426 <_filter_Start+0x83a>
						} else {
						WrapAroundFlag = 1;
 800240c:	2301      	movs	r3, #1
 800240e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
						filterErrorCode = RangingFiltered;
 8002412:	2310      	movs	r3, #16
 8002414:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002418:	e005      	b.n	8002426 <_filter_Start+0x83a>
					}
				}
			}
		} else {
			/* Target moving too fast */
			WrapAroundFlag = 1;
 800241a:	2301      	movs	r3, #1
 800241c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			filterErrorCode = RangingFiltered;
 8002420:	2310      	movs	r3, #16
 8002422:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		}
	}

	if (ValidDistance == 0) {
 8002426:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10d      	bne.n	800244a <_filter_Start+0x85e>
		/* In case of invalid distance */
		if (_FilterData(StdFilteredReads) > 0)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002434:	2b00      	cmp	r3, #0
 8002436:	d04e      	beq.n	80024d6 <_filter_Start+0x8ea>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) - 1);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002448:	e045      	b.n	80024d6 <_filter_Start+0x8ea>
	} else {
		if (WrapAroundFlag == 1) {
 800244a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800244e:	2b01      	cmp	r3, #1
 8002450:	d116      	bne.n	8002480 <_filter_Start+0x894>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) +
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002458:	4b44      	ldr	r3, [pc, #272]	; (800256c <_filter_Start+0x980>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	4413      	add	r3, r2
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
											StdFilteredReadsIncrement);
			if (_FilterData(StdFilteredReads) > StdMaxFilteredReads)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800246c:	4b40      	ldr	r3, [pc, #256]	; (8002570 <_filter_Start+0x984>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d930      	bls.n	80024d6 <_filter_Start+0x8ea>
				_FilterData(StdFilteredReads) = StdMaxFilteredReads;
 8002474:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <_filter_Start+0x984>)
 8002476:	881a      	ldrh	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800247e:	e02a      	b.n	80024d6 <_filter_Start+0x8ea>
		} else {
			if (NoWrapAroundFlag == 1) {
 8002480:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002484:	2b01      	cmp	r3, #1
 8002486:	d11e      	bne.n	80024c6 <_filter_Start+0x8da>
				if (_FilterData(StdFilteredReads) > 0) {
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800248e:	2b00      	cmp	r3, #0
 8002490:	d021      	beq.n	80024d6 <_filter_Start+0x8ea>
					filterErrorCode = RangingFiltered;
 8002492:	2310      	movs	r3, #16
 8002494:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					if (_FilterData(StdFilteredReads) > StdFilteredReadsDecrement)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800249e:	4b35      	ldr	r3, [pc, #212]	; (8002574 <_filter_Start+0x988>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d90a      	bls.n	80024bc <_filter_Start+0x8d0>
						_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) -
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80024ac:	4b31      	ldr	r3, [pc, #196]	; (8002574 <_filter_Start+0x988>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80024ba:	e00c      	b.n	80024d6 <_filter_Start+0x8ea>
														StdFilteredReadsDecrement);
					else
						_FilterData(StdFilteredReads) = 0;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80024c4:	e007      	b.n	80024d6 <_filter_Start+0x8ea>
				}
			} else {
				if (NoWrapAroundHighConfidenceFlag == 1) {
 80024c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d103      	bne.n	80024d6 <_filter_Start+0x8ea>
					_FilterData(StdFilteredReads) = 0;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	}

	/* If we detect a change from no Error to RangingFilteringOnGoing, then it means that
	 * the filter detected a change in te scene, so discard all previous measurements.
	 */
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d121      	bne.n	8002522 <_filter_Start+0x936>
 80024de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01d      	beq.n	8002522 <_filter_Start+0x936>
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 80024e6:	2301      	movs	r3, #1
 80024e8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80024ec:	e015      	b.n	800251a <_filter_Start+0x92e>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 80024ee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	3310      	adds	r3, #16
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024fe:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 8002500:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	330c      	adds	r3, #12
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 8002510:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002514:	3301      	adds	r3, #1
 8002516:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800251a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800251e:	2b09      	cmp	r3, #9
 8002520:	d9e5      	bls.n	80024ee <_filter_Start+0x902>
		}
	}

	/* Update filter error code */
	_FilterData(filterError) = filterErrorCode;
 8002522:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	67da      	str	r2, [r3, #124]	; 0x7c

	/* Update reported range */
	if(filterErrorCode==RangingFiltered)
 800252a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800252e:	2b10      	cmp	r3, #16
 8002530:	d102      	bne.n	8002538 <_filter_Start+0x94c>
		m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 8002532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002534:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	return m_newTrueRange_mm;
 8002538:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800253c:	e008      	b.n	8002550 <_filter_Start+0x964>
		goto done_err;
 800253e:	bf00      	nop
 8002540:	e004      	b.n	800254c <_filter_Start+0x960>
		goto done_err;
 8002542:	bf00      	nop
 8002544:	e002      	b.n	800254c <_filter_Start+0x960>
				goto done_err;
 8002546:	bf00      	nop
 8002548:	e000      	b.n	800254c <_filter_Start+0x960>
			goto done_err;
 800254a:	bf00      	nop
done_err:
	return -1;
 800254c:	f04f 33ff 	mov.w	r3, #4294967295

#undef MaxOrInvalidDistance
}
 8002550:	4618      	mov	r0, r3
 8002552:	37a0      	adds	r7, #160	; 0xa0
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	08005230 	.word	0x08005230
 800255c:	08005234 	.word	0x08005234
 8002560:	08005238 	.word	0x08005238
 8002564:	0800523c 	.word	0x0800523c
 8002568:	08005240 	.word	0x08005240
 800256c:	08005244 	.word	0x08005244
 8002570:	08005246 	.word	0x08005246
 8002574:	08005248 	.word	0x08005248

08002578 <_filter_GetResult>:


static int _filter_GetResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b08b      	sub	sp, #44	; 0x2c
 800257c:	af02      	add	r7, sp, #8
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
	uint32_t m_rawRange_mm = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
	int32_t  FilteredRange;
	const uint8_t scaler = _GetUpscale(dev);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7e1b      	ldrb	r3, [r3, #24]
 800258a:	75fb      	strb	r3, [r7, #23]
	uint8_t u8;
	int status;

	do {
		status = VL6180x_GetCachedByte(dev, RESULT_RANGE_RAW, &u8);
 800258c:	f107 030f 	add.w	r3, r7, #15
 8002590:	461a      	mov	r2, r3
 8002592:	2164      	movs	r1, #100	; 0x64
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7fe fe58 	bl	800124a <VL6180x_GetCachedByte>
 800259a:	61f8      	str	r0, [r7, #28]
		if (status) {
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d133      	bne.n	800260a <_filter_GetResult+0x92>
		    VL6180x_ErrLog("RESULT_RANGE_RAW rd fail");
		    break;
		}
		m_rawRange_mm = u8;
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	61bb      	str	r3, [r7, #24]

		FilteredRange = _filter_Start(dev, pRangeData->range_mm, (m_rawRange_mm * scaler), pRangeData->rtnRate, pRangeData->rtnAmbRate, pRangeData->errorStatus);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	b299      	uxth	r1, r3
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	b292      	uxth	r2, r2
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	b298      	uxth	r0, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	691c      	ldr	r4, [r3, #16]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	6892      	ldr	r2, [r2, #8]
 80025c6:	b292      	uxth	r2, r2
 80025c8:	9201      	str	r2, [sp, #4]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	4623      	mov	r3, r4
 80025ce:	4602      	mov	r2, r0
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff fb0b 	bl	8001bec <_filter_Start>
 80025d6:	6138      	str	r0, [r7, #16]
		if (FilteredRange < 0) {
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	da03      	bge.n	80025e6 <_filter_GetResult+0x6e>
		    status = -1;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
 80025e2:	61fb      	str	r3, [r7, #28]
		    break;
 80025e4:	e012      	b.n	800260c <_filter_GetResult+0x94>
		}
		pRangeData->FilteredData.range_mm = FilteredRange;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	841a      	strh	r2, [r3, #32]
		pRangeData->FilteredData.rawRange_mm = m_rawRange_mm * scaler;
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	b292      	uxth	r2, r2
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	845a      	strh	r2, [r3, #34]	; 0x22
		pRangeData->FilteredData.filterError= _FilterData(filterError);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
 8002608:	e000      	b.n	800260c <_filter_GetResult+0x94>
		    break;
 800260a:	bf00      	nop
	} while (0);
	return status;
 800260c:	69fb      	ldr	r3, [r7, #28]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd90      	pop	{r4, r7, pc}

08002616 <_GetRateResult>:
#endif /* VL6180x_WRAP_AROUND_FILTER_SUPPORT */

#ifdef VL6180x_HAVE_RATE_DATA

static int _GetRateResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b08c      	sub	sp, #48	; 0x30
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
	uint32_t m_rtnConvTime = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
	uint32_t m_rtnSignalRate = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t m_rtnAmbientRate = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	623b      	str	r3, [r7, #32]
	uint32_t m_rtnSignalCount = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]
	uint32_t m_rtnAmbientCount = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
	uint32_t m_refConvTime = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]
	uint32_t cRtnSignalCountMax = 0x7FFFFFFF;
 8002638:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800263c:	61fb      	str	r3, [r7, #28]
	uint32_t cDllPeriods = 6;
 800263e:	2306      	movs	r3, #6
 8002640:	61bb      	str	r3, [r7, #24]
	uint32_t calcConvTime = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c

	int status;

	do {
		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_SIGNAL_COUNT, &m_rtnSignalCount);
 8002646:	f107 0310 	add.w	r3, r7, #16
 800264a:	461a      	mov	r2, r3
 800264c:	216c      	movs	r1, #108	; 0x6c
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fd8a 	bl	8001168 <VL6180x_GetCachedDWord>
 8002654:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	d156      	bne.n	800270a <_GetRateResult+0xf4>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_SIGNAL_COUNT rd fail");
			break;
		}
		if (m_rtnSignalCount > cRtnSignalCountMax) {
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	429a      	cmp	r2, r3
 8002662:	d201      	bcs.n	8002668 <_GetRateResult+0x52>
			m_rtnSignalCount = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_AMB_COUNT, &m_rtnAmbientCount);
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	461a      	mov	r2, r3
 800266e:	2174      	movs	r1, #116	; 0x74
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7fe fd79 	bl	8001168 <VL6180x_GetCachedDWord>
 8002676:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	2b00      	cmp	r3, #0
 800267c:	d147      	bne.n	800270e <_GetRateResult+0xf8>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_AMB_COUNTrd fail");
			break;
		}


		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_CONV_TIME, &m_rtnConvTime);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	461a      	mov	r2, r3
 8002684:	217c      	movs	r1, #124	; 0x7c
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fd6e 	bl	8001168 <VL6180x_GetCachedDWord>
 800268c:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	d13e      	bne.n	8002712 <_GetRateResult+0xfc>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_CONV_TIME rd fail");
			break;
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_REFERENCE_CONV_TIME, &m_refConvTime);
 8002694:	f107 0308 	add.w	r3, r7, #8
 8002698:	461a      	mov	r2, r3
 800269a:	2180      	movs	r1, #128	; 0x80
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7fe fd63 	bl	8001168 <VL6180x_GetCachedDWord>
 80026a2:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d135      	bne.n	8002716 <_GetRateResult+0x100>
			VL6180x_ErrLog("RESULT_RANGE_REFERENCE_CONV_TIME rd fail");
			break;
		}

		pRangeData->rtnConvTime = m_rtnConvTime;
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	615a      	str	r2, [r3, #20]
		pRangeData->refConvTime = m_refConvTime;
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	619a      	str	r2, [r3, #24]

		calcConvTime = m_refConvTime;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (m_rtnConvTime > m_refConvTime) {
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d901      	bls.n	80026c6 <_GetRateResult+0xb0>
			calcConvTime = m_rtnConvTime;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if (calcConvTime == 0)
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <_GetRateResult+0xbc>
			calcConvTime = 63000;
 80026cc:	f24f 6318 	movw	r3, #63000	; 0xf618
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		m_rtnSignalRate = (m_rtnSignalCount * 1000) / calcConvTime;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026d8:	fb03 f202 	mul.w	r2, r3, r2
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
		m_rtnAmbientRate = (m_rtnAmbientCount * cDllPeriods * 1000) / calcConvTime;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026f0:	fb03 f202 	mul.w	r2, r3, r2
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fa:	623b      	str	r3, [r7, #32]

		pRangeData->rtnRate = m_rtnSignalRate;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002700:	611a      	str	r2, [r3, #16]
		pRangeData->rtnAmbRate = m_rtnAmbientRate;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6a3a      	ldr	r2, [r7, #32]
 8002706:	60da      	str	r2, [r3, #12]
 8002708:	e006      	b.n	8002718 <_GetRateResult+0x102>
			break;
 800270a:	bf00      	nop
 800270c:	e004      	b.n	8002718 <_GetRateResult+0x102>
			break;
 800270e:	bf00      	nop
 8002710:	e002      	b.n	8002718 <_GetRateResult+0x102>
			break;
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <_GetRateResult+0x102>
			break;
 8002716:	bf00      	nop


	} while (0);
	return status;
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800271a:	4618      	mov	r0, r3
 800271c:	3730      	adds	r7, #48	; 0x30
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <VL6180x_SqrtUint32>:
/*
 * 32 bit integer square root with not so bad precision (integer result) and is quite fast
 * see http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
 */
uint32_t VL6180x_SqrtUint32(uint32_t num)
{
 8002722:	b480      	push	{r7}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
	uint32_t res = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
	uint32_t bit = 1 << 30; /* The second-to-top bit is set: 1 << 30 for 32 bits */
 800272e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002732:	60bb      	str	r3, [r7, #8]

	/* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8002734:	e002      	b.n	800273c <VL6180x_SqrtUint32+0x1a>
		bit >>= 2;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	d8f8      	bhi.n	8002736 <VL6180x_SqrtUint32+0x14>

	while (bit != 0) {
 8002744:	e017      	b.n	8002776 <VL6180x_SqrtUint32+0x54>
		if (num >= res + bit) {
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4413      	add	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	429a      	cmp	r2, r3
 8002750:	d30b      	bcc.n	800276a <VL6180x_SqrtUint32+0x48>
		    num -= res + bit;
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4413      	add	r3, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	607b      	str	r3, [r7, #4]
		    res = (res >> 1) + bit;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4413      	add	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e002      	b.n	8002770 <VL6180x_SqrtUint32+0x4e>
		} else
		    res >>= 1;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
		bit >>= 2;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1e4      	bne.n	8002746 <VL6180x_SqrtUint32+0x24>
	}
	return res;
 800277c:	68fb      	ldr	r3, [r7, #12]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <_DMax_OneTimeInit>:
#endif


/* DMax one time init */
void _DMax_OneTimeInit(VL6180xDev_t dev)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	_DMaxData(ambTuningWindowFactor_K) = DEF_AMBIENT_TUNING;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2250      	movs	r2, #80	; 0x50
 8002794:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
	...

080027a4 <_DMax_RawValueAtRateKCps>:


static uint32_t _DMax_RawValueAtRateKCps(VL6180xDev_t dev, int32_t rate)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
	uint32_t RawDMax;
	DMaxFix_t retSignalAt400mm;
	uint32_t ambTuningWindowFactor_K;


	ambTuningWindowFactor_K = _DMaxData(ambTuningWindowFactor_K);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80027b4:	617b      	str	r3, [r7, #20]
	snrLimit_K              = _DMaxData(snrLimit_K);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80027bc:	613b      	str	r3, [r7, #16]
	retSignalAt400mm        = _DMaxData(retSignalAt400mm);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027c4:	60fb      	str	r3, [r7, #12]
	/* 12 to 18 bits Kcps */
	if (rate > 0) {
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	dd2c      	ble.n	8002826 <_DMax_RawValueAtRateKCps+0x82>
		DMaxSq = 400 * 400 * 1000 / rate - (400 * 400 / 330);
 80027cc:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <_DMax_RawValueAtRateKCps+0x94>)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80027d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80027d8:	61fb      	str	r3, [r7, #28]
		/* K of (1/RtnAmb -1/330 )=> 30bit- (12-18)bit  => 12-18 bits*/
		if (DMaxSq <= 0) {
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	dc02      	bgt.n	80027e6 <_DMax_RawValueAtRateKCps+0x42>
		    RawDMax = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	e022      	b.n	800282c <_DMax_RawValueAtRateKCps+0x88>
		} else {
		    /* value can be more 32 bit so base on raneg apply
			 * retSignalAt400mm before or after division to presevr accuracy */
		    if (DMaxSq < (2 << 12)) {
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ec:	da0b      	bge.n	8002806 <_DMax_RawValueAtRateKCps+0x62>
				DMaxSq = DMaxSq * retSignalAt400mm /
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	4619      	mov	r1, r3
							(snrLimit_K + ambTuningWindowFactor_K);
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	4413      	add	r3, r2
				DMaxSq = DMaxSq * retSignalAt400mm /
 80027fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	e009      	b.n	800281a <_DMax_RawValueAtRateKCps+0x76>
				/* max 12 + 12 to 18 -10 => 12-26 bit */
		    } else {
				DMaxSq = DMaxSq / (snrLimit_K + ambTuningWindowFactor_K) * retSignalAt400mm;
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	6939      	ldr	r1, [r7, #16]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	440b      	add	r3, r1
 800280e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	fb02 f303 	mul.w	r3, r2, r3
 8002818:	61fb      	str	r3, [r7, #28]
				/* 12 to 18 -10 + 12 to 18 *=> 12-26 bit */
		    }
		    RawDMax = VL6180x_SqrtUint32(DMaxSq);
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff80 	bl	8002722 <VL6180x_SqrtUint32>
 8002822:	61b8      	str	r0, [r7, #24]
 8002824:	e002      	b.n	800282c <_DMax_RawValueAtRateKCps+0x88>
		}
	} else {
		RawDMax = 0x7FFFFFFF; /* bigest possibmle 32bit signed value */
 8002826:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800282a:	61bb      	str	r3, [r7, #24]
	}
	return RawDMax;
 800282c:	69bb      	ldr	r3, [r7, #24]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	09896800 	.word	0x09896800

0800283c <_DMax_InitData>:
 *  SYSRANGE_MAX_CONVERGENCE_TIME
 *  SYSRANGE_RANGE_CHECK_ENABLES    mask RANGE_CHECK_RANGE_ENABLE_MASK
 *  range 0xb8-0xbb (0xbb)
 */
static int _DMax_InitData(VL6180xDev_t dev)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08c      	sub	sp, #48	; 0x30
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	int32_t minSignalNeeded;
	uint8_t SysRangeCheckEn;
	uint8_t snrLimit;
	static const int ROMABLE_DATA MaxConvTimeAdjust = -4;

	warning = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");
	do {
		status = VL6180x_RdByte(dev, 0x02A, &u8);
 8002848:	f107 0313 	add.w	r3, r7, #19
 800284c:	461a      	mov	r2, r3
 800284e:	212a      	movs	r1, #42	; 0x2a
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f9c0 	bl	8002bd6 <VL6180x_RdByte>
 8002856:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 8095 	bne.w	800298a <_DMax_InitData+0x14e>
		    VL6180x_ErrLog("Reg 0x02A rd fail");
		    break;
		}

		if (u8 == 0) {
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <_DMax_InitData+0x32>
		    warning = CALIBRATION_WARNING;
 8002866:	2301      	movs	r3, #1
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
		    u8 = 40; /* use a default average value */
 800286a:	2328      	movs	r3, #40	; 0x28
 800286c:	74fb      	strb	r3, [r7, #19]
		}
		Reg2A_KCps = Fix7_2_KCPs(u8); /* convert to KCPs */
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	461a      	mov	r2, r3
 8002872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	09db      	lsrs	r3, r3, #7
 800287c:	61fb      	str	r3, [r7, #28]

		status = VL6180x_RdByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, &SysRangeCheckEn);
 800287e:	f107 030a 	add.w	r3, r7, #10
 8002882:	461a      	mov	r2, r3
 8002884:	212d      	movs	r1, #45	; 0x2d
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f9a5 	bl	8002bd6 <VL6180x_RdByte>
 800288c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d17c      	bne.n	800298e <_DMax_InitData+0x152>
		    VL6180x_ErrLog("SYSRANGE_RANGE_CHECK_ENABLES rd fail ");
		    break;
		}

		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &MaxConvTime);
 8002894:	f107 030b 	add.w	r3, r7, #11
 8002898:	461a      	mov	r2, r3
 800289a:	211c      	movs	r1, #28
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f99a 	bl	8002bd6 <VL6180x_RdByte>
 80028a2:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d173      	bne.n	8002992 <_DMax_InitData+0x156>
		    VL6180x_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail ");
			break;
		}

		status = VL6180x_RdDWord(dev, 0x0B8, &RegB8);
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	461a      	mov	r2, r3
 80028b0:	21b8      	movs	r1, #184	; 0xb8
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f9f8 	bl	8002ca8 <VL6180x_RdDWord>
 80028b8:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d16a      	bne.n	8002996 <_DMax_InitData+0x15a>
		    VL6180x_ErrLog("reg 0x0B8 rd fail ");
		    break;
		}

		status = VL6180x_RdByte(dev, SYSRANGE_MAX_AMBIENT_LEVEL_MULT, &snrLimit);
 80028c0:	f107 0309 	add.w	r3, r7, #9
 80028c4:	461a      	mov	r2, r3
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f984 	bl	8002bd6 <VL6180x_RdByte>
 80028ce:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d161      	bne.n	800299a <_DMax_InitData+0x15e>
		    VL6180x_ErrLog("SYSRANGE_MAX_AMBIENT_LEVEL_MULT rd fail ");
		    break;
		}
		_DMaxData(snrLimit_K) = (int32_t)16 * 1000 / snrLimit;
 80028d6:	7a7b      	ldrb	r3, [r7, #9]
 80028d8:	461a      	mov	r2, r3
 80028da:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80028de:	fb93 f2f2 	sdiv	r2, r3, r2
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		XTalkCompRate_KCps =   VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	61bb      	str	r3, [r7, #24]

		if (Reg2A_KCps >= XTalkCompRate_KCps) {
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d304      	bcc.n	8002900 <_DMax_InitData+0xc4>
		    _DMaxData(retSignalAt400mm) = Reg2A_KCps;
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80028fe:	e003      	b.n	8002908 <_DMax_InitData+0xcc>
		} else{
		    _DMaxData(retSignalAt400mm) = 0;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			/* Reg2A_K - XTalkCompRate_KCp <0 is invalid */
		}

		/* if xtalk range check is off omit it in snr clipping */
		if (SysRangeCheckEn&RANGE_CHECK_RANGE_ENABLE_MASK) {
 8002908:	7abb      	ldrb	r3, [r7, #10]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d013      	beq.n	800293a <_DMax_InitData+0xfe>
		    status = VL6180x_RdWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &u16);
 8002912:	f107 0310 	add.w	r3, r7, #16
 8002916:	461a      	mov	r2, r3
 8002918:	2126      	movs	r1, #38	; 0x26
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f98b 	bl	8002c36 <VL6180x_RdWord>
 8002920:	62f8      	str	r0, [r7, #44]	; 0x2c
		    if (status) {
 8002922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d13a      	bne.n	800299e <_DMax_InitData+0x162>
				VL6180x_ErrLog("SYSRANGE_RANGE_IGNORE_THRESHOLD rd fail ");
				break;
		    }
		    RangeIgnoreThreshold = Fix7_2_KCPs(u16);
 8002928:	8a3b      	ldrh	r3, [r7, #16]
 800292a:	461a      	mov	r2, r3
 800292c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	09db      	lsrs	r3, r3, #7
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
 8002938:	e001      	b.n	800293e <_DMax_InitData+0x102>
		} else{
		    RangeIgnoreThreshold  = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
		}

		minSignalNeeded = (RegB8 * 256) / ((int32_t)MaxConvTime + (int32_t)MaxConvTimeAdjust);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	7afa      	ldrb	r2, [r7, #11]
 8002944:	4611      	mov	r1, r2
 8002946:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <_DMax_InitData+0x178>)
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	440a      	add	r2, r1
 800294c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002950:	623b      	str	r3, [r7, #32]
		/* KCps 8+8 bit -(1 to 6 bit) => 15-10 bit */
		/* minSignalNeeded = max ( minSignalNeeded,  RangeIgnoreThreshold - XTalkCompRate_KCps) */
		if (minSignalNeeded  <= (int32_t)RangeIgnoreThreshold - (int32_t)XTalkCompRate_KCps)
 8002952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	6a3a      	ldr	r2, [r7, #32]
 800295a:	429a      	cmp	r2, r3
 800295c:	dc03      	bgt.n	8002966 <_DMax_InitData+0x12a>
		    minSignalNeeded  =  RangeIgnoreThreshold - XTalkCompRate_KCps;
 800295e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	623b      	str	r3, [r7, #32]

		u32 = (minSignalNeeded*(uint32_t)snrLimit) / 16;
 8002966:	7a7b      	ldrb	r3, [r7, #9]
 8002968:	461a      	mov	r2, r3
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	617b      	str	r3, [r7, #20]
		_DMaxData(ClipSnrLimit) = _DMax_RawValueAtRateKCps(dev, u32);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	4619      	mov	r1, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff13 	bl	80027a4 <_DMax_RawValueAtRateKCps>
 800297e:	4603      	mov	r3, r0
 8002980:	b29a      	uxth	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8002988:	e00a      	b.n	80029a0 <_DMax_InitData+0x164>
		    break;
 800298a:	bf00      	nop
 800298c:	e008      	b.n	80029a0 <_DMax_InitData+0x164>
		    break;
 800298e:	bf00      	nop
 8002990:	e006      	b.n	80029a0 <_DMax_InitData+0x164>
			break;
 8002992:	bf00      	nop
 8002994:	e004      	b.n	80029a0 <_DMax_InitData+0x164>
		    break;
 8002996:	bf00      	nop
 8002998:	e002      	b.n	80029a0 <_DMax_InitData+0x164>
		    break;
 800299a:	bf00      	nop
 800299c:	e000      	b.n	80029a0 <_DMax_InitData+0x164>
				break;
 800299e:	bf00      	nop
		/* clip to dmax to min signal snr limit rate*/
	} while (0);
	if (!status)
 80029a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <_DMax_InitData+0x16e>
		status = warning;
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOG_FUNCTION_END(status);
	return status;
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3730      	adds	r7, #48	; 0x30
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	0800524c 	.word	0x0800524c

080029b8 <_DMax_Compute>:

static int _DMax_Compute(VL6180xDev_t dev, VL6180x_RangeData_t *pRange)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
	int32_t DMax;
	int scaling;
	uint16_t HwLimitAtScale;
	static const int ROMABLE_DATA rtnAmbLowLimit_KCps = 330 * 1000;

	rtnAmbRate = pRange->rtnAmbRate;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	613b      	str	r3, [r7, #16]
	if (rtnAmbRate  < rtnAmbLowLimit_KCps) {
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <_DMax_Compute+0x78>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d224      	bcs.n	8002a1e <_DMax_Compute+0x66>
		DMax = _DMax_RawValueAtRateKCps(dev, rtnAmbRate);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fee3 	bl	80027a4 <_DMax_RawValueAtRateKCps>
 80029de:	4603      	mov	r3, r0
 80029e0:	617b      	str	r3, [r7, #20]
		scaling = _GetUpscale(dev);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7e1b      	ldrb	r3, [r3, #24]
 80029e6:	60fb      	str	r3, [r7, #12]
		HwLimitAtScale = UpperLimitLookUP[scaling - 1];
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <_DMax_Compute+0x7c>)
 80029ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029f2:	817b      	strh	r3, [r7, #10]

		if (DMax > _DMaxData(ClipSnrLimit)) {
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80029fa:	461a      	mov	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	4293      	cmp	r3, r2
 8002a00:	dd03      	ble.n	8002a0a <_DMax_Compute+0x52>
		    DMax = _DMaxData(ClipSnrLimit);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8002a08:	617b      	str	r3, [r7, #20]
		}
		if (DMax > HwLimitAtScale) {
 8002a0a:	897b      	ldrh	r3, [r7, #10]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	dd01      	ble.n	8002a16 <_DMax_Compute+0x5e>
		    DMax = HwLimitAtScale;
 8002a12:	897b      	ldrh	r3, [r7, #10]
 8002a14:	617b      	str	r3, [r7, #20]
		}
		pRange->DMax = DMax;
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	61da      	str	r2, [r3, #28]
 8002a1c:	e002      	b.n	8002a24 <_DMax_Compute+0x6c>
	} else {
		pRange->DMax = 0;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2200      	movs	r2, #0
 8002a22:	61da      	str	r2, [r3, #28]
	}
	return 0;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	08005250 	.word	0x08005250
 8002a34:	080051e8 	.word	0x080051e8

08002a38 <VL6180x_WrByte>:
#else
#error "invalid I2C_BUFFER_CONFIG "
#endif


int VL6180x_WrByte(VL6180xDev_t dev, uint16_t index, uint8_t data){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
 8002a44:	4613      	mov	r3, r2
 8002a46:	707b      	strb	r3, [r7, #1]
    DECL_I2C_BUFFER
    VL6180x_I2C_USER_VAR

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
 8002a48:	f107 0308 	add.w	r3, r7, #8
 8002a4c:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]
    buffer[2]=data;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3302      	adds	r3, #2
 8002a68:	787a      	ldrb	r2, [r7, #1]
 8002a6a:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)3);
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	6979      	ldr	r1, [r7, #20]
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f984 	bl	8002d7e <VL6180x_I2CWrite>
 8002a76:	6138      	str	r0, [r7, #16]
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002a78:	693b      	ldr	r3, [r7, #16]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <VL6180x_WrWord>:

int VL6180x_WrWord(VL6180xDev_t dev, uint16_t index, uint16_t data){
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	807b      	strh	r3, [r7, #2]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	803b      	strh	r3, [r7, #0]
    uint8_t *buffer;
    VL6180x_I2C_USER_VAR

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,4);
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 8002a98:	887b      	ldrh	r3, [r7, #2]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	887a      	ldrh	r2, [r7, #2]
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>8;
 8002aae:	883b      	ldrh	r3, [r7, #0]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	701a      	strb	r2, [r3, #0]
    buffer[3]=data&0xFF;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3303      	adds	r3, #3
 8002ac0:	883a      	ldrh	r2, [r7, #0]
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)4);
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	6979      	ldr	r1, [r7, #20]
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f957 	bl	8002d7e <VL6180x_I2CWrite>
 8002ad0:	6138      	str	r0, [r7, #16]
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002ad2:	693b      	ldr	r3, [r7, #16]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <VL6180x_WrDWord>:

int VL6180x_WrDWord(VL6180xDev_t dev, uint16_t index, uint32_t data){
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	817b      	strh	r3, [r7, #10]
    int  status;
    uint8_t *buffer;


    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,6);
 8002aea:	f107 0310 	add.w	r3, r7, #16
 8002aee:	61fb      	str	r3, [r7, #28]
    buffer[0]=index>>8;
 8002af0:	897b      	ldrh	r3, [r7, #10]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	3301      	adds	r3, #1
 8002b00:	897a      	ldrh	r2, [r7, #10]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>24;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0e1a      	lsrs	r2, r3, #24
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]
    buffer[3]=(data>>16)&0xFF;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	0c1a      	lsrs	r2, r3, #16
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3303      	adds	r3, #3
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]
    buffer[4]=(data>>8)&0xFF;;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	0a1a      	lsrs	r2, r3, #8
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3304      	adds	r3, #4
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]
    buffer[5]=data&0xFF;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3305      	adds	r3, #5
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]
    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)6);
 8002b34:	2206      	movs	r2, #6
 8002b36:	69f9      	ldr	r1, [r7, #28]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f920 	bl	8002d7e <VL6180x_I2CWrite>
 8002b3e:	61b8      	str	r0, [r7, #24]
    VL6180x_DoneI2CAcces(dev);

    return status;
 8002b40:	69bb      	ldr	r3, [r7, #24]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <VL6180x_UpdateByte>:

int VL6180x_UpdateByte(VL6180xDev_t dev, uint16_t index, uint8_t AndData, uint8_t OrData){
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b086      	sub	sp, #24
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	4608      	mov	r0, r1
 8002b54:	4611      	mov	r1, r2
 8002b56:	461a      	mov	r2, r3
 8002b58:	4603      	mov	r3, r0
 8002b5a:	807b      	strh	r3, [r7, #2]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	707b      	strb	r3, [r7, #1]
 8002b60:	4613      	mov	r3, r2
 8002b62:	703b      	strb	r3, [r7, #0]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
 8002b64:	f107 0308 	add.w	r3, r7, #8
 8002b68:	613b      	str	r3, [r7, #16]
    buffer[0]=index>>8;
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *)buffer,(uint8_t)2);
 8002b80:	2202      	movs	r2, #2
 8002b82:	6939      	ldr	r1, [r7, #16]
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f8fa 	bl	8002d7e <VL6180x_I2CWrite>
 8002b8a:	6178      	str	r0, [r7, #20]
    if( !status ){
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d11c      	bne.n	8002bcc <VL6180x_UpdateByte+0x82>
        /* read data direct onto buffer */
        status=VL6180x_I2CRead(dev, &buffer[2],1);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	3302      	adds	r3, #2
 8002b96:	2201      	movs	r2, #1
 8002b98:	4619      	mov	r1, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f931 	bl	8002e02 <VL6180x_I2CRead>
 8002ba0:	6178      	str	r0, [r7, #20]
        if( !status ){
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d111      	bne.n	8002bcc <VL6180x_UpdateByte+0x82>
            buffer[2]=(buffer[2]&AndData)|OrData;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	3302      	adds	r3, #2
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	787b      	ldrb	r3, [r7, #1]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	b2d9      	uxtb	r1, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	783a      	ldrb	r2, [r7, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	701a      	strb	r2, [r3, #0]
            status=VL6180x_I2CWrite(dev, buffer, (uint8_t)3);
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	6939      	ldr	r1, [r7, #16]
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f8da 	bl	8002d7e <VL6180x_I2CWrite>
 8002bca:	6178      	str	r0, [r7, #20]
        }
    }

    VL6180x_DoneI2CAcces(dev);

    return status;
 8002bcc:	697b      	ldr	r3, [r7, #20]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <VL6180x_RdByte>:

int VL6180x_RdByte(VL6180xDev_t dev, uint16_t index, uint8_t *data){
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b088      	sub	sp, #32
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	460b      	mov	r3, r1
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	817b      	strh	r3, [r7, #10]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);//为buffer分配地址
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	61bb      	str	r3, [r7, #24]
    buffer[0]=index>>8;//将寄存器地址高8位存入buffer[0]
 8002bea:	897b      	ldrh	r3, [r7, #10]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;//将寄存器地址低8位存入buffer[1]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	897a      	ldrh	r2, [r7, #10]
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]
    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);//向I2C总线发送设备地址及16位寄存器地址
 8002c00:	2202      	movs	r2, #2
 8002c02:	69b9      	ldr	r1, [r7, #24]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f8ba 	bl	8002d7e <VL6180x_I2CWrite>
 8002c0a:	61f8      	str	r0, [r7, #28]
    if( !status ){
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10c      	bne.n	8002c2c <VL6180x_RdByte+0x56>
        status=VL6180x_I2CRead(dev, buffer,1);//读取该寄存器中的值，并将其返回到buffer中
 8002c12:	2201      	movs	r2, #1
 8002c14:	69b9      	ldr	r1, [r7, #24]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f8f3 	bl	8002e02 <VL6180x_I2CRead>
 8002c1c:	61f8      	str	r0, [r7, #28]
        if( !status ){
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d103      	bne.n	8002c2c <VL6180x_RdByte+0x56>
            *data = (uint8_t)buffer[0];//将buffer中的值传给data
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	781a      	ldrb	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	701a      	strb	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);

    return status;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3720      	adds	r7, #32
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <VL6180x_RdWord>:

int VL6180x_RdWord(VL6180xDev_t dev, uint16_t index, uint16_t *data){
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b088      	sub	sp, #32
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	817b      	strh	r3, [r7, #10]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);
 8002c44:	f107 0310 	add.w	r3, r7, #16
 8002c48:	61bb      	str	r3, [r7, #24]
    buffer[0]=index>>8;
 8002c4a:	897b      	ldrh	r3, [r7, #10]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	897a      	ldrh	r2, [r7, #10]
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);
 8002c60:	2202      	movs	r2, #2
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f88a 	bl	8002d7e <VL6180x_I2CWrite>
 8002c6a:	61f8      	str	r0, [r7, #28]
    if( !status){
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d115      	bne.n	8002c9e <VL6180x_RdWord+0x68>
        status=VL6180x_I2CRead(dev, buffer,2);
 8002c72:	2202      	movs	r2, #2
 8002c74:	69b9      	ldr	r1, [r7, #24]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f8c3 	bl	8002e02 <VL6180x_I2CRead>
 8002c7c:	61f8      	str	r0, [r7, #28]
        if( !status ){
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10c      	bne.n	8002c9e <VL6180x_RdWord+0x68>
            /* VL6180x register are Big endian if cpu is be direct read direct into *data is possible */
            *data=((uint16_t)buffer[0]<<8)|(uint16_t)buffer[1];
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	b21a      	sxth	r2, r3
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b21b      	sxth	r3, r3
 8002c94:	4313      	orrs	r3, r2
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	801a      	strh	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3720      	adds	r7, #32
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <VL6180x_RdDWord>:

int  VL6180x_RdDWord(VL6180xDev_t dev, uint16_t index, uint32_t *data){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	817b      	strh	r3, [r7, #10]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,4);
 8002cb6:	f107 0310 	add.w	r3, r7, #16
 8002cba:	61bb      	str	r3, [r7, #24]

    buffer[0]=index>>8;
 8002cbc:	897b      	ldrh	r3, [r7, #10]
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	897a      	ldrh	r2, [r7, #10]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	69b9      	ldr	r1, [r7, #24]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f851 	bl	8002d7e <VL6180x_I2CWrite>
 8002cdc:	61f8      	str	r0, [r7, #28]
    if( !status ){
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11b      	bne.n	8002d1c <VL6180x_RdDWord+0x74>
        status=VL6180x_I2CRead(dev, buffer,4);
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f88a 	bl	8002e02 <VL6180x_I2CRead>
 8002cee:	61f8      	str	r0, [r7, #28]
        if( !status ){
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d112      	bne.n	8002d1c <VL6180x_RdDWord+0x74>
            /* VL6180x register are Big endian if cpu is be direct read direct into data is possible */
            *data=((uint32_t)buffer[0]<<24)|((uint32_t)buffer[1]<<16)|((uint32_t)buffer[2]<<8)|((uint32_t)buffer[3]);
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	061a      	lsls	r2, r3, #24
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	041b      	lsls	r3, r3, #16
 8002d04:	431a      	orrs	r2, r3
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	3302      	adds	r3, #2
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	3203      	adds	r2, #3
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	601a      	str	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3720      	adds	r7, #32
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <VL6180x_RdMulti>:


int  VL6180x_RdMulti(VL6180xDev_t dev, uint16_t index, uint8_t *data, int nData){
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b088      	sub	sp, #32
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	460b      	mov	r3, r1
 8002d34:	817b      	strh	r3, [r7, #10]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,2);
 8002d36:	f107 0310 	add.w	r3, r7, #16
 8002d3a:	61bb      	str	r3, [r7, #24]

    buffer[0]=index>>8;
 8002d3c:	897b      	ldrh	r3, [r7, #10]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	897a      	ldrh	r2, [r7, #10]
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 8002d52:	2202      	movs	r2, #2
 8002d54:	69b9      	ldr	r1, [r7, #24]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f811 	bl	8002d7e <VL6180x_I2CWrite>
 8002d5c:	61f8      	str	r0, [r7, #28]
    if( !status ){
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d107      	bne.n	8002d74 <VL6180x_RdMulti+0x4e>
        status=VL6180x_I2CRead(dev, data, nData);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f848 	bl	8002e02 <VL6180x_I2CRead>
 8002d72:	61f8      	str	r0, [r7, #28]
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002d74:	69fb      	ldr	r3, [r7, #28]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <VL6180x_I2CWrite>:
  I2C_Stop();//关闭I2C总线
  return status = 0;
}
#else
int VL6180x_I2CWrite(VL6180xDev_t dev, uint8_t *buff, uint8_t len)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71fb      	strb	r3, [r7, #7]
  int status, i;
  I2C_Start();//开启I2C总线
 8002d8c:	f7fd f9f0 	bl	8000170 <I2C_Start>
  I2C_SendByte(dev->i2c_dev_addr | 0);//发送8位设备地址及LSB的写方向位，实现写功能
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fa22 	bl	80001e0 <I2C_SendByte>
  if (I2C_WaitAck())//如果从机没有应答
 8002d9c:	f7fd fa9a 	bl	80002d4 <I2C_WaitAck>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <VL6180x_I2CWrite+0x30>
  {
    I2C_Stop();//关闭I2C总线
 8002da6:	f7fd fa03 	bl	80001b0 <I2C_Stop>
    return 1;//返回报错标志
 8002daa:	2301      	movs	r3, #1
 8002dac:	e025      	b.n	8002dfa <VL6180x_I2CWrite+0x7c>
  }
  for (i = 0; i < len; i++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	e01b      	b.n	8002dec <VL6180x_I2CWrite+0x6e>
  {
    I2C_SendByte(buff[i]);//发送buff中的各字节
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	4413      	add	r3, r2
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd fa0f 	bl	80001e0 <I2C_SendByte>
    if (i == len - 1)//在发送最后一个字节的数据时
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d109      	bne.n	8002de0 <VL6180x_I2CWrite+0x62>
    {
      if (I2C_WaitAck())//等待从机应答
 8002dcc:	f7fd fa82 	bl	80002d4 <I2C_WaitAck>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <VL6180x_I2CWrite+0x68>
      {
        I2C_Stop();//关闭I2C总线
 8002dd6:	f7fd f9eb 	bl	80001b0 <I2C_Stop>
        status = 1;//返回报错标志
 8002dda:	2301      	movs	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e002      	b.n	8002de6 <VL6180x_I2CWrite+0x68>
      }
    }
    else
    {
      status = I2C_WaitAck();//返回报错标志
 8002de0:	f7fd fa78 	bl	80002d4 <I2C_WaitAck>
 8002de4:	6178      	str	r0, [r7, #20]
  for (i = 0; i < len; i++)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	3301      	adds	r3, #1
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	dbdf      	blt.n	8002db4 <VL6180x_I2CWrite+0x36>
    }
  }
  I2C_Stop();//关闭I2C总线
 8002df4:	f7fd f9dc 	bl	80001b0 <I2C_Stop>
  return status;
 8002df8:	697b      	ldr	r3, [r7, #20]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <VL6180x_I2CRead>:

/* VL6180X底层驱动函数：读 */
int VL6180x_I2CRead(VL6180xDev_t dev, uint8_t *buff, uint8_t len)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	71fb      	strb	r3, [r7, #7]
  int status, i;
  I2C_Start();//开启I2C总线
 8002e10:	f7fd f9ae 	bl	8000170 <I2C_Start>
  I2C_SendByte(dev->i2c_dev_addr | 1);//发送8位设备地址及LSB的读方向位，实现读功能
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd f9de 	bl	80001e0 <I2C_SendByte>
  I2C_WaitAck();//等待从机应答
 8002e24:	f7fd fa56 	bl	80002d4 <I2C_WaitAck>
  for (i = 0; i < len; i++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e01a      	b.n	8002e64 <VL6180x_I2CRead+0x62>
  {
    if (i == len - 1)//在读取最后一个字节的数据时
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d109      	bne.n	8002e4c <VL6180x_I2CRead+0x4a>
    {
      buff[i] = I2C_ReadByte(0);//读取数据，将其保存于buff[i]，并向从机发送非应答信号，终止数据读取
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fd fa11 	bl	8000260 <I2C_ReadByte>
 8002e3e:	4601      	mov	r1, r0
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	4413      	add	r3, r2
 8002e46:	b2ca      	uxtb	r2, r1
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	e008      	b.n	8002e5e <VL6180x_I2CRead+0x5c>
    }
    else
    {
      buff[i] = I2C_ReadByte(1);//读取数据，将其保存于buff[i]，并向从机发送应答信号，继续读取数据
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f7fd fa07 	bl	8000260 <I2C_ReadByte>
 8002e52:	4601      	mov	r1, r0
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	4413      	add	r3, r2
 8002e5a:	b2ca      	uxtb	r2, r1
 8002e5c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	3301      	adds	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	dbe0      	blt.n	8002e2e <VL6180x_I2CRead+0x2c>
    }
  }
  I2C_Stop();//关闭I2C总线
 8002e6c:	f7fd f9a0 	bl	80001b0 <I2C_Stop>
  return status = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e82:	490d      	ldr	r1, [pc, #52]	; (8002eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e84:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e88:	e002      	b.n	8002e90 <LoopCopyDataInit>

08002e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e8e:	3304      	adds	r3, #4

08002e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e94:	d3f9      	bcc.n	8002e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e98:	4c0a      	ldr	r4, [pc, #40]	; (8002ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e9c:	e001      	b.n	8002ea2 <LoopFillZerobss>

08002e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea0:	3204      	adds	r2, #4

08002ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea4:	d3fb      	bcc.n	8002e9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ea6:	f7fd fea7 	bl	8000bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eaa:	f001 f9a7 	bl	80041fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eae:	f7fd fb61 	bl	8000574 <main>
  bx lr
 8002eb2:	4770      	bx	lr
  ldr r0, =_sdata
 8002eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ebc:	080052f4 	.word	0x080052f4
  ldr r2, =_sbss
 8002ec0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002ec4:	20000e28 	.word	0x20000e28

08002ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ec8:	e7fe      	b.n	8002ec8 <ADC1_2_IRQHandler>
	...

08002ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_Init+0x28>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_Init+0x28>)
 8002ed6:	f043 0310 	orr.w	r3, r3, #16
 8002eda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f000 f92b 	bl	8003138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee2:	200f      	movs	r0, #15
 8002ee4:	f000 f808 	bl	8002ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee8:	f7fd fd42 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40022000 	.word	0x40022000

08002ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f00:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_InitTick+0x54>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <HAL_InitTick+0x58>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f935 	bl	8003186 <HAL_SYSTICK_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e00e      	b.n	8002f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b0f      	cmp	r3, #15
 8002f2a:	d80a      	bhi.n	8002f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295
 8002f34:	f000 f90b 	bl	800314e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f38:	4a06      	ldr	r2, [pc, #24]	; (8002f54 <HAL_InitTick+0x5c>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e000      	b.n	8002f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	20000008 	.word	0x20000008
 8002f54:	20000004 	.word	0x20000004

08002f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_IncTick+0x1c>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_IncTick+0x20>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	4a03      	ldr	r2, [pc, #12]	; (8002f78 <HAL_IncTick+0x20>)
 8002f6a:	6013      	str	r3, [r2, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	20000008 	.word	0x20000008
 8002f78:	20000e14 	.word	0x20000e14

08002f7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f80:	4b02      	ldr	r3, [pc, #8]	; (8002f8c <HAL_GetTick+0x10>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	20000e14 	.word	0x20000e14

08002f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d005      	beq.n	8002fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_Delay+0x44>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fb6:	bf00      	nop
 8002fb8:	f7ff ffe0 	bl	8002f7c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d8f7      	bhi.n	8002fb8 <HAL_Delay+0x28>
  {
  }
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000008 	.word	0x20000008

08002fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300a:	4a04      	ldr	r2, [pc, #16]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	60d3      	str	r3, [r2, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	2b00      	cmp	r3, #0
 800304e:	db0a      	blt.n	8003066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	490c      	ldr	r1, [pc, #48]	; (8003088 <__NVIC_SetPriority+0x4c>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	0112      	lsls	r2, r2, #4
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	440b      	add	r3, r1
 8003060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003064:	e00a      	b.n	800307c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4908      	ldr	r1, [pc, #32]	; (800308c <__NVIC_SetPriority+0x50>)
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	3b04      	subs	r3, #4
 8003074:	0112      	lsls	r2, r2, #4
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	440b      	add	r3, r1
 800307a:	761a      	strb	r2, [r3, #24]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000e100 	.word	0xe000e100
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f1c3 0307 	rsb	r3, r3, #7
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	bf28      	it	cs
 80030ae:	2304      	movcs	r3, #4
 80030b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3304      	adds	r3, #4
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d902      	bls.n	80030c0 <NVIC_EncodePriority+0x30>
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3b03      	subs	r3, #3
 80030be:	e000      	b.n	80030c2 <NVIC_EncodePriority+0x32>
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	401a      	ands	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d8:	f04f 31ff 	mov.w	r1, #4294967295
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	43d9      	mvns	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	4313      	orrs	r3, r2
         );
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3724      	adds	r7, #36	; 0x24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003104:	d301      	bcc.n	800310a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003106:	2301      	movs	r3, #1
 8003108:	e00f      	b.n	800312a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <SysTick_Config+0x40>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003112:	210f      	movs	r1, #15
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	f7ff ff90 	bl	800303c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <SysTick_Config+0x40>)
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003122:	4b04      	ldr	r3, [pc, #16]	; (8003134 <SysTick_Config+0x40>)
 8003124:	2207      	movs	r2, #7
 8003126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	e000e010 	.word	0xe000e010

08003138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff49 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800314e:	b580      	push	{r7, lr}
 8003150:	b086      	sub	sp, #24
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003160:	f7ff ff5e 	bl	8003020 <__NVIC_GetPriorityGrouping>
 8003164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	6978      	ldr	r0, [r7, #20]
 800316c:	f7ff ff90 	bl	8003090 <NVIC_EncodePriority>
 8003170:	4602      	mov	r2, r0
 8003172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff5f 	bl	800303c <__NVIC_SetPriority>
}
 800317e:	bf00      	nop
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ffb0 	bl	80030f4 <SysTick_Config>
 8003194:	4603      	mov	r3, r0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b08b      	sub	sp, #44	; 0x2c
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031aa:	2300      	movs	r3, #0
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031ae:	2300      	movs	r3, #0
 80031b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031b2:	e169      	b.n	8003488 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031b4:	2201      	movs	r2, #1
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	f040 8158 	bne.w	8003482 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4a9a      	ldr	r2, [pc, #616]	; (8003440 <HAL_GPIO_Init+0x2a0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d05e      	beq.n	800329a <HAL_GPIO_Init+0xfa>
 80031dc:	4a98      	ldr	r2, [pc, #608]	; (8003440 <HAL_GPIO_Init+0x2a0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d875      	bhi.n	80032ce <HAL_GPIO_Init+0x12e>
 80031e2:	4a98      	ldr	r2, [pc, #608]	; (8003444 <HAL_GPIO_Init+0x2a4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d058      	beq.n	800329a <HAL_GPIO_Init+0xfa>
 80031e8:	4a96      	ldr	r2, [pc, #600]	; (8003444 <HAL_GPIO_Init+0x2a4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d86f      	bhi.n	80032ce <HAL_GPIO_Init+0x12e>
 80031ee:	4a96      	ldr	r2, [pc, #600]	; (8003448 <HAL_GPIO_Init+0x2a8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d052      	beq.n	800329a <HAL_GPIO_Init+0xfa>
 80031f4:	4a94      	ldr	r2, [pc, #592]	; (8003448 <HAL_GPIO_Init+0x2a8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d869      	bhi.n	80032ce <HAL_GPIO_Init+0x12e>
 80031fa:	4a94      	ldr	r2, [pc, #592]	; (800344c <HAL_GPIO_Init+0x2ac>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d04c      	beq.n	800329a <HAL_GPIO_Init+0xfa>
 8003200:	4a92      	ldr	r2, [pc, #584]	; (800344c <HAL_GPIO_Init+0x2ac>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d863      	bhi.n	80032ce <HAL_GPIO_Init+0x12e>
 8003206:	4a92      	ldr	r2, [pc, #584]	; (8003450 <HAL_GPIO_Init+0x2b0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d046      	beq.n	800329a <HAL_GPIO_Init+0xfa>
 800320c:	4a90      	ldr	r2, [pc, #576]	; (8003450 <HAL_GPIO_Init+0x2b0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d85d      	bhi.n	80032ce <HAL_GPIO_Init+0x12e>
 8003212:	2b12      	cmp	r3, #18
 8003214:	d82a      	bhi.n	800326c <HAL_GPIO_Init+0xcc>
 8003216:	2b12      	cmp	r3, #18
 8003218:	d859      	bhi.n	80032ce <HAL_GPIO_Init+0x12e>
 800321a:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <HAL_GPIO_Init+0x80>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	0800329b 	.word	0x0800329b
 8003224:	08003275 	.word	0x08003275
 8003228:	08003287 	.word	0x08003287
 800322c:	080032c9 	.word	0x080032c9
 8003230:	080032cf 	.word	0x080032cf
 8003234:	080032cf 	.word	0x080032cf
 8003238:	080032cf 	.word	0x080032cf
 800323c:	080032cf 	.word	0x080032cf
 8003240:	080032cf 	.word	0x080032cf
 8003244:	080032cf 	.word	0x080032cf
 8003248:	080032cf 	.word	0x080032cf
 800324c:	080032cf 	.word	0x080032cf
 8003250:	080032cf 	.word	0x080032cf
 8003254:	080032cf 	.word	0x080032cf
 8003258:	080032cf 	.word	0x080032cf
 800325c:	080032cf 	.word	0x080032cf
 8003260:	080032cf 	.word	0x080032cf
 8003264:	0800327d 	.word	0x0800327d
 8003268:	08003291 	.word	0x08003291
 800326c:	4a79      	ldr	r2, [pc, #484]	; (8003454 <HAL_GPIO_Init+0x2b4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003272:	e02c      	b.n	80032ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	623b      	str	r3, [r7, #32]
          break;
 800327a:	e029      	b.n	80032d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	3304      	adds	r3, #4
 8003282:	623b      	str	r3, [r7, #32]
          break;
 8003284:	e024      	b.n	80032d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	3308      	adds	r3, #8
 800328c:	623b      	str	r3, [r7, #32]
          break;
 800328e:	e01f      	b.n	80032d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	330c      	adds	r3, #12
 8003296:	623b      	str	r3, [r7, #32]
          break;
 8003298:	e01a      	b.n	80032d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032a2:	2304      	movs	r3, #4
 80032a4:	623b      	str	r3, [r7, #32]
          break;
 80032a6:	e013      	b.n	80032d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032b0:	2308      	movs	r3, #8
 80032b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	611a      	str	r2, [r3, #16]
          break;
 80032ba:	e009      	b.n	80032d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032bc:	2308      	movs	r3, #8
 80032be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	615a      	str	r2, [r3, #20]
          break;
 80032c6:	e003      	b.n	80032d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032c8:	2300      	movs	r3, #0
 80032ca:	623b      	str	r3, [r7, #32]
          break;
 80032cc:	e000      	b.n	80032d0 <HAL_GPIO_Init+0x130>
          break;
 80032ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2bff      	cmp	r3, #255	; 0xff
 80032d4:	d801      	bhi.n	80032da <HAL_GPIO_Init+0x13a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	e001      	b.n	80032de <HAL_GPIO_Init+0x13e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3304      	adds	r3, #4
 80032de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2bff      	cmp	r3, #255	; 0xff
 80032e4:	d802      	bhi.n	80032ec <HAL_GPIO_Init+0x14c>
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	e002      	b.n	80032f2 <HAL_GPIO_Init+0x152>
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	3b08      	subs	r3, #8
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	210f      	movs	r1, #15
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	401a      	ands	r2, r3
 8003304:	6a39      	ldr	r1, [r7, #32]
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	fa01 f303 	lsl.w	r3, r1, r3
 800330c:	431a      	orrs	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80b1 	beq.w	8003482 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003320:	4b4d      	ldr	r3, [pc, #308]	; (8003458 <HAL_GPIO_Init+0x2b8>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	4a4c      	ldr	r2, [pc, #304]	; (8003458 <HAL_GPIO_Init+0x2b8>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6193      	str	r3, [r2, #24]
 800332c:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <HAL_GPIO_Init+0x2b8>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003338:	4a48      	ldr	r2, [pc, #288]	; (800345c <HAL_GPIO_Init+0x2bc>)
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	3302      	adds	r3, #2
 8003340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003344:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	220f      	movs	r2, #15
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4013      	ands	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a40      	ldr	r2, [pc, #256]	; (8003460 <HAL_GPIO_Init+0x2c0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d013      	beq.n	800338c <HAL_GPIO_Init+0x1ec>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a3f      	ldr	r2, [pc, #252]	; (8003464 <HAL_GPIO_Init+0x2c4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00d      	beq.n	8003388 <HAL_GPIO_Init+0x1e8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a3e      	ldr	r2, [pc, #248]	; (8003468 <HAL_GPIO_Init+0x2c8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d007      	beq.n	8003384 <HAL_GPIO_Init+0x1e4>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a3d      	ldr	r2, [pc, #244]	; (800346c <HAL_GPIO_Init+0x2cc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_GPIO_Init+0x1e0>
 800337c:	2303      	movs	r3, #3
 800337e:	e006      	b.n	800338e <HAL_GPIO_Init+0x1ee>
 8003380:	2304      	movs	r3, #4
 8003382:	e004      	b.n	800338e <HAL_GPIO_Init+0x1ee>
 8003384:	2302      	movs	r3, #2
 8003386:	e002      	b.n	800338e <HAL_GPIO_Init+0x1ee>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <HAL_GPIO_Init+0x1ee>
 800338c:	2300      	movs	r3, #0
 800338e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003390:	f002 0203 	and.w	r2, r2, #3
 8003394:	0092      	lsls	r2, r2, #2
 8003396:	4093      	lsls	r3, r2
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800339e:	492f      	ldr	r1, [pc, #188]	; (800345c <HAL_GPIO_Init+0x2bc>)
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d006      	beq.n	80033c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033b8:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	492c      	ldr	r1, [pc, #176]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]
 80033c4:	e006      	b.n	80033d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033c6:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	4928      	ldr	r1, [pc, #160]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d006      	beq.n	80033ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033e0:	4b23      	ldr	r3, [pc, #140]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	4922      	ldr	r1, [pc, #136]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
 80033ec:	e006      	b.n	80033fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	491e      	ldr	r1, [pc, #120]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d006      	beq.n	8003416 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003408:	4b19      	ldr	r3, [pc, #100]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	4918      	ldr	r1, [pc, #96]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	4313      	orrs	r3, r2
 8003412:	608b      	str	r3, [r1, #8]
 8003414:	e006      	b.n	8003424 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003416:	4b16      	ldr	r3, [pc, #88]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	43db      	mvns	r3, r3
 800341e:	4914      	ldr	r1, [pc, #80]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 8003420:	4013      	ands	r3, r2
 8003422:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d021      	beq.n	8003474 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003430:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	490e      	ldr	r1, [pc, #56]	; (8003470 <HAL_GPIO_Init+0x2d0>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	60cb      	str	r3, [r1, #12]
 800343c:	e021      	b.n	8003482 <HAL_GPIO_Init+0x2e2>
 800343e:	bf00      	nop
 8003440:	10320000 	.word	0x10320000
 8003444:	10310000 	.word	0x10310000
 8003448:	10220000 	.word	0x10220000
 800344c:	10210000 	.word	0x10210000
 8003450:	10120000 	.word	0x10120000
 8003454:	10110000 	.word	0x10110000
 8003458:	40021000 	.word	0x40021000
 800345c:	40010000 	.word	0x40010000
 8003460:	40010800 	.word	0x40010800
 8003464:	40010c00 	.word	0x40010c00
 8003468:	40011000 	.word	0x40011000
 800346c:	40011400 	.word	0x40011400
 8003470:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_GPIO_Init+0x304>)
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	43db      	mvns	r3, r3
 800347c:	4909      	ldr	r1, [pc, #36]	; (80034a4 <HAL_GPIO_Init+0x304>)
 800347e:	4013      	ands	r3, r2
 8003480:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	3301      	adds	r3, #1
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	f47f ae8e 	bne.w	80031b4 <HAL_GPIO_Init+0x14>
  }
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	372c      	adds	r7, #44	; 0x2c
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	40010400 	.word	0x40010400

080034a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	887b      	ldrh	r3, [r7, #2]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	e001      	b.n	80034ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	460b      	mov	r3, r1
 80034e0:	807b      	strh	r3, [r7, #2]
 80034e2:	4613      	mov	r3, r2
 80034e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034e6:	787b      	ldrb	r3, [r7, #1]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ec:	887a      	ldrh	r2, [r7, #2]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034f2:	e003      	b.n	80034fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034f4:	887b      	ldrh	r3, [r7, #2]
 80034f6:	041a      	lsls	r2, r3, #16
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	611a      	str	r2, [r3, #16]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
	...

08003508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e272      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 8087 	beq.w	8003636 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003528:	4b92      	ldr	r3, [pc, #584]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b04      	cmp	r3, #4
 8003532:	d00c      	beq.n	800354e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003534:	4b8f      	ldr	r3, [pc, #572]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	2b08      	cmp	r3, #8
 800353e:	d112      	bne.n	8003566 <HAL_RCC_OscConfig+0x5e>
 8003540:	4b8c      	ldr	r3, [pc, #560]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354c:	d10b      	bne.n	8003566 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800354e:	4b89      	ldr	r3, [pc, #548]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d06c      	beq.n	8003634 <HAL_RCC_OscConfig+0x12c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d168      	bne.n	8003634 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e24c      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356e:	d106      	bne.n	800357e <HAL_RCC_OscConfig+0x76>
 8003570:	4b80      	ldr	r3, [pc, #512]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a7f      	ldr	r2, [pc, #508]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	e02e      	b.n	80035dc <HAL_RCC_OscConfig+0xd4>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x98>
 8003586:	4b7b      	ldr	r3, [pc, #492]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a7a      	ldr	r2, [pc, #488]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 800358c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4b78      	ldr	r3, [pc, #480]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a77      	ldr	r2, [pc, #476]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e01d      	b.n	80035dc <HAL_RCC_OscConfig+0xd4>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0xbc>
 80035aa:	4b72      	ldr	r3, [pc, #456]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a71      	ldr	r2, [pc, #452]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b6f      	ldr	r3, [pc, #444]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a6e      	ldr	r2, [pc, #440]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e00b      	b.n	80035dc <HAL_RCC_OscConfig+0xd4>
 80035c4:	4b6b      	ldr	r3, [pc, #428]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a6a      	ldr	r2, [pc, #424]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b68      	ldr	r3, [pc, #416]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a67      	ldr	r2, [pc, #412]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7ff fcca 	bl	8002f7c <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ec:	f7ff fcc6 	bl	8002f7c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e200      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	4b5d      	ldr	r3, [pc, #372]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0xe4>
 800360a:	e014      	b.n	8003636 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7ff fcb6 	bl	8002f7c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7ff fcb2 	bl	8002f7c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1ec      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	4b53      	ldr	r3, [pc, #332]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x10c>
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d063      	beq.n	800370a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003642:	4b4c      	ldr	r3, [pc, #304]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800364e:	4b49      	ldr	r3, [pc, #292]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b08      	cmp	r3, #8
 8003658:	d11c      	bne.n	8003694 <HAL_RCC_OscConfig+0x18c>
 800365a:	4b46      	ldr	r3, [pc, #280]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d116      	bne.n	8003694 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	4b43      	ldr	r3, [pc, #268]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_RCC_OscConfig+0x176>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e1c0      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367e:	4b3d      	ldr	r3, [pc, #244]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4939      	ldr	r1, [pc, #228]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	e03a      	b.n	800370a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d020      	beq.n	80036de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369c:	4b36      	ldr	r3, [pc, #216]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7ff fc6b 	bl	8002f7c <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036aa:	f7ff fc67 	bl	8002f7c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1a1      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	4b2d      	ldr	r3, [pc, #180]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4927      	ldr	r1, [pc, #156]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
 80036dc:	e015      	b.n	800370a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b26      	ldr	r3, [pc, #152]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7ff fc4a 	bl	8002f7c <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ec:	f7ff fc46 	bl	8002f7c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e180      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d03a      	beq.n	800378c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d019      	beq.n	8003752 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371e:	4b17      	ldr	r3, [pc, #92]	; (800377c <HAL_RCC_OscConfig+0x274>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003724:	f7ff fc2a 	bl	8002f7c <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372c:	f7ff fc26 	bl	8002f7c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e160      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800374a:	2001      	movs	r0, #1
 800374c:	f000 fad8 	bl	8003d00 <RCC_Delay>
 8003750:	e01c      	b.n	800378c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003752:	4b0a      	ldr	r3, [pc, #40]	; (800377c <HAL_RCC_OscConfig+0x274>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003758:	f7ff fc10 	bl	8002f7c <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375e:	e00f      	b.n	8003780 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003760:	f7ff fc0c 	bl	8002f7c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d908      	bls.n	8003780 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e146      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
 8003778:	42420000 	.word	0x42420000
 800377c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003780:	4b92      	ldr	r3, [pc, #584]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e9      	bne.n	8003760 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 80a6 	beq.w	80038e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800379a:	2300      	movs	r3, #0
 800379c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379e:	4b8b      	ldr	r3, [pc, #556]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10d      	bne.n	80037c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	4b88      	ldr	r3, [pc, #544]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	4a87      	ldr	r2, [pc, #540]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b4:	61d3      	str	r3, [r2, #28]
 80037b6:	4b85      	ldr	r3, [pc, #532]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c2:	2301      	movs	r3, #1
 80037c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c6:	4b82      	ldr	r3, [pc, #520]	; (80039d0 <HAL_RCC_OscConfig+0x4c8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d118      	bne.n	8003804 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d2:	4b7f      	ldr	r3, [pc, #508]	; (80039d0 <HAL_RCC_OscConfig+0x4c8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a7e      	ldr	r2, [pc, #504]	; (80039d0 <HAL_RCC_OscConfig+0x4c8>)
 80037d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037de:	f7ff fbcd 	bl	8002f7c <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e6:	f7ff fbc9 	bl	8002f7c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b64      	cmp	r3, #100	; 0x64
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e103      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f8:	4b75      	ldr	r3, [pc, #468]	; (80039d0 <HAL_RCC_OscConfig+0x4c8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x312>
 800380c:	4b6f      	ldr	r3, [pc, #444]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4a6e      	ldr	r2, [pc, #440]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6213      	str	r3, [r2, #32]
 8003818:	e02d      	b.n	8003876 <HAL_RCC_OscConfig+0x36e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x334>
 8003822:	4b6a      	ldr	r3, [pc, #424]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4a69      	ldr	r2, [pc, #420]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	6213      	str	r3, [r2, #32]
 800382e:	4b67      	ldr	r3, [pc, #412]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	4a66      	ldr	r2, [pc, #408]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	6213      	str	r3, [r2, #32]
 800383a:	e01c      	b.n	8003876 <HAL_RCC_OscConfig+0x36e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b05      	cmp	r3, #5
 8003842:	d10c      	bne.n	800385e <HAL_RCC_OscConfig+0x356>
 8003844:	4b61      	ldr	r3, [pc, #388]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	4a60      	ldr	r2, [pc, #384]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 800384a:	f043 0304 	orr.w	r3, r3, #4
 800384e:	6213      	str	r3, [r2, #32]
 8003850:	4b5e      	ldr	r3, [pc, #376]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4a5d      	ldr	r2, [pc, #372]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6213      	str	r3, [r2, #32]
 800385c:	e00b      	b.n	8003876 <HAL_RCC_OscConfig+0x36e>
 800385e:	4b5b      	ldr	r3, [pc, #364]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	4a5a      	ldr	r2, [pc, #360]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	6213      	str	r3, [r2, #32]
 800386a:	4b58      	ldr	r3, [pc, #352]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	4a57      	ldr	r2, [pc, #348]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003870:	f023 0304 	bic.w	r3, r3, #4
 8003874:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d015      	beq.n	80038aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387e:	f7ff fb7d 	bl	8002f7c <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003884:	e00a      	b.n	800389c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003886:	f7ff fb79 	bl	8002f7c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	f241 3288 	movw	r2, #5000	; 0x1388
 8003894:	4293      	cmp	r3, r2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e0b1      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389c:	4b4b      	ldr	r3, [pc, #300]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0ee      	beq.n	8003886 <HAL_RCC_OscConfig+0x37e>
 80038a8:	e014      	b.n	80038d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038aa:	f7ff fb67 	bl	8002f7c <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7ff fb63 	bl	8002f7c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e09b      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c8:	4b40      	ldr	r3, [pc, #256]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1ee      	bne.n	80038b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d105      	bne.n	80038e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038da:	4b3c      	ldr	r3, [pc, #240]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	4a3b      	ldr	r2, [pc, #236]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 8087 	beq.w	80039fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f0:	4b36      	ldr	r3, [pc, #216]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d061      	beq.n	80039c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d146      	bne.n	8003992 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003904:	4b33      	ldr	r3, [pc, #204]	; (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390a:	f7ff fb37 	bl	8002f7c <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003912:	f7ff fb33 	bl	8002f7c <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e06d      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003924:	4b29      	ldr	r3, [pc, #164]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f0      	bne.n	8003912 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003938:	d108      	bne.n	800394c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	4921      	ldr	r1, [pc, #132]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003948:	4313      	orrs	r3, r2
 800394a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800394c:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a19      	ldr	r1, [r3, #32]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	430b      	orrs	r3, r1
 800395e:	491b      	ldr	r1, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396a:	f7ff fb07 	bl	8002f7c <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003972:	f7ff fb03 	bl	8002f7c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e03d      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x46a>
 8003990:	e035      	b.n	80039fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7ff faf0 	bl	8002f7c <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a0:	f7ff faec 	bl	8002f7c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e026      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x498>
 80039be:	e01e      	b.n	80039fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e019      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40007000 	.word	0x40007000
 80039d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_RCC_OscConfig+0x500>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d106      	bne.n	80039fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d001      	beq.n	80039fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40021000 	.word	0x40021000

08003a0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0d0      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a20:	4b6a      	ldr	r3, [pc, #424]	; (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d910      	bls.n	8003a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2e:	4b67      	ldr	r3, [pc, #412]	; (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 0207 	bic.w	r2, r3, #7
 8003a36:	4965      	ldr	r1, [pc, #404]	; (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b63      	ldr	r3, [pc, #396]	; (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0b8      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a68:	4b59      	ldr	r3, [pc, #356]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a58      	ldr	r2, [pc, #352]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a80:	4b53      	ldr	r3, [pc, #332]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a52      	ldr	r2, [pc, #328]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8c:	4b50      	ldr	r3, [pc, #320]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	494d      	ldr	r1, [pc, #308]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d040      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d115      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e07f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d107      	bne.n	8003ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aca:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e073      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ada:	4b3d      	ldr	r3, [pc, #244]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e06b      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aea:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f023 0203 	bic.w	r2, r3, #3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4936      	ldr	r1, [pc, #216]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003afc:	f7ff fa3e 	bl	8002f7c <HAL_GetTick>
 8003b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b04:	f7ff fa3a 	bl	8002f7c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e053      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 020c 	and.w	r2, r3, #12
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d1eb      	bne.n	8003b04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d210      	bcs.n	8003b5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 0207 	bic.w	r2, r3, #7
 8003b42:	4922      	ldr	r1, [pc, #136]	; (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e032      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b68:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4916      	ldr	r1, [pc, #88]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	490e      	ldr	r1, [pc, #56]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b9a:	f000 f821 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	490a      	ldr	r1, [pc, #40]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	5ccb      	ldrb	r3, [r1, r3]
 8003bae:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb2:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <HAL_RCC_ClockConfig+0x1cc>)
 8003bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bb6:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_RCC_ClockConfig+0x1d0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff f99c 	bl	8002ef8 <HAL_InitTick>

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40022000 	.word	0x40022000
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	080051c8 	.word	0x080051c8
 8003bd8:	20000000 	.word	0x20000000
 8003bdc:	20000004 	.word	0x20000004

08003be0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be0:	b490      	push	{r4, r7}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003be6:	4b29      	ldr	r3, [pc, #164]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xac>)
 8003be8:	1d3c      	adds	r4, r7, #4
 8003bea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bf0:	f240 2301 	movw	r3, #513	; 0x201
 8003bf4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c0a:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d002      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0x40>
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCC_GetSysClockFreq+0x46>
 8003c1e:	e02b      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c20:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c22:	623b      	str	r3, [r7, #32]
      break;
 8003c24:	e02b      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	0c9b      	lsrs	r3, r3, #18
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	3328      	adds	r3, #40	; 0x28
 8003c30:	443b      	add	r3, r7
 8003c32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d012      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	0c5b      	lsrs	r3, r3, #17
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	3328      	adds	r3, #40	; 0x28
 8003c4e:	443b      	add	r3, r7
 8003c50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	4a0e      	ldr	r2, [pc, #56]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c5a:	fb03 f202 	mul.w	r2, r3, r2
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
 8003c66:	e004      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	4a0b      	ldr	r2, [pc, #44]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c6c:	fb02 f303 	mul.w	r3, r2, r3
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	623b      	str	r3, [r7, #32]
      break;
 8003c76:	e002      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c7a:	623b      	str	r3, [r7, #32]
      break;
 8003c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3728      	adds	r7, #40	; 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc90      	pop	{r4, r7}
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	080051b8 	.word	0x080051b8
 8003c90:	40021000 	.word	0x40021000
 8003c94:	007a1200 	.word	0x007a1200
 8003c98:	003d0900 	.word	0x003d0900

08003c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca0:	4b02      	ldr	r3, [pc, #8]	; (8003cac <HAL_RCC_GetHCLKFreq+0x10>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr
 8003cac:	20000000 	.word	0x20000000

08003cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cb4:	f7ff fff2 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	4903      	ldr	r1, [pc, #12]	; (8003cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	080051d8 	.word	0x080051d8

08003cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cdc:	f7ff ffde 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	0adb      	lsrs	r3, r3, #11
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	4903      	ldr	r1, [pc, #12]	; (8003cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cee:	5ccb      	ldrb	r3, [r1, r3]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	080051d8 	.word	0x080051d8

08003d00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <RCC_Delay+0x34>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <RCC_Delay+0x38>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	0a5b      	lsrs	r3, r3, #9
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d1c:	bf00      	nop
  }
  while (Delay --);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1e5a      	subs	r2, r3, #1
 8003d22:	60fa      	str	r2, [r7, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f9      	bne.n	8003d1c <RCC_Delay+0x1c>
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	20000000 	.word	0x20000000
 8003d38:	10624dd3 	.word	0x10624dd3

08003d3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e03f      	b.n	8003dce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fc fe36 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2224      	movs	r2, #36	; 0x24
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f9a7 	bl	80040d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003da4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003db4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b08a      	sub	sp, #40	; 0x28
 8003dda:	af02      	add	r7, sp, #8
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d17c      	bne.n	8003ef0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_UART_Transmit+0x2c>
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e075      	b.n	8003ef2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_UART_Transmit+0x3e>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e06e      	b.n	8003ef2 <HAL_UART_Transmit+0x11c>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2221      	movs	r2, #33	; 0x21
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e2a:	f7ff f8a7 	bl	8002f7c <HAL_GetTick>
 8003e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	88fa      	ldrh	r2, [r7, #6]
 8003e34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	88fa      	ldrh	r2, [r7, #6]
 8003e3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e44:	d108      	bne.n	8003e58 <HAL_UART_Transmit+0x82>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e003      	b.n	8003e60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e68:	e02a      	b.n	8003ec0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2200      	movs	r2, #0
 8003e72:	2180      	movs	r1, #128	; 0x80
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f8e2 	bl	800403e <UART_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e036      	b.n	8003ef2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10b      	bne.n	8003ea2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	3302      	adds	r3, #2
 8003e9e:	61bb      	str	r3, [r7, #24]
 8003ea0:	e007      	b.n	8003eb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1cf      	bne.n	8003e6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2140      	movs	r1, #64	; 0x40
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 f8b2 	bl	800403e <UART_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e006      	b.n	8003ef2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e000      	b.n	8003ef2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ef0:	2302      	movs	r3, #2
  }
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b08a      	sub	sp, #40	; 0x28
 8003efe:	af02      	add	r7, sp, #8
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4613      	mov	r3, r2
 8003f08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	f040 808c 	bne.w	8004034 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_UART_Receive+0x2e>
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e084      	b.n	8004036 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Receive+0x40>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e07d      	b.n	8004036 <HAL_UART_Receive+0x13c>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2222      	movs	r2, #34	; 0x22
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f56:	f7ff f811 	bl	8002f7c <HAL_GetTick>
 8003f5a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	88fa      	ldrh	r2, [r7, #6]
 8003f60:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	88fa      	ldrh	r2, [r7, #6]
 8003f66:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f70:	d108      	bne.n	8003f84 <HAL_UART_Receive+0x8a>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d104      	bne.n	8003f84 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	e003      	b.n	8003f8c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f94:	e043      	b.n	800401e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2120      	movs	r1, #32
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f84c 	bl	800403e <UART_WaitOnFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e042      	b.n	8004036 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	3302      	adds	r3, #2
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	e01f      	b.n	8004010 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd8:	d007      	beq.n	8003fea <HAL_UART_Receive+0xf0>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <HAL_UART_Receive+0xfe>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	e008      	b.n	800400a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004004:	b2da      	uxtb	r2, r3
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1b6      	bne.n	8003f96 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	e000      	b.n	8004036 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004034:	2302      	movs	r3, #2
  }
}
 8004036:	4618      	mov	r0, r3
 8004038:	3720      	adds	r7, #32
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	603b      	str	r3, [r7, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404e:	e02c      	b.n	80040aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d028      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <UART_WaitOnFlagUntilTimeout+0x30>
 800405e:	f7fe ff8d 	bl	8002f7c <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	429a      	cmp	r2, r3
 800406c:	d21d      	bcs.n	80040aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800407c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e00f      	b.n	80040ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4013      	ands	r3, r2
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	bf0c      	ite	eq
 80040ba:	2301      	moveq	r3, #1
 80040bc:	2300      	movne	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d0c3      	beq.n	8004050 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800410e:	f023 030c 	bic.w	r3, r3, #12
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	430b      	orrs	r3, r1
 800411a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2c      	ldr	r2, [pc, #176]	; (80041e8 <UART_SetConfig+0x114>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d103      	bne.n	8004144 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800413c:	f7ff fdcc 	bl	8003cd8 <HAL_RCC_GetPCLK2Freq>
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	e002      	b.n	800414a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004144:	f7ff fdb4 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
 8004148:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	009a      	lsls	r2, r3, #2
 8004154:	441a      	add	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	4a22      	ldr	r2, [pc, #136]	; (80041ec <UART_SetConfig+0x118>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	0119      	lsls	r1, r3, #4
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009a      	lsls	r2, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004180:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <UART_SetConfig+0x118>)
 8004182:	fba3 0302 	umull	r0, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2064      	movs	r0, #100	; 0x64
 800418a:	fb00 f303 	mul.w	r3, r0, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	3332      	adds	r3, #50	; 0x32
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <UART_SetConfig+0x118>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a0:	4419      	add	r1, r3
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	009a      	lsls	r2, r3, #2
 80041ac:	441a      	add	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041b8:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <UART_SetConfig+0x118>)
 80041ba:	fba3 0302 	umull	r0, r3, r3, r2
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2064      	movs	r0, #100	; 0x64
 80041c2:	fb00 f303 	mul.w	r3, r0, r3
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	3332      	adds	r3, #50	; 0x32
 80041cc:	4a07      	ldr	r2, [pc, #28]	; (80041ec <UART_SetConfig+0x118>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	f003 020f 	and.w	r2, r3, #15
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	440a      	add	r2, r1
 80041de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40013800 	.word	0x40013800
 80041ec:	51eb851f 	.word	0x51eb851f

080041f0 <__errno>:
 80041f0:	4b01      	ldr	r3, [pc, #4]	; (80041f8 <__errno+0x8>)
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	2000000c 	.word	0x2000000c

080041fc <__libc_init_array>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	2600      	movs	r6, #0
 8004200:	4d0c      	ldr	r5, [pc, #48]	; (8004234 <__libc_init_array+0x38>)
 8004202:	4c0d      	ldr	r4, [pc, #52]	; (8004238 <__libc_init_array+0x3c>)
 8004204:	1b64      	subs	r4, r4, r5
 8004206:	10a4      	asrs	r4, r4, #2
 8004208:	42a6      	cmp	r6, r4
 800420a:	d109      	bne.n	8004220 <__libc_init_array+0x24>
 800420c:	f000 ffb6 	bl	800517c <_init>
 8004210:	2600      	movs	r6, #0
 8004212:	4d0a      	ldr	r5, [pc, #40]	; (800423c <__libc_init_array+0x40>)
 8004214:	4c0a      	ldr	r4, [pc, #40]	; (8004240 <__libc_init_array+0x44>)
 8004216:	1b64      	subs	r4, r4, r5
 8004218:	10a4      	asrs	r4, r4, #2
 800421a:	42a6      	cmp	r6, r4
 800421c:	d105      	bne.n	800422a <__libc_init_array+0x2e>
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	f855 3b04 	ldr.w	r3, [r5], #4
 8004224:	4798      	blx	r3
 8004226:	3601      	adds	r6, #1
 8004228:	e7ee      	b.n	8004208 <__libc_init_array+0xc>
 800422a:	f855 3b04 	ldr.w	r3, [r5], #4
 800422e:	4798      	blx	r3
 8004230:	3601      	adds	r6, #1
 8004232:	e7f2      	b.n	800421a <__libc_init_array+0x1e>
 8004234:	080052ec 	.word	0x080052ec
 8004238:	080052ec 	.word	0x080052ec
 800423c:	080052ec 	.word	0x080052ec
 8004240:	080052f0 	.word	0x080052f0

08004244 <memset>:
 8004244:	4603      	mov	r3, r0
 8004246:	4402      	add	r2, r0
 8004248:	4293      	cmp	r3, r2
 800424a:	d100      	bne.n	800424e <memset+0xa>
 800424c:	4770      	bx	lr
 800424e:	f803 1b01 	strb.w	r1, [r3], #1
 8004252:	e7f9      	b.n	8004248 <memset+0x4>

08004254 <iprintf>:
 8004254:	b40f      	push	{r0, r1, r2, r3}
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <iprintf+0x2c>)
 8004258:	b513      	push	{r0, r1, r4, lr}
 800425a:	681c      	ldr	r4, [r3, #0]
 800425c:	b124      	cbz	r4, 8004268 <iprintf+0x14>
 800425e:	69a3      	ldr	r3, [r4, #24]
 8004260:	b913      	cbnz	r3, 8004268 <iprintf+0x14>
 8004262:	4620      	mov	r0, r4
 8004264:	f000 f866 	bl	8004334 <__sinit>
 8004268:	ab05      	add	r3, sp, #20
 800426a:	4620      	mov	r0, r4
 800426c:	9a04      	ldr	r2, [sp, #16]
 800426e:	68a1      	ldr	r1, [r4, #8]
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	f000 f9bb 	bl	80045ec <_vfiprintf_r>
 8004276:	b002      	add	sp, #8
 8004278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800427c:	b004      	add	sp, #16
 800427e:	4770      	bx	lr
 8004280:	2000000c 	.word	0x2000000c

08004284 <std>:
 8004284:	2300      	movs	r3, #0
 8004286:	b510      	push	{r4, lr}
 8004288:	4604      	mov	r4, r0
 800428a:	e9c0 3300 	strd	r3, r3, [r0]
 800428e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004292:	6083      	str	r3, [r0, #8]
 8004294:	8181      	strh	r1, [r0, #12]
 8004296:	6643      	str	r3, [r0, #100]	; 0x64
 8004298:	81c2      	strh	r2, [r0, #14]
 800429a:	6183      	str	r3, [r0, #24]
 800429c:	4619      	mov	r1, r3
 800429e:	2208      	movs	r2, #8
 80042a0:	305c      	adds	r0, #92	; 0x5c
 80042a2:	f7ff ffcf 	bl	8004244 <memset>
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <std+0x38>)
 80042a8:	6224      	str	r4, [r4, #32]
 80042aa:	6263      	str	r3, [r4, #36]	; 0x24
 80042ac:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <std+0x3c>)
 80042ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <std+0x40>)
 80042b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <std+0x44>)
 80042b6:	6323      	str	r3, [r4, #48]	; 0x30
 80042b8:	bd10      	pop	{r4, pc}
 80042ba:	bf00      	nop
 80042bc:	08004b99 	.word	0x08004b99
 80042c0:	08004bbb 	.word	0x08004bbb
 80042c4:	08004bf3 	.word	0x08004bf3
 80042c8:	08004c17 	.word	0x08004c17

080042cc <_cleanup_r>:
 80042cc:	4901      	ldr	r1, [pc, #4]	; (80042d4 <_cleanup_r+0x8>)
 80042ce:	f000 b8af 	b.w	8004430 <_fwalk_reent>
 80042d2:	bf00      	nop
 80042d4:	08004ee9 	.word	0x08004ee9

080042d8 <__sfmoreglue>:
 80042d8:	2268      	movs	r2, #104	; 0x68
 80042da:	b570      	push	{r4, r5, r6, lr}
 80042dc:	1e4d      	subs	r5, r1, #1
 80042de:	4355      	muls	r5, r2
 80042e0:	460e      	mov	r6, r1
 80042e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042e6:	f000 f8e5 	bl	80044b4 <_malloc_r>
 80042ea:	4604      	mov	r4, r0
 80042ec:	b140      	cbz	r0, 8004300 <__sfmoreglue+0x28>
 80042ee:	2100      	movs	r1, #0
 80042f0:	e9c0 1600 	strd	r1, r6, [r0]
 80042f4:	300c      	adds	r0, #12
 80042f6:	60a0      	str	r0, [r4, #8]
 80042f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042fc:	f7ff ffa2 	bl	8004244 <memset>
 8004300:	4620      	mov	r0, r4
 8004302:	bd70      	pop	{r4, r5, r6, pc}

08004304 <__sfp_lock_acquire>:
 8004304:	4801      	ldr	r0, [pc, #4]	; (800430c <__sfp_lock_acquire+0x8>)
 8004306:	f000 b8b3 	b.w	8004470 <__retarget_lock_acquire_recursive>
 800430a:	bf00      	nop
 800430c:	20000e19 	.word	0x20000e19

08004310 <__sfp_lock_release>:
 8004310:	4801      	ldr	r0, [pc, #4]	; (8004318 <__sfp_lock_release+0x8>)
 8004312:	f000 b8ae 	b.w	8004472 <__retarget_lock_release_recursive>
 8004316:	bf00      	nop
 8004318:	20000e19 	.word	0x20000e19

0800431c <__sinit_lock_acquire>:
 800431c:	4801      	ldr	r0, [pc, #4]	; (8004324 <__sinit_lock_acquire+0x8>)
 800431e:	f000 b8a7 	b.w	8004470 <__retarget_lock_acquire_recursive>
 8004322:	bf00      	nop
 8004324:	20000e1a 	.word	0x20000e1a

08004328 <__sinit_lock_release>:
 8004328:	4801      	ldr	r0, [pc, #4]	; (8004330 <__sinit_lock_release+0x8>)
 800432a:	f000 b8a2 	b.w	8004472 <__retarget_lock_release_recursive>
 800432e:	bf00      	nop
 8004330:	20000e1a 	.word	0x20000e1a

08004334 <__sinit>:
 8004334:	b510      	push	{r4, lr}
 8004336:	4604      	mov	r4, r0
 8004338:	f7ff fff0 	bl	800431c <__sinit_lock_acquire>
 800433c:	69a3      	ldr	r3, [r4, #24]
 800433e:	b11b      	cbz	r3, 8004348 <__sinit+0x14>
 8004340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004344:	f7ff bff0 	b.w	8004328 <__sinit_lock_release>
 8004348:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800434c:	6523      	str	r3, [r4, #80]	; 0x50
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <__sinit+0x68>)
 8004350:	4a13      	ldr	r2, [pc, #76]	; (80043a0 <__sinit+0x6c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	62a2      	str	r2, [r4, #40]	; 0x28
 8004356:	42a3      	cmp	r3, r4
 8004358:	bf08      	it	eq
 800435a:	2301      	moveq	r3, #1
 800435c:	4620      	mov	r0, r4
 800435e:	bf08      	it	eq
 8004360:	61a3      	streq	r3, [r4, #24]
 8004362:	f000 f81f 	bl	80043a4 <__sfp>
 8004366:	6060      	str	r0, [r4, #4]
 8004368:	4620      	mov	r0, r4
 800436a:	f000 f81b 	bl	80043a4 <__sfp>
 800436e:	60a0      	str	r0, [r4, #8]
 8004370:	4620      	mov	r0, r4
 8004372:	f000 f817 	bl	80043a4 <__sfp>
 8004376:	2200      	movs	r2, #0
 8004378:	2104      	movs	r1, #4
 800437a:	60e0      	str	r0, [r4, #12]
 800437c:	6860      	ldr	r0, [r4, #4]
 800437e:	f7ff ff81 	bl	8004284 <std>
 8004382:	2201      	movs	r2, #1
 8004384:	2109      	movs	r1, #9
 8004386:	68a0      	ldr	r0, [r4, #8]
 8004388:	f7ff ff7c 	bl	8004284 <std>
 800438c:	2202      	movs	r2, #2
 800438e:	2112      	movs	r1, #18
 8004390:	68e0      	ldr	r0, [r4, #12]
 8004392:	f7ff ff77 	bl	8004284 <std>
 8004396:	2301      	movs	r3, #1
 8004398:	61a3      	str	r3, [r4, #24]
 800439a:	e7d1      	b.n	8004340 <__sinit+0xc>
 800439c:	08005254 	.word	0x08005254
 80043a0:	080042cd 	.word	0x080042cd

080043a4 <__sfp>:
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	4607      	mov	r7, r0
 80043a8:	f7ff ffac 	bl	8004304 <__sfp_lock_acquire>
 80043ac:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <__sfp+0x84>)
 80043ae:	681e      	ldr	r6, [r3, #0]
 80043b0:	69b3      	ldr	r3, [r6, #24]
 80043b2:	b913      	cbnz	r3, 80043ba <__sfp+0x16>
 80043b4:	4630      	mov	r0, r6
 80043b6:	f7ff ffbd 	bl	8004334 <__sinit>
 80043ba:	3648      	adds	r6, #72	; 0x48
 80043bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	d503      	bpl.n	80043cc <__sfp+0x28>
 80043c4:	6833      	ldr	r3, [r6, #0]
 80043c6:	b30b      	cbz	r3, 800440c <__sfp+0x68>
 80043c8:	6836      	ldr	r6, [r6, #0]
 80043ca:	e7f7      	b.n	80043bc <__sfp+0x18>
 80043cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043d0:	b9d5      	cbnz	r5, 8004408 <__sfp+0x64>
 80043d2:	4b16      	ldr	r3, [pc, #88]	; (800442c <__sfp+0x88>)
 80043d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043d8:	60e3      	str	r3, [r4, #12]
 80043da:	6665      	str	r5, [r4, #100]	; 0x64
 80043dc:	f000 f847 	bl	800446e <__retarget_lock_init_recursive>
 80043e0:	f7ff ff96 	bl	8004310 <__sfp_lock_release>
 80043e4:	2208      	movs	r2, #8
 80043e6:	4629      	mov	r1, r5
 80043e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043f0:	6025      	str	r5, [r4, #0]
 80043f2:	61a5      	str	r5, [r4, #24]
 80043f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043f8:	f7ff ff24 	bl	8004244 <memset>
 80043fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004404:	4620      	mov	r0, r4
 8004406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004408:	3468      	adds	r4, #104	; 0x68
 800440a:	e7d9      	b.n	80043c0 <__sfp+0x1c>
 800440c:	2104      	movs	r1, #4
 800440e:	4638      	mov	r0, r7
 8004410:	f7ff ff62 	bl	80042d8 <__sfmoreglue>
 8004414:	4604      	mov	r4, r0
 8004416:	6030      	str	r0, [r6, #0]
 8004418:	2800      	cmp	r0, #0
 800441a:	d1d5      	bne.n	80043c8 <__sfp+0x24>
 800441c:	f7ff ff78 	bl	8004310 <__sfp_lock_release>
 8004420:	230c      	movs	r3, #12
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	e7ee      	b.n	8004404 <__sfp+0x60>
 8004426:	bf00      	nop
 8004428:	08005254 	.word	0x08005254
 800442c:	ffff0001 	.word	0xffff0001

08004430 <_fwalk_reent>:
 8004430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004434:	4606      	mov	r6, r0
 8004436:	4688      	mov	r8, r1
 8004438:	2700      	movs	r7, #0
 800443a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800443e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004442:	f1b9 0901 	subs.w	r9, r9, #1
 8004446:	d505      	bpl.n	8004454 <_fwalk_reent+0x24>
 8004448:	6824      	ldr	r4, [r4, #0]
 800444a:	2c00      	cmp	r4, #0
 800444c:	d1f7      	bne.n	800443e <_fwalk_reent+0xe>
 800444e:	4638      	mov	r0, r7
 8004450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004454:	89ab      	ldrh	r3, [r5, #12]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d907      	bls.n	800446a <_fwalk_reent+0x3a>
 800445a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800445e:	3301      	adds	r3, #1
 8004460:	d003      	beq.n	800446a <_fwalk_reent+0x3a>
 8004462:	4629      	mov	r1, r5
 8004464:	4630      	mov	r0, r6
 8004466:	47c0      	blx	r8
 8004468:	4307      	orrs	r7, r0
 800446a:	3568      	adds	r5, #104	; 0x68
 800446c:	e7e9      	b.n	8004442 <_fwalk_reent+0x12>

0800446e <__retarget_lock_init_recursive>:
 800446e:	4770      	bx	lr

08004470 <__retarget_lock_acquire_recursive>:
 8004470:	4770      	bx	lr

08004472 <__retarget_lock_release_recursive>:
 8004472:	4770      	bx	lr

08004474 <sbrk_aligned>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	4e0e      	ldr	r6, [pc, #56]	; (80044b0 <sbrk_aligned+0x3c>)
 8004478:	460c      	mov	r4, r1
 800447a:	6831      	ldr	r1, [r6, #0]
 800447c:	4605      	mov	r5, r0
 800447e:	b911      	cbnz	r1, 8004486 <sbrk_aligned+0x12>
 8004480:	f000 fb7a 	bl	8004b78 <_sbrk_r>
 8004484:	6030      	str	r0, [r6, #0]
 8004486:	4621      	mov	r1, r4
 8004488:	4628      	mov	r0, r5
 800448a:	f000 fb75 	bl	8004b78 <_sbrk_r>
 800448e:	1c43      	adds	r3, r0, #1
 8004490:	d00a      	beq.n	80044a8 <sbrk_aligned+0x34>
 8004492:	1cc4      	adds	r4, r0, #3
 8004494:	f024 0403 	bic.w	r4, r4, #3
 8004498:	42a0      	cmp	r0, r4
 800449a:	d007      	beq.n	80044ac <sbrk_aligned+0x38>
 800449c:	1a21      	subs	r1, r4, r0
 800449e:	4628      	mov	r0, r5
 80044a0:	f000 fb6a 	bl	8004b78 <_sbrk_r>
 80044a4:	3001      	adds	r0, #1
 80044a6:	d101      	bne.n	80044ac <sbrk_aligned+0x38>
 80044a8:	f04f 34ff 	mov.w	r4, #4294967295
 80044ac:	4620      	mov	r0, r4
 80044ae:	bd70      	pop	{r4, r5, r6, pc}
 80044b0:	20000e20 	.word	0x20000e20

080044b4 <_malloc_r>:
 80044b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b8:	1ccd      	adds	r5, r1, #3
 80044ba:	f025 0503 	bic.w	r5, r5, #3
 80044be:	3508      	adds	r5, #8
 80044c0:	2d0c      	cmp	r5, #12
 80044c2:	bf38      	it	cc
 80044c4:	250c      	movcc	r5, #12
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	4607      	mov	r7, r0
 80044ca:	db01      	blt.n	80044d0 <_malloc_r+0x1c>
 80044cc:	42a9      	cmp	r1, r5
 80044ce:	d905      	bls.n	80044dc <_malloc_r+0x28>
 80044d0:	230c      	movs	r3, #12
 80044d2:	2600      	movs	r6, #0
 80044d4:	603b      	str	r3, [r7, #0]
 80044d6:	4630      	mov	r0, r6
 80044d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044dc:	4e2e      	ldr	r6, [pc, #184]	; (8004598 <_malloc_r+0xe4>)
 80044de:	f000 fdc5 	bl	800506c <__malloc_lock>
 80044e2:	6833      	ldr	r3, [r6, #0]
 80044e4:	461c      	mov	r4, r3
 80044e6:	bb34      	cbnz	r4, 8004536 <_malloc_r+0x82>
 80044e8:	4629      	mov	r1, r5
 80044ea:	4638      	mov	r0, r7
 80044ec:	f7ff ffc2 	bl	8004474 <sbrk_aligned>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	4604      	mov	r4, r0
 80044f4:	d14d      	bne.n	8004592 <_malloc_r+0xde>
 80044f6:	6834      	ldr	r4, [r6, #0]
 80044f8:	4626      	mov	r6, r4
 80044fa:	2e00      	cmp	r6, #0
 80044fc:	d140      	bne.n	8004580 <_malloc_r+0xcc>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	4631      	mov	r1, r6
 8004502:	4638      	mov	r0, r7
 8004504:	eb04 0803 	add.w	r8, r4, r3
 8004508:	f000 fb36 	bl	8004b78 <_sbrk_r>
 800450c:	4580      	cmp	r8, r0
 800450e:	d13a      	bne.n	8004586 <_malloc_r+0xd2>
 8004510:	6821      	ldr	r1, [r4, #0]
 8004512:	3503      	adds	r5, #3
 8004514:	1a6d      	subs	r5, r5, r1
 8004516:	f025 0503 	bic.w	r5, r5, #3
 800451a:	3508      	adds	r5, #8
 800451c:	2d0c      	cmp	r5, #12
 800451e:	bf38      	it	cc
 8004520:	250c      	movcc	r5, #12
 8004522:	4638      	mov	r0, r7
 8004524:	4629      	mov	r1, r5
 8004526:	f7ff ffa5 	bl	8004474 <sbrk_aligned>
 800452a:	3001      	adds	r0, #1
 800452c:	d02b      	beq.n	8004586 <_malloc_r+0xd2>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	442b      	add	r3, r5
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	e00e      	b.n	8004554 <_malloc_r+0xa0>
 8004536:	6822      	ldr	r2, [r4, #0]
 8004538:	1b52      	subs	r2, r2, r5
 800453a:	d41e      	bmi.n	800457a <_malloc_r+0xc6>
 800453c:	2a0b      	cmp	r2, #11
 800453e:	d916      	bls.n	800456e <_malloc_r+0xba>
 8004540:	1961      	adds	r1, r4, r5
 8004542:	42a3      	cmp	r3, r4
 8004544:	6025      	str	r5, [r4, #0]
 8004546:	bf18      	it	ne
 8004548:	6059      	strne	r1, [r3, #4]
 800454a:	6863      	ldr	r3, [r4, #4]
 800454c:	bf08      	it	eq
 800454e:	6031      	streq	r1, [r6, #0]
 8004550:	5162      	str	r2, [r4, r5]
 8004552:	604b      	str	r3, [r1, #4]
 8004554:	4638      	mov	r0, r7
 8004556:	f104 060b 	add.w	r6, r4, #11
 800455a:	f000 fd8d 	bl	8005078 <__malloc_unlock>
 800455e:	f026 0607 	bic.w	r6, r6, #7
 8004562:	1d23      	adds	r3, r4, #4
 8004564:	1af2      	subs	r2, r6, r3
 8004566:	d0b6      	beq.n	80044d6 <_malloc_r+0x22>
 8004568:	1b9b      	subs	r3, r3, r6
 800456a:	50a3      	str	r3, [r4, r2]
 800456c:	e7b3      	b.n	80044d6 <_malloc_r+0x22>
 800456e:	6862      	ldr	r2, [r4, #4]
 8004570:	42a3      	cmp	r3, r4
 8004572:	bf0c      	ite	eq
 8004574:	6032      	streq	r2, [r6, #0]
 8004576:	605a      	strne	r2, [r3, #4]
 8004578:	e7ec      	b.n	8004554 <_malloc_r+0xa0>
 800457a:	4623      	mov	r3, r4
 800457c:	6864      	ldr	r4, [r4, #4]
 800457e:	e7b2      	b.n	80044e6 <_malloc_r+0x32>
 8004580:	4634      	mov	r4, r6
 8004582:	6876      	ldr	r6, [r6, #4]
 8004584:	e7b9      	b.n	80044fa <_malloc_r+0x46>
 8004586:	230c      	movs	r3, #12
 8004588:	4638      	mov	r0, r7
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	f000 fd74 	bl	8005078 <__malloc_unlock>
 8004590:	e7a1      	b.n	80044d6 <_malloc_r+0x22>
 8004592:	6025      	str	r5, [r4, #0]
 8004594:	e7de      	b.n	8004554 <_malloc_r+0xa0>
 8004596:	bf00      	nop
 8004598:	20000e1c 	.word	0x20000e1c

0800459c <__sfputc_r>:
 800459c:	6893      	ldr	r3, [r2, #8]
 800459e:	b410      	push	{r4}
 80045a0:	3b01      	subs	r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	6093      	str	r3, [r2, #8]
 80045a6:	da07      	bge.n	80045b8 <__sfputc_r+0x1c>
 80045a8:	6994      	ldr	r4, [r2, #24]
 80045aa:	42a3      	cmp	r3, r4
 80045ac:	db01      	blt.n	80045b2 <__sfputc_r+0x16>
 80045ae:	290a      	cmp	r1, #10
 80045b0:	d102      	bne.n	80045b8 <__sfputc_r+0x1c>
 80045b2:	bc10      	pop	{r4}
 80045b4:	f000 bb34 	b.w	8004c20 <__swbuf_r>
 80045b8:	6813      	ldr	r3, [r2, #0]
 80045ba:	1c58      	adds	r0, r3, #1
 80045bc:	6010      	str	r0, [r2, #0]
 80045be:	7019      	strb	r1, [r3, #0]
 80045c0:	4608      	mov	r0, r1
 80045c2:	bc10      	pop	{r4}
 80045c4:	4770      	bx	lr

080045c6 <__sfputs_r>:
 80045c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c8:	4606      	mov	r6, r0
 80045ca:	460f      	mov	r7, r1
 80045cc:	4614      	mov	r4, r2
 80045ce:	18d5      	adds	r5, r2, r3
 80045d0:	42ac      	cmp	r4, r5
 80045d2:	d101      	bne.n	80045d8 <__sfputs_r+0x12>
 80045d4:	2000      	movs	r0, #0
 80045d6:	e007      	b.n	80045e8 <__sfputs_r+0x22>
 80045d8:	463a      	mov	r2, r7
 80045da:	4630      	mov	r0, r6
 80045dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045e0:	f7ff ffdc 	bl	800459c <__sfputc_r>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d1f3      	bne.n	80045d0 <__sfputs_r+0xa>
 80045e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045ec <_vfiprintf_r>:
 80045ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f0:	460d      	mov	r5, r1
 80045f2:	4614      	mov	r4, r2
 80045f4:	4698      	mov	r8, r3
 80045f6:	4606      	mov	r6, r0
 80045f8:	b09d      	sub	sp, #116	; 0x74
 80045fa:	b118      	cbz	r0, 8004604 <_vfiprintf_r+0x18>
 80045fc:	6983      	ldr	r3, [r0, #24]
 80045fe:	b90b      	cbnz	r3, 8004604 <_vfiprintf_r+0x18>
 8004600:	f7ff fe98 	bl	8004334 <__sinit>
 8004604:	4b89      	ldr	r3, [pc, #548]	; (800482c <_vfiprintf_r+0x240>)
 8004606:	429d      	cmp	r5, r3
 8004608:	d11b      	bne.n	8004642 <_vfiprintf_r+0x56>
 800460a:	6875      	ldr	r5, [r6, #4]
 800460c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800460e:	07d9      	lsls	r1, r3, #31
 8004610:	d405      	bmi.n	800461e <_vfiprintf_r+0x32>
 8004612:	89ab      	ldrh	r3, [r5, #12]
 8004614:	059a      	lsls	r2, r3, #22
 8004616:	d402      	bmi.n	800461e <_vfiprintf_r+0x32>
 8004618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800461a:	f7ff ff29 	bl	8004470 <__retarget_lock_acquire_recursive>
 800461e:	89ab      	ldrh	r3, [r5, #12]
 8004620:	071b      	lsls	r3, r3, #28
 8004622:	d501      	bpl.n	8004628 <_vfiprintf_r+0x3c>
 8004624:	692b      	ldr	r3, [r5, #16]
 8004626:	b9eb      	cbnz	r3, 8004664 <_vfiprintf_r+0x78>
 8004628:	4629      	mov	r1, r5
 800462a:	4630      	mov	r0, r6
 800462c:	f000 fb5c 	bl	8004ce8 <__swsetup_r>
 8004630:	b1c0      	cbz	r0, 8004664 <_vfiprintf_r+0x78>
 8004632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004634:	07dc      	lsls	r4, r3, #31
 8004636:	d50e      	bpl.n	8004656 <_vfiprintf_r+0x6a>
 8004638:	f04f 30ff 	mov.w	r0, #4294967295
 800463c:	b01d      	add	sp, #116	; 0x74
 800463e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004642:	4b7b      	ldr	r3, [pc, #492]	; (8004830 <_vfiprintf_r+0x244>)
 8004644:	429d      	cmp	r5, r3
 8004646:	d101      	bne.n	800464c <_vfiprintf_r+0x60>
 8004648:	68b5      	ldr	r5, [r6, #8]
 800464a:	e7df      	b.n	800460c <_vfiprintf_r+0x20>
 800464c:	4b79      	ldr	r3, [pc, #484]	; (8004834 <_vfiprintf_r+0x248>)
 800464e:	429d      	cmp	r5, r3
 8004650:	bf08      	it	eq
 8004652:	68f5      	ldreq	r5, [r6, #12]
 8004654:	e7da      	b.n	800460c <_vfiprintf_r+0x20>
 8004656:	89ab      	ldrh	r3, [r5, #12]
 8004658:	0598      	lsls	r0, r3, #22
 800465a:	d4ed      	bmi.n	8004638 <_vfiprintf_r+0x4c>
 800465c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800465e:	f7ff ff08 	bl	8004472 <__retarget_lock_release_recursive>
 8004662:	e7e9      	b.n	8004638 <_vfiprintf_r+0x4c>
 8004664:	2300      	movs	r3, #0
 8004666:	9309      	str	r3, [sp, #36]	; 0x24
 8004668:	2320      	movs	r3, #32
 800466a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800466e:	2330      	movs	r3, #48	; 0x30
 8004670:	f04f 0901 	mov.w	r9, #1
 8004674:	f8cd 800c 	str.w	r8, [sp, #12]
 8004678:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004838 <_vfiprintf_r+0x24c>
 800467c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004680:	4623      	mov	r3, r4
 8004682:	469a      	mov	sl, r3
 8004684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004688:	b10a      	cbz	r2, 800468e <_vfiprintf_r+0xa2>
 800468a:	2a25      	cmp	r2, #37	; 0x25
 800468c:	d1f9      	bne.n	8004682 <_vfiprintf_r+0x96>
 800468e:	ebba 0b04 	subs.w	fp, sl, r4
 8004692:	d00b      	beq.n	80046ac <_vfiprintf_r+0xc0>
 8004694:	465b      	mov	r3, fp
 8004696:	4622      	mov	r2, r4
 8004698:	4629      	mov	r1, r5
 800469a:	4630      	mov	r0, r6
 800469c:	f7ff ff93 	bl	80045c6 <__sfputs_r>
 80046a0:	3001      	adds	r0, #1
 80046a2:	f000 80aa 	beq.w	80047fa <_vfiprintf_r+0x20e>
 80046a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046a8:	445a      	add	r2, fp
 80046aa:	9209      	str	r2, [sp, #36]	; 0x24
 80046ac:	f89a 3000 	ldrb.w	r3, [sl]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80a2 	beq.w	80047fa <_vfiprintf_r+0x20e>
 80046b6:	2300      	movs	r3, #0
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295
 80046bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046c0:	f10a 0a01 	add.w	sl, sl, #1
 80046c4:	9304      	str	r3, [sp, #16]
 80046c6:	9307      	str	r3, [sp, #28]
 80046c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046cc:	931a      	str	r3, [sp, #104]	; 0x68
 80046ce:	4654      	mov	r4, sl
 80046d0:	2205      	movs	r2, #5
 80046d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d6:	4858      	ldr	r0, [pc, #352]	; (8004838 <_vfiprintf_r+0x24c>)
 80046d8:	f000 fcba 	bl	8005050 <memchr>
 80046dc:	9a04      	ldr	r2, [sp, #16]
 80046de:	b9d8      	cbnz	r0, 8004718 <_vfiprintf_r+0x12c>
 80046e0:	06d1      	lsls	r1, r2, #27
 80046e2:	bf44      	itt	mi
 80046e4:	2320      	movmi	r3, #32
 80046e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046ea:	0713      	lsls	r3, r2, #28
 80046ec:	bf44      	itt	mi
 80046ee:	232b      	movmi	r3, #43	; 0x2b
 80046f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046f4:	f89a 3000 	ldrb.w	r3, [sl]
 80046f8:	2b2a      	cmp	r3, #42	; 0x2a
 80046fa:	d015      	beq.n	8004728 <_vfiprintf_r+0x13c>
 80046fc:	4654      	mov	r4, sl
 80046fe:	2000      	movs	r0, #0
 8004700:	f04f 0c0a 	mov.w	ip, #10
 8004704:	9a07      	ldr	r2, [sp, #28]
 8004706:	4621      	mov	r1, r4
 8004708:	f811 3b01 	ldrb.w	r3, [r1], #1
 800470c:	3b30      	subs	r3, #48	; 0x30
 800470e:	2b09      	cmp	r3, #9
 8004710:	d94e      	bls.n	80047b0 <_vfiprintf_r+0x1c4>
 8004712:	b1b0      	cbz	r0, 8004742 <_vfiprintf_r+0x156>
 8004714:	9207      	str	r2, [sp, #28]
 8004716:	e014      	b.n	8004742 <_vfiprintf_r+0x156>
 8004718:	eba0 0308 	sub.w	r3, r0, r8
 800471c:	fa09 f303 	lsl.w	r3, r9, r3
 8004720:	4313      	orrs	r3, r2
 8004722:	46a2      	mov	sl, r4
 8004724:	9304      	str	r3, [sp, #16]
 8004726:	e7d2      	b.n	80046ce <_vfiprintf_r+0xe2>
 8004728:	9b03      	ldr	r3, [sp, #12]
 800472a:	1d19      	adds	r1, r3, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	9103      	str	r1, [sp, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	bfbb      	ittet	lt
 8004734:	425b      	neglt	r3, r3
 8004736:	f042 0202 	orrlt.w	r2, r2, #2
 800473a:	9307      	strge	r3, [sp, #28]
 800473c:	9307      	strlt	r3, [sp, #28]
 800473e:	bfb8      	it	lt
 8004740:	9204      	strlt	r2, [sp, #16]
 8004742:	7823      	ldrb	r3, [r4, #0]
 8004744:	2b2e      	cmp	r3, #46	; 0x2e
 8004746:	d10c      	bne.n	8004762 <_vfiprintf_r+0x176>
 8004748:	7863      	ldrb	r3, [r4, #1]
 800474a:	2b2a      	cmp	r3, #42	; 0x2a
 800474c:	d135      	bne.n	80047ba <_vfiprintf_r+0x1ce>
 800474e:	9b03      	ldr	r3, [sp, #12]
 8004750:	3402      	adds	r4, #2
 8004752:	1d1a      	adds	r2, r3, #4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	9203      	str	r2, [sp, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	bfb8      	it	lt
 800475c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004760:	9305      	str	r3, [sp, #20]
 8004762:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800483c <_vfiprintf_r+0x250>
 8004766:	2203      	movs	r2, #3
 8004768:	4650      	mov	r0, sl
 800476a:	7821      	ldrb	r1, [r4, #0]
 800476c:	f000 fc70 	bl	8005050 <memchr>
 8004770:	b140      	cbz	r0, 8004784 <_vfiprintf_r+0x198>
 8004772:	2340      	movs	r3, #64	; 0x40
 8004774:	eba0 000a 	sub.w	r0, r0, sl
 8004778:	fa03 f000 	lsl.w	r0, r3, r0
 800477c:	9b04      	ldr	r3, [sp, #16]
 800477e:	3401      	adds	r4, #1
 8004780:	4303      	orrs	r3, r0
 8004782:	9304      	str	r3, [sp, #16]
 8004784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004788:	2206      	movs	r2, #6
 800478a:	482d      	ldr	r0, [pc, #180]	; (8004840 <_vfiprintf_r+0x254>)
 800478c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004790:	f000 fc5e 	bl	8005050 <memchr>
 8004794:	2800      	cmp	r0, #0
 8004796:	d03f      	beq.n	8004818 <_vfiprintf_r+0x22c>
 8004798:	4b2a      	ldr	r3, [pc, #168]	; (8004844 <_vfiprintf_r+0x258>)
 800479a:	bb1b      	cbnz	r3, 80047e4 <_vfiprintf_r+0x1f8>
 800479c:	9b03      	ldr	r3, [sp, #12]
 800479e:	3307      	adds	r3, #7
 80047a0:	f023 0307 	bic.w	r3, r3, #7
 80047a4:	3308      	adds	r3, #8
 80047a6:	9303      	str	r3, [sp, #12]
 80047a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047aa:	443b      	add	r3, r7
 80047ac:	9309      	str	r3, [sp, #36]	; 0x24
 80047ae:	e767      	b.n	8004680 <_vfiprintf_r+0x94>
 80047b0:	460c      	mov	r4, r1
 80047b2:	2001      	movs	r0, #1
 80047b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80047b8:	e7a5      	b.n	8004706 <_vfiprintf_r+0x11a>
 80047ba:	2300      	movs	r3, #0
 80047bc:	f04f 0c0a 	mov.w	ip, #10
 80047c0:	4619      	mov	r1, r3
 80047c2:	3401      	adds	r4, #1
 80047c4:	9305      	str	r3, [sp, #20]
 80047c6:	4620      	mov	r0, r4
 80047c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047cc:	3a30      	subs	r2, #48	; 0x30
 80047ce:	2a09      	cmp	r2, #9
 80047d0:	d903      	bls.n	80047da <_vfiprintf_r+0x1ee>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0c5      	beq.n	8004762 <_vfiprintf_r+0x176>
 80047d6:	9105      	str	r1, [sp, #20]
 80047d8:	e7c3      	b.n	8004762 <_vfiprintf_r+0x176>
 80047da:	4604      	mov	r4, r0
 80047dc:	2301      	movs	r3, #1
 80047de:	fb0c 2101 	mla	r1, ip, r1, r2
 80047e2:	e7f0      	b.n	80047c6 <_vfiprintf_r+0x1da>
 80047e4:	ab03      	add	r3, sp, #12
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	462a      	mov	r2, r5
 80047ea:	4630      	mov	r0, r6
 80047ec:	4b16      	ldr	r3, [pc, #88]	; (8004848 <_vfiprintf_r+0x25c>)
 80047ee:	a904      	add	r1, sp, #16
 80047f0:	f3af 8000 	nop.w
 80047f4:	4607      	mov	r7, r0
 80047f6:	1c78      	adds	r0, r7, #1
 80047f8:	d1d6      	bne.n	80047a8 <_vfiprintf_r+0x1bc>
 80047fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047fc:	07d9      	lsls	r1, r3, #31
 80047fe:	d405      	bmi.n	800480c <_vfiprintf_r+0x220>
 8004800:	89ab      	ldrh	r3, [r5, #12]
 8004802:	059a      	lsls	r2, r3, #22
 8004804:	d402      	bmi.n	800480c <_vfiprintf_r+0x220>
 8004806:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004808:	f7ff fe33 	bl	8004472 <__retarget_lock_release_recursive>
 800480c:	89ab      	ldrh	r3, [r5, #12]
 800480e:	065b      	lsls	r3, r3, #25
 8004810:	f53f af12 	bmi.w	8004638 <_vfiprintf_r+0x4c>
 8004814:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004816:	e711      	b.n	800463c <_vfiprintf_r+0x50>
 8004818:	ab03      	add	r3, sp, #12
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	462a      	mov	r2, r5
 800481e:	4630      	mov	r0, r6
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <_vfiprintf_r+0x25c>)
 8004822:	a904      	add	r1, sp, #16
 8004824:	f000 f882 	bl	800492c <_printf_i>
 8004828:	e7e4      	b.n	80047f4 <_vfiprintf_r+0x208>
 800482a:	bf00      	nop
 800482c:	08005278 	.word	0x08005278
 8004830:	08005298 	.word	0x08005298
 8004834:	08005258 	.word	0x08005258
 8004838:	080052b8 	.word	0x080052b8
 800483c:	080052be 	.word	0x080052be
 8004840:	080052c2 	.word	0x080052c2
 8004844:	00000000 	.word	0x00000000
 8004848:	080045c7 	.word	0x080045c7

0800484c <_printf_common>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	4616      	mov	r6, r2
 8004852:	4699      	mov	r9, r3
 8004854:	688a      	ldr	r2, [r1, #8]
 8004856:	690b      	ldr	r3, [r1, #16]
 8004858:	4607      	mov	r7, r0
 800485a:	4293      	cmp	r3, r2
 800485c:	bfb8      	it	lt
 800485e:	4613      	movlt	r3, r2
 8004860:	6033      	str	r3, [r6, #0]
 8004862:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004866:	460c      	mov	r4, r1
 8004868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800486c:	b10a      	cbz	r2, 8004872 <_printf_common+0x26>
 800486e:	3301      	adds	r3, #1
 8004870:	6033      	str	r3, [r6, #0]
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	0699      	lsls	r1, r3, #26
 8004876:	bf42      	ittt	mi
 8004878:	6833      	ldrmi	r3, [r6, #0]
 800487a:	3302      	addmi	r3, #2
 800487c:	6033      	strmi	r3, [r6, #0]
 800487e:	6825      	ldr	r5, [r4, #0]
 8004880:	f015 0506 	ands.w	r5, r5, #6
 8004884:	d106      	bne.n	8004894 <_printf_common+0x48>
 8004886:	f104 0a19 	add.w	sl, r4, #25
 800488a:	68e3      	ldr	r3, [r4, #12]
 800488c:	6832      	ldr	r2, [r6, #0]
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	42ab      	cmp	r3, r5
 8004892:	dc28      	bgt.n	80048e6 <_printf_common+0x9a>
 8004894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004898:	1e13      	subs	r3, r2, #0
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	bf18      	it	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	0692      	lsls	r2, r2, #26
 80048a2:	d42d      	bmi.n	8004900 <_printf_common+0xb4>
 80048a4:	4649      	mov	r1, r9
 80048a6:	4638      	mov	r0, r7
 80048a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ac:	47c0      	blx	r8
 80048ae:	3001      	adds	r0, #1
 80048b0:	d020      	beq.n	80048f4 <_printf_common+0xa8>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	68e5      	ldr	r5, [r4, #12]
 80048b6:	f003 0306 	and.w	r3, r3, #6
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	bf18      	it	ne
 80048be:	2500      	movne	r5, #0
 80048c0:	6832      	ldr	r2, [r6, #0]
 80048c2:	f04f 0600 	mov.w	r6, #0
 80048c6:	68a3      	ldr	r3, [r4, #8]
 80048c8:	bf08      	it	eq
 80048ca:	1aad      	subeq	r5, r5, r2
 80048cc:	6922      	ldr	r2, [r4, #16]
 80048ce:	bf08      	it	eq
 80048d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048d4:	4293      	cmp	r3, r2
 80048d6:	bfc4      	itt	gt
 80048d8:	1a9b      	subgt	r3, r3, r2
 80048da:	18ed      	addgt	r5, r5, r3
 80048dc:	341a      	adds	r4, #26
 80048de:	42b5      	cmp	r5, r6
 80048e0:	d11a      	bne.n	8004918 <_printf_common+0xcc>
 80048e2:	2000      	movs	r0, #0
 80048e4:	e008      	b.n	80048f8 <_printf_common+0xac>
 80048e6:	2301      	movs	r3, #1
 80048e8:	4652      	mov	r2, sl
 80048ea:	4649      	mov	r1, r9
 80048ec:	4638      	mov	r0, r7
 80048ee:	47c0      	blx	r8
 80048f0:	3001      	adds	r0, #1
 80048f2:	d103      	bne.n	80048fc <_printf_common+0xb0>
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fc:	3501      	adds	r5, #1
 80048fe:	e7c4      	b.n	800488a <_printf_common+0x3e>
 8004900:	2030      	movs	r0, #48	; 0x30
 8004902:	18e1      	adds	r1, r4, r3
 8004904:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800490e:	4422      	add	r2, r4
 8004910:	3302      	adds	r3, #2
 8004912:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004916:	e7c5      	b.n	80048a4 <_printf_common+0x58>
 8004918:	2301      	movs	r3, #1
 800491a:	4622      	mov	r2, r4
 800491c:	4649      	mov	r1, r9
 800491e:	4638      	mov	r0, r7
 8004920:	47c0      	blx	r8
 8004922:	3001      	adds	r0, #1
 8004924:	d0e6      	beq.n	80048f4 <_printf_common+0xa8>
 8004926:	3601      	adds	r6, #1
 8004928:	e7d9      	b.n	80048de <_printf_common+0x92>
	...

0800492c <_printf_i>:
 800492c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	7e0f      	ldrb	r7, [r1, #24]
 8004932:	4691      	mov	r9, r2
 8004934:	2f78      	cmp	r7, #120	; 0x78
 8004936:	4680      	mov	r8, r0
 8004938:	460c      	mov	r4, r1
 800493a:	469a      	mov	sl, r3
 800493c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800493e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004942:	d807      	bhi.n	8004954 <_printf_i+0x28>
 8004944:	2f62      	cmp	r7, #98	; 0x62
 8004946:	d80a      	bhi.n	800495e <_printf_i+0x32>
 8004948:	2f00      	cmp	r7, #0
 800494a:	f000 80d9 	beq.w	8004b00 <_printf_i+0x1d4>
 800494e:	2f58      	cmp	r7, #88	; 0x58
 8004950:	f000 80a4 	beq.w	8004a9c <_printf_i+0x170>
 8004954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800495c:	e03a      	b.n	80049d4 <_printf_i+0xa8>
 800495e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004962:	2b15      	cmp	r3, #21
 8004964:	d8f6      	bhi.n	8004954 <_printf_i+0x28>
 8004966:	a101      	add	r1, pc, #4	; (adr r1, 800496c <_printf_i+0x40>)
 8004968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800496c:	080049c5 	.word	0x080049c5
 8004970:	080049d9 	.word	0x080049d9
 8004974:	08004955 	.word	0x08004955
 8004978:	08004955 	.word	0x08004955
 800497c:	08004955 	.word	0x08004955
 8004980:	08004955 	.word	0x08004955
 8004984:	080049d9 	.word	0x080049d9
 8004988:	08004955 	.word	0x08004955
 800498c:	08004955 	.word	0x08004955
 8004990:	08004955 	.word	0x08004955
 8004994:	08004955 	.word	0x08004955
 8004998:	08004ae7 	.word	0x08004ae7
 800499c:	08004a09 	.word	0x08004a09
 80049a0:	08004ac9 	.word	0x08004ac9
 80049a4:	08004955 	.word	0x08004955
 80049a8:	08004955 	.word	0x08004955
 80049ac:	08004b09 	.word	0x08004b09
 80049b0:	08004955 	.word	0x08004955
 80049b4:	08004a09 	.word	0x08004a09
 80049b8:	08004955 	.word	0x08004955
 80049bc:	08004955 	.word	0x08004955
 80049c0:	08004ad1 	.word	0x08004ad1
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	1d1a      	adds	r2, r3, #4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	602a      	str	r2, [r5, #0]
 80049cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0a4      	b.n	8004b22 <_printf_i+0x1f6>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	6829      	ldr	r1, [r5, #0]
 80049dc:	0606      	lsls	r6, r0, #24
 80049de:	f101 0304 	add.w	r3, r1, #4
 80049e2:	d50a      	bpl.n	80049fa <_printf_i+0xce>
 80049e4:	680e      	ldr	r6, [r1, #0]
 80049e6:	602b      	str	r3, [r5, #0]
 80049e8:	2e00      	cmp	r6, #0
 80049ea:	da03      	bge.n	80049f4 <_printf_i+0xc8>
 80049ec:	232d      	movs	r3, #45	; 0x2d
 80049ee:	4276      	negs	r6, r6
 80049f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f4:	230a      	movs	r3, #10
 80049f6:	485e      	ldr	r0, [pc, #376]	; (8004b70 <_printf_i+0x244>)
 80049f8:	e019      	b.n	8004a2e <_printf_i+0x102>
 80049fa:	680e      	ldr	r6, [r1, #0]
 80049fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a00:	602b      	str	r3, [r5, #0]
 8004a02:	bf18      	it	ne
 8004a04:	b236      	sxthne	r6, r6
 8004a06:	e7ef      	b.n	80049e8 <_printf_i+0xbc>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	6820      	ldr	r0, [r4, #0]
 8004a0c:	1d19      	adds	r1, r3, #4
 8004a0e:	6029      	str	r1, [r5, #0]
 8004a10:	0601      	lsls	r1, r0, #24
 8004a12:	d501      	bpl.n	8004a18 <_printf_i+0xec>
 8004a14:	681e      	ldr	r6, [r3, #0]
 8004a16:	e002      	b.n	8004a1e <_printf_i+0xf2>
 8004a18:	0646      	lsls	r6, r0, #25
 8004a1a:	d5fb      	bpl.n	8004a14 <_printf_i+0xe8>
 8004a1c:	881e      	ldrh	r6, [r3, #0]
 8004a1e:	2f6f      	cmp	r7, #111	; 0x6f
 8004a20:	bf0c      	ite	eq
 8004a22:	2308      	moveq	r3, #8
 8004a24:	230a      	movne	r3, #10
 8004a26:	4852      	ldr	r0, [pc, #328]	; (8004b70 <_printf_i+0x244>)
 8004a28:	2100      	movs	r1, #0
 8004a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a2e:	6865      	ldr	r5, [r4, #4]
 8004a30:	2d00      	cmp	r5, #0
 8004a32:	bfa8      	it	ge
 8004a34:	6821      	ldrge	r1, [r4, #0]
 8004a36:	60a5      	str	r5, [r4, #8]
 8004a38:	bfa4      	itt	ge
 8004a3a:	f021 0104 	bicge.w	r1, r1, #4
 8004a3e:	6021      	strge	r1, [r4, #0]
 8004a40:	b90e      	cbnz	r6, 8004a46 <_printf_i+0x11a>
 8004a42:	2d00      	cmp	r5, #0
 8004a44:	d04d      	beq.n	8004ae2 <_printf_i+0x1b6>
 8004a46:	4615      	mov	r5, r2
 8004a48:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a4c:	fb03 6711 	mls	r7, r3, r1, r6
 8004a50:	5dc7      	ldrb	r7, [r0, r7]
 8004a52:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a56:	4637      	mov	r7, r6
 8004a58:	42bb      	cmp	r3, r7
 8004a5a:	460e      	mov	r6, r1
 8004a5c:	d9f4      	bls.n	8004a48 <_printf_i+0x11c>
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d10b      	bne.n	8004a7a <_printf_i+0x14e>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	07de      	lsls	r6, r3, #31
 8004a66:	d508      	bpl.n	8004a7a <_printf_i+0x14e>
 8004a68:	6923      	ldr	r3, [r4, #16]
 8004a6a:	6861      	ldr	r1, [r4, #4]
 8004a6c:	4299      	cmp	r1, r3
 8004a6e:	bfde      	ittt	le
 8004a70:	2330      	movle	r3, #48	; 0x30
 8004a72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a7a:	1b52      	subs	r2, r2, r5
 8004a7c:	6122      	str	r2, [r4, #16]
 8004a7e:	464b      	mov	r3, r9
 8004a80:	4621      	mov	r1, r4
 8004a82:	4640      	mov	r0, r8
 8004a84:	f8cd a000 	str.w	sl, [sp]
 8004a88:	aa03      	add	r2, sp, #12
 8004a8a:	f7ff fedf 	bl	800484c <_printf_common>
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d14c      	bne.n	8004b2c <_printf_i+0x200>
 8004a92:	f04f 30ff 	mov.w	r0, #4294967295
 8004a96:	b004      	add	sp, #16
 8004a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a9c:	4834      	ldr	r0, [pc, #208]	; (8004b70 <_printf_i+0x244>)
 8004a9e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004aa2:	6829      	ldr	r1, [r5, #0]
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aaa:	6029      	str	r1, [r5, #0]
 8004aac:	061d      	lsls	r5, r3, #24
 8004aae:	d514      	bpl.n	8004ada <_printf_i+0x1ae>
 8004ab0:	07df      	lsls	r7, r3, #31
 8004ab2:	bf44      	itt	mi
 8004ab4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ab8:	6023      	strmi	r3, [r4, #0]
 8004aba:	b91e      	cbnz	r6, 8004ac4 <_printf_i+0x198>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	f023 0320 	bic.w	r3, r3, #32
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	e7af      	b.n	8004a28 <_printf_i+0xfc>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	f043 0320 	orr.w	r3, r3, #32
 8004ace:	6023      	str	r3, [r4, #0]
 8004ad0:	2378      	movs	r3, #120	; 0x78
 8004ad2:	4828      	ldr	r0, [pc, #160]	; (8004b74 <_printf_i+0x248>)
 8004ad4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ad8:	e7e3      	b.n	8004aa2 <_printf_i+0x176>
 8004ada:	0659      	lsls	r1, r3, #25
 8004adc:	bf48      	it	mi
 8004ade:	b2b6      	uxthmi	r6, r6
 8004ae0:	e7e6      	b.n	8004ab0 <_printf_i+0x184>
 8004ae2:	4615      	mov	r5, r2
 8004ae4:	e7bb      	b.n	8004a5e <_printf_i+0x132>
 8004ae6:	682b      	ldr	r3, [r5, #0]
 8004ae8:	6826      	ldr	r6, [r4, #0]
 8004aea:	1d18      	adds	r0, r3, #4
 8004aec:	6961      	ldr	r1, [r4, #20]
 8004aee:	6028      	str	r0, [r5, #0]
 8004af0:	0635      	lsls	r5, r6, #24
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	d501      	bpl.n	8004afa <_printf_i+0x1ce>
 8004af6:	6019      	str	r1, [r3, #0]
 8004af8:	e002      	b.n	8004b00 <_printf_i+0x1d4>
 8004afa:	0670      	lsls	r0, r6, #25
 8004afc:	d5fb      	bpl.n	8004af6 <_printf_i+0x1ca>
 8004afe:	8019      	strh	r1, [r3, #0]
 8004b00:	2300      	movs	r3, #0
 8004b02:	4615      	mov	r5, r2
 8004b04:	6123      	str	r3, [r4, #16]
 8004b06:	e7ba      	b.n	8004a7e <_printf_i+0x152>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	1d1a      	adds	r2, r3, #4
 8004b0e:	602a      	str	r2, [r5, #0]
 8004b10:	681d      	ldr	r5, [r3, #0]
 8004b12:	6862      	ldr	r2, [r4, #4]
 8004b14:	4628      	mov	r0, r5
 8004b16:	f000 fa9b 	bl	8005050 <memchr>
 8004b1a:	b108      	cbz	r0, 8004b20 <_printf_i+0x1f4>
 8004b1c:	1b40      	subs	r0, r0, r5
 8004b1e:	6060      	str	r0, [r4, #4]
 8004b20:	6863      	ldr	r3, [r4, #4]
 8004b22:	6123      	str	r3, [r4, #16]
 8004b24:	2300      	movs	r3, #0
 8004b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b2a:	e7a8      	b.n	8004a7e <_printf_i+0x152>
 8004b2c:	462a      	mov	r2, r5
 8004b2e:	4649      	mov	r1, r9
 8004b30:	4640      	mov	r0, r8
 8004b32:	6923      	ldr	r3, [r4, #16]
 8004b34:	47d0      	blx	sl
 8004b36:	3001      	adds	r0, #1
 8004b38:	d0ab      	beq.n	8004a92 <_printf_i+0x166>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	079b      	lsls	r3, r3, #30
 8004b3e:	d413      	bmi.n	8004b68 <_printf_i+0x23c>
 8004b40:	68e0      	ldr	r0, [r4, #12]
 8004b42:	9b03      	ldr	r3, [sp, #12]
 8004b44:	4298      	cmp	r0, r3
 8004b46:	bfb8      	it	lt
 8004b48:	4618      	movlt	r0, r3
 8004b4a:	e7a4      	b.n	8004a96 <_printf_i+0x16a>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4632      	mov	r2, r6
 8004b50:	4649      	mov	r1, r9
 8004b52:	4640      	mov	r0, r8
 8004b54:	47d0      	blx	sl
 8004b56:	3001      	adds	r0, #1
 8004b58:	d09b      	beq.n	8004a92 <_printf_i+0x166>
 8004b5a:	3501      	adds	r5, #1
 8004b5c:	68e3      	ldr	r3, [r4, #12]
 8004b5e:	9903      	ldr	r1, [sp, #12]
 8004b60:	1a5b      	subs	r3, r3, r1
 8004b62:	42ab      	cmp	r3, r5
 8004b64:	dcf2      	bgt.n	8004b4c <_printf_i+0x220>
 8004b66:	e7eb      	b.n	8004b40 <_printf_i+0x214>
 8004b68:	2500      	movs	r5, #0
 8004b6a:	f104 0619 	add.w	r6, r4, #25
 8004b6e:	e7f5      	b.n	8004b5c <_printf_i+0x230>
 8004b70:	080052c9 	.word	0x080052c9
 8004b74:	080052da 	.word	0x080052da

08004b78 <_sbrk_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	4d05      	ldr	r5, [pc, #20]	; (8004b94 <_sbrk_r+0x1c>)
 8004b7e:	4604      	mov	r4, r0
 8004b80:	4608      	mov	r0, r1
 8004b82:	602b      	str	r3, [r5, #0]
 8004b84:	f7fc f802 	bl	8000b8c <_sbrk>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d102      	bne.n	8004b92 <_sbrk_r+0x1a>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	b103      	cbz	r3, 8004b92 <_sbrk_r+0x1a>
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	bd38      	pop	{r3, r4, r5, pc}
 8004b94:	20000e24 	.word	0x20000e24

08004b98 <__sread>:
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba0:	f000 fab8 	bl	8005114 <_read_r>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	bfab      	itete	ge
 8004ba8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004baa:	89a3      	ldrhlt	r3, [r4, #12]
 8004bac:	181b      	addge	r3, r3, r0
 8004bae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bb2:	bfac      	ite	ge
 8004bb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bb6:	81a3      	strhlt	r3, [r4, #12]
 8004bb8:	bd10      	pop	{r4, pc}

08004bba <__swrite>:
 8004bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bbe:	461f      	mov	r7, r3
 8004bc0:	898b      	ldrh	r3, [r1, #12]
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	05db      	lsls	r3, r3, #23
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	4616      	mov	r6, r2
 8004bca:	d505      	bpl.n	8004bd8 <__swrite+0x1e>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd4:	f000 f9c4 	bl	8004f60 <_lseek_r>
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	4632      	mov	r2, r6
 8004bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004be0:	81a3      	strh	r3, [r4, #12]
 8004be2:	4628      	mov	r0, r5
 8004be4:	463b      	mov	r3, r7
 8004be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bee:	f000 b869 	b.w	8004cc4 <_write_r>

08004bf2 <__sseek>:
 8004bf2:	b510      	push	{r4, lr}
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfa:	f000 f9b1 	bl	8004f60 <_lseek_r>
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	bf15      	itete	ne
 8004c04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c0e:	81a3      	strheq	r3, [r4, #12]
 8004c10:	bf18      	it	ne
 8004c12:	81a3      	strhne	r3, [r4, #12]
 8004c14:	bd10      	pop	{r4, pc}

08004c16 <__sclose>:
 8004c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1a:	f000 b8d3 	b.w	8004dc4 <_close_r>
	...

08004c20 <__swbuf_r>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	460e      	mov	r6, r1
 8004c24:	4614      	mov	r4, r2
 8004c26:	4605      	mov	r5, r0
 8004c28:	b118      	cbz	r0, 8004c32 <__swbuf_r+0x12>
 8004c2a:	6983      	ldr	r3, [r0, #24]
 8004c2c:	b90b      	cbnz	r3, 8004c32 <__swbuf_r+0x12>
 8004c2e:	f7ff fb81 	bl	8004334 <__sinit>
 8004c32:	4b21      	ldr	r3, [pc, #132]	; (8004cb8 <__swbuf_r+0x98>)
 8004c34:	429c      	cmp	r4, r3
 8004c36:	d12b      	bne.n	8004c90 <__swbuf_r+0x70>
 8004c38:	686c      	ldr	r4, [r5, #4]
 8004c3a:	69a3      	ldr	r3, [r4, #24]
 8004c3c:	60a3      	str	r3, [r4, #8]
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	071a      	lsls	r2, r3, #28
 8004c42:	d52f      	bpl.n	8004ca4 <__swbuf_r+0x84>
 8004c44:	6923      	ldr	r3, [r4, #16]
 8004c46:	b36b      	cbz	r3, 8004ca4 <__swbuf_r+0x84>
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	6820      	ldr	r0, [r4, #0]
 8004c4c:	b2f6      	uxtb	r6, r6
 8004c4e:	1ac0      	subs	r0, r0, r3
 8004c50:	6963      	ldr	r3, [r4, #20]
 8004c52:	4637      	mov	r7, r6
 8004c54:	4283      	cmp	r3, r0
 8004c56:	dc04      	bgt.n	8004c62 <__swbuf_r+0x42>
 8004c58:	4621      	mov	r1, r4
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f000 f944 	bl	8004ee8 <_fflush_r>
 8004c60:	bb30      	cbnz	r0, 8004cb0 <__swbuf_r+0x90>
 8004c62:	68a3      	ldr	r3, [r4, #8]
 8004c64:	3001      	adds	r0, #1
 8004c66:	3b01      	subs	r3, #1
 8004c68:	60a3      	str	r3, [r4, #8]
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	6022      	str	r2, [r4, #0]
 8004c70:	701e      	strb	r6, [r3, #0]
 8004c72:	6963      	ldr	r3, [r4, #20]
 8004c74:	4283      	cmp	r3, r0
 8004c76:	d004      	beq.n	8004c82 <__swbuf_r+0x62>
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	07db      	lsls	r3, r3, #31
 8004c7c:	d506      	bpl.n	8004c8c <__swbuf_r+0x6c>
 8004c7e:	2e0a      	cmp	r6, #10
 8004c80:	d104      	bne.n	8004c8c <__swbuf_r+0x6c>
 8004c82:	4621      	mov	r1, r4
 8004c84:	4628      	mov	r0, r5
 8004c86:	f000 f92f 	bl	8004ee8 <_fflush_r>
 8004c8a:	b988      	cbnz	r0, 8004cb0 <__swbuf_r+0x90>
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c90:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <__swbuf_r+0x9c>)
 8004c92:	429c      	cmp	r4, r3
 8004c94:	d101      	bne.n	8004c9a <__swbuf_r+0x7a>
 8004c96:	68ac      	ldr	r4, [r5, #8]
 8004c98:	e7cf      	b.n	8004c3a <__swbuf_r+0x1a>
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <__swbuf_r+0xa0>)
 8004c9c:	429c      	cmp	r4, r3
 8004c9e:	bf08      	it	eq
 8004ca0:	68ec      	ldreq	r4, [r5, #12]
 8004ca2:	e7ca      	b.n	8004c3a <__swbuf_r+0x1a>
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f000 f81e 	bl	8004ce8 <__swsetup_r>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d0cb      	beq.n	8004c48 <__swbuf_r+0x28>
 8004cb0:	f04f 37ff 	mov.w	r7, #4294967295
 8004cb4:	e7ea      	b.n	8004c8c <__swbuf_r+0x6c>
 8004cb6:	bf00      	nop
 8004cb8:	08005278 	.word	0x08005278
 8004cbc:	08005298 	.word	0x08005298
 8004cc0:	08005258 	.word	0x08005258

08004cc4 <_write_r>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	4611      	mov	r1, r2
 8004ccc:	2200      	movs	r2, #0
 8004cce:	4d05      	ldr	r5, [pc, #20]	; (8004ce4 <_write_r+0x20>)
 8004cd0:	602a      	str	r2, [r5, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f7fb ff0e 	bl	8000af4 <_write>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_write_r+0x1e>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_write_r+0x1e>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	20000e24 	.word	0x20000e24

08004ce8 <__swsetup_r>:
 8004ce8:	4b32      	ldr	r3, [pc, #200]	; (8004db4 <__swsetup_r+0xcc>)
 8004cea:	b570      	push	{r4, r5, r6, lr}
 8004cec:	681d      	ldr	r5, [r3, #0]
 8004cee:	4606      	mov	r6, r0
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	b125      	cbz	r5, 8004cfe <__swsetup_r+0x16>
 8004cf4:	69ab      	ldr	r3, [r5, #24]
 8004cf6:	b913      	cbnz	r3, 8004cfe <__swsetup_r+0x16>
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f7ff fb1b 	bl	8004334 <__sinit>
 8004cfe:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <__swsetup_r+0xd0>)
 8004d00:	429c      	cmp	r4, r3
 8004d02:	d10f      	bne.n	8004d24 <__swsetup_r+0x3c>
 8004d04:	686c      	ldr	r4, [r5, #4]
 8004d06:	89a3      	ldrh	r3, [r4, #12]
 8004d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d0c:	0719      	lsls	r1, r3, #28
 8004d0e:	d42c      	bmi.n	8004d6a <__swsetup_r+0x82>
 8004d10:	06dd      	lsls	r5, r3, #27
 8004d12:	d411      	bmi.n	8004d38 <__swsetup_r+0x50>
 8004d14:	2309      	movs	r3, #9
 8004d16:	6033      	str	r3, [r6, #0]
 8004d18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	81a3      	strh	r3, [r4, #12]
 8004d22:	e03e      	b.n	8004da2 <__swsetup_r+0xba>
 8004d24:	4b25      	ldr	r3, [pc, #148]	; (8004dbc <__swsetup_r+0xd4>)
 8004d26:	429c      	cmp	r4, r3
 8004d28:	d101      	bne.n	8004d2e <__swsetup_r+0x46>
 8004d2a:	68ac      	ldr	r4, [r5, #8]
 8004d2c:	e7eb      	b.n	8004d06 <__swsetup_r+0x1e>
 8004d2e:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <__swsetup_r+0xd8>)
 8004d30:	429c      	cmp	r4, r3
 8004d32:	bf08      	it	eq
 8004d34:	68ec      	ldreq	r4, [r5, #12]
 8004d36:	e7e6      	b.n	8004d06 <__swsetup_r+0x1e>
 8004d38:	0758      	lsls	r0, r3, #29
 8004d3a:	d512      	bpl.n	8004d62 <__swsetup_r+0x7a>
 8004d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d3e:	b141      	cbz	r1, 8004d52 <__swsetup_r+0x6a>
 8004d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d44:	4299      	cmp	r1, r3
 8004d46:	d002      	beq.n	8004d4e <__swsetup_r+0x66>
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f000 f99b 	bl	8005084 <_free_r>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	6363      	str	r3, [r4, #52]	; 0x34
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d58:	81a3      	strh	r3, [r4, #12]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6063      	str	r3, [r4, #4]
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	f043 0308 	orr.w	r3, r3, #8
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	b94b      	cbnz	r3, 8004d82 <__swsetup_r+0x9a>
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d78:	d003      	beq.n	8004d82 <__swsetup_r+0x9a>
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	f000 f927 	bl	8004fd0 <__smakebuf_r>
 8004d82:	89a0      	ldrh	r0, [r4, #12]
 8004d84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d88:	f010 0301 	ands.w	r3, r0, #1
 8004d8c:	d00a      	beq.n	8004da4 <__swsetup_r+0xbc>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60a3      	str	r3, [r4, #8]
 8004d92:	6963      	ldr	r3, [r4, #20]
 8004d94:	425b      	negs	r3, r3
 8004d96:	61a3      	str	r3, [r4, #24]
 8004d98:	6923      	ldr	r3, [r4, #16]
 8004d9a:	b943      	cbnz	r3, 8004dae <__swsetup_r+0xc6>
 8004d9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004da0:	d1ba      	bne.n	8004d18 <__swsetup_r+0x30>
 8004da2:	bd70      	pop	{r4, r5, r6, pc}
 8004da4:	0781      	lsls	r1, r0, #30
 8004da6:	bf58      	it	pl
 8004da8:	6963      	ldrpl	r3, [r4, #20]
 8004daa:	60a3      	str	r3, [r4, #8]
 8004dac:	e7f4      	b.n	8004d98 <__swsetup_r+0xb0>
 8004dae:	2000      	movs	r0, #0
 8004db0:	e7f7      	b.n	8004da2 <__swsetup_r+0xba>
 8004db2:	bf00      	nop
 8004db4:	2000000c 	.word	0x2000000c
 8004db8:	08005278 	.word	0x08005278
 8004dbc:	08005298 	.word	0x08005298
 8004dc0:	08005258 	.word	0x08005258

08004dc4 <_close_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	4d05      	ldr	r5, [pc, #20]	; (8004de0 <_close_r+0x1c>)
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fb feac 	bl	8000b2c <_close>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_close_r+0x1a>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_close_r+0x1a>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	20000e24 	.word	0x20000e24

08004de4 <__sflush_r>:
 8004de4:	898a      	ldrh	r2, [r1, #12]
 8004de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de8:	4605      	mov	r5, r0
 8004dea:	0710      	lsls	r0, r2, #28
 8004dec:	460c      	mov	r4, r1
 8004dee:	d457      	bmi.n	8004ea0 <__sflush_r+0xbc>
 8004df0:	684b      	ldr	r3, [r1, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	dc04      	bgt.n	8004e00 <__sflush_r+0x1c>
 8004df6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	dc01      	bgt.n	8004e00 <__sflush_r+0x1c>
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e02:	2e00      	cmp	r6, #0
 8004e04:	d0fa      	beq.n	8004dfc <__sflush_r+0x18>
 8004e06:	2300      	movs	r3, #0
 8004e08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e0c:	682f      	ldr	r7, [r5, #0]
 8004e0e:	602b      	str	r3, [r5, #0]
 8004e10:	d032      	beq.n	8004e78 <__sflush_r+0x94>
 8004e12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	075a      	lsls	r2, r3, #29
 8004e18:	d505      	bpl.n	8004e26 <__sflush_r+0x42>
 8004e1a:	6863      	ldr	r3, [r4, #4]
 8004e1c:	1ac0      	subs	r0, r0, r3
 8004e1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e20:	b10b      	cbz	r3, 8004e26 <__sflush_r+0x42>
 8004e22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e24:	1ac0      	subs	r0, r0, r3
 8004e26:	2300      	movs	r3, #0
 8004e28:	4602      	mov	r2, r0
 8004e2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	6a21      	ldr	r1, [r4, #32]
 8004e30:	47b0      	blx	r6
 8004e32:	1c43      	adds	r3, r0, #1
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	d106      	bne.n	8004e46 <__sflush_r+0x62>
 8004e38:	6829      	ldr	r1, [r5, #0]
 8004e3a:	291d      	cmp	r1, #29
 8004e3c:	d82c      	bhi.n	8004e98 <__sflush_r+0xb4>
 8004e3e:	4a29      	ldr	r2, [pc, #164]	; (8004ee4 <__sflush_r+0x100>)
 8004e40:	40ca      	lsrs	r2, r1
 8004e42:	07d6      	lsls	r6, r2, #31
 8004e44:	d528      	bpl.n	8004e98 <__sflush_r+0xb4>
 8004e46:	2200      	movs	r2, #0
 8004e48:	6062      	str	r2, [r4, #4]
 8004e4a:	6922      	ldr	r2, [r4, #16]
 8004e4c:	04d9      	lsls	r1, r3, #19
 8004e4e:	6022      	str	r2, [r4, #0]
 8004e50:	d504      	bpl.n	8004e5c <__sflush_r+0x78>
 8004e52:	1c42      	adds	r2, r0, #1
 8004e54:	d101      	bne.n	8004e5a <__sflush_r+0x76>
 8004e56:	682b      	ldr	r3, [r5, #0]
 8004e58:	b903      	cbnz	r3, 8004e5c <__sflush_r+0x78>
 8004e5a:	6560      	str	r0, [r4, #84]	; 0x54
 8004e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e5e:	602f      	str	r7, [r5, #0]
 8004e60:	2900      	cmp	r1, #0
 8004e62:	d0cb      	beq.n	8004dfc <__sflush_r+0x18>
 8004e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e68:	4299      	cmp	r1, r3
 8004e6a:	d002      	beq.n	8004e72 <__sflush_r+0x8e>
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f000 f909 	bl	8005084 <_free_r>
 8004e72:	2000      	movs	r0, #0
 8004e74:	6360      	str	r0, [r4, #52]	; 0x34
 8004e76:	e7c2      	b.n	8004dfe <__sflush_r+0x1a>
 8004e78:	6a21      	ldr	r1, [r4, #32]
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b0      	blx	r6
 8004e80:	1c41      	adds	r1, r0, #1
 8004e82:	d1c7      	bne.n	8004e14 <__sflush_r+0x30>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0c4      	beq.n	8004e14 <__sflush_r+0x30>
 8004e8a:	2b1d      	cmp	r3, #29
 8004e8c:	d001      	beq.n	8004e92 <__sflush_r+0xae>
 8004e8e:	2b16      	cmp	r3, #22
 8004e90:	d101      	bne.n	8004e96 <__sflush_r+0xb2>
 8004e92:	602f      	str	r7, [r5, #0]
 8004e94:	e7b2      	b.n	8004dfc <__sflush_r+0x18>
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9c:	81a3      	strh	r3, [r4, #12]
 8004e9e:	e7ae      	b.n	8004dfe <__sflush_r+0x1a>
 8004ea0:	690f      	ldr	r7, [r1, #16]
 8004ea2:	2f00      	cmp	r7, #0
 8004ea4:	d0aa      	beq.n	8004dfc <__sflush_r+0x18>
 8004ea6:	0793      	lsls	r3, r2, #30
 8004ea8:	bf18      	it	ne
 8004eaa:	2300      	movne	r3, #0
 8004eac:	680e      	ldr	r6, [r1, #0]
 8004eae:	bf08      	it	eq
 8004eb0:	694b      	ldreq	r3, [r1, #20]
 8004eb2:	1bf6      	subs	r6, r6, r7
 8004eb4:	600f      	str	r7, [r1, #0]
 8004eb6:	608b      	str	r3, [r1, #8]
 8004eb8:	2e00      	cmp	r6, #0
 8004eba:	dd9f      	ble.n	8004dfc <__sflush_r+0x18>
 8004ebc:	4633      	mov	r3, r6
 8004ebe:	463a      	mov	r2, r7
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	6a21      	ldr	r1, [r4, #32]
 8004ec4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004ec8:	47e0      	blx	ip
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	dc06      	bgt.n	8004edc <__sflush_r+0xf8>
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed8:	81a3      	strh	r3, [r4, #12]
 8004eda:	e790      	b.n	8004dfe <__sflush_r+0x1a>
 8004edc:	4407      	add	r7, r0
 8004ede:	1a36      	subs	r6, r6, r0
 8004ee0:	e7ea      	b.n	8004eb8 <__sflush_r+0xd4>
 8004ee2:	bf00      	nop
 8004ee4:	20400001 	.word	0x20400001

08004ee8 <_fflush_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	690b      	ldr	r3, [r1, #16]
 8004eec:	4605      	mov	r5, r0
 8004eee:	460c      	mov	r4, r1
 8004ef0:	b913      	cbnz	r3, 8004ef8 <_fflush_r+0x10>
 8004ef2:	2500      	movs	r5, #0
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	b118      	cbz	r0, 8004f02 <_fflush_r+0x1a>
 8004efa:	6983      	ldr	r3, [r0, #24]
 8004efc:	b90b      	cbnz	r3, 8004f02 <_fflush_r+0x1a>
 8004efe:	f7ff fa19 	bl	8004334 <__sinit>
 8004f02:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <_fflush_r+0x6c>)
 8004f04:	429c      	cmp	r4, r3
 8004f06:	d11b      	bne.n	8004f40 <_fflush_r+0x58>
 8004f08:	686c      	ldr	r4, [r5, #4]
 8004f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0ef      	beq.n	8004ef2 <_fflush_r+0xa>
 8004f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f14:	07d0      	lsls	r0, r2, #31
 8004f16:	d404      	bmi.n	8004f22 <_fflush_r+0x3a>
 8004f18:	0599      	lsls	r1, r3, #22
 8004f1a:	d402      	bmi.n	8004f22 <_fflush_r+0x3a>
 8004f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f1e:	f7ff faa7 	bl	8004470 <__retarget_lock_acquire_recursive>
 8004f22:	4628      	mov	r0, r5
 8004f24:	4621      	mov	r1, r4
 8004f26:	f7ff ff5d 	bl	8004de4 <__sflush_r>
 8004f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f2c:	4605      	mov	r5, r0
 8004f2e:	07da      	lsls	r2, r3, #31
 8004f30:	d4e0      	bmi.n	8004ef4 <_fflush_r+0xc>
 8004f32:	89a3      	ldrh	r3, [r4, #12]
 8004f34:	059b      	lsls	r3, r3, #22
 8004f36:	d4dd      	bmi.n	8004ef4 <_fflush_r+0xc>
 8004f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f3a:	f7ff fa9a 	bl	8004472 <__retarget_lock_release_recursive>
 8004f3e:	e7d9      	b.n	8004ef4 <_fflush_r+0xc>
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <_fflush_r+0x70>)
 8004f42:	429c      	cmp	r4, r3
 8004f44:	d101      	bne.n	8004f4a <_fflush_r+0x62>
 8004f46:	68ac      	ldr	r4, [r5, #8]
 8004f48:	e7df      	b.n	8004f0a <_fflush_r+0x22>
 8004f4a:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <_fflush_r+0x74>)
 8004f4c:	429c      	cmp	r4, r3
 8004f4e:	bf08      	it	eq
 8004f50:	68ec      	ldreq	r4, [r5, #12]
 8004f52:	e7da      	b.n	8004f0a <_fflush_r+0x22>
 8004f54:	08005278 	.word	0x08005278
 8004f58:	08005298 	.word	0x08005298
 8004f5c:	08005258 	.word	0x08005258

08004f60 <_lseek_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	2200      	movs	r2, #0
 8004f6a:	4d05      	ldr	r5, [pc, #20]	; (8004f80 <_lseek_r+0x20>)
 8004f6c:	602a      	str	r2, [r5, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f7fb fe00 	bl	8000b74 <_lseek>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_lseek_r+0x1e>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_lseek_r+0x1e>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	20000e24 	.word	0x20000e24

08004f84 <__swhatbuf_r>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	460e      	mov	r6, r1
 8004f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	2900      	cmp	r1, #0
 8004f90:	461d      	mov	r5, r3
 8004f92:	b096      	sub	sp, #88	; 0x58
 8004f94:	da08      	bge.n	8004fa8 <__swhatbuf_r+0x24>
 8004f96:	2200      	movs	r2, #0
 8004f98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f9c:	602a      	str	r2, [r5, #0]
 8004f9e:	061a      	lsls	r2, r3, #24
 8004fa0:	d410      	bmi.n	8004fc4 <__swhatbuf_r+0x40>
 8004fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa6:	e00e      	b.n	8004fc6 <__swhatbuf_r+0x42>
 8004fa8:	466a      	mov	r2, sp
 8004faa:	f000 f8c5 	bl	8005138 <_fstat_r>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	dbf1      	blt.n	8004f96 <__swhatbuf_r+0x12>
 8004fb2:	9a01      	ldr	r2, [sp, #4]
 8004fb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fbc:	425a      	negs	r2, r3
 8004fbe:	415a      	adcs	r2, r3
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	e7ee      	b.n	8004fa2 <__swhatbuf_r+0x1e>
 8004fc4:	2340      	movs	r3, #64	; 0x40
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	b016      	add	sp, #88	; 0x58
 8004fcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004fd0 <__smakebuf_r>:
 8004fd0:	898b      	ldrh	r3, [r1, #12]
 8004fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fd4:	079d      	lsls	r5, r3, #30
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	460c      	mov	r4, r1
 8004fda:	d507      	bpl.n	8004fec <__smakebuf_r+0x1c>
 8004fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	6123      	str	r3, [r4, #16]
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	6163      	str	r3, [r4, #20]
 8004fe8:	b002      	add	sp, #8
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	466a      	mov	r2, sp
 8004fee:	ab01      	add	r3, sp, #4
 8004ff0:	f7ff ffc8 	bl	8004f84 <__swhatbuf_r>
 8004ff4:	9900      	ldr	r1, [sp, #0]
 8004ff6:	4605      	mov	r5, r0
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f7ff fa5b 	bl	80044b4 <_malloc_r>
 8004ffe:	b948      	cbnz	r0, 8005014 <__smakebuf_r+0x44>
 8005000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005004:	059a      	lsls	r2, r3, #22
 8005006:	d4ef      	bmi.n	8004fe8 <__smakebuf_r+0x18>
 8005008:	f023 0303 	bic.w	r3, r3, #3
 800500c:	f043 0302 	orr.w	r3, r3, #2
 8005010:	81a3      	strh	r3, [r4, #12]
 8005012:	e7e3      	b.n	8004fdc <__smakebuf_r+0xc>
 8005014:	4b0d      	ldr	r3, [pc, #52]	; (800504c <__smakebuf_r+0x7c>)
 8005016:	62b3      	str	r3, [r6, #40]	; 0x28
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	6020      	str	r0, [r4, #0]
 800501c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005020:	81a3      	strh	r3, [r4, #12]
 8005022:	9b00      	ldr	r3, [sp, #0]
 8005024:	6120      	str	r0, [r4, #16]
 8005026:	6163      	str	r3, [r4, #20]
 8005028:	9b01      	ldr	r3, [sp, #4]
 800502a:	b15b      	cbz	r3, 8005044 <__smakebuf_r+0x74>
 800502c:	4630      	mov	r0, r6
 800502e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005032:	f000 f893 	bl	800515c <_isatty_r>
 8005036:	b128      	cbz	r0, 8005044 <__smakebuf_r+0x74>
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	81a3      	strh	r3, [r4, #12]
 8005044:	89a0      	ldrh	r0, [r4, #12]
 8005046:	4305      	orrs	r5, r0
 8005048:	81a5      	strh	r5, [r4, #12]
 800504a:	e7cd      	b.n	8004fe8 <__smakebuf_r+0x18>
 800504c:	080042cd 	.word	0x080042cd

08005050 <memchr>:
 8005050:	4603      	mov	r3, r0
 8005052:	b510      	push	{r4, lr}
 8005054:	b2c9      	uxtb	r1, r1
 8005056:	4402      	add	r2, r0
 8005058:	4293      	cmp	r3, r2
 800505a:	4618      	mov	r0, r3
 800505c:	d101      	bne.n	8005062 <memchr+0x12>
 800505e:	2000      	movs	r0, #0
 8005060:	e003      	b.n	800506a <memchr+0x1a>
 8005062:	7804      	ldrb	r4, [r0, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	428c      	cmp	r4, r1
 8005068:	d1f6      	bne.n	8005058 <memchr+0x8>
 800506a:	bd10      	pop	{r4, pc}

0800506c <__malloc_lock>:
 800506c:	4801      	ldr	r0, [pc, #4]	; (8005074 <__malloc_lock+0x8>)
 800506e:	f7ff b9ff 	b.w	8004470 <__retarget_lock_acquire_recursive>
 8005072:	bf00      	nop
 8005074:	20000e18 	.word	0x20000e18

08005078 <__malloc_unlock>:
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <__malloc_unlock+0x8>)
 800507a:	f7ff b9fa 	b.w	8004472 <__retarget_lock_release_recursive>
 800507e:	bf00      	nop
 8005080:	20000e18 	.word	0x20000e18

08005084 <_free_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4605      	mov	r5, r0
 8005088:	2900      	cmp	r1, #0
 800508a:	d040      	beq.n	800510e <_free_r+0x8a>
 800508c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005090:	1f0c      	subs	r4, r1, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	bfb8      	it	lt
 8005096:	18e4      	addlt	r4, r4, r3
 8005098:	f7ff ffe8 	bl	800506c <__malloc_lock>
 800509c:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <_free_r+0x8c>)
 800509e:	6813      	ldr	r3, [r2, #0]
 80050a0:	b933      	cbnz	r3, 80050b0 <_free_r+0x2c>
 80050a2:	6063      	str	r3, [r4, #4]
 80050a4:	6014      	str	r4, [r2, #0]
 80050a6:	4628      	mov	r0, r5
 80050a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050ac:	f7ff bfe4 	b.w	8005078 <__malloc_unlock>
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d908      	bls.n	80050c6 <_free_r+0x42>
 80050b4:	6820      	ldr	r0, [r4, #0]
 80050b6:	1821      	adds	r1, r4, r0
 80050b8:	428b      	cmp	r3, r1
 80050ba:	bf01      	itttt	eq
 80050bc:	6819      	ldreq	r1, [r3, #0]
 80050be:	685b      	ldreq	r3, [r3, #4]
 80050c0:	1809      	addeq	r1, r1, r0
 80050c2:	6021      	streq	r1, [r4, #0]
 80050c4:	e7ed      	b.n	80050a2 <_free_r+0x1e>
 80050c6:	461a      	mov	r2, r3
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	b10b      	cbz	r3, 80050d0 <_free_r+0x4c>
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	d9fa      	bls.n	80050c6 <_free_r+0x42>
 80050d0:	6811      	ldr	r1, [r2, #0]
 80050d2:	1850      	adds	r0, r2, r1
 80050d4:	42a0      	cmp	r0, r4
 80050d6:	d10b      	bne.n	80050f0 <_free_r+0x6c>
 80050d8:	6820      	ldr	r0, [r4, #0]
 80050da:	4401      	add	r1, r0
 80050dc:	1850      	adds	r0, r2, r1
 80050de:	4283      	cmp	r3, r0
 80050e0:	6011      	str	r1, [r2, #0]
 80050e2:	d1e0      	bne.n	80050a6 <_free_r+0x22>
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4401      	add	r1, r0
 80050ea:	6011      	str	r1, [r2, #0]
 80050ec:	6053      	str	r3, [r2, #4]
 80050ee:	e7da      	b.n	80050a6 <_free_r+0x22>
 80050f0:	d902      	bls.n	80050f8 <_free_r+0x74>
 80050f2:	230c      	movs	r3, #12
 80050f4:	602b      	str	r3, [r5, #0]
 80050f6:	e7d6      	b.n	80050a6 <_free_r+0x22>
 80050f8:	6820      	ldr	r0, [r4, #0]
 80050fa:	1821      	adds	r1, r4, r0
 80050fc:	428b      	cmp	r3, r1
 80050fe:	bf01      	itttt	eq
 8005100:	6819      	ldreq	r1, [r3, #0]
 8005102:	685b      	ldreq	r3, [r3, #4]
 8005104:	1809      	addeq	r1, r1, r0
 8005106:	6021      	streq	r1, [r4, #0]
 8005108:	6063      	str	r3, [r4, #4]
 800510a:	6054      	str	r4, [r2, #4]
 800510c:	e7cb      	b.n	80050a6 <_free_r+0x22>
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	20000e1c 	.word	0x20000e1c

08005114 <_read_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4604      	mov	r4, r0
 8005118:	4608      	mov	r0, r1
 800511a:	4611      	mov	r1, r2
 800511c:	2200      	movs	r2, #0
 800511e:	4d05      	ldr	r5, [pc, #20]	; (8005134 <_read_r+0x20>)
 8005120:	602a      	str	r2, [r5, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	f7fb fcc9 	bl	8000aba <_read>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_read_r+0x1e>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_read_r+0x1e>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	20000e24 	.word	0x20000e24

08005138 <_fstat_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	2300      	movs	r3, #0
 800513c:	4d06      	ldr	r5, [pc, #24]	; (8005158 <_fstat_r+0x20>)
 800513e:	4604      	mov	r4, r0
 8005140:	4608      	mov	r0, r1
 8005142:	4611      	mov	r1, r2
 8005144:	602b      	str	r3, [r5, #0]
 8005146:	f7fb fcfc 	bl	8000b42 <_fstat>
 800514a:	1c43      	adds	r3, r0, #1
 800514c:	d102      	bne.n	8005154 <_fstat_r+0x1c>
 800514e:	682b      	ldr	r3, [r5, #0]
 8005150:	b103      	cbz	r3, 8005154 <_fstat_r+0x1c>
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	bd38      	pop	{r3, r4, r5, pc}
 8005156:	bf00      	nop
 8005158:	20000e24 	.word	0x20000e24

0800515c <_isatty_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	2300      	movs	r3, #0
 8005160:	4d05      	ldr	r5, [pc, #20]	; (8005178 <_isatty_r+0x1c>)
 8005162:	4604      	mov	r4, r0
 8005164:	4608      	mov	r0, r1
 8005166:	602b      	str	r3, [r5, #0]
 8005168:	f7fb fcfa 	bl	8000b60 <_isatty>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	d102      	bne.n	8005176 <_isatty_r+0x1a>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	b103      	cbz	r3, 8005176 <_isatty_r+0x1a>
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	20000e24 	.word	0x20000e24

0800517c <_init>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	bf00      	nop
 8005180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005182:	bc08      	pop	{r3}
 8005184:	469e      	mov	lr, r3
 8005186:	4770      	bx	lr

08005188 <_fini>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	bf00      	nop
 800518c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518e:	bc08      	pop	{r3}
 8005190:	469e      	mov	lr, r3
 8005192:	4770      	bx	lr
